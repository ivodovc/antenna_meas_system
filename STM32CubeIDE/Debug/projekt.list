
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004408  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800475c  0800475c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000004  08004760  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001bc  2000007c  080047d8  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000238  080047d8  00020238  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a00e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001e9d  00000000  00000000  0002a0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bd0  00000000  00000000  0002bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ac8  00000000  00000000  0002cb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001c673  00000000  00000000  0002d5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c2b7  00000000  00000000  00049c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ae0c6  00000000  00000000  00055f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00103fe0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003958  00000000  00000000  00104030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	08004530 	.word	0x08004530

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	08004530 	.word	0x08004530

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800023c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800023e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4313      	orrs	r3, r2
 8000246:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800024c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4013      	ands	r3, r2
 8000252:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000254:	68fb      	ldr	r3, [r7, #12]
}
 8000256:	bf00      	nop
 8000258:	3714      	adds	r7, #20
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr

08000262 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000262:	b580      	push	{r7, lr}
 8000264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000266:	2004      	movs	r0, #4
 8000268:	f7ff ffe2 	bl	8000230 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800026c:	2001      	movs	r0, #1
 800026e:	f7ff ffdf 	bl	8000230 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000272:	2200      	movs	r2, #0
 8000274:	2100      	movs	r1, #0
 8000276:	200b      	movs	r0, #11
 8000278:	f000 fdc7 	bl	8000e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800027c:	200b      	movs	r0, #11
 800027e:	f000 fdde 	bl	8000e3e <HAL_NVIC_EnableIRQ>

}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}

08000286 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000286:	b480      	push	{r7}
 8000288:	b085      	sub	sp, #20
 800028a:	af00      	add	r7, sp, #0
 800028c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800028e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4313      	orrs	r3, r2
 800029c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800029e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4013      	ands	r3, r2
 80002a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002aa:	68fb      	ldr	r3, [r7, #12]
}
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <MX_GPIO_Init>:
     PA0   ------> ADCx_IN5
     PB6   ------> USART1_TX
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	2001      	movs	r0, #1
 80002ce:	f7ff ffda 	bl	8000286 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d2:	2002      	movs	r0, #2
 80002d4:	f7ff ffd7 	bl	8000286 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11
 80002d8:	2200      	movs	r2, #0
 80002da:	f641 011c 	movw	r1, #6172	; 0x181c
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f001 f975 	bl	80015d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2133      	movs	r1, #51	; 0x33
 80002ea:	482a      	ldr	r0, [pc, #168]	; (8000394 <MX_GPIO_Init+0xdc>)
 80002ec:	f001 f970 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002f0:	2301      	movs	r3, #1
 80002f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f4:	2303      	movs	r3, #3
 80002f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	4619      	mov	r1, r3
 8000300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000304:	f000 fffc 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11
 8000308:	f641 031c 	movw	r3, #6172	; 0x181c
 800030c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030e:	2301      	movs	r3, #1
 8000310:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4619      	mov	r1, r3
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f000 ffed 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000326:	2340      	movs	r3, #64	; 0x40
 8000328:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800032a:	2300      	movs	r3, #0
 800032c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4619      	mov	r1, r3
 8000336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033a:	f000 ffe1 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800033e:	2304      	movs	r3, #4
 8000340:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4619      	mov	r1, r3
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <MX_GPIO_Init+0xdc>)
 8000350:	f000 ffd6 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000354:	2333      	movs	r3, #51	; 0x33
 8000356:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	480a      	ldr	r0, [pc, #40]	; (8000394 <MX_GPIO_Init+0xdc>)
 800036a:	f000 ffc9 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800036e:	23c0      	movs	r3, #192	; 0xc0
 8000370:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000372:	2302      	movs	r3, #2
 8000374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800037e:	2307      	movs	r3, #7
 8000380:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	4803      	ldr	r0, [pc, #12]	; (8000394 <MX_GPIO_Init+0xdc>)
 8000388:	f000 ffba 	bl	8001300 <HAL_GPIO_Init>

}
 800038c:	bf00      	nop
 800038e:	3718      	adds	r7, #24
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	48000400 	.word	0x48000400

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
   initialise_monitor_handles();
 800039c:	f004 f84c 	bl	8004438 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a0:	f000 fbae 	bl	8000b00 <HAL_Init>
  // REMOVE ON DEBUG

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a4:	f000 f852 	bl	800044c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a8:	f7ff ff86 	bl	80002b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80003ac:	f7ff ff59 	bl	8000262 <MX_DMA_Init>
  MX_SPI1_Init();
 80003b0:	f000 fa12 	bl	80007d8 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting STM32\n");
 80003b4:	481f      	ldr	r0, [pc, #124]	; (8000434 <main+0x9c>)
 80003b6:	f002 fe9b 	bl	80030f0 <puts>
  printf("Starting MAX\n");
 80003ba:	481f      	ldr	r0, [pc, #124]	; (8000438 <main+0xa0>)
 80003bc:	f002 fe98 	bl	80030f0 <puts>
  EnableChip();
 80003c0:	f000 f891 	bl	80004e6 <EnableChip>
  printf("Init Max\n");
 80003c4:	481d      	ldr	r0, [pc, #116]	; (800043c <main+0xa4>)
 80003c6:	f002 fe93 	bl	80030f0 <puts>
  init_PLL();
 80003ca:	f000 f8e1 	bl	8000590 <init_PLL>
  HAL_Delay(500);
 80003ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d2:	f000 fc1b 	bl	8000c0c <HAL_Delay>
  printf("write regs custom \n");
 80003d6:	481a      	ldr	r0, [pc, #104]	; (8000440 <main+0xa8>)
 80003d8:	f002 fe8a 	bl	80030f0 <puts>
  write_regs_SOFT();
 80003dc:	f000 f924 	bl	8000628 <write_regs_SOFT>
  HAL_Delay(500);
 80003e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003e4:	f000 fc12 	bl	8000c0c <HAL_Delay>

  printf("EnablingRFOUT\n");
 80003e8:	4816      	ldr	r0, [pc, #88]	; (8000444 <main+0xac>)
 80003ea:	f002 fe81 	bl	80030f0 <puts>
  EnableRFOutput();
 80003ee:	f000 f884 	bl	80004fa <EnableRFOutput>

  HAL_Delay(1000);
 80003f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f6:	f000 fc09 	bl	8000c0c <HAL_Delay>
  printf("Done enabled\n");
 80003fa:	4813      	ldr	r0, [pc, #76]	; (8000448 <main+0xb0>)
 80003fc:	f002 fe78 	bl	80030f0 <puts>
  print_registers();
 8000400:	f000 f886 	bl	8000510 <print_registers>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Rozblikanie LEDs
	//char test[] = "Hello STM32 World\n" ;
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040e:	f001 f8df 	bl	80015d0 <HAL_GPIO_WritePin>
	  //Register_Shutdown();
	  HAL_Delay(2000);
 8000412:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000416:	f000 fbf9 	bl	8000c0c <HAL_Delay>
	  //write_to_PLL(0x0C050042);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000424:	f001 f8d4 	bl	80015d0 <HAL_GPIO_WritePin>
	  //EnableRFOutput();
	  //print_registers();
	  //write_regs_SOFT();
	  //Register_Startup();
	  //printf("Startup\n");
	  HAL_Delay(2000);
 8000428:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800042c:	f000 fbee 	bl	8000c0c <HAL_Delay>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000430:	e7e8      	b.n	8000404 <main+0x6c>
 8000432:	bf00      	nop
 8000434:	08004548 	.word	0x08004548
 8000438:	08004558 	.word	0x08004558
 800043c:	08004568 	.word	0x08004568
 8000440:	08004574 	.word	0x08004574
 8000444:	08004588 	.word	0x08004588
 8000448:	08004598 	.word	0x08004598

0800044c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b09a      	sub	sp, #104	; 0x68
 8000450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000452:	f107 0320 	add.w	r3, r7, #32
 8000456:	2248      	movs	r2, #72	; 0x48
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f002 fdba 	bl	8002fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000472:	2322      	movs	r3, #34	; 0x22
 8000474:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800047a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800047c:	2301      	movs	r3, #1
 800047e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000480:	2340      	movs	r3, #64	; 0x40
 8000482:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000484:	2300      	movs	r3, #0
 8000486:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000488:	2360      	movs	r3, #96	; 0x60
 800048a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800048c:	2300      	movs	r3, #0
 800048e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	f107 0320 	add.w	r3, r7, #32
 8000494:	4618      	mov	r0, r3
 8000496:	f001 fc21 	bl	8001cdc <HAL_RCC_OscConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004a0:	f000 f81c 	bl	80004dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80004a4:	236f      	movs	r3, #111	; 0x6f
 80004a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2100      	movs	r1, #0
 80004c4:	4618      	mov	r0, r3
 80004c6:	f001 ff73 	bl	80023b0 <HAL_RCC_ClockConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004d0:	f000 f804 	bl	80004dc <Error_Handler>
  }
}
 80004d4:	bf00      	nop
 80004d6:	3768      	adds	r7, #104	; 0x68
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <Error_Handler+0x8>

080004e6 <EnableChip>:
/**
  * @brief Turn MAX2870 PLL on
  * By setting CE pin high
  * @retval
  */
void EnableChip(){
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2104      	movs	r1, #4
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f001 f86d 	bl	80015d0 <HAL_GPIO_WritePin>
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}

080004fa <EnableRFOutput>:

void DisableChip(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
}

void EnableRFOutput(){
 80004fa:	b580      	push	{r7, lr}
 80004fc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2108      	movs	r1, #8
 8000502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000506:	f001 f863 	bl	80015d0 <HAL_GPIO_WritePin>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <print_registers>:

void DisableRFOutput(){
 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}

void print_registers(){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	printf("reg0: %x\n", reg0);
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <print_registers+0x50>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	4812      	ldr	r0, [pc, #72]	; (8000564 <print_registers+0x54>)
 800051c:	f002 fd62 	bl	8002fe4 <iprintf>
	printf("reg1: %x\n", reg1);
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <print_registers+0x58>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	4811      	ldr	r0, [pc, #68]	; (800056c <print_registers+0x5c>)
 8000528:	f002 fd5c 	bl	8002fe4 <iprintf>
	printf("reg2: %x\n", reg2);
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <print_registers+0x60>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	4810      	ldr	r0, [pc, #64]	; (8000574 <print_registers+0x64>)
 8000534:	f002 fd56 	bl	8002fe4 <iprintf>
	printf("reg3: %x\n", reg3);
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <print_registers+0x68>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	480f      	ldr	r0, [pc, #60]	; (800057c <print_registers+0x6c>)
 8000540:	f002 fd50 	bl	8002fe4 <iprintf>
	printf("reg4: %x\n", reg4);
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <print_registers+0x70>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4619      	mov	r1, r3
 800054a:	480e      	ldr	r0, [pc, #56]	; (8000584 <print_registers+0x74>)
 800054c:	f002 fd4a 	bl	8002fe4 <iprintf>
	printf("reg5: %x\n", reg5);
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <print_registers+0x78>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4619      	mov	r1, r3
 8000556:	480d      	ldr	r0, [pc, #52]	; (800058c <print_registers+0x7c>)
 8000558:	f002 fd44 	bl	8002fe4 <iprintf>

}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000098 	.word	0x20000098
 8000564:	080045a8 	.word	0x080045a8
 8000568:	2000009c 	.word	0x2000009c
 800056c:	080045b4 	.word	0x080045b4
 8000570:	200000a0 	.word	0x200000a0
 8000574:	080045c0 	.word	0x080045c0
 8000578:	200000a4 	.word	0x200000a4
 800057c:	080045cc 	.word	0x080045cc
 8000580:	200000a8 	.word	0x200000a8
 8000584:	080045d8 	.word	0x080045d8
 8000588:	200000ac 	.word	0x200000ac
 800058c:	080045e4 	.word	0x080045e4

08000590 <init_PLL>:

/**
  * @brief Initialize chip as specified in datasheet
  * @retval GPIO_PinState Lock Detect
  */
void init_PLL(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	// Zapis registrov default hodnotami
	write_to_PLL(default_reg5);
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <init_PLL+0x8c>)
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f886 	bl	80006a8 <write_to_PLL>
	HAL_Delay(30);
 800059c:	201e      	movs	r0, #30
 800059e:	f000 fb35 	bl	8000c0c <HAL_Delay>
	// disable RF outputs
	write_to_PLL(default_reg4 & ~((1 << 5) | (1<<8)));
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <init_PLL+0x90>)
 80005a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f87d 	bl	80006a8 <write_to_PLL>
	write_to_PLL(default_reg3);
 80005ae:	230b      	movs	r3, #11
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f879 	bl	80006a8 <write_to_PLL>
	write_to_PLL(default_reg2);
 80005b6:	f244 0342 	movw	r3, #16450	; 0x4042
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f874 	bl	80006a8 <write_to_PLL>
	write_to_PLL(default_reg1);
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <init_PLL+0x94>)
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f870 	bl	80006a8 <write_to_PLL>
	write_to_PLL(default_reg0);
 80005c8:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f86b 	bl	80006a8 <write_to_PLL>
	// 20 ms between writes as specified in datasheet
	HAL_Delay(30);
 80005d2:	201e      	movs	r0, #30
 80005d4:	f000 fb1a 	bl	8000c0c <HAL_Delay>
	write_to_PLL(default_reg5);
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <init_PLL+0x8c>)
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f864 	bl	80006a8 <write_to_PLL>
	write_to_PLL(default_reg4 & ~((1 << 5) | (1<<8)));
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <init_PLL+0x90>)
 80005e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f85e 	bl	80006a8 <write_to_PLL>
	write_to_PLL(default_reg3);
 80005ec:	230b      	movs	r3, #11
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f85a 	bl	80006a8 <write_to_PLL>
	write_to_PLL(default_reg2);
 80005f4:	f244 0342 	movw	r3, #16450	; 0x4042
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f855 	bl	80006a8 <write_to_PLL>
	write_to_PLL(default_reg1);
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <init_PLL+0x94>)
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f851 	bl	80006a8 <write_to_PLL>
	write_to_PLL(default_reg0);
 8000606:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f84c 	bl	80006a8 <write_to_PLL>
	HAL_Delay(30);
 8000610:	201e      	movs	r0, #30
 8000612:	f000 fafb 	bl	8000c0c <HAL_Delay>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	00400005 	.word	0x00400005
 8000620:	6180b23c 	.word	0x6180b23c
 8000624:	2000fff9 	.word	0x2000fff9

08000628 <write_regs_SOFT>:

void write_regs_SOFT(){
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
	//write registers as specified in MAX emulator
	uint32_t reg0 = 0x80320000;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <write_regs_SOFT+0x4c>)
 8000630:	617b      	str	r3, [r7, #20]
	uint32_t reg1 = 0x8000FFF9;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <write_regs_SOFT+0x50>)
 8000634:	613b      	str	r3, [r7, #16]
	uint32_t reg2 = 0x0C004042;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <write_regs_SOFT+0x54>)
 8000638:	60fb      	str	r3, [r7, #12]
	uint32_t reg3 = 0x0000000B;
 800063a:	230b      	movs	r3, #11
 800063c:	60bb      	str	r3, [r7, #8]
	uint32_t reg4 = 0x62A8023C;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <write_regs_SOFT+0x58>)
 8000640:	607b      	str	r3, [r7, #4]
	uint32_t reg5 = 0x00400005;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <write_regs_SOFT+0x5c>)
 8000644:	603b      	str	r3, [r7, #0]
	write_to_PLL(reg5);
 8000646:	6838      	ldr	r0, [r7, #0]
 8000648:	f000 f82e 	bl	80006a8 <write_to_PLL>
	write_to_PLL(reg4);
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f000 f82b 	bl	80006a8 <write_to_PLL>
	write_to_PLL(reg3);
 8000652:	68b8      	ldr	r0, [r7, #8]
 8000654:	f000 f828 	bl	80006a8 <write_to_PLL>
	write_to_PLL(reg2);
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f000 f825 	bl	80006a8 <write_to_PLL>
	write_to_PLL(reg1);
 800065e:	6938      	ldr	r0, [r7, #16]
 8000660:	f000 f822 	bl	80006a8 <write_to_PLL>
	write_to_PLL(reg0);
 8000664:	6978      	ldr	r0, [r7, #20]
 8000666:	f000 f81f 	bl	80006a8 <write_to_PLL>
	write_to_PLL(default_reg1);
	write_to_PLL(0x0C010042); // reg 2 is modified for R value
	write_to_PLL(default_reg3);
	write_to_PLL(default_reg4);
	write_to_PLL(default_reg5);*/
}
 800066a:	bf00      	nop
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	80320000 	.word	0x80320000
 8000678:	8000fff9 	.word	0x8000fff9
 800067c:	0c004042 	.word	0x0c004042
 8000680:	62a8023c 	.word	0x62a8023c
 8000684:	00400005 	.word	0x00400005

08000688 <swap_words>:

// big endian to little endian for 32bits
uint32_t swap_words(uint32_t rozumne){
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	uint32_t swapped = (rozumne >> 16) | (rozumne << 16);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000696:	60fb      	str	r3, [r7, #12]
	return swapped;
 8000698:	68fb      	ldr	r3, [r7, #12]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <write_to_PLL>:

uint8_t write_to_PLL(uint32_t data){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	// endianness swap
	uint32_t swapped_data = swap_words(data);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff ffe9 	bl	8000688 <swap_words>
 80006b6:	4603      	mov	r3, r0
 80006b8:	60fb      	str	r3, [r7, #12]
	uint16_t* pData = (uint16_t*)&swapped_data;
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	617b      	str	r3, [r7, #20]
	// determine register address:
	uint32_t reg_addr = data & 0b111;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	613b      	str	r3, [r7, #16]
	// save transmitted data to variable
	switch (reg_addr){
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	2b05      	cmp	r3, #5
 80006cc:	d826      	bhi.n	800071c <write_to_PLL+0x74>
 80006ce:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <write_to_PLL+0x2c>)
 80006d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d4:	080006ed 	.word	0x080006ed
 80006d8:	080006f5 	.word	0x080006f5
 80006dc:	080006fd 	.word	0x080006fd
 80006e0:	08000705 	.word	0x08000705
 80006e4:	0800070d 	.word	0x0800070d
 80006e8:	08000715 	.word	0x08000715
		case 0:
			reg0 = data;
 80006ec:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <write_to_PLL+0xb0>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6013      	str	r3, [r2, #0]
			break;
 80006f2:	e015      	b.n	8000720 <write_to_PLL+0x78>
		case 1:
			reg1 = data;
 80006f4:	4a19      	ldr	r2, [pc, #100]	; (800075c <write_to_PLL+0xb4>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
			break;
 80006fa:	e011      	b.n	8000720 <write_to_PLL+0x78>
		case 2:
			reg2 = data;
 80006fc:	4a18      	ldr	r2, [pc, #96]	; (8000760 <write_to_PLL+0xb8>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
			break;
 8000702:	e00d      	b.n	8000720 <write_to_PLL+0x78>
		case 3:
			reg3 = data;
 8000704:	4a17      	ldr	r2, [pc, #92]	; (8000764 <write_to_PLL+0xbc>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6013      	str	r3, [r2, #0]
			break;
 800070a:	e009      	b.n	8000720 <write_to_PLL+0x78>
		case 4:
			reg4 = data;
 800070c:	4a16      	ldr	r2, [pc, #88]	; (8000768 <write_to_PLL+0xc0>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
			break;
 8000712:	e005      	b.n	8000720 <write_to_PLL+0x78>
		case 5:
			reg5 = data;
 8000714:	4a15      	ldr	r2, [pc, #84]	; (800076c <write_to_PLL+0xc4>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6013      	str	r3, [r2, #0]
			break;
 800071a:	e001      	b.n	8000720 <write_to_PLL+0x78>
		default:
			// invalid address
			return 1;
 800071c:	2301      	movs	r3, #1
 800071e:	e017      	b.n	8000750 <write_to_PLL+0xa8>
			break;
	}

	//printf("pData %x\n", *(uint32_t*)pData);
	//printf("data: %x\n", data);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2110      	movs	r1, #16
 8000724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000728:	f000 ff52 	bl	80015d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fa6d 	bl	8000c0c <HAL_Delay>
	//HAL_StatusTypeDef result =  HAL_SPI_Transmit(&hspi1, (uint8_t*)pData, 2, 1000);
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)pData, 2);
 8000732:	2202      	movs	r2, #2
 8000734:	6979      	ldr	r1, [r7, #20]
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <write_to_PLL+0xc8>)
 8000738:	f002 f92a 	bl	8002990 <HAL_SPI_Transmit_DMA>
	//printf("SPI Transmit result: %x\n", result);
	HAL_Delay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f000 fa65 	bl	8000c0c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2110      	movs	r1, #16
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f000 ff41 	bl	80015d0 <HAL_GPIO_WritePin>
	/*for (int i=0; i<2; i++){
		printf("writing to SPI: ");
		printf("%x\n", *(pData+i));
		printf("\n");
	}*/
	return 0;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000098 	.word	0x20000098
 800075c:	2000009c 	.word	0x2000009c
 8000760:	200000a0 	.word	0x200000a0
 8000764:	200000a4 	.word	0x200000a4
 8000768:	200000a8 	.word	0x200000a8
 800076c:	200000ac 	.word	0x200000ac
 8000770:	200000b0 	.word	0x200000b0

08000774 <LL_AHB2_GRP1_EnableClock>:
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800077c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000780:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4313      	orrs	r3, r2
 800078a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800078c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4013      	ands	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000798:	68fb      	ldr	r3, [r7, #12]
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b085      	sub	sp, #20
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4013      	ands	r3, r2
 80007c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ca:	68fb      	ldr	r3, [r7, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_SPI1_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_SPI1_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_SPI1_Init+0x74>)
 80007e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_SPI1_Init+0x74>)
 80007ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI1_Init+0x74>)
 80007f4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80007f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_SPI1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI1_Init+0x74>)
 8000808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI1_Init+0x74>)
 8000810:	2238      	movs	r2, #56	; 0x38
 8000812:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_SPI1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_SPI1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI1_Init+0x74>)
 8000828:	2207      	movs	r2, #7
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_SPI1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI1_Init+0x74>)
 8000834:	2208      	movs	r2, #8
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_SPI1_Init+0x74>)
 800083a:	f002 f805 	bl	8002848 <HAL_SPI_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000844:	f7ff fe4a 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000b0 	.word	0x200000b0
 8000850:	40013000 	.word	0x40013000

08000854 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a24      	ldr	r2, [pc, #144]	; (8000904 <HAL_SPI_MspInit+0xb0>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d142      	bne.n	80008fc <HAL_SPI_MspInit+0xa8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000876:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800087a:	f7ff ff94 	bl	80007a6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2001      	movs	r0, #1
 8000880:	f7ff ff78 	bl	8000774 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000894:	2305      	movs	r3, #5
 8000896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4619      	mov	r1, r3
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f000 fd2d 	bl	8001300 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_SPI_MspInit+0xb4>)
 80008a8:	4a18      	ldr	r2, [pc, #96]	; (800090c <HAL_SPI_MspInit+0xb8>)
 80008aa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <HAL_SPI_MspInit+0xb4>)
 80008ae:	2207      	movs	r2, #7
 80008b0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_SPI_MspInit+0xb4>)
 80008b4:	2210      	movs	r2, #16
 80008b6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <HAL_SPI_MspInit+0xb4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_SPI_MspInit+0xb4>)
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_SPI_MspInit+0xb4>)
 80008c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ca:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_SPI_MspInit+0xb4>)
 80008ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008d2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_SPI_MspInit+0xb4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_SPI_MspInit+0xb4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80008e0:	4809      	ldr	r0, [pc, #36]	; (8000908 <HAL_SPI_MspInit+0xb4>)
 80008e2:	f000 fac7 	bl	8000e74 <HAL_DMA_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_SPI_MspInit+0x9c>
    {
      Error_Handler();
 80008ec:	f7ff fdf6 	bl	80004dc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <HAL_SPI_MspInit+0xb4>)
 80008f4:	655a      	str	r2, [r3, #84]	; 0x54
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_SPI_MspInit+0xb4>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40013000 	.word	0x40013000
 8000908:	20000114 	.word	0x20000114
 800090c:	40020008 	.word	0x40020008

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <NMI_Handler+0x4>

08000924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <HardFault_Handler+0x4>

0800092a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <MemManage_Handler+0x4>

08000930 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <BusFault_Handler+0x4>

08000936 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <UsageFault_Handler+0x4>

0800093c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096a:	f000 f923 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <DMA1_Channel1_IRQHandler+0x10>)
 800097a:	f000 fb82 	bl	8001082 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000114 	.word	0x20000114

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f002 fae2 	bl	8002f80 <__errno>
 80009bc:	4603      	mov	r3, r0
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <_sbrk+0x64>)
 80009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20010000 	.word	0x20010000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	20000174 	.word	0x20000174
 80009f0:	20000238 	.word	0x20000238

080009f4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80009f4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f8:	3304      	adds	r3, #4

080009fa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80009fe:	d3f9      	bcc.n	80009f4 <CopyDataInit>
  bx lr
 8000a00:	4770      	bx	lr

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000a02:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000a04:	3004      	adds	r0, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000a06:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>
  bx lr
 8000a0a:	4770      	bx	lr

08000a0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000a0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a10:	f000 f828 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <LoopForever+0x8>)
 8000a16:	490c      	ldr	r1, [pc, #48]	; (8000a48 <LoopForever+0xc>)
 8000a18:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <LoopForever+0x10>)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f7ff ffed 	bl	80009fa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <LoopForever+0x14>)
 8000a22:	490c      	ldr	r1, [pc, #48]	; (8000a54 <LoopForever+0x18>)
 8000a24:	2300      	movs	r3, #0
 8000a26:	f7ff ffee 	bl	8000a06 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000a2a:	480b      	ldr	r0, [pc, #44]	; (8000a58 <LoopForever+0x1c>)
 8000a2c:	490b      	ldr	r1, [pc, #44]	; (8000a5c <LoopForever+0x20>)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f7ff ffe9 	bl	8000a06 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a34:	f002 faaa 	bl	8002f8c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000a38:	f7ff fcae 	bl	8000398 <main>

08000a3c <LoopForever>:

LoopForever:
  b LoopForever
 8000a3c:	e7fe      	b.n	8000a3c <LoopForever>
 8000a3e:	0000      	.short	0x0000
   ldr   r0, =_estack
 8000a40:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 8000a44:	20000004 	.word	0x20000004
 8000a48:	2000007c 	.word	0x2000007c
 8000a4c:	08004760 	.word	0x08004760
  INIT_BSS _sbss, _ebss
 8000a50:	2000007c 	.word	0x2000007c
 8000a54:	20000238 	.word	0x20000238
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000a58:	20030000 	.word	0x20030000
 8000a5c:	20030000 	.word	0x20030000

08000a60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_IRQHandler>
	...

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <SystemInit+0x90>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <SystemInit+0x90>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a8c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a90:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <SystemInit+0x94>)
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000aaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000aae:	f023 0305 	bic.w	r3, r3, #5
 8000ab2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ac2:	f023 0301 	bic.w	r3, r3, #1
 8000ac6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <SystemInit+0x98>)
 8000ad0:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00
 8000af8:	faf6fefb 	.word	0xfaf6fefb
 8000afc:	22041000 	.word	0x22041000

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_Init+0x3c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <HAL_Init+0x3c>)
 8000b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b16:	2003      	movs	r0, #3
 8000b18:	f000 f96c 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1c:	200f      	movs	r0, #15
 8000b1e:	f000 f80f 	bl	8000b40 <HAL_InitTick>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d002      	beq.n	8000b2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	e001      	b.n	8000b32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b2e:	f7ff feef 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58004000 	.word	0x58004000

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_InitTick+0x6c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d024      	beq.n	8000b9e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b54:	f001 fdda 	bl	800270c <HAL_RCC_GetHCLKFreq>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_InitTick+0x6c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b64:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f974 	bl	8000e5a <HAL_SYSTICK_Config>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10f      	bne.n	8000b98 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	d809      	bhi.n	8000b92 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295
 8000b86:	f000 f940 	bl	8000e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8a:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <HAL_InitTick+0x70>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	e007      	b.n	8000ba2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	e004      	b.n	8000ba2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e001      	b.n	8000ba2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000000c 	.word	0x2000000c
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	20000178 	.word	0x20000178

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000178 	.word	0x20000178

08000bf4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_GetTickPrio+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008

08000c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f7ff ffe2 	bl	8000bdc <HAL_GetTick>
 8000c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c24:	d005      	beq.n	8000c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_Delay+0x44>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c32:	bf00      	nop
 8000c34:	f7ff ffd2 	bl	8000bdc <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d8f7      	bhi.n	8000c34 <HAL_Delay+0x28>
  {
  }
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000000c 	.word	0x2000000c

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <__NVIC_EnableIRQ+0x38>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff8e 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff29 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff40 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff90 	bl	8000d48 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5f 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff33 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa4 	bl	8000db0 <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e078      	b.n	8000f78 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <HAL_DMA_Init+0x10c>)
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a3c      	ldr	r2, [pc, #240]	; (8000f84 <HAL_DMA_Init+0x110>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	091b      	lsrs	r3, r3, #4
 8000e98:	009a      	lsls	r2, r3, #2
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a39      	ldr	r2, [pc, #228]	; (8000f88 <HAL_DMA_Init+0x114>)
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ebe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 f9b0 	bl	800125c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f04:	d102      	bne.n	8000f0c <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f14:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f18:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f22:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d010      	beq.n	8000f4e <HAL_DMA_Init+0xda>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	d80c      	bhi.n	8000f4e <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f9bd 	bl	80012b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	e008      	b.n	8000f60 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	bffdfff8 	.word	0xbffdfff8
 8000f84:	cccccccd 	.word	0xcccccccd
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d101      	bne.n	8000fac <HAL_DMA_Start_IT+0x20>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e066      	b.n	800107a <HAL_DMA_Start_IT+0xee>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d155      	bne.n	800106c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0201 	bic.w	r2, r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	68b9      	ldr	r1, [r7, #8]
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f000 f8fb 	bl	80011e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d008      	beq.n	8001004 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f042 020e 	orr.w	r2, r2, #14
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e00f      	b.n	8001024 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0204 	bic.w	r2, r2, #4
 8001012:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 020a 	orr.w	r2, r2, #10
 8001022:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d007      	beq.n	8001042 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001040:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001058:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 0201 	orr.w	r2, r2, #1
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e005      	b.n	8001078 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001074:	2302      	movs	r3, #2
 8001076:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001078:	7dfb      	ldrb	r3, [r7, #23]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f003 031c 	and.w	r3, r3, #28
 80010a2:	2204      	movs	r2, #4
 80010a4:	409a      	lsls	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d026      	beq.n	80010fc <HAL_DMA_IRQHandler+0x7a>
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d021      	beq.n	80010fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d107      	bne.n	80010d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0204 	bic.w	r2, r2, #4
 80010d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f003 021c 	and.w	r2, r3, #28
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	2104      	movs	r1, #4
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d071      	beq.n	80011d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010fa:	e06c      	b.n	80011d6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001100:	f003 031c 	and.w	r3, r3, #28
 8001104:	2202      	movs	r2, #2
 8001106:	409a      	lsls	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d02e      	beq.n	800116e <HAL_DMA_IRQHandler+0xec>
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d029      	beq.n	800116e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0320 	and.w	r3, r3, #32
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10b      	bne.n	8001140 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 020a 	bic.w	r2, r2, #10
 8001136:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001144:	f003 021c 	and.w	r2, r3, #28
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	2102      	movs	r1, #2
 800114e:	fa01 f202 	lsl.w	r2, r1, r2
 8001152:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001160:	2b00      	cmp	r3, #0
 8001162:	d038      	beq.n	80011d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800116c:	e033      	b.n	80011d6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f003 031c 	and.w	r3, r3, #28
 8001176:	2208      	movs	r2, #8
 8001178:	409a      	lsls	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d02a      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x156>
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d025      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 020e 	bic.w	r2, r2, #14
 800119a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	f003 021c 	and.w	r2, r3, #28
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	2101      	movs	r1, #1
 80011aa:	fa01 f202 	lsl.w	r2, r1, r2
 80011ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d004      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
}
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001208:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f003 021c 	and.w	r2, r3, #28
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	2101      	movs	r1, #1
 8001218:	fa01 f202 	lsl.w	r2, r1, r2
 800121c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b10      	cmp	r3, #16
 800122c:	d108      	bne.n	8001240 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800123e:	e007      	b.n	8001250 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	60da      	str	r2, [r3, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001270:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	3b08      	subs	r3, #8
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001282:	fba2 2303 	umull	r2, r3, r2, r3
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800128e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 031f 	and.w	r3, r3, #31
 8001296:	2201      	movs	r2, #1
 8001298:	409a      	lsls	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	cccccccd 	.word	0xcccccccd
 80012b0:	40020880 	.word	0x40020880

080012b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012c4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80012d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3b01      	subs	r3, #1
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2201      	movs	r2, #1
 80012e4:	409a      	lsls	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	1000823f 	.word	0x1000823f
 80012fc:	40020940 	.word	0x40020940

08001300 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130e:	e146      	b.n	800159e <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2101      	movs	r1, #1
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	4013      	ands	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 8138 	beq.w	8001598 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d005      	beq.n	8001340 <HAL_GPIO_Init+0x40>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d130      	bne.n	80013a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001376:	2201      	movs	r2, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	f003 0201 	and.w	r2, r3, #1
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d017      	beq.n	80013de <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d123      	bne.n	8001432 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	08da      	lsrs	r2, r3, #3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3208      	adds	r2, #8
 80013f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	6939      	ldr	r1, [r7, #16]
 800142e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0203 	and.w	r2, r3, #3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8092 	beq.w	8001598 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001474:	4a51      	ldr	r2, [pc, #324]	; (80015bc <HAL_GPIO_Init+0x2bc>)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	220f      	movs	r2, #15
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800149e:	d013      	beq.n	80014c8 <HAL_GPIO_Init+0x1c8>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a47      	ldr	r2, [pc, #284]	; (80015c0 <HAL_GPIO_Init+0x2c0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d00d      	beq.n	80014c4 <HAL_GPIO_Init+0x1c4>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a46      	ldr	r2, [pc, #280]	; (80015c4 <HAL_GPIO_Init+0x2c4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d007      	beq.n	80014c0 <HAL_GPIO_Init+0x1c0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a45      	ldr	r2, [pc, #276]	; (80015c8 <HAL_GPIO_Init+0x2c8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d101      	bne.n	80014bc <HAL_GPIO_Init+0x1bc>
 80014b8:	2304      	movs	r3, #4
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x1ca>
 80014bc:	2307      	movs	r3, #7
 80014be:	e004      	b.n	80014ca <HAL_GPIO_Init+0x1ca>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e002      	b.n	80014ca <HAL_GPIO_Init+0x1ca>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <HAL_GPIO_Init+0x1ca>
 80014c8:	2300      	movs	r3, #0
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	f002 0203 	and.w	r2, r2, #3
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	4093      	lsls	r3, r2
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014da:	4938      	ldr	r1, [pc, #224]	; (80015bc <HAL_GPIO_Init+0x2bc>)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014e8:	4b38      	ldr	r3, [pc, #224]	; (80015cc <HAL_GPIO_Init+0x2cc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800150c:	4a2f      	ldr	r2, [pc, #188]	; (80015cc <HAL_GPIO_Init+0x2cc>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001512:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <HAL_GPIO_Init+0x2cc>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001536:	4a25      	ldr	r2, [pc, #148]	; (80015cc <HAL_GPIO_Init+0x2cc>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <HAL_GPIO_Init+0x2cc>)
 800153e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001562:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <HAL_GPIO_Init+0x2cc>)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_GPIO_Init+0x2cc>)
 800156c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_GPIO_Init+0x2cc>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f47f aeb1 	bne.w	8001310 <HAL_GPIO_Init+0x10>
  }
}
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40010000 	.word	0x40010000
 80015c0:	48000400 	.word	0x48000400
 80015c4:	48000800 	.word	0x48000800
 80015c8:	48001000 	.word	0x48001000
 80015cc:	58000800 	.word	0x58000800

080015d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e0:	787b      	ldrb	r3, [r7, #1]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800160a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	58000400 	.word	0x58000400

08001620 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001632:	d101      	bne.n	8001638 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001692:	d101      	bne.n	8001698 <LL_RCC_HSE_IsReady+0x18>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <LL_RCC_HSE_IsReady+0x1a>
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80016e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f2:	d101      	bne.n	80016f8 <LL_RCC_HSI_IsReady+0x18>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <LL_RCC_HSI_IsReady+0x1a>
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800170c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800173a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800175c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b02      	cmp	r3, #2
 8001784:	d101      	bne.n	800178a <LL_RCC_HSI48_IsReady+0x18>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <LL_RCC_HSI48_IsReady+0x1a>
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800179a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b02      	cmp	r3, #2
 8001830:	d101      	bne.n	8001836 <LL_RCC_LSE_IsReady+0x18>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_RCC_LSE_IsReady+0x1a>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b02      	cmp	r3, #2
 8001898:	d101      	bne.n	800189e <LL_RCC_LSI1_IsReady+0x18>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <LL_RCC_LSI1_IsReady+0x1a>
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80018d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d101      	bne.n	8001906 <LL_RCC_LSI2_IsReady+0x18>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <LL_RCC_LSI2_IsReady+0x1a>
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001922:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800192e:	4313      	orrs	r3, r2
 8001930:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6013      	str	r3, [r2, #0]
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b02      	cmp	r3, #2
 800198c:	d101      	bne.n	8001992 <LL_RCC_MSI_IsReady+0x16>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_RCC_MSI_IsReady+0x18>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2bb0      	cmp	r3, #176	; 0xb0
 80019dc:	d901      	bls.n	80019e2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80019de:	23b0      	movs	r3, #176	; 0xb0
 80019e0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80019e2:	687b      	ldr	r3, [r7, #4]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f023 0203 	bic.w	r2, r3, #3
 8001a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001abe:	f023 020f 	bic.w	r2, r3, #15
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aca:	4313      	orrs	r3, r2
 8001acc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b90:	6013      	str	r3, [r2, #0]
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bae:	d101      	bne.n	8001bb4 <LL_RCC_PLL_IsReady+0x18>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <LL_RCC_PLL_IsReady+0x1a>
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0303 	and.w	r3, r3, #3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d101      	bne.n	8001c3a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c5a:	d101      	bne.n	8001c60 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c74:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d101      	bne.n	8001c86 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ca4:	d101      	bne.n	8001caa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001cc8:	d101      	bne.n	8001cce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b08d      	sub	sp, #52	; 0x34
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e35c      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 808d 	beq.w	8001e16 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfc:	f7ff fea1 	bl	8001a42 <LL_RCC_GetSysClkSource>
 8001d00:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d02:	f7ff ff82 	bl	8001c0a <LL_RCC_PLL_GetMainSource>
 8001d06:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x3e>
 8001d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d10:	2b0c      	cmp	r3, #12
 8001d12:	d147      	bne.n	8001da4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d144      	bne.n	8001da4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e340      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001d2a:	f7ff fe4c 	bl	80019c6 <LL_RCC_MSI_GetRange>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	429c      	cmp	r4, r3
 8001d32:	d914      	bls.n	8001d5e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fcfb 	bl	8002734 <RCC_SetFlashLatencyFromMSIRange>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e32f      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fe26 	bl	800199e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fe4a 	bl	80019f0 <LL_RCC_MSI_SetCalibTrimming>
 8001d5c:	e013      	b.n	8001d86 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fe1b 	bl	800199e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fe3f 	bl	80019f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fcdc 	bl	8002734 <RCC_SetFlashLatencyFromMSIRange>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e310      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d86:	f000 fcc1 	bl	800270c <HAL_RCC_GetHCLKFreq>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4aa4      	ldr	r2, [pc, #656]	; (8002020 <HAL_RCC_OscConfig+0x344>)
 8001d8e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d90:	4ba4      	ldr	r3, [pc, #656]	; (8002024 <HAL_RCC_OscConfig+0x348>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fed3 	bl	8000b40 <HAL_InitTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d039      	beq.n	8001e14 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e301      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01e      	beq.n	8001dea <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dac:	f7ff fdc8 	bl	8001940 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db0:	f7fe ff14 	bl	8000bdc <HAL_GetTick>
 8001db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db8:	f7fe ff10 	bl	8000bdc <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e2ee      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001dca:	f7ff fdd7 	bl	800197c <LL_RCC_MSI_IsReady>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f1      	beq.n	8001db8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fde0 	bl	800199e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fe04 	bl	80019f0 <LL_RCC_MSI_SetCalibTrimming>
 8001de8:	e015      	b.n	8001e16 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dea:	f7ff fdb8 	bl	800195e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dee:	f7fe fef5 	bl	8000bdc <HAL_GetTick>
 8001df2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001df6:	f7fe fef1 	bl	8000bdc <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e2cf      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e08:	f7ff fdb8 	bl	800197c <LL_RCC_MSI_IsReady>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f1      	bne.n	8001df6 <HAL_RCC_OscConfig+0x11a>
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e14:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d047      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e22:	f7ff fe0e 	bl	8001a42 <LL_RCC_GetSysClkSource>
 8001e26:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e28:	f7ff feef 	bl	8001c0a <LL_RCC_PLL_GetMainSource>
 8001e2c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_OscConfig+0x164>
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d108      	bne.n	8001e4c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d105      	bne.n	8001e4c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d134      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e2ad      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d102      	bne.n	8001e5c <HAL_RCC_OscConfig+0x180>
 8001e56:	f7ff fbf5 	bl	8001644 <LL_RCC_HSE_Enable>
 8001e5a:	e001      	b.n	8001e60 <HAL_RCC_OscConfig+0x184>
 8001e5c:	f7ff fc01 	bl	8001662 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d012      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7fe feb8 	bl	8000bdc <HAL_GetTick>
 8001e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7fe feb4 	bl	8000bdc <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e292      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e82:	f7ff fbfd 	bl	8001680 <LL_RCC_HSE_IsReady>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f1      	beq.n	8001e70 <HAL_RCC_OscConfig+0x194>
 8001e8c:	e011      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fea5 	bl	8000bdc <HAL_GetTick>
 8001e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e96:	f7fe fea1 	bl	8000bdc <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b64      	cmp	r3, #100	; 0x64
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e27f      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ea8:	f7ff fbea 	bl	8001680 <LL_RCC_HSE_IsReady>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f1      	bne.n	8001e96 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d04c      	beq.n	8001f58 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	f7ff fdc0 	bl	8001a42 <LL_RCC_GetSysClkSource>
 8001ec2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec4:	f7ff fea1 	bl	8001c0a <LL_RCC_PLL_GetMainSource>
 8001ec8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_OscConfig+0x200>
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d10b      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e25f      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fc09 	bl	8001704 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ef2:	e031      	b.n	8001f58 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d019      	beq.n	8001f30 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001efc:	f7ff fbd2 	bl	80016a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7fe fe6c 	bl	8000bdc <HAL_GetTick>
 8001f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f08:	f7fe fe68 	bl	8000bdc <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e246      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f1a:	f7ff fbe1 	bl	80016e0 <LL_RCC_HSI_IsReady>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f1      	beq.n	8001f08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fbeb 	bl	8001704 <LL_RCC_HSI_SetCalibTrimming>
 8001f2e:	e013      	b.n	8001f58 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f30:	f7ff fbc7 	bl	80016c2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7fe fe52 	bl	8000bdc <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7fe fe4e 	bl	8000bdc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e22c      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f4e:	f7ff fbc7 	bl	80016e0 <LL_RCC_HSI_IsReady>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f1      	bne.n	8001f3c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a3 	beq.w	80020b8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d076      	beq.n	8002068 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d046      	beq.n	8002014 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001f86:	f7ff fc7e 	bl	8001886 <LL_RCC_LSI1_IsReady>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d113      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001f90:	f7ff fc57 	bl	8001842 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f94:	f7fe fe22 	bl	8000bdc <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f9c:	f7fe fe1e 	bl	8000bdc <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e1fc      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001fae:	f7ff fc6a 	bl	8001886 <LL_RCC_LSI1_IsReady>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f1      	beq.n	8001f9c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001fb8:	f7ff fc77 	bl	80018aa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe fe0e 	bl	8000bdc <HAL_GetTick>
 8001fc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fc4:	f7fe fe0a 	bl	8000bdc <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1e8      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001fd6:	f7ff fc8a 	bl	80018ee <LL_RCC_LSI2_IsReady>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f1      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fc94 	bl	8001912 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001fea:	f7ff fc3b 	bl	8001864 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7fe fdf5 	bl	8000bdc <HAL_GetTick>
 8001ff2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ff6:	f7fe fdf1 	bl	8000bdc <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1cf      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002008:	f7ff fc3d 	bl	8001886 <LL_RCC_LSI1_IsReady>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f1      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x31a>
 8002012:	e051      	b.n	80020b8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002014:	f7ff fc15 	bl	8001842 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe fde0 	bl	8000bdc <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800201e:	e00c      	b.n	800203a <HAL_RCC_OscConfig+0x35e>
 8002020:	20000004 	.word	0x20000004
 8002024:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002028:	f7fe fdd8 	bl	8000bdc <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e1b6      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800203a:	f7ff fc24 	bl	8001886 <LL_RCC_LSI1_IsReady>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f1      	beq.n	8002028 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002044:	f7ff fc42 	bl	80018cc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800204a:	f7fe fdc7 	bl	8000bdc <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b03      	cmp	r3, #3
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e1a5      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800205c:	f7ff fc47 	bl	80018ee <LL_RCC_LSI2_IsReady>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f1      	bne.n	800204a <HAL_RCC_OscConfig+0x36e>
 8002066:	e027      	b.n	80020b8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002068:	f7ff fc30 	bl	80018cc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7fe fdb6 	bl	8000bdc <HAL_GetTick>
 8002070:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002074:	f7fe fdb2 	bl	8000bdc <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b03      	cmp	r3, #3
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e190      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002086:	f7ff fc32 	bl	80018ee <LL_RCC_LSI2_IsReady>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f1      	bne.n	8002074 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002090:	f7ff fbe8 	bl	8001864 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7fe fda2 	bl	8000bdc <HAL_GetTick>
 8002098:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800209c:	f7fe fd9e 	bl	8000bdc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e17c      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80020ae:	f7ff fbea 	bl	8001886 <LL_RCC_LSI1_IsReady>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f1      	bne.n	800209c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d05b      	beq.n	800217c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c4:	4ba7      	ldr	r3, [pc, #668]	; (8002364 <HAL_RCC_OscConfig+0x688>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d114      	bne.n	80020fa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80020d0:	f7ff fa96 	bl	8001600 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d4:	f7fe fd82 	bl	8000bdc <HAL_GetTick>
 80020d8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020dc:	f7fe fd7e 	bl	8000bdc <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e15c      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ee:	4b9d      	ldr	r3, [pc, #628]	; (8002364 <HAL_RCC_OscConfig+0x688>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0x42c>
 8002102:	f7ff fb48 	bl	8001796 <LL_RCC_LSE_Enable>
 8002106:	e00c      	b.n	8002122 <HAL_RCC_OscConfig+0x446>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d104      	bne.n	800211a <HAL_RCC_OscConfig+0x43e>
 8002110:	f7ff fb63 	bl	80017da <LL_RCC_LSE_EnableBypass>
 8002114:	f7ff fb3f 	bl	8001796 <LL_RCC_LSE_Enable>
 8002118:	e003      	b.n	8002122 <HAL_RCC_OscConfig+0x446>
 800211a:	f7ff fb4d 	bl	80017b8 <LL_RCC_LSE_Disable>
 800211e:	f7ff fb6d 	bl	80017fc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d014      	beq.n	8002154 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7fe fd57 	bl	8000bdc <HAL_GetTick>
 800212e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7fe fd53 	bl	8000bdc <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e12f      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002148:	f7ff fb69 	bl	800181e <LL_RCC_LSE_IsReady>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ef      	beq.n	8002132 <HAL_RCC_OscConfig+0x456>
 8002152:	e013      	b.n	800217c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7fe fd42 	bl	8000bdc <HAL_GetTick>
 8002158:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7fe fd3e 	bl	8000bdc <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e11a      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002172:	f7ff fb54 	bl	800181e <LL_RCC_LSE_IsReady>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ef      	bne.n	800215c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d02c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	d014      	beq.n	80021ba <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002190:	f7ff facd 	bl	800172e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7fe fd22 	bl	8000bdc <HAL_GetTick>
 8002198:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800219c:	f7fe fd1e 	bl	8000bdc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0fc      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80021ae:	f7ff fae0 	bl	8001772 <LL_RCC_HSI48_IsReady>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f1      	beq.n	800219c <HAL_RCC_OscConfig+0x4c0>
 80021b8:	e013      	b.n	80021e2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021ba:	f7ff fac9 	bl	8001750 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021be:	f7fe fd0d 	bl	8000bdc <HAL_GetTick>
 80021c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c6:	f7fe fd09 	bl	8000bdc <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0e7      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80021d8:	f7ff facb 	bl	8001772 <LL_RCC_HSI48_IsReady>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f1      	bne.n	80021c6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80dd 	beq.w	80023a6 <HAL_RCC_OscConfig+0x6ca>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ec:	f7ff fc29 	bl	8001a42 <LL_RCC_GetSysClkSource>
 80021f0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	2b02      	cmp	r3, #2
 8002200:	f040 80a6 	bne.w	8002350 <HAL_RCC_OscConfig+0x674>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0203 	and.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	429a      	cmp	r2, r3
 8002210:	d123      	bne.n	800225a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221c:	429a      	cmp	r2, r3
 800221e:	d11c      	bne.n	800225a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d114      	bne.n	800225a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d10d      	bne.n	800225a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d054      	beq.n	8002304 <HAL_RCC_OscConfig+0x628>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d04f      	beq.n	8002300 <HAL_RCC_OscConfig+0x624>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002260:	f7ff fc8d 	bl	8001b7e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002264:	f7fe fcba 	bl	8000bdc <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x5a2>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe fcb6 	bl	8000bdc <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x5a2>
              {
                return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e094      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1ef      	bne.n	800226c <HAL_RCC_OscConfig+0x590>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_RCC_OscConfig+0x68c>)
 8002294:	4013      	ands	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022a4:	0212      	lsls	r2, r2, #8
 80022a6:	4311      	orrs	r1, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022ac:	4311      	orrs	r1, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022b8:	430a      	orrs	r2, r1
 80022ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022be:	4313      	orrs	r3, r2
 80022c0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022c2:	f7ff fc4d 	bl	8001b60 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022d6:	f7fe fc81 	bl	8000bdc <HAL_GetTick>
 80022da:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x614>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe fc7d 	bl	8000bdc <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x614>
              {
                return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e05b      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0ef      	beq.n	80022de <HAL_RCC_OscConfig+0x602>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fe:	e052      	b.n	80023a6 <HAL_RCC_OscConfig+0x6ca>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e051      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d149      	bne.n	80023a6 <HAL_RCC_OscConfig+0x6ca>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002312:	f7ff fc25 	bl	8001b60 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002324:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002326:	f7fe fc59 	bl	8000bdc <HAL_GetTick>
 800232a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x664>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe fc55 	bl	8000bdc <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x664>
            {
              return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e033      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0ef      	beq.n	800232e <HAL_RCC_OscConfig+0x652>
 800234e:	e02a      	b.n	80023a6 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d025      	beq.n	80023a2 <HAL_RCC_OscConfig+0x6c6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	f7ff fc12 	bl	8001b7e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe fc3f 	bl	8000bdc <HAL_GetTick>
 800235e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002360:	e00d      	b.n	800237e <HAL_RCC_OscConfig+0x6a2>
 8002362:	bf00      	nop
 8002364:	58000400 	.word	0x58000400
 8002368:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7fe fc36 	bl	8000bdc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x6a2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e014      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ef      	bne.n	800236c <HAL_RCC_OscConfig+0x690>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	60d3      	str	r3, [r2, #12]
 80023a0:	e001      	b.n	80023a6 <HAL_RCC_OscConfig+0x6ca>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x6cc>
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3734      	adds	r7, #52	; 0x34
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}

080023b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e12d      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b98      	ldr	r3, [pc, #608]	; (8002628 <HAL_RCC_ClockConfig+0x278>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d91b      	bls.n	800240a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b95      	ldr	r3, [pc, #596]	; (8002628 <HAL_RCC_ClockConfig+0x278>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 0207 	bic.w	r2, r3, #7
 80023da:	4993      	ldr	r1, [pc, #588]	; (8002628 <HAL_RCC_ClockConfig+0x278>)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e2:	f7fe fbfb 	bl	8000bdc <HAL_GetTick>
 80023e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023ea:	f7fe fbf7 	bl	8000bdc <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e111      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fc:	4b8a      	ldr	r3, [pc, #552]	; (8002628 <HAL_RCC_ClockConfig+0x278>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d1ef      	bne.n	80023ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fb1d 	bl	8001a5a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002420:	f7fe fbdc 	bl	8000bdc <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002428:	f7fe fbd8 	bl	8000bdc <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0f2      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800243a:	f7ff fbf2 	bl	8001c22 <LL_RCC_IsActiveFlag_HPRE>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f1      	beq.n	8002428 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d016      	beq.n	800247e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fb14 	bl	8001a82 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800245a:	f7fe fbbf 	bl	8000bdc <HAL_GetTick>
 800245e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002462:	f7fe fbbb 	bl	8000bdc <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0d5      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002474:	f7ff fbe7 	bl	8001c46 <LL_RCC_IsActiveFlag_C2HPRE>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f1      	beq.n	8002462 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fb0d 	bl	8001aae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002494:	f7fe fba2 	bl	8000bdc <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800249c:	f7fe fb9e 	bl	8000bdc <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e0b8      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80024ae:	f7ff fbdd 	bl	8001c6c <LL_RCC_IsActiveFlag_SHDHPRE>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f1      	beq.n	800249c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d016      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fb07 	bl	8001adc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024ce:	f7fe fb85 	bl	8000bdc <HAL_GetTick>
 80024d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024d6:	f7fe fb81 	bl	8000bdc <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e09b      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80024e8:	f7ff fbd3 	bl	8001c92 <LL_RCC_IsActiveFlag_PPRE1>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f1      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d017      	beq.n	800252e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fafd 	bl	8001b04 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800250a:	f7fe fb67 	bl	8000bdc <HAL_GetTick>
 800250e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002512:	f7fe fb63 	bl	8000bdc <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e07d      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002524:	f7ff fbc7 	bl	8001cb6 <LL_RCC_IsActiveFlag_PPRE2>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f1      	beq.n	8002512 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d043      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d106      	bne.n	8002550 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002542:	f7ff f89d 	bl	8001680 <LL_RCC_HSE_IsReady>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d11e      	bne.n	800258a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e067      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d106      	bne.n	8002566 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002558:	f7ff fb20 	bl	8001b9c <LL_RCC_PLL_IsReady>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d113      	bne.n	800258a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e05c      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d106      	bne.n	800257c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800256e:	f7ff fa05 	bl	800197c <LL_RCC_MSI_IsReady>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d108      	bne.n	800258a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e051      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800257c:	f7ff f8b0 	bl	80016e0 <LL_RCC_HSI_IsReady>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e04a      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fa43 	bl	8001a1a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002594:	f7fe fb22 	bl	8000bdc <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259c:	f7fe fb1e 	bl	8000bdc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e036      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	f7ff fa46 	bl	8001a42 <LL_RCC_GetSysClkSource>
 80025b6:	4602      	mov	r2, r0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	429a      	cmp	r2, r3
 80025c0:	d1ec      	bne.n	800259c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_ClockConfig+0x278>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d21b      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_RCC_ClockConfig+0x278>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 0207 	bic.w	r2, r3, #7
 80025d8:	4913      	ldr	r1, [pc, #76]	; (8002628 <HAL_RCC_ClockConfig+0x278>)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e0:	f7fe fafc 	bl	8000bdc <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025e8:	f7fe faf8 	bl	8000bdc <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e012      	b.n	8002620 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_ClockConfig+0x278>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d1ef      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002608:	f000 f880 	bl	800270c <HAL_RCC_GetHCLKFreq>
 800260c:	4603      	mov	r3, r0
 800260e:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_RCC_ClockConfig+0x27c>)
 8002610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002612:	f7fe faef 	bl	8000bf4 <HAL_GetTickPrio>
 8002616:	4603      	mov	r3, r0
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fa91 	bl	8000b40 <HAL_InitTick>
 800261e:	4603      	mov	r3, r0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	58004000 	.word	0x58004000
 800262c:	20000004 	.word	0x20000004

08002630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002636:	f7ff fa04 	bl	8001a42 <LL_RCC_GetSysClkSource>
 800263a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10a      	bne.n	8002658 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002642:	f7ff f9c0 	bl	80019c6 <LL_RCC_MSI_GetRange>
 8002646:	4603      	mov	r3, r0
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e04b      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b04      	cmp	r3, #4
 800265c:	d102      	bne.n	8002664 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800265e:	4b28      	ldr	r3, [pc, #160]	; (8002700 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e045      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b08      	cmp	r3, #8
 8002668:	d10a      	bne.n	8002680 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800266a:	f7fe ffd9 	bl	8001620 <LL_RCC_HSE_IsEnabledDiv2>
 800266e:	4603      	mov	r3, r0
 8002670:	2b01      	cmp	r3, #1
 8002672:	d102      	bne.n	800267a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002674:	4b23      	ldr	r3, [pc, #140]	; (8002704 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e03a      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800267a:	4b23      	ldr	r3, [pc, #140]	; (8002708 <HAL_RCC_GetSysClockFreq+0xd8>)
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	e037      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002680:	f7ff fac3 	bl	8001c0a <LL_RCC_PLL_GetMainSource>
 8002684:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d003      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x64>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d003      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x6a>
 8002692:	e00d      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002696:	60bb      	str	r3, [r7, #8]
        break;
 8002698:	e015      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800269a:	f7fe ffc1 	bl	8001620 <LL_RCC_HSE_IsEnabledDiv2>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d102      	bne.n	80026aa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80026a4:	4b17      	ldr	r3, [pc, #92]	; (8002704 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026a6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80026a8:	e00d      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80026aa:	4b17      	ldr	r3, [pc, #92]	; (8002708 <HAL_RCC_GetSysClockFreq+0xd8>)
 80026ac:	60bb      	str	r3, [r7, #8]
        break;
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80026b0:	f7ff f989 	bl	80019c6 <LL_RCC_MSI_GetRange>
 80026b4:	4603      	mov	r3, r0
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80026be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c2:	60bb      	str	r3, [r7, #8]
        break;
 80026c4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80026c6:	f7ff fa7b 	bl	8001bc0 <LL_RCC_PLL_GetN>
 80026ca:	4602      	mov	r2, r0
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	fb03 f402 	mul.w	r4, r3, r2
 80026d2:	f7ff fa8e 	bl	8001bf2 <LL_RCC_PLL_GetDivider>
 80026d6:	4603      	mov	r3, r0
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	3301      	adds	r3, #1
 80026dc:	fbb4 f4f3 	udiv	r4, r4, r3
 80026e0:	f7ff fa7b 	bl	8001bda <LL_RCC_PLL_GetR>
 80026e4:	4603      	mov	r3, r0
 80026e6:	0f5b      	lsrs	r3, r3, #29
 80026e8:	3301      	adds	r3, #1
 80026ea:	fbb4 f3f3 	udiv	r3, r4, r3
 80026ee:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd90      	pop	{r4, r7, pc}
 80026fa:	bf00      	nop
 80026fc:	08004664 	.word	0x08004664
 8002700:	00f42400 	.word	0x00f42400
 8002704:	003d0900 	.word	0x003d0900
 8002708:	007a1200 	.word	0x007a1200

0800270c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800270c:	b598      	push	{r3, r4, r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002710:	f7ff ff8e 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 8002714:	4604      	mov	r4, r0
 8002716:	f7ff fa09 	bl	8001b2c <LL_RCC_GetAHBPrescaler>
 800271a:	4603      	mov	r3, r0
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	4a03      	ldr	r2, [pc, #12]	; (8002730 <HAL_RCC_GetHCLKFreq+0x24>)
 8002724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002728:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd98      	pop	{r3, r4, r7, pc}
 8002730:	08004624 	.word	0x08004624

08002734 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2bb0      	cmp	r3, #176	; 0xb0
 8002740:	d903      	bls.n	800274a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	e007      	b.n	800275a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	4a10      	ldr	r2, [pc, #64]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002758:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800275a:	f7ff f9f3 	bl	8001b44 <LL_RCC_GetAHB4Prescaler>
 800275e:	4603      	mov	r3, r0
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	0c9b      	lsrs	r3, r3, #18
 800277e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f80c 	bl	80027a0 <RCC_SetFlashLatency>
 8002788:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	08004664 	.word	0x08004664
 8002798:	08004624 	.word	0x08004624
 800279c:	431bde83 	.word	0x431bde83

080027a0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b08f      	sub	sp, #60	; 0x3c
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <RCC_SetFlashLatency+0x9c>)
 80027ac:	f107 041c 	add.w	r4, r7, #28
 80027b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80027b6:	4b22      	ldr	r3, [pc, #136]	; (8002840 <RCC_SetFlashLatency+0xa0>)
 80027b8:	f107 040c 	add.w	r4, r7, #12
 80027bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027c2:	2300      	movs	r3, #0
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ca:	e013      	b.n	80027f4 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80027cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	3338      	adds	r3, #56	; 0x38
 80027d2:	443b      	add	r3, r7
 80027d4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d807      	bhi.n	80027ee <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	3338      	adds	r3, #56	; 0x38
 80027e4:	443b      	add	r3, r7
 80027e6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80027ec:	e005      	b.n	80027fa <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f0:	3301      	adds	r3, #1
 80027f2:	633b      	str	r3, [r7, #48]	; 0x30
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d9e8      	bls.n	80027cc <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <RCC_SetFlashLatency+0xa4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 0207 	bic.w	r2, r3, #7
 8002802:	4910      	ldr	r1, [pc, #64]	; (8002844 <RCC_SetFlashLatency+0xa4>)
 8002804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800280a:	f7fe f9e7 	bl	8000bdc <HAL_GetTick>
 800280e:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002810:	e008      	b.n	8002824 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002812:	f7fe f9e3 	bl	8000bdc <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e007      	b.n	8002834 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <RCC_SetFlashLatency+0xa4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800282e:	429a      	cmp	r2, r3
 8002830:	d1ef      	bne.n	8002812 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	373c      	adds	r7, #60	; 0x3c
 8002838:	46bd      	mov	sp, r7
 800283a:	bd90      	pop	{r4, r7, pc}
 800283c:	08004604 	.word	0x08004604
 8002840:	08004614 	.word	0x08004614
 8002844:	58004000 	.word	0x58004000

08002848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e095      	b.n	8002986 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	2b00      	cmp	r3, #0
 8002860:	d108      	bne.n	8002874 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800286a:	d009      	beq.n	8002880 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
 8002872:	e005      	b.n	8002880 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fd ffda 	bl	8000854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028c0:	d902      	bls.n	80028c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e002      	b.n	80028ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80028d6:	d007      	beq.n	80028e8 <HAL_SPI_Init+0xa0>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028e0:	d002      	beq.n	80028e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	ea42 0103 	orr.w	r1, r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	0c1b      	lsrs	r3, r3, #16
 8002944:	f003 0204 	and.w	r2, r3, #4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002964:	ea42 0103 	orr.w	r1, r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_SPI_Transmit_DMA+0x20>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0d8      	b.n	8002b62 <HAL_SPI_Transmit_DMA+0x1d2>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d002      	beq.n	80029ca <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80029c4:	2302      	movs	r3, #2
 80029c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029c8:	e0c6      	b.n	8002b58 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_SPI_Transmit_DMA+0x46>
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029da:	e0bd      	b.n	8002b58 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2203      	movs	r2, #3
 80029e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	88fa      	ldrh	r2, [r7, #6]
 80029f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	88fa      	ldrh	r2, [r7, #6]
 80029fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a26:	d10f      	bne.n	8002a48 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	4a47      	ldr	r2, [pc, #284]	; (8002b6c <HAL_SPI_Transmit_DMA+0x1dc>)
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a54:	4a46      	ldr	r2, [pc, #280]	; (8002b70 <HAL_SPI_Transmit_DMA+0x1e0>)
 8002a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	4a45      	ldr	r2, [pc, #276]	; (8002b74 <HAL_SPI_Transmit_DMA+0x1e4>)
 8002a5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	2200      	movs	r2, #0
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a76:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a80:	d82d      	bhi.n	8002ade <HAL_SPI_Transmit_DMA+0x14e>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8c:	d127      	bne.n	8002ade <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10f      	bne.n	8002abc <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002aaa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002aba:	e010      	b.n	8002ade <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aca:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	085b      	lsrs	r3, r3, #1
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	330c      	adds	r3, #12
 8002aee:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002af6:	f7fe fa49 	bl	8000f8c <HAL_DMA_Start_IT>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00c      	beq.n	8002b1a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b04:	f043 0210 	orr.w	r2, r3, #16
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8002b18:	e01e      	b.n	8002b58 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d007      	beq.n	8002b38 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0220 	orr.w	r2, r2, #32
 8002b46:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0202 	orr.w	r2, r2, #2
 8002b56:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	08002c5b 	.word	0x08002c5b
 8002b70:	08002bb5 	.word	0x08002bb5
 8002b74:	08002c77 	.word	0x08002c77

08002b78 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bc2:	f7fe f80b 	bl	8000bdc <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d03b      	beq.n	8002c4e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0220 	bic.w	r2, r2, #32
 8002be4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0202 	bic.w	r2, r2, #2
 8002bf4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	2164      	movs	r1, #100	; 0x64
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f000 f97a 	bl	8002ef4 <SPI_EndRxTxTransaction>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	f043 0220 	orr.w	r2, r3, #32
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10a      	bne.n	8002c30 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2200      	movs	r2, #0
 8002c34:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff ffaa 	bl	8002ba0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002c4c:	e002      	b.n	8002c54 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ff92 	bl	8002b78 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7ff ff8f 	bl	8002b8c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0203 	bic.w	r2, r2, #3
 8002c92:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c98:	f043 0210 	orr.w	r2, r3, #16
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff ff79 	bl	8002ba0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cc8:	f7fd ff88 	bl	8000bdc <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cd8:	f7fd ff80 	bl	8000bdc <HAL_GetTick>
 8002cdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cde:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	015b      	lsls	r3, r3, #5
 8002ce4:	0d1b      	lsrs	r3, r3, #20
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cee:	e054      	b.n	8002d9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf6:	d050      	beq.n	8002d9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cf8:	f7fd ff70 	bl	8000bdc <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d902      	bls.n	8002d0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d13d      	bne.n	8002d8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d26:	d111      	bne.n	8002d4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d30:	d004      	beq.n	8002d3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3a:	d107      	bne.n	8002d4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d54:	d10f      	bne.n	8002d76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e017      	b.n	8002dba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4013      	ands	r3, r2
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	bf0c      	ite	eq
 8002daa:	2301      	moveq	r3, #1
 8002dac:	2300      	movne	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d19b      	bne.n	8002cf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000004 	.word	0x20000004

08002dc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	; 0x28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002dda:	f7fd feff 	bl	8000bdc <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	4413      	add	r3, r2
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002dea:	f7fd fef7 	bl	8000bdc <HAL_GetTick>
 8002dee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002df8:	4b3d      	ldr	r3, [pc, #244]	; (8002ef0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00da      	lsls	r2, r3, #3
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	0d1b      	lsrs	r3, r3, #20
 8002e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002e10:	e060      	b.n	8002ed4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e18:	d107      	bne.n	8002e2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d050      	beq.n	8002ed4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e32:	f7fd fed3 	bl	8000bdc <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d902      	bls.n	8002e48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d13d      	bne.n	8002ec4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e60:	d111      	bne.n	8002e86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e6a:	d004      	beq.n	8002e76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e74:	d107      	bne.n	8002e86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8e:	d10f      	bne.n	8002eb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e010      	b.n	8002ee6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4013      	ands	r3, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d196      	bne.n	8002e12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3728      	adds	r7, #40	; 0x28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000004 	.word	0x20000004

08002ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff ff5b 	bl	8002dc8 <SPI_WaitFifoStateUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1c:	f043 0220 	orr.w	r2, r3, #32
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e027      	b.n	8002f78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2180      	movs	r1, #128	; 0x80
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f7ff fec0 	bl	8002cb8 <SPI_WaitFlagStateUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e014      	b.n	8002f78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff ff34 	bl	8002dc8 <SPI_WaitFifoStateUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6a:	f043 0220 	orr.w	r2, r3, #32
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e000      	b.n	8002f78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <__errno>:
 8002f80:	4b01      	ldr	r3, [pc, #4]	; (8002f88 <__errno+0x8>)
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000010 	.word	0x20000010

08002f8c <__libc_init_array>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	4d0d      	ldr	r5, [pc, #52]	; (8002fc4 <__libc_init_array+0x38>)
 8002f90:	4c0d      	ldr	r4, [pc, #52]	; (8002fc8 <__libc_init_array+0x3c>)
 8002f92:	1b64      	subs	r4, r4, r5
 8002f94:	10a4      	asrs	r4, r4, #2
 8002f96:	2600      	movs	r6, #0
 8002f98:	42a6      	cmp	r6, r4
 8002f9a:	d109      	bne.n	8002fb0 <__libc_init_array+0x24>
 8002f9c:	4d0b      	ldr	r5, [pc, #44]	; (8002fcc <__libc_init_array+0x40>)
 8002f9e:	4c0c      	ldr	r4, [pc, #48]	; (8002fd0 <__libc_init_array+0x44>)
 8002fa0:	f001 fac6 	bl	8004530 <_init>
 8002fa4:	1b64      	subs	r4, r4, r5
 8002fa6:	10a4      	asrs	r4, r4, #2
 8002fa8:	2600      	movs	r6, #0
 8002faa:	42a6      	cmp	r6, r4
 8002fac:	d105      	bne.n	8002fba <__libc_init_array+0x2e>
 8002fae:	bd70      	pop	{r4, r5, r6, pc}
 8002fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb4:	4798      	blx	r3
 8002fb6:	3601      	adds	r6, #1
 8002fb8:	e7ee      	b.n	8002f98 <__libc_init_array+0xc>
 8002fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fbe:	4798      	blx	r3
 8002fc0:	3601      	adds	r6, #1
 8002fc2:	e7f2      	b.n	8002faa <__libc_init_array+0x1e>
 8002fc4:	08004758 	.word	0x08004758
 8002fc8:	08004758 	.word	0x08004758
 8002fcc:	08004758 	.word	0x08004758
 8002fd0:	0800475c 	.word	0x0800475c

08002fd4 <memset>:
 8002fd4:	4402      	add	r2, r0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d100      	bne.n	8002fde <memset+0xa>
 8002fdc:	4770      	bx	lr
 8002fde:	f803 1b01 	strb.w	r1, [r3], #1
 8002fe2:	e7f9      	b.n	8002fd8 <memset+0x4>

08002fe4 <iprintf>:
 8002fe4:	b40f      	push	{r0, r1, r2, r3}
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <iprintf+0x2c>)
 8002fe8:	b513      	push	{r0, r1, r4, lr}
 8002fea:	681c      	ldr	r4, [r3, #0]
 8002fec:	b124      	cbz	r4, 8002ff8 <iprintf+0x14>
 8002fee:	69a3      	ldr	r3, [r4, #24]
 8002ff0:	b913      	cbnz	r3, 8002ff8 <iprintf+0x14>
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f000 fa5e 	bl	80034b4 <__sinit>
 8002ff8:	ab05      	add	r3, sp, #20
 8002ffa:	9a04      	ldr	r2, [sp, #16]
 8002ffc:	68a1      	ldr	r1, [r4, #8]
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	4620      	mov	r0, r4
 8003002:	f000 fc67 	bl	80038d4 <_vfiprintf_r>
 8003006:	b002      	add	sp, #8
 8003008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800300c:	b004      	add	sp, #16
 800300e:	4770      	bx	lr
 8003010:	20000010 	.word	0x20000010

08003014 <_puts_r>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	460e      	mov	r6, r1
 8003018:	4605      	mov	r5, r0
 800301a:	b118      	cbz	r0, 8003024 <_puts_r+0x10>
 800301c:	6983      	ldr	r3, [r0, #24]
 800301e:	b90b      	cbnz	r3, 8003024 <_puts_r+0x10>
 8003020:	f000 fa48 	bl	80034b4 <__sinit>
 8003024:	69ab      	ldr	r3, [r5, #24]
 8003026:	68ac      	ldr	r4, [r5, #8]
 8003028:	b913      	cbnz	r3, 8003030 <_puts_r+0x1c>
 800302a:	4628      	mov	r0, r5
 800302c:	f000 fa42 	bl	80034b4 <__sinit>
 8003030:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <_puts_r+0xd0>)
 8003032:	429c      	cmp	r4, r3
 8003034:	d120      	bne.n	8003078 <_puts_r+0x64>
 8003036:	686c      	ldr	r4, [r5, #4]
 8003038:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800303a:	07db      	lsls	r3, r3, #31
 800303c:	d405      	bmi.n	800304a <_puts_r+0x36>
 800303e:	89a3      	ldrh	r3, [r4, #12]
 8003040:	0598      	lsls	r0, r3, #22
 8003042:	d402      	bmi.n	800304a <_puts_r+0x36>
 8003044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003046:	f000 fad3 	bl	80035f0 <__retarget_lock_acquire_recursive>
 800304a:	89a3      	ldrh	r3, [r4, #12]
 800304c:	0719      	lsls	r1, r3, #28
 800304e:	d51d      	bpl.n	800308c <_puts_r+0x78>
 8003050:	6923      	ldr	r3, [r4, #16]
 8003052:	b1db      	cbz	r3, 800308c <_puts_r+0x78>
 8003054:	3e01      	subs	r6, #1
 8003056:	68a3      	ldr	r3, [r4, #8]
 8003058:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800305c:	3b01      	subs	r3, #1
 800305e:	60a3      	str	r3, [r4, #8]
 8003060:	bb39      	cbnz	r1, 80030b2 <_puts_r+0x9e>
 8003062:	2b00      	cmp	r3, #0
 8003064:	da38      	bge.n	80030d8 <_puts_r+0xc4>
 8003066:	4622      	mov	r2, r4
 8003068:	210a      	movs	r1, #10
 800306a:	4628      	mov	r0, r5
 800306c:	f000 f848 	bl	8003100 <__swbuf_r>
 8003070:	3001      	adds	r0, #1
 8003072:	d011      	beq.n	8003098 <_puts_r+0x84>
 8003074:	250a      	movs	r5, #10
 8003076:	e011      	b.n	800309c <_puts_r+0x88>
 8003078:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <_puts_r+0xd4>)
 800307a:	429c      	cmp	r4, r3
 800307c:	d101      	bne.n	8003082 <_puts_r+0x6e>
 800307e:	68ac      	ldr	r4, [r5, #8]
 8003080:	e7da      	b.n	8003038 <_puts_r+0x24>
 8003082:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <_puts_r+0xd8>)
 8003084:	429c      	cmp	r4, r3
 8003086:	bf08      	it	eq
 8003088:	68ec      	ldreq	r4, [r5, #12]
 800308a:	e7d5      	b.n	8003038 <_puts_r+0x24>
 800308c:	4621      	mov	r1, r4
 800308e:	4628      	mov	r0, r5
 8003090:	f000 f888 	bl	80031a4 <__swsetup_r>
 8003094:	2800      	cmp	r0, #0
 8003096:	d0dd      	beq.n	8003054 <_puts_r+0x40>
 8003098:	f04f 35ff 	mov.w	r5, #4294967295
 800309c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800309e:	07da      	lsls	r2, r3, #31
 80030a0:	d405      	bmi.n	80030ae <_puts_r+0x9a>
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	059b      	lsls	r3, r3, #22
 80030a6:	d402      	bmi.n	80030ae <_puts_r+0x9a>
 80030a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030aa:	f000 faa2 	bl	80035f2 <__retarget_lock_release_recursive>
 80030ae:	4628      	mov	r0, r5
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	da04      	bge.n	80030c0 <_puts_r+0xac>
 80030b6:	69a2      	ldr	r2, [r4, #24]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	dc06      	bgt.n	80030ca <_puts_r+0xb6>
 80030bc:	290a      	cmp	r1, #10
 80030be:	d004      	beq.n	80030ca <_puts_r+0xb6>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	6022      	str	r2, [r4, #0]
 80030c6:	7019      	strb	r1, [r3, #0]
 80030c8:	e7c5      	b.n	8003056 <_puts_r+0x42>
 80030ca:	4622      	mov	r2, r4
 80030cc:	4628      	mov	r0, r5
 80030ce:	f000 f817 	bl	8003100 <__swbuf_r>
 80030d2:	3001      	adds	r0, #1
 80030d4:	d1bf      	bne.n	8003056 <_puts_r+0x42>
 80030d6:	e7df      	b.n	8003098 <_puts_r+0x84>
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	250a      	movs	r5, #10
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	6022      	str	r2, [r4, #0]
 80030e0:	701d      	strb	r5, [r3, #0]
 80030e2:	e7db      	b.n	800309c <_puts_r+0x88>
 80030e4:	080046c8 	.word	0x080046c8
 80030e8:	080046e8 	.word	0x080046e8
 80030ec:	080046a8 	.word	0x080046a8

080030f0 <puts>:
 80030f0:	4b02      	ldr	r3, [pc, #8]	; (80030fc <puts+0xc>)
 80030f2:	4601      	mov	r1, r0
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	f7ff bf8d 	b.w	8003014 <_puts_r>
 80030fa:	bf00      	nop
 80030fc:	20000010 	.word	0x20000010

08003100 <__swbuf_r>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	460e      	mov	r6, r1
 8003104:	4614      	mov	r4, r2
 8003106:	4605      	mov	r5, r0
 8003108:	b118      	cbz	r0, 8003112 <__swbuf_r+0x12>
 800310a:	6983      	ldr	r3, [r0, #24]
 800310c:	b90b      	cbnz	r3, 8003112 <__swbuf_r+0x12>
 800310e:	f000 f9d1 	bl	80034b4 <__sinit>
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <__swbuf_r+0x98>)
 8003114:	429c      	cmp	r4, r3
 8003116:	d12b      	bne.n	8003170 <__swbuf_r+0x70>
 8003118:	686c      	ldr	r4, [r5, #4]
 800311a:	69a3      	ldr	r3, [r4, #24]
 800311c:	60a3      	str	r3, [r4, #8]
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	071a      	lsls	r2, r3, #28
 8003122:	d52f      	bpl.n	8003184 <__swbuf_r+0x84>
 8003124:	6923      	ldr	r3, [r4, #16]
 8003126:	b36b      	cbz	r3, 8003184 <__swbuf_r+0x84>
 8003128:	6923      	ldr	r3, [r4, #16]
 800312a:	6820      	ldr	r0, [r4, #0]
 800312c:	1ac0      	subs	r0, r0, r3
 800312e:	6963      	ldr	r3, [r4, #20]
 8003130:	b2f6      	uxtb	r6, r6
 8003132:	4283      	cmp	r3, r0
 8003134:	4637      	mov	r7, r6
 8003136:	dc04      	bgt.n	8003142 <__swbuf_r+0x42>
 8003138:	4621      	mov	r1, r4
 800313a:	4628      	mov	r0, r5
 800313c:	f000 f926 	bl	800338c <_fflush_r>
 8003140:	bb30      	cbnz	r0, 8003190 <__swbuf_r+0x90>
 8003142:	68a3      	ldr	r3, [r4, #8]
 8003144:	3b01      	subs	r3, #1
 8003146:	60a3      	str	r3, [r4, #8]
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	6022      	str	r2, [r4, #0]
 800314e:	701e      	strb	r6, [r3, #0]
 8003150:	6963      	ldr	r3, [r4, #20]
 8003152:	3001      	adds	r0, #1
 8003154:	4283      	cmp	r3, r0
 8003156:	d004      	beq.n	8003162 <__swbuf_r+0x62>
 8003158:	89a3      	ldrh	r3, [r4, #12]
 800315a:	07db      	lsls	r3, r3, #31
 800315c:	d506      	bpl.n	800316c <__swbuf_r+0x6c>
 800315e:	2e0a      	cmp	r6, #10
 8003160:	d104      	bne.n	800316c <__swbuf_r+0x6c>
 8003162:	4621      	mov	r1, r4
 8003164:	4628      	mov	r0, r5
 8003166:	f000 f911 	bl	800338c <_fflush_r>
 800316a:	b988      	cbnz	r0, 8003190 <__swbuf_r+0x90>
 800316c:	4638      	mov	r0, r7
 800316e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <__swbuf_r+0x9c>)
 8003172:	429c      	cmp	r4, r3
 8003174:	d101      	bne.n	800317a <__swbuf_r+0x7a>
 8003176:	68ac      	ldr	r4, [r5, #8]
 8003178:	e7cf      	b.n	800311a <__swbuf_r+0x1a>
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <__swbuf_r+0xa0>)
 800317c:	429c      	cmp	r4, r3
 800317e:	bf08      	it	eq
 8003180:	68ec      	ldreq	r4, [r5, #12]
 8003182:	e7ca      	b.n	800311a <__swbuf_r+0x1a>
 8003184:	4621      	mov	r1, r4
 8003186:	4628      	mov	r0, r5
 8003188:	f000 f80c 	bl	80031a4 <__swsetup_r>
 800318c:	2800      	cmp	r0, #0
 800318e:	d0cb      	beq.n	8003128 <__swbuf_r+0x28>
 8003190:	f04f 37ff 	mov.w	r7, #4294967295
 8003194:	e7ea      	b.n	800316c <__swbuf_r+0x6c>
 8003196:	bf00      	nop
 8003198:	080046c8 	.word	0x080046c8
 800319c:	080046e8 	.word	0x080046e8
 80031a0:	080046a8 	.word	0x080046a8

080031a4 <__swsetup_r>:
 80031a4:	4b32      	ldr	r3, [pc, #200]	; (8003270 <__swsetup_r+0xcc>)
 80031a6:	b570      	push	{r4, r5, r6, lr}
 80031a8:	681d      	ldr	r5, [r3, #0]
 80031aa:	4606      	mov	r6, r0
 80031ac:	460c      	mov	r4, r1
 80031ae:	b125      	cbz	r5, 80031ba <__swsetup_r+0x16>
 80031b0:	69ab      	ldr	r3, [r5, #24]
 80031b2:	b913      	cbnz	r3, 80031ba <__swsetup_r+0x16>
 80031b4:	4628      	mov	r0, r5
 80031b6:	f000 f97d 	bl	80034b4 <__sinit>
 80031ba:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <__swsetup_r+0xd0>)
 80031bc:	429c      	cmp	r4, r3
 80031be:	d10f      	bne.n	80031e0 <__swsetup_r+0x3c>
 80031c0:	686c      	ldr	r4, [r5, #4]
 80031c2:	89a3      	ldrh	r3, [r4, #12]
 80031c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031c8:	0719      	lsls	r1, r3, #28
 80031ca:	d42c      	bmi.n	8003226 <__swsetup_r+0x82>
 80031cc:	06dd      	lsls	r5, r3, #27
 80031ce:	d411      	bmi.n	80031f4 <__swsetup_r+0x50>
 80031d0:	2309      	movs	r3, #9
 80031d2:	6033      	str	r3, [r6, #0]
 80031d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80031d8:	81a3      	strh	r3, [r4, #12]
 80031da:	f04f 30ff 	mov.w	r0, #4294967295
 80031de:	e03e      	b.n	800325e <__swsetup_r+0xba>
 80031e0:	4b25      	ldr	r3, [pc, #148]	; (8003278 <__swsetup_r+0xd4>)
 80031e2:	429c      	cmp	r4, r3
 80031e4:	d101      	bne.n	80031ea <__swsetup_r+0x46>
 80031e6:	68ac      	ldr	r4, [r5, #8]
 80031e8:	e7eb      	b.n	80031c2 <__swsetup_r+0x1e>
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <__swsetup_r+0xd8>)
 80031ec:	429c      	cmp	r4, r3
 80031ee:	bf08      	it	eq
 80031f0:	68ec      	ldreq	r4, [r5, #12]
 80031f2:	e7e6      	b.n	80031c2 <__swsetup_r+0x1e>
 80031f4:	0758      	lsls	r0, r3, #29
 80031f6:	d512      	bpl.n	800321e <__swsetup_r+0x7a>
 80031f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031fa:	b141      	cbz	r1, 800320e <__swsetup_r+0x6a>
 80031fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003200:	4299      	cmp	r1, r3
 8003202:	d002      	beq.n	800320a <__swsetup_r+0x66>
 8003204:	4630      	mov	r0, r6
 8003206:	f000 fa5b 	bl	80036c0 <_free_r>
 800320a:	2300      	movs	r3, #0
 800320c:	6363      	str	r3, [r4, #52]	; 0x34
 800320e:	89a3      	ldrh	r3, [r4, #12]
 8003210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003214:	81a3      	strh	r3, [r4, #12]
 8003216:	2300      	movs	r3, #0
 8003218:	6063      	str	r3, [r4, #4]
 800321a:	6923      	ldr	r3, [r4, #16]
 800321c:	6023      	str	r3, [r4, #0]
 800321e:	89a3      	ldrh	r3, [r4, #12]
 8003220:	f043 0308 	orr.w	r3, r3, #8
 8003224:	81a3      	strh	r3, [r4, #12]
 8003226:	6923      	ldr	r3, [r4, #16]
 8003228:	b94b      	cbnz	r3, 800323e <__swsetup_r+0x9a>
 800322a:	89a3      	ldrh	r3, [r4, #12]
 800322c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003234:	d003      	beq.n	800323e <__swsetup_r+0x9a>
 8003236:	4621      	mov	r1, r4
 8003238:	4630      	mov	r0, r6
 800323a:	f000 fa01 	bl	8003640 <__smakebuf_r>
 800323e:	89a0      	ldrh	r0, [r4, #12]
 8003240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003244:	f010 0301 	ands.w	r3, r0, #1
 8003248:	d00a      	beq.n	8003260 <__swsetup_r+0xbc>
 800324a:	2300      	movs	r3, #0
 800324c:	60a3      	str	r3, [r4, #8]
 800324e:	6963      	ldr	r3, [r4, #20]
 8003250:	425b      	negs	r3, r3
 8003252:	61a3      	str	r3, [r4, #24]
 8003254:	6923      	ldr	r3, [r4, #16]
 8003256:	b943      	cbnz	r3, 800326a <__swsetup_r+0xc6>
 8003258:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800325c:	d1ba      	bne.n	80031d4 <__swsetup_r+0x30>
 800325e:	bd70      	pop	{r4, r5, r6, pc}
 8003260:	0781      	lsls	r1, r0, #30
 8003262:	bf58      	it	pl
 8003264:	6963      	ldrpl	r3, [r4, #20]
 8003266:	60a3      	str	r3, [r4, #8]
 8003268:	e7f4      	b.n	8003254 <__swsetup_r+0xb0>
 800326a:	2000      	movs	r0, #0
 800326c:	e7f7      	b.n	800325e <__swsetup_r+0xba>
 800326e:	bf00      	nop
 8003270:	20000010 	.word	0x20000010
 8003274:	080046c8 	.word	0x080046c8
 8003278:	080046e8 	.word	0x080046e8
 800327c:	080046a8 	.word	0x080046a8

08003280 <__sflush_r>:
 8003280:	898a      	ldrh	r2, [r1, #12]
 8003282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003286:	4605      	mov	r5, r0
 8003288:	0710      	lsls	r0, r2, #28
 800328a:	460c      	mov	r4, r1
 800328c:	d458      	bmi.n	8003340 <__sflush_r+0xc0>
 800328e:	684b      	ldr	r3, [r1, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	dc05      	bgt.n	80032a0 <__sflush_r+0x20>
 8003294:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	dc02      	bgt.n	80032a0 <__sflush_r+0x20>
 800329a:	2000      	movs	r0, #0
 800329c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032a2:	2e00      	cmp	r6, #0
 80032a4:	d0f9      	beq.n	800329a <__sflush_r+0x1a>
 80032a6:	2300      	movs	r3, #0
 80032a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032ac:	682f      	ldr	r7, [r5, #0]
 80032ae:	602b      	str	r3, [r5, #0]
 80032b0:	d032      	beq.n	8003318 <__sflush_r+0x98>
 80032b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032b4:	89a3      	ldrh	r3, [r4, #12]
 80032b6:	075a      	lsls	r2, r3, #29
 80032b8:	d505      	bpl.n	80032c6 <__sflush_r+0x46>
 80032ba:	6863      	ldr	r3, [r4, #4]
 80032bc:	1ac0      	subs	r0, r0, r3
 80032be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032c0:	b10b      	cbz	r3, 80032c6 <__sflush_r+0x46>
 80032c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032c4:	1ac0      	subs	r0, r0, r3
 80032c6:	2300      	movs	r3, #0
 80032c8:	4602      	mov	r2, r0
 80032ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032cc:	6a21      	ldr	r1, [r4, #32]
 80032ce:	4628      	mov	r0, r5
 80032d0:	47b0      	blx	r6
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	d106      	bne.n	80032e6 <__sflush_r+0x66>
 80032d8:	6829      	ldr	r1, [r5, #0]
 80032da:	291d      	cmp	r1, #29
 80032dc:	d82c      	bhi.n	8003338 <__sflush_r+0xb8>
 80032de:	4a2a      	ldr	r2, [pc, #168]	; (8003388 <__sflush_r+0x108>)
 80032e0:	40ca      	lsrs	r2, r1
 80032e2:	07d6      	lsls	r6, r2, #31
 80032e4:	d528      	bpl.n	8003338 <__sflush_r+0xb8>
 80032e6:	2200      	movs	r2, #0
 80032e8:	6062      	str	r2, [r4, #4]
 80032ea:	04d9      	lsls	r1, r3, #19
 80032ec:	6922      	ldr	r2, [r4, #16]
 80032ee:	6022      	str	r2, [r4, #0]
 80032f0:	d504      	bpl.n	80032fc <__sflush_r+0x7c>
 80032f2:	1c42      	adds	r2, r0, #1
 80032f4:	d101      	bne.n	80032fa <__sflush_r+0x7a>
 80032f6:	682b      	ldr	r3, [r5, #0]
 80032f8:	b903      	cbnz	r3, 80032fc <__sflush_r+0x7c>
 80032fa:	6560      	str	r0, [r4, #84]	; 0x54
 80032fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032fe:	602f      	str	r7, [r5, #0]
 8003300:	2900      	cmp	r1, #0
 8003302:	d0ca      	beq.n	800329a <__sflush_r+0x1a>
 8003304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003308:	4299      	cmp	r1, r3
 800330a:	d002      	beq.n	8003312 <__sflush_r+0x92>
 800330c:	4628      	mov	r0, r5
 800330e:	f000 f9d7 	bl	80036c0 <_free_r>
 8003312:	2000      	movs	r0, #0
 8003314:	6360      	str	r0, [r4, #52]	; 0x34
 8003316:	e7c1      	b.n	800329c <__sflush_r+0x1c>
 8003318:	6a21      	ldr	r1, [r4, #32]
 800331a:	2301      	movs	r3, #1
 800331c:	4628      	mov	r0, r5
 800331e:	47b0      	blx	r6
 8003320:	1c41      	adds	r1, r0, #1
 8003322:	d1c7      	bne.n	80032b4 <__sflush_r+0x34>
 8003324:	682b      	ldr	r3, [r5, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0c4      	beq.n	80032b4 <__sflush_r+0x34>
 800332a:	2b1d      	cmp	r3, #29
 800332c:	d001      	beq.n	8003332 <__sflush_r+0xb2>
 800332e:	2b16      	cmp	r3, #22
 8003330:	d101      	bne.n	8003336 <__sflush_r+0xb6>
 8003332:	602f      	str	r7, [r5, #0]
 8003334:	e7b1      	b.n	800329a <__sflush_r+0x1a>
 8003336:	89a3      	ldrh	r3, [r4, #12]
 8003338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800333c:	81a3      	strh	r3, [r4, #12]
 800333e:	e7ad      	b.n	800329c <__sflush_r+0x1c>
 8003340:	690f      	ldr	r7, [r1, #16]
 8003342:	2f00      	cmp	r7, #0
 8003344:	d0a9      	beq.n	800329a <__sflush_r+0x1a>
 8003346:	0793      	lsls	r3, r2, #30
 8003348:	680e      	ldr	r6, [r1, #0]
 800334a:	bf08      	it	eq
 800334c:	694b      	ldreq	r3, [r1, #20]
 800334e:	600f      	str	r7, [r1, #0]
 8003350:	bf18      	it	ne
 8003352:	2300      	movne	r3, #0
 8003354:	eba6 0807 	sub.w	r8, r6, r7
 8003358:	608b      	str	r3, [r1, #8]
 800335a:	f1b8 0f00 	cmp.w	r8, #0
 800335e:	dd9c      	ble.n	800329a <__sflush_r+0x1a>
 8003360:	6a21      	ldr	r1, [r4, #32]
 8003362:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003364:	4643      	mov	r3, r8
 8003366:	463a      	mov	r2, r7
 8003368:	4628      	mov	r0, r5
 800336a:	47b0      	blx	r6
 800336c:	2800      	cmp	r0, #0
 800336e:	dc06      	bgt.n	800337e <__sflush_r+0xfe>
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003376:	81a3      	strh	r3, [r4, #12]
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	e78e      	b.n	800329c <__sflush_r+0x1c>
 800337e:	4407      	add	r7, r0
 8003380:	eba8 0800 	sub.w	r8, r8, r0
 8003384:	e7e9      	b.n	800335a <__sflush_r+0xda>
 8003386:	bf00      	nop
 8003388:	20400001 	.word	0x20400001

0800338c <_fflush_r>:
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	690b      	ldr	r3, [r1, #16]
 8003390:	4605      	mov	r5, r0
 8003392:	460c      	mov	r4, r1
 8003394:	b913      	cbnz	r3, 800339c <_fflush_r+0x10>
 8003396:	2500      	movs	r5, #0
 8003398:	4628      	mov	r0, r5
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	b118      	cbz	r0, 80033a6 <_fflush_r+0x1a>
 800339e:	6983      	ldr	r3, [r0, #24]
 80033a0:	b90b      	cbnz	r3, 80033a6 <_fflush_r+0x1a>
 80033a2:	f000 f887 	bl	80034b4 <__sinit>
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <_fflush_r+0x6c>)
 80033a8:	429c      	cmp	r4, r3
 80033aa:	d11b      	bne.n	80033e4 <_fflush_r+0x58>
 80033ac:	686c      	ldr	r4, [r5, #4]
 80033ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ef      	beq.n	8003396 <_fflush_r+0xa>
 80033b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033b8:	07d0      	lsls	r0, r2, #31
 80033ba:	d404      	bmi.n	80033c6 <_fflush_r+0x3a>
 80033bc:	0599      	lsls	r1, r3, #22
 80033be:	d402      	bmi.n	80033c6 <_fflush_r+0x3a>
 80033c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033c2:	f000 f915 	bl	80035f0 <__retarget_lock_acquire_recursive>
 80033c6:	4628      	mov	r0, r5
 80033c8:	4621      	mov	r1, r4
 80033ca:	f7ff ff59 	bl	8003280 <__sflush_r>
 80033ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033d0:	07da      	lsls	r2, r3, #31
 80033d2:	4605      	mov	r5, r0
 80033d4:	d4e0      	bmi.n	8003398 <_fflush_r+0xc>
 80033d6:	89a3      	ldrh	r3, [r4, #12]
 80033d8:	059b      	lsls	r3, r3, #22
 80033da:	d4dd      	bmi.n	8003398 <_fflush_r+0xc>
 80033dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033de:	f000 f908 	bl	80035f2 <__retarget_lock_release_recursive>
 80033e2:	e7d9      	b.n	8003398 <_fflush_r+0xc>
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <_fflush_r+0x70>)
 80033e6:	429c      	cmp	r4, r3
 80033e8:	d101      	bne.n	80033ee <_fflush_r+0x62>
 80033ea:	68ac      	ldr	r4, [r5, #8]
 80033ec:	e7df      	b.n	80033ae <_fflush_r+0x22>
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <_fflush_r+0x74>)
 80033f0:	429c      	cmp	r4, r3
 80033f2:	bf08      	it	eq
 80033f4:	68ec      	ldreq	r4, [r5, #12]
 80033f6:	e7da      	b.n	80033ae <_fflush_r+0x22>
 80033f8:	080046c8 	.word	0x080046c8
 80033fc:	080046e8 	.word	0x080046e8
 8003400:	080046a8 	.word	0x080046a8

08003404 <std>:
 8003404:	2300      	movs	r3, #0
 8003406:	b510      	push	{r4, lr}
 8003408:	4604      	mov	r4, r0
 800340a:	e9c0 3300 	strd	r3, r3, [r0]
 800340e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003412:	6083      	str	r3, [r0, #8]
 8003414:	8181      	strh	r1, [r0, #12]
 8003416:	6643      	str	r3, [r0, #100]	; 0x64
 8003418:	81c2      	strh	r2, [r0, #14]
 800341a:	6183      	str	r3, [r0, #24]
 800341c:	4619      	mov	r1, r3
 800341e:	2208      	movs	r2, #8
 8003420:	305c      	adds	r0, #92	; 0x5c
 8003422:	f7ff fdd7 	bl	8002fd4 <memset>
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <std+0x38>)
 8003428:	6263      	str	r3, [r4, #36]	; 0x24
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <std+0x3c>)
 800342c:	62a3      	str	r3, [r4, #40]	; 0x28
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <std+0x40>)
 8003430:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <std+0x44>)
 8003434:	6224      	str	r4, [r4, #32]
 8003436:	6323      	str	r3, [r4, #48]	; 0x30
 8003438:	bd10      	pop	{r4, pc}
 800343a:	bf00      	nop
 800343c:	08003e7d 	.word	0x08003e7d
 8003440:	08003e9f 	.word	0x08003e9f
 8003444:	08003ed7 	.word	0x08003ed7
 8003448:	08003efb 	.word	0x08003efb

0800344c <_cleanup_r>:
 800344c:	4901      	ldr	r1, [pc, #4]	; (8003454 <_cleanup_r+0x8>)
 800344e:	f000 b8af 	b.w	80035b0 <_fwalk_reent>
 8003452:	bf00      	nop
 8003454:	0800338d 	.word	0x0800338d

08003458 <__sfmoreglue>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	2268      	movs	r2, #104	; 0x68
 800345c:	1e4d      	subs	r5, r1, #1
 800345e:	4355      	muls	r5, r2
 8003460:	460e      	mov	r6, r1
 8003462:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003466:	f000 f997 	bl	8003798 <_malloc_r>
 800346a:	4604      	mov	r4, r0
 800346c:	b140      	cbz	r0, 8003480 <__sfmoreglue+0x28>
 800346e:	2100      	movs	r1, #0
 8003470:	e9c0 1600 	strd	r1, r6, [r0]
 8003474:	300c      	adds	r0, #12
 8003476:	60a0      	str	r0, [r4, #8]
 8003478:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800347c:	f7ff fdaa 	bl	8002fd4 <memset>
 8003480:	4620      	mov	r0, r4
 8003482:	bd70      	pop	{r4, r5, r6, pc}

08003484 <__sfp_lock_acquire>:
 8003484:	4801      	ldr	r0, [pc, #4]	; (800348c <__sfp_lock_acquire+0x8>)
 8003486:	f000 b8b3 	b.w	80035f0 <__retarget_lock_acquire_recursive>
 800348a:	bf00      	nop
 800348c:	2000017d 	.word	0x2000017d

08003490 <__sfp_lock_release>:
 8003490:	4801      	ldr	r0, [pc, #4]	; (8003498 <__sfp_lock_release+0x8>)
 8003492:	f000 b8ae 	b.w	80035f2 <__retarget_lock_release_recursive>
 8003496:	bf00      	nop
 8003498:	2000017d 	.word	0x2000017d

0800349c <__sinit_lock_acquire>:
 800349c:	4801      	ldr	r0, [pc, #4]	; (80034a4 <__sinit_lock_acquire+0x8>)
 800349e:	f000 b8a7 	b.w	80035f0 <__retarget_lock_acquire_recursive>
 80034a2:	bf00      	nop
 80034a4:	2000017e 	.word	0x2000017e

080034a8 <__sinit_lock_release>:
 80034a8:	4801      	ldr	r0, [pc, #4]	; (80034b0 <__sinit_lock_release+0x8>)
 80034aa:	f000 b8a2 	b.w	80035f2 <__retarget_lock_release_recursive>
 80034ae:	bf00      	nop
 80034b0:	2000017e 	.word	0x2000017e

080034b4 <__sinit>:
 80034b4:	b510      	push	{r4, lr}
 80034b6:	4604      	mov	r4, r0
 80034b8:	f7ff fff0 	bl	800349c <__sinit_lock_acquire>
 80034bc:	69a3      	ldr	r3, [r4, #24]
 80034be:	b11b      	cbz	r3, 80034c8 <__sinit+0x14>
 80034c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034c4:	f7ff bff0 	b.w	80034a8 <__sinit_lock_release>
 80034c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80034cc:	6523      	str	r3, [r4, #80]	; 0x50
 80034ce:	4b13      	ldr	r3, [pc, #76]	; (800351c <__sinit+0x68>)
 80034d0:	4a13      	ldr	r2, [pc, #76]	; (8003520 <__sinit+0x6c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80034d6:	42a3      	cmp	r3, r4
 80034d8:	bf04      	itt	eq
 80034da:	2301      	moveq	r3, #1
 80034dc:	61a3      	streq	r3, [r4, #24]
 80034de:	4620      	mov	r0, r4
 80034e0:	f000 f820 	bl	8003524 <__sfp>
 80034e4:	6060      	str	r0, [r4, #4]
 80034e6:	4620      	mov	r0, r4
 80034e8:	f000 f81c 	bl	8003524 <__sfp>
 80034ec:	60a0      	str	r0, [r4, #8]
 80034ee:	4620      	mov	r0, r4
 80034f0:	f000 f818 	bl	8003524 <__sfp>
 80034f4:	2200      	movs	r2, #0
 80034f6:	60e0      	str	r0, [r4, #12]
 80034f8:	2104      	movs	r1, #4
 80034fa:	6860      	ldr	r0, [r4, #4]
 80034fc:	f7ff ff82 	bl	8003404 <std>
 8003500:	68a0      	ldr	r0, [r4, #8]
 8003502:	2201      	movs	r2, #1
 8003504:	2109      	movs	r1, #9
 8003506:	f7ff ff7d 	bl	8003404 <std>
 800350a:	68e0      	ldr	r0, [r4, #12]
 800350c:	2202      	movs	r2, #2
 800350e:	2112      	movs	r1, #18
 8003510:	f7ff ff78 	bl	8003404 <std>
 8003514:	2301      	movs	r3, #1
 8003516:	61a3      	str	r3, [r4, #24]
 8003518:	e7d2      	b.n	80034c0 <__sinit+0xc>
 800351a:	bf00      	nop
 800351c:	080046a4 	.word	0x080046a4
 8003520:	0800344d 	.word	0x0800344d

08003524 <__sfp>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	4607      	mov	r7, r0
 8003528:	f7ff ffac 	bl	8003484 <__sfp_lock_acquire>
 800352c:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <__sfp+0x84>)
 800352e:	681e      	ldr	r6, [r3, #0]
 8003530:	69b3      	ldr	r3, [r6, #24]
 8003532:	b913      	cbnz	r3, 800353a <__sfp+0x16>
 8003534:	4630      	mov	r0, r6
 8003536:	f7ff ffbd 	bl	80034b4 <__sinit>
 800353a:	3648      	adds	r6, #72	; 0x48
 800353c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003540:	3b01      	subs	r3, #1
 8003542:	d503      	bpl.n	800354c <__sfp+0x28>
 8003544:	6833      	ldr	r3, [r6, #0]
 8003546:	b30b      	cbz	r3, 800358c <__sfp+0x68>
 8003548:	6836      	ldr	r6, [r6, #0]
 800354a:	e7f7      	b.n	800353c <__sfp+0x18>
 800354c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003550:	b9d5      	cbnz	r5, 8003588 <__sfp+0x64>
 8003552:	4b16      	ldr	r3, [pc, #88]	; (80035ac <__sfp+0x88>)
 8003554:	60e3      	str	r3, [r4, #12]
 8003556:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800355a:	6665      	str	r5, [r4, #100]	; 0x64
 800355c:	f000 f847 	bl	80035ee <__retarget_lock_init_recursive>
 8003560:	f7ff ff96 	bl	8003490 <__sfp_lock_release>
 8003564:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003568:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800356c:	6025      	str	r5, [r4, #0]
 800356e:	61a5      	str	r5, [r4, #24]
 8003570:	2208      	movs	r2, #8
 8003572:	4629      	mov	r1, r5
 8003574:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003578:	f7ff fd2c 	bl	8002fd4 <memset>
 800357c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003580:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003584:	4620      	mov	r0, r4
 8003586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003588:	3468      	adds	r4, #104	; 0x68
 800358a:	e7d9      	b.n	8003540 <__sfp+0x1c>
 800358c:	2104      	movs	r1, #4
 800358e:	4638      	mov	r0, r7
 8003590:	f7ff ff62 	bl	8003458 <__sfmoreglue>
 8003594:	4604      	mov	r4, r0
 8003596:	6030      	str	r0, [r6, #0]
 8003598:	2800      	cmp	r0, #0
 800359a:	d1d5      	bne.n	8003548 <__sfp+0x24>
 800359c:	f7ff ff78 	bl	8003490 <__sfp_lock_release>
 80035a0:	230c      	movs	r3, #12
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	e7ee      	b.n	8003584 <__sfp+0x60>
 80035a6:	bf00      	nop
 80035a8:	080046a4 	.word	0x080046a4
 80035ac:	ffff0001 	.word	0xffff0001

080035b0 <_fwalk_reent>:
 80035b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035b4:	4606      	mov	r6, r0
 80035b6:	4688      	mov	r8, r1
 80035b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80035bc:	2700      	movs	r7, #0
 80035be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035c2:	f1b9 0901 	subs.w	r9, r9, #1
 80035c6:	d505      	bpl.n	80035d4 <_fwalk_reent+0x24>
 80035c8:	6824      	ldr	r4, [r4, #0]
 80035ca:	2c00      	cmp	r4, #0
 80035cc:	d1f7      	bne.n	80035be <_fwalk_reent+0xe>
 80035ce:	4638      	mov	r0, r7
 80035d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035d4:	89ab      	ldrh	r3, [r5, #12]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d907      	bls.n	80035ea <_fwalk_reent+0x3a>
 80035da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035de:	3301      	adds	r3, #1
 80035e0:	d003      	beq.n	80035ea <_fwalk_reent+0x3a>
 80035e2:	4629      	mov	r1, r5
 80035e4:	4630      	mov	r0, r6
 80035e6:	47c0      	blx	r8
 80035e8:	4307      	orrs	r7, r0
 80035ea:	3568      	adds	r5, #104	; 0x68
 80035ec:	e7e9      	b.n	80035c2 <_fwalk_reent+0x12>

080035ee <__retarget_lock_init_recursive>:
 80035ee:	4770      	bx	lr

080035f0 <__retarget_lock_acquire_recursive>:
 80035f0:	4770      	bx	lr

080035f2 <__retarget_lock_release_recursive>:
 80035f2:	4770      	bx	lr

080035f4 <__swhatbuf_r>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	460e      	mov	r6, r1
 80035f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035fc:	2900      	cmp	r1, #0
 80035fe:	b096      	sub	sp, #88	; 0x58
 8003600:	4614      	mov	r4, r2
 8003602:	461d      	mov	r5, r3
 8003604:	da08      	bge.n	8003618 <__swhatbuf_r+0x24>
 8003606:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	602a      	str	r2, [r5, #0]
 800360e:	061a      	lsls	r2, r3, #24
 8003610:	d410      	bmi.n	8003634 <__swhatbuf_r+0x40>
 8003612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003616:	e00e      	b.n	8003636 <__swhatbuf_r+0x42>
 8003618:	466a      	mov	r2, sp
 800361a:	f000 fc95 	bl	8003f48 <_fstat_r>
 800361e:	2800      	cmp	r0, #0
 8003620:	dbf1      	blt.n	8003606 <__swhatbuf_r+0x12>
 8003622:	9a01      	ldr	r2, [sp, #4]
 8003624:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003628:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800362c:	425a      	negs	r2, r3
 800362e:	415a      	adcs	r2, r3
 8003630:	602a      	str	r2, [r5, #0]
 8003632:	e7ee      	b.n	8003612 <__swhatbuf_r+0x1e>
 8003634:	2340      	movs	r3, #64	; 0x40
 8003636:	2000      	movs	r0, #0
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	b016      	add	sp, #88	; 0x58
 800363c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003640 <__smakebuf_r>:
 8003640:	898b      	ldrh	r3, [r1, #12]
 8003642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003644:	079d      	lsls	r5, r3, #30
 8003646:	4606      	mov	r6, r0
 8003648:	460c      	mov	r4, r1
 800364a:	d507      	bpl.n	800365c <__smakebuf_r+0x1c>
 800364c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	6123      	str	r3, [r4, #16]
 8003654:	2301      	movs	r3, #1
 8003656:	6163      	str	r3, [r4, #20]
 8003658:	b002      	add	sp, #8
 800365a:	bd70      	pop	{r4, r5, r6, pc}
 800365c:	ab01      	add	r3, sp, #4
 800365e:	466a      	mov	r2, sp
 8003660:	f7ff ffc8 	bl	80035f4 <__swhatbuf_r>
 8003664:	9900      	ldr	r1, [sp, #0]
 8003666:	4605      	mov	r5, r0
 8003668:	4630      	mov	r0, r6
 800366a:	f000 f895 	bl	8003798 <_malloc_r>
 800366e:	b948      	cbnz	r0, 8003684 <__smakebuf_r+0x44>
 8003670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003674:	059a      	lsls	r2, r3, #22
 8003676:	d4ef      	bmi.n	8003658 <__smakebuf_r+0x18>
 8003678:	f023 0303 	bic.w	r3, r3, #3
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	e7e3      	b.n	800364c <__smakebuf_r+0xc>
 8003684:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <__smakebuf_r+0x7c>)
 8003686:	62b3      	str	r3, [r6, #40]	; 0x28
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	6020      	str	r0, [r4, #0]
 800368c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003690:	81a3      	strh	r3, [r4, #12]
 8003692:	9b00      	ldr	r3, [sp, #0]
 8003694:	6163      	str	r3, [r4, #20]
 8003696:	9b01      	ldr	r3, [sp, #4]
 8003698:	6120      	str	r0, [r4, #16]
 800369a:	b15b      	cbz	r3, 80036b4 <__smakebuf_r+0x74>
 800369c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036a0:	4630      	mov	r0, r6
 80036a2:	f000 fc63 	bl	8003f6c <_isatty_r>
 80036a6:	b128      	cbz	r0, 80036b4 <__smakebuf_r+0x74>
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	89a0      	ldrh	r0, [r4, #12]
 80036b6:	4305      	orrs	r5, r0
 80036b8:	81a5      	strh	r5, [r4, #12]
 80036ba:	e7cd      	b.n	8003658 <__smakebuf_r+0x18>
 80036bc:	0800344d 	.word	0x0800344d

080036c0 <_free_r>:
 80036c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036c2:	2900      	cmp	r1, #0
 80036c4:	d044      	beq.n	8003750 <_free_r+0x90>
 80036c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036ca:	9001      	str	r0, [sp, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f1a1 0404 	sub.w	r4, r1, #4
 80036d2:	bfb8      	it	lt
 80036d4:	18e4      	addlt	r4, r4, r3
 80036d6:	f000 fc6b 	bl	8003fb0 <__malloc_lock>
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <_free_r+0x94>)
 80036dc:	9801      	ldr	r0, [sp, #4]
 80036de:	6813      	ldr	r3, [r2, #0]
 80036e0:	b933      	cbnz	r3, 80036f0 <_free_r+0x30>
 80036e2:	6063      	str	r3, [r4, #4]
 80036e4:	6014      	str	r4, [r2, #0]
 80036e6:	b003      	add	sp, #12
 80036e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036ec:	f000 bc66 	b.w	8003fbc <__malloc_unlock>
 80036f0:	42a3      	cmp	r3, r4
 80036f2:	d908      	bls.n	8003706 <_free_r+0x46>
 80036f4:	6825      	ldr	r5, [r4, #0]
 80036f6:	1961      	adds	r1, r4, r5
 80036f8:	428b      	cmp	r3, r1
 80036fa:	bf01      	itttt	eq
 80036fc:	6819      	ldreq	r1, [r3, #0]
 80036fe:	685b      	ldreq	r3, [r3, #4]
 8003700:	1949      	addeq	r1, r1, r5
 8003702:	6021      	streq	r1, [r4, #0]
 8003704:	e7ed      	b.n	80036e2 <_free_r+0x22>
 8003706:	461a      	mov	r2, r3
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	b10b      	cbz	r3, 8003710 <_free_r+0x50>
 800370c:	42a3      	cmp	r3, r4
 800370e:	d9fa      	bls.n	8003706 <_free_r+0x46>
 8003710:	6811      	ldr	r1, [r2, #0]
 8003712:	1855      	adds	r5, r2, r1
 8003714:	42a5      	cmp	r5, r4
 8003716:	d10b      	bne.n	8003730 <_free_r+0x70>
 8003718:	6824      	ldr	r4, [r4, #0]
 800371a:	4421      	add	r1, r4
 800371c:	1854      	adds	r4, r2, r1
 800371e:	42a3      	cmp	r3, r4
 8003720:	6011      	str	r1, [r2, #0]
 8003722:	d1e0      	bne.n	80036e6 <_free_r+0x26>
 8003724:	681c      	ldr	r4, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	6053      	str	r3, [r2, #4]
 800372a:	4421      	add	r1, r4
 800372c:	6011      	str	r1, [r2, #0]
 800372e:	e7da      	b.n	80036e6 <_free_r+0x26>
 8003730:	d902      	bls.n	8003738 <_free_r+0x78>
 8003732:	230c      	movs	r3, #12
 8003734:	6003      	str	r3, [r0, #0]
 8003736:	e7d6      	b.n	80036e6 <_free_r+0x26>
 8003738:	6825      	ldr	r5, [r4, #0]
 800373a:	1961      	adds	r1, r4, r5
 800373c:	428b      	cmp	r3, r1
 800373e:	bf04      	itt	eq
 8003740:	6819      	ldreq	r1, [r3, #0]
 8003742:	685b      	ldreq	r3, [r3, #4]
 8003744:	6063      	str	r3, [r4, #4]
 8003746:	bf04      	itt	eq
 8003748:	1949      	addeq	r1, r1, r5
 800374a:	6021      	streq	r1, [r4, #0]
 800374c:	6054      	str	r4, [r2, #4]
 800374e:	e7ca      	b.n	80036e6 <_free_r+0x26>
 8003750:	b003      	add	sp, #12
 8003752:	bd30      	pop	{r4, r5, pc}
 8003754:	20000180 	.word	0x20000180

08003758 <sbrk_aligned>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4e0e      	ldr	r6, [pc, #56]	; (8003794 <sbrk_aligned+0x3c>)
 800375c:	460c      	mov	r4, r1
 800375e:	6831      	ldr	r1, [r6, #0]
 8003760:	4605      	mov	r5, r0
 8003762:	b911      	cbnz	r1, 800376a <sbrk_aligned+0x12>
 8003764:	f000 fb7a 	bl	8003e5c <_sbrk_r>
 8003768:	6030      	str	r0, [r6, #0]
 800376a:	4621      	mov	r1, r4
 800376c:	4628      	mov	r0, r5
 800376e:	f000 fb75 	bl	8003e5c <_sbrk_r>
 8003772:	1c43      	adds	r3, r0, #1
 8003774:	d00a      	beq.n	800378c <sbrk_aligned+0x34>
 8003776:	1cc4      	adds	r4, r0, #3
 8003778:	f024 0403 	bic.w	r4, r4, #3
 800377c:	42a0      	cmp	r0, r4
 800377e:	d007      	beq.n	8003790 <sbrk_aligned+0x38>
 8003780:	1a21      	subs	r1, r4, r0
 8003782:	4628      	mov	r0, r5
 8003784:	f000 fb6a 	bl	8003e5c <_sbrk_r>
 8003788:	3001      	adds	r0, #1
 800378a:	d101      	bne.n	8003790 <sbrk_aligned+0x38>
 800378c:	f04f 34ff 	mov.w	r4, #4294967295
 8003790:	4620      	mov	r0, r4
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	20000184 	.word	0x20000184

08003798 <_malloc_r>:
 8003798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800379c:	1ccd      	adds	r5, r1, #3
 800379e:	f025 0503 	bic.w	r5, r5, #3
 80037a2:	3508      	adds	r5, #8
 80037a4:	2d0c      	cmp	r5, #12
 80037a6:	bf38      	it	cc
 80037a8:	250c      	movcc	r5, #12
 80037aa:	2d00      	cmp	r5, #0
 80037ac:	4607      	mov	r7, r0
 80037ae:	db01      	blt.n	80037b4 <_malloc_r+0x1c>
 80037b0:	42a9      	cmp	r1, r5
 80037b2:	d905      	bls.n	80037c0 <_malloc_r+0x28>
 80037b4:	230c      	movs	r3, #12
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	2600      	movs	r6, #0
 80037ba:	4630      	mov	r0, r6
 80037bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037c0:	4e2e      	ldr	r6, [pc, #184]	; (800387c <_malloc_r+0xe4>)
 80037c2:	f000 fbf5 	bl	8003fb0 <__malloc_lock>
 80037c6:	6833      	ldr	r3, [r6, #0]
 80037c8:	461c      	mov	r4, r3
 80037ca:	bb34      	cbnz	r4, 800381a <_malloc_r+0x82>
 80037cc:	4629      	mov	r1, r5
 80037ce:	4638      	mov	r0, r7
 80037d0:	f7ff ffc2 	bl	8003758 <sbrk_aligned>
 80037d4:	1c43      	adds	r3, r0, #1
 80037d6:	4604      	mov	r4, r0
 80037d8:	d14d      	bne.n	8003876 <_malloc_r+0xde>
 80037da:	6834      	ldr	r4, [r6, #0]
 80037dc:	4626      	mov	r6, r4
 80037de:	2e00      	cmp	r6, #0
 80037e0:	d140      	bne.n	8003864 <_malloc_r+0xcc>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	4631      	mov	r1, r6
 80037e6:	4638      	mov	r0, r7
 80037e8:	eb04 0803 	add.w	r8, r4, r3
 80037ec:	f000 fb36 	bl	8003e5c <_sbrk_r>
 80037f0:	4580      	cmp	r8, r0
 80037f2:	d13a      	bne.n	800386a <_malloc_r+0xd2>
 80037f4:	6821      	ldr	r1, [r4, #0]
 80037f6:	3503      	adds	r5, #3
 80037f8:	1a6d      	subs	r5, r5, r1
 80037fa:	f025 0503 	bic.w	r5, r5, #3
 80037fe:	3508      	adds	r5, #8
 8003800:	2d0c      	cmp	r5, #12
 8003802:	bf38      	it	cc
 8003804:	250c      	movcc	r5, #12
 8003806:	4629      	mov	r1, r5
 8003808:	4638      	mov	r0, r7
 800380a:	f7ff ffa5 	bl	8003758 <sbrk_aligned>
 800380e:	3001      	adds	r0, #1
 8003810:	d02b      	beq.n	800386a <_malloc_r+0xd2>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	442b      	add	r3, r5
 8003816:	6023      	str	r3, [r4, #0]
 8003818:	e00e      	b.n	8003838 <_malloc_r+0xa0>
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	1b52      	subs	r2, r2, r5
 800381e:	d41e      	bmi.n	800385e <_malloc_r+0xc6>
 8003820:	2a0b      	cmp	r2, #11
 8003822:	d916      	bls.n	8003852 <_malloc_r+0xba>
 8003824:	1961      	adds	r1, r4, r5
 8003826:	42a3      	cmp	r3, r4
 8003828:	6025      	str	r5, [r4, #0]
 800382a:	bf18      	it	ne
 800382c:	6059      	strne	r1, [r3, #4]
 800382e:	6863      	ldr	r3, [r4, #4]
 8003830:	bf08      	it	eq
 8003832:	6031      	streq	r1, [r6, #0]
 8003834:	5162      	str	r2, [r4, r5]
 8003836:	604b      	str	r3, [r1, #4]
 8003838:	4638      	mov	r0, r7
 800383a:	f104 060b 	add.w	r6, r4, #11
 800383e:	f000 fbbd 	bl	8003fbc <__malloc_unlock>
 8003842:	f026 0607 	bic.w	r6, r6, #7
 8003846:	1d23      	adds	r3, r4, #4
 8003848:	1af2      	subs	r2, r6, r3
 800384a:	d0b6      	beq.n	80037ba <_malloc_r+0x22>
 800384c:	1b9b      	subs	r3, r3, r6
 800384e:	50a3      	str	r3, [r4, r2]
 8003850:	e7b3      	b.n	80037ba <_malloc_r+0x22>
 8003852:	6862      	ldr	r2, [r4, #4]
 8003854:	42a3      	cmp	r3, r4
 8003856:	bf0c      	ite	eq
 8003858:	6032      	streq	r2, [r6, #0]
 800385a:	605a      	strne	r2, [r3, #4]
 800385c:	e7ec      	b.n	8003838 <_malloc_r+0xa0>
 800385e:	4623      	mov	r3, r4
 8003860:	6864      	ldr	r4, [r4, #4]
 8003862:	e7b2      	b.n	80037ca <_malloc_r+0x32>
 8003864:	4634      	mov	r4, r6
 8003866:	6876      	ldr	r6, [r6, #4]
 8003868:	e7b9      	b.n	80037de <_malloc_r+0x46>
 800386a:	230c      	movs	r3, #12
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	4638      	mov	r0, r7
 8003870:	f000 fba4 	bl	8003fbc <__malloc_unlock>
 8003874:	e7a1      	b.n	80037ba <_malloc_r+0x22>
 8003876:	6025      	str	r5, [r4, #0]
 8003878:	e7de      	b.n	8003838 <_malloc_r+0xa0>
 800387a:	bf00      	nop
 800387c:	20000180 	.word	0x20000180

08003880 <__sfputc_r>:
 8003880:	6893      	ldr	r3, [r2, #8]
 8003882:	3b01      	subs	r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	b410      	push	{r4}
 8003888:	6093      	str	r3, [r2, #8]
 800388a:	da08      	bge.n	800389e <__sfputc_r+0x1e>
 800388c:	6994      	ldr	r4, [r2, #24]
 800388e:	42a3      	cmp	r3, r4
 8003890:	db01      	blt.n	8003896 <__sfputc_r+0x16>
 8003892:	290a      	cmp	r1, #10
 8003894:	d103      	bne.n	800389e <__sfputc_r+0x1e>
 8003896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800389a:	f7ff bc31 	b.w	8003100 <__swbuf_r>
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	1c58      	adds	r0, r3, #1
 80038a2:	6010      	str	r0, [r2, #0]
 80038a4:	7019      	strb	r1, [r3, #0]
 80038a6:	4608      	mov	r0, r1
 80038a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <__sfputs_r>:
 80038ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b0:	4606      	mov	r6, r0
 80038b2:	460f      	mov	r7, r1
 80038b4:	4614      	mov	r4, r2
 80038b6:	18d5      	adds	r5, r2, r3
 80038b8:	42ac      	cmp	r4, r5
 80038ba:	d101      	bne.n	80038c0 <__sfputs_r+0x12>
 80038bc:	2000      	movs	r0, #0
 80038be:	e007      	b.n	80038d0 <__sfputs_r+0x22>
 80038c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038c4:	463a      	mov	r2, r7
 80038c6:	4630      	mov	r0, r6
 80038c8:	f7ff ffda 	bl	8003880 <__sfputc_r>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d1f3      	bne.n	80038b8 <__sfputs_r+0xa>
 80038d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038d4 <_vfiprintf_r>:
 80038d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d8:	460d      	mov	r5, r1
 80038da:	b09d      	sub	sp, #116	; 0x74
 80038dc:	4614      	mov	r4, r2
 80038de:	4698      	mov	r8, r3
 80038e0:	4606      	mov	r6, r0
 80038e2:	b118      	cbz	r0, 80038ec <_vfiprintf_r+0x18>
 80038e4:	6983      	ldr	r3, [r0, #24]
 80038e6:	b90b      	cbnz	r3, 80038ec <_vfiprintf_r+0x18>
 80038e8:	f7ff fde4 	bl	80034b4 <__sinit>
 80038ec:	4b89      	ldr	r3, [pc, #548]	; (8003b14 <_vfiprintf_r+0x240>)
 80038ee:	429d      	cmp	r5, r3
 80038f0:	d11b      	bne.n	800392a <_vfiprintf_r+0x56>
 80038f2:	6875      	ldr	r5, [r6, #4]
 80038f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038f6:	07d9      	lsls	r1, r3, #31
 80038f8:	d405      	bmi.n	8003906 <_vfiprintf_r+0x32>
 80038fa:	89ab      	ldrh	r3, [r5, #12]
 80038fc:	059a      	lsls	r2, r3, #22
 80038fe:	d402      	bmi.n	8003906 <_vfiprintf_r+0x32>
 8003900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003902:	f7ff fe75 	bl	80035f0 <__retarget_lock_acquire_recursive>
 8003906:	89ab      	ldrh	r3, [r5, #12]
 8003908:	071b      	lsls	r3, r3, #28
 800390a:	d501      	bpl.n	8003910 <_vfiprintf_r+0x3c>
 800390c:	692b      	ldr	r3, [r5, #16]
 800390e:	b9eb      	cbnz	r3, 800394c <_vfiprintf_r+0x78>
 8003910:	4629      	mov	r1, r5
 8003912:	4630      	mov	r0, r6
 8003914:	f7ff fc46 	bl	80031a4 <__swsetup_r>
 8003918:	b1c0      	cbz	r0, 800394c <_vfiprintf_r+0x78>
 800391a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800391c:	07dc      	lsls	r4, r3, #31
 800391e:	d50e      	bpl.n	800393e <_vfiprintf_r+0x6a>
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	b01d      	add	sp, #116	; 0x74
 8003926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392a:	4b7b      	ldr	r3, [pc, #492]	; (8003b18 <_vfiprintf_r+0x244>)
 800392c:	429d      	cmp	r5, r3
 800392e:	d101      	bne.n	8003934 <_vfiprintf_r+0x60>
 8003930:	68b5      	ldr	r5, [r6, #8]
 8003932:	e7df      	b.n	80038f4 <_vfiprintf_r+0x20>
 8003934:	4b79      	ldr	r3, [pc, #484]	; (8003b1c <_vfiprintf_r+0x248>)
 8003936:	429d      	cmp	r5, r3
 8003938:	bf08      	it	eq
 800393a:	68f5      	ldreq	r5, [r6, #12]
 800393c:	e7da      	b.n	80038f4 <_vfiprintf_r+0x20>
 800393e:	89ab      	ldrh	r3, [r5, #12]
 8003940:	0598      	lsls	r0, r3, #22
 8003942:	d4ed      	bmi.n	8003920 <_vfiprintf_r+0x4c>
 8003944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003946:	f7ff fe54 	bl	80035f2 <__retarget_lock_release_recursive>
 800394a:	e7e9      	b.n	8003920 <_vfiprintf_r+0x4c>
 800394c:	2300      	movs	r3, #0
 800394e:	9309      	str	r3, [sp, #36]	; 0x24
 8003950:	2320      	movs	r3, #32
 8003952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003956:	f8cd 800c 	str.w	r8, [sp, #12]
 800395a:	2330      	movs	r3, #48	; 0x30
 800395c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b20 <_vfiprintf_r+0x24c>
 8003960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003964:	f04f 0901 	mov.w	r9, #1
 8003968:	4623      	mov	r3, r4
 800396a:	469a      	mov	sl, r3
 800396c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003970:	b10a      	cbz	r2, 8003976 <_vfiprintf_r+0xa2>
 8003972:	2a25      	cmp	r2, #37	; 0x25
 8003974:	d1f9      	bne.n	800396a <_vfiprintf_r+0x96>
 8003976:	ebba 0b04 	subs.w	fp, sl, r4
 800397a:	d00b      	beq.n	8003994 <_vfiprintf_r+0xc0>
 800397c:	465b      	mov	r3, fp
 800397e:	4622      	mov	r2, r4
 8003980:	4629      	mov	r1, r5
 8003982:	4630      	mov	r0, r6
 8003984:	f7ff ff93 	bl	80038ae <__sfputs_r>
 8003988:	3001      	adds	r0, #1
 800398a:	f000 80aa 	beq.w	8003ae2 <_vfiprintf_r+0x20e>
 800398e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003990:	445a      	add	r2, fp
 8003992:	9209      	str	r2, [sp, #36]	; 0x24
 8003994:	f89a 3000 	ldrb.w	r3, [sl]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80a2 	beq.w	8003ae2 <_vfiprintf_r+0x20e>
 800399e:	2300      	movs	r3, #0
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039a8:	f10a 0a01 	add.w	sl, sl, #1
 80039ac:	9304      	str	r3, [sp, #16]
 80039ae:	9307      	str	r3, [sp, #28]
 80039b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039b4:	931a      	str	r3, [sp, #104]	; 0x68
 80039b6:	4654      	mov	r4, sl
 80039b8:	2205      	movs	r2, #5
 80039ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039be:	4858      	ldr	r0, [pc, #352]	; (8003b20 <_vfiprintf_r+0x24c>)
 80039c0:	f7fc fbde 	bl	8000180 <memchr>
 80039c4:	9a04      	ldr	r2, [sp, #16]
 80039c6:	b9d8      	cbnz	r0, 8003a00 <_vfiprintf_r+0x12c>
 80039c8:	06d1      	lsls	r1, r2, #27
 80039ca:	bf44      	itt	mi
 80039cc:	2320      	movmi	r3, #32
 80039ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039d2:	0713      	lsls	r3, r2, #28
 80039d4:	bf44      	itt	mi
 80039d6:	232b      	movmi	r3, #43	; 0x2b
 80039d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039dc:	f89a 3000 	ldrb.w	r3, [sl]
 80039e0:	2b2a      	cmp	r3, #42	; 0x2a
 80039e2:	d015      	beq.n	8003a10 <_vfiprintf_r+0x13c>
 80039e4:	9a07      	ldr	r2, [sp, #28]
 80039e6:	4654      	mov	r4, sl
 80039e8:	2000      	movs	r0, #0
 80039ea:	f04f 0c0a 	mov.w	ip, #10
 80039ee:	4621      	mov	r1, r4
 80039f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039f4:	3b30      	subs	r3, #48	; 0x30
 80039f6:	2b09      	cmp	r3, #9
 80039f8:	d94e      	bls.n	8003a98 <_vfiprintf_r+0x1c4>
 80039fa:	b1b0      	cbz	r0, 8003a2a <_vfiprintf_r+0x156>
 80039fc:	9207      	str	r2, [sp, #28]
 80039fe:	e014      	b.n	8003a2a <_vfiprintf_r+0x156>
 8003a00:	eba0 0308 	sub.w	r3, r0, r8
 8003a04:	fa09 f303 	lsl.w	r3, r9, r3
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	9304      	str	r3, [sp, #16]
 8003a0c:	46a2      	mov	sl, r4
 8003a0e:	e7d2      	b.n	80039b6 <_vfiprintf_r+0xe2>
 8003a10:	9b03      	ldr	r3, [sp, #12]
 8003a12:	1d19      	adds	r1, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	9103      	str	r1, [sp, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bfbb      	ittet	lt
 8003a1c:	425b      	neglt	r3, r3
 8003a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8003a22:	9307      	strge	r3, [sp, #28]
 8003a24:	9307      	strlt	r3, [sp, #28]
 8003a26:	bfb8      	it	lt
 8003a28:	9204      	strlt	r2, [sp, #16]
 8003a2a:	7823      	ldrb	r3, [r4, #0]
 8003a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a2e:	d10c      	bne.n	8003a4a <_vfiprintf_r+0x176>
 8003a30:	7863      	ldrb	r3, [r4, #1]
 8003a32:	2b2a      	cmp	r3, #42	; 0x2a
 8003a34:	d135      	bne.n	8003aa2 <_vfiprintf_r+0x1ce>
 8003a36:	9b03      	ldr	r3, [sp, #12]
 8003a38:	1d1a      	adds	r2, r3, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	9203      	str	r2, [sp, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bfb8      	it	lt
 8003a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a46:	3402      	adds	r4, #2
 8003a48:	9305      	str	r3, [sp, #20]
 8003a4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b30 <_vfiprintf_r+0x25c>
 8003a4e:	7821      	ldrb	r1, [r4, #0]
 8003a50:	2203      	movs	r2, #3
 8003a52:	4650      	mov	r0, sl
 8003a54:	f7fc fb94 	bl	8000180 <memchr>
 8003a58:	b140      	cbz	r0, 8003a6c <_vfiprintf_r+0x198>
 8003a5a:	2340      	movs	r3, #64	; 0x40
 8003a5c:	eba0 000a 	sub.w	r0, r0, sl
 8003a60:	fa03 f000 	lsl.w	r0, r3, r0
 8003a64:	9b04      	ldr	r3, [sp, #16]
 8003a66:	4303      	orrs	r3, r0
 8003a68:	3401      	adds	r4, #1
 8003a6a:	9304      	str	r3, [sp, #16]
 8003a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a70:	482c      	ldr	r0, [pc, #176]	; (8003b24 <_vfiprintf_r+0x250>)
 8003a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a76:	2206      	movs	r2, #6
 8003a78:	f7fc fb82 	bl	8000180 <memchr>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d03f      	beq.n	8003b00 <_vfiprintf_r+0x22c>
 8003a80:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <_vfiprintf_r+0x254>)
 8003a82:	bb1b      	cbnz	r3, 8003acc <_vfiprintf_r+0x1f8>
 8003a84:	9b03      	ldr	r3, [sp, #12]
 8003a86:	3307      	adds	r3, #7
 8003a88:	f023 0307 	bic.w	r3, r3, #7
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	9303      	str	r3, [sp, #12]
 8003a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a92:	443b      	add	r3, r7
 8003a94:	9309      	str	r3, [sp, #36]	; 0x24
 8003a96:	e767      	b.n	8003968 <_vfiprintf_r+0x94>
 8003a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	e7a5      	b.n	80039ee <_vfiprintf_r+0x11a>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	3401      	adds	r4, #1
 8003aa6:	9305      	str	r3, [sp, #20]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f04f 0c0a 	mov.w	ip, #10
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ab4:	3a30      	subs	r2, #48	; 0x30
 8003ab6:	2a09      	cmp	r2, #9
 8003ab8:	d903      	bls.n	8003ac2 <_vfiprintf_r+0x1ee>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0c5      	beq.n	8003a4a <_vfiprintf_r+0x176>
 8003abe:	9105      	str	r1, [sp, #20]
 8003ac0:	e7c3      	b.n	8003a4a <_vfiprintf_r+0x176>
 8003ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e7f0      	b.n	8003aae <_vfiprintf_r+0x1da>
 8003acc:	ab03      	add	r3, sp, #12
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	462a      	mov	r2, r5
 8003ad2:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <_vfiprintf_r+0x258>)
 8003ad4:	a904      	add	r1, sp, #16
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	f3af 8000 	nop.w
 8003adc:	4607      	mov	r7, r0
 8003ade:	1c78      	adds	r0, r7, #1
 8003ae0:	d1d6      	bne.n	8003a90 <_vfiprintf_r+0x1bc>
 8003ae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ae4:	07d9      	lsls	r1, r3, #31
 8003ae6:	d405      	bmi.n	8003af4 <_vfiprintf_r+0x220>
 8003ae8:	89ab      	ldrh	r3, [r5, #12]
 8003aea:	059a      	lsls	r2, r3, #22
 8003aec:	d402      	bmi.n	8003af4 <_vfiprintf_r+0x220>
 8003aee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003af0:	f7ff fd7f 	bl	80035f2 <__retarget_lock_release_recursive>
 8003af4:	89ab      	ldrh	r3, [r5, #12]
 8003af6:	065b      	lsls	r3, r3, #25
 8003af8:	f53f af12 	bmi.w	8003920 <_vfiprintf_r+0x4c>
 8003afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003afe:	e711      	b.n	8003924 <_vfiprintf_r+0x50>
 8003b00:	ab03      	add	r3, sp, #12
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	462a      	mov	r2, r5
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <_vfiprintf_r+0x258>)
 8003b08:	a904      	add	r1, sp, #16
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	f000 f880 	bl	8003c10 <_printf_i>
 8003b10:	e7e4      	b.n	8003adc <_vfiprintf_r+0x208>
 8003b12:	bf00      	nop
 8003b14:	080046c8 	.word	0x080046c8
 8003b18:	080046e8 	.word	0x080046e8
 8003b1c:	080046a8 	.word	0x080046a8
 8003b20:	08004708 	.word	0x08004708
 8003b24:	08004712 	.word	0x08004712
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	080038af 	.word	0x080038af
 8003b30:	0800470e 	.word	0x0800470e

08003b34 <_printf_common>:
 8003b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b38:	4616      	mov	r6, r2
 8003b3a:	4699      	mov	r9, r3
 8003b3c:	688a      	ldr	r2, [r1, #8]
 8003b3e:	690b      	ldr	r3, [r1, #16]
 8003b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bfb8      	it	lt
 8003b48:	4613      	movlt	r3, r2
 8003b4a:	6033      	str	r3, [r6, #0]
 8003b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b50:	4607      	mov	r7, r0
 8003b52:	460c      	mov	r4, r1
 8003b54:	b10a      	cbz	r2, 8003b5a <_printf_common+0x26>
 8003b56:	3301      	adds	r3, #1
 8003b58:	6033      	str	r3, [r6, #0]
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	0699      	lsls	r1, r3, #26
 8003b5e:	bf42      	ittt	mi
 8003b60:	6833      	ldrmi	r3, [r6, #0]
 8003b62:	3302      	addmi	r3, #2
 8003b64:	6033      	strmi	r3, [r6, #0]
 8003b66:	6825      	ldr	r5, [r4, #0]
 8003b68:	f015 0506 	ands.w	r5, r5, #6
 8003b6c:	d106      	bne.n	8003b7c <_printf_common+0x48>
 8003b6e:	f104 0a19 	add.w	sl, r4, #25
 8003b72:	68e3      	ldr	r3, [r4, #12]
 8003b74:	6832      	ldr	r2, [r6, #0]
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	42ab      	cmp	r3, r5
 8003b7a:	dc26      	bgt.n	8003bca <_printf_common+0x96>
 8003b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b80:	1e13      	subs	r3, r2, #0
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	bf18      	it	ne
 8003b86:	2301      	movne	r3, #1
 8003b88:	0692      	lsls	r2, r2, #26
 8003b8a:	d42b      	bmi.n	8003be4 <_printf_common+0xb0>
 8003b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b90:	4649      	mov	r1, r9
 8003b92:	4638      	mov	r0, r7
 8003b94:	47c0      	blx	r8
 8003b96:	3001      	adds	r0, #1
 8003b98:	d01e      	beq.n	8003bd8 <_printf_common+0xa4>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	68e5      	ldr	r5, [r4, #12]
 8003b9e:	6832      	ldr	r2, [r6, #0]
 8003ba0:	f003 0306 	and.w	r3, r3, #6
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	bf08      	it	eq
 8003ba8:	1aad      	subeq	r5, r5, r2
 8003baa:	68a3      	ldr	r3, [r4, #8]
 8003bac:	6922      	ldr	r2, [r4, #16]
 8003bae:	bf0c      	ite	eq
 8003bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bb4:	2500      	movne	r5, #0
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	bfc4      	itt	gt
 8003bba:	1a9b      	subgt	r3, r3, r2
 8003bbc:	18ed      	addgt	r5, r5, r3
 8003bbe:	2600      	movs	r6, #0
 8003bc0:	341a      	adds	r4, #26
 8003bc2:	42b5      	cmp	r5, r6
 8003bc4:	d11a      	bne.n	8003bfc <_printf_common+0xc8>
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	e008      	b.n	8003bdc <_printf_common+0xa8>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	4652      	mov	r2, sl
 8003bce:	4649      	mov	r1, r9
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	47c0      	blx	r8
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d103      	bne.n	8003be0 <_printf_common+0xac>
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be0:	3501      	adds	r5, #1
 8003be2:	e7c6      	b.n	8003b72 <_printf_common+0x3e>
 8003be4:	18e1      	adds	r1, r4, r3
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	2030      	movs	r0, #48	; 0x30
 8003bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bee:	4422      	add	r2, r4
 8003bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	e7c7      	b.n	8003b8c <_printf_common+0x58>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4622      	mov	r2, r4
 8003c00:	4649      	mov	r1, r9
 8003c02:	4638      	mov	r0, r7
 8003c04:	47c0      	blx	r8
 8003c06:	3001      	adds	r0, #1
 8003c08:	d0e6      	beq.n	8003bd8 <_printf_common+0xa4>
 8003c0a:	3601      	adds	r6, #1
 8003c0c:	e7d9      	b.n	8003bc2 <_printf_common+0x8e>
	...

08003c10 <_printf_i>:
 8003c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c14:	7e0f      	ldrb	r7, [r1, #24]
 8003c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c18:	2f78      	cmp	r7, #120	; 0x78
 8003c1a:	4691      	mov	r9, r2
 8003c1c:	4680      	mov	r8, r0
 8003c1e:	460c      	mov	r4, r1
 8003c20:	469a      	mov	sl, r3
 8003c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c26:	d807      	bhi.n	8003c38 <_printf_i+0x28>
 8003c28:	2f62      	cmp	r7, #98	; 0x62
 8003c2a:	d80a      	bhi.n	8003c42 <_printf_i+0x32>
 8003c2c:	2f00      	cmp	r7, #0
 8003c2e:	f000 80d8 	beq.w	8003de2 <_printf_i+0x1d2>
 8003c32:	2f58      	cmp	r7, #88	; 0x58
 8003c34:	f000 80a3 	beq.w	8003d7e <_printf_i+0x16e>
 8003c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c40:	e03a      	b.n	8003cb8 <_printf_i+0xa8>
 8003c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c46:	2b15      	cmp	r3, #21
 8003c48:	d8f6      	bhi.n	8003c38 <_printf_i+0x28>
 8003c4a:	a101      	add	r1, pc, #4	; (adr r1, 8003c50 <_printf_i+0x40>)
 8003c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c50:	08003ca9 	.word	0x08003ca9
 8003c54:	08003cbd 	.word	0x08003cbd
 8003c58:	08003c39 	.word	0x08003c39
 8003c5c:	08003c39 	.word	0x08003c39
 8003c60:	08003c39 	.word	0x08003c39
 8003c64:	08003c39 	.word	0x08003c39
 8003c68:	08003cbd 	.word	0x08003cbd
 8003c6c:	08003c39 	.word	0x08003c39
 8003c70:	08003c39 	.word	0x08003c39
 8003c74:	08003c39 	.word	0x08003c39
 8003c78:	08003c39 	.word	0x08003c39
 8003c7c:	08003dc9 	.word	0x08003dc9
 8003c80:	08003ced 	.word	0x08003ced
 8003c84:	08003dab 	.word	0x08003dab
 8003c88:	08003c39 	.word	0x08003c39
 8003c8c:	08003c39 	.word	0x08003c39
 8003c90:	08003deb 	.word	0x08003deb
 8003c94:	08003c39 	.word	0x08003c39
 8003c98:	08003ced 	.word	0x08003ced
 8003c9c:	08003c39 	.word	0x08003c39
 8003ca0:	08003c39 	.word	0x08003c39
 8003ca4:	08003db3 	.word	0x08003db3
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	1d1a      	adds	r2, r3, #4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	602a      	str	r2, [r5, #0]
 8003cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0a3      	b.n	8003e04 <_printf_i+0x1f4>
 8003cbc:	6820      	ldr	r0, [r4, #0]
 8003cbe:	6829      	ldr	r1, [r5, #0]
 8003cc0:	0606      	lsls	r6, r0, #24
 8003cc2:	f101 0304 	add.w	r3, r1, #4
 8003cc6:	d50a      	bpl.n	8003cde <_printf_i+0xce>
 8003cc8:	680e      	ldr	r6, [r1, #0]
 8003cca:	602b      	str	r3, [r5, #0]
 8003ccc:	2e00      	cmp	r6, #0
 8003cce:	da03      	bge.n	8003cd8 <_printf_i+0xc8>
 8003cd0:	232d      	movs	r3, #45	; 0x2d
 8003cd2:	4276      	negs	r6, r6
 8003cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cd8:	485e      	ldr	r0, [pc, #376]	; (8003e54 <_printf_i+0x244>)
 8003cda:	230a      	movs	r3, #10
 8003cdc:	e019      	b.n	8003d12 <_printf_i+0x102>
 8003cde:	680e      	ldr	r6, [r1, #0]
 8003ce0:	602b      	str	r3, [r5, #0]
 8003ce2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ce6:	bf18      	it	ne
 8003ce8:	b236      	sxthne	r6, r6
 8003cea:	e7ef      	b.n	8003ccc <_printf_i+0xbc>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	6820      	ldr	r0, [r4, #0]
 8003cf0:	1d19      	adds	r1, r3, #4
 8003cf2:	6029      	str	r1, [r5, #0]
 8003cf4:	0601      	lsls	r1, r0, #24
 8003cf6:	d501      	bpl.n	8003cfc <_printf_i+0xec>
 8003cf8:	681e      	ldr	r6, [r3, #0]
 8003cfa:	e002      	b.n	8003d02 <_printf_i+0xf2>
 8003cfc:	0646      	lsls	r6, r0, #25
 8003cfe:	d5fb      	bpl.n	8003cf8 <_printf_i+0xe8>
 8003d00:	881e      	ldrh	r6, [r3, #0]
 8003d02:	4854      	ldr	r0, [pc, #336]	; (8003e54 <_printf_i+0x244>)
 8003d04:	2f6f      	cmp	r7, #111	; 0x6f
 8003d06:	bf0c      	ite	eq
 8003d08:	2308      	moveq	r3, #8
 8003d0a:	230a      	movne	r3, #10
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d12:	6865      	ldr	r5, [r4, #4]
 8003d14:	60a5      	str	r5, [r4, #8]
 8003d16:	2d00      	cmp	r5, #0
 8003d18:	bfa2      	ittt	ge
 8003d1a:	6821      	ldrge	r1, [r4, #0]
 8003d1c:	f021 0104 	bicge.w	r1, r1, #4
 8003d20:	6021      	strge	r1, [r4, #0]
 8003d22:	b90e      	cbnz	r6, 8003d28 <_printf_i+0x118>
 8003d24:	2d00      	cmp	r5, #0
 8003d26:	d04d      	beq.n	8003dc4 <_printf_i+0x1b4>
 8003d28:	4615      	mov	r5, r2
 8003d2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d2e:	fb03 6711 	mls	r7, r3, r1, r6
 8003d32:	5dc7      	ldrb	r7, [r0, r7]
 8003d34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d38:	4637      	mov	r7, r6
 8003d3a:	42bb      	cmp	r3, r7
 8003d3c:	460e      	mov	r6, r1
 8003d3e:	d9f4      	bls.n	8003d2a <_printf_i+0x11a>
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d10b      	bne.n	8003d5c <_printf_i+0x14c>
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	07de      	lsls	r6, r3, #31
 8003d48:	d508      	bpl.n	8003d5c <_printf_i+0x14c>
 8003d4a:	6923      	ldr	r3, [r4, #16]
 8003d4c:	6861      	ldr	r1, [r4, #4]
 8003d4e:	4299      	cmp	r1, r3
 8003d50:	bfde      	ittt	le
 8003d52:	2330      	movle	r3, #48	; 0x30
 8003d54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d5c:	1b52      	subs	r2, r2, r5
 8003d5e:	6122      	str	r2, [r4, #16]
 8003d60:	f8cd a000 	str.w	sl, [sp]
 8003d64:	464b      	mov	r3, r9
 8003d66:	aa03      	add	r2, sp, #12
 8003d68:	4621      	mov	r1, r4
 8003d6a:	4640      	mov	r0, r8
 8003d6c:	f7ff fee2 	bl	8003b34 <_printf_common>
 8003d70:	3001      	adds	r0, #1
 8003d72:	d14c      	bne.n	8003e0e <_printf_i+0x1fe>
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	b004      	add	sp, #16
 8003d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7e:	4835      	ldr	r0, [pc, #212]	; (8003e54 <_printf_i+0x244>)
 8003d80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d84:	6829      	ldr	r1, [r5, #0]
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d8c:	6029      	str	r1, [r5, #0]
 8003d8e:	061d      	lsls	r5, r3, #24
 8003d90:	d514      	bpl.n	8003dbc <_printf_i+0x1ac>
 8003d92:	07df      	lsls	r7, r3, #31
 8003d94:	bf44      	itt	mi
 8003d96:	f043 0320 	orrmi.w	r3, r3, #32
 8003d9a:	6023      	strmi	r3, [r4, #0]
 8003d9c:	b91e      	cbnz	r6, 8003da6 <_printf_i+0x196>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	f023 0320 	bic.w	r3, r3, #32
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	2310      	movs	r3, #16
 8003da8:	e7b0      	b.n	8003d0c <_printf_i+0xfc>
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	f043 0320 	orr.w	r3, r3, #32
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	2378      	movs	r3, #120	; 0x78
 8003db4:	4828      	ldr	r0, [pc, #160]	; (8003e58 <_printf_i+0x248>)
 8003db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dba:	e7e3      	b.n	8003d84 <_printf_i+0x174>
 8003dbc:	0659      	lsls	r1, r3, #25
 8003dbe:	bf48      	it	mi
 8003dc0:	b2b6      	uxthmi	r6, r6
 8003dc2:	e7e6      	b.n	8003d92 <_printf_i+0x182>
 8003dc4:	4615      	mov	r5, r2
 8003dc6:	e7bb      	b.n	8003d40 <_printf_i+0x130>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	6826      	ldr	r6, [r4, #0]
 8003dcc:	6961      	ldr	r1, [r4, #20]
 8003dce:	1d18      	adds	r0, r3, #4
 8003dd0:	6028      	str	r0, [r5, #0]
 8003dd2:	0635      	lsls	r5, r6, #24
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	d501      	bpl.n	8003ddc <_printf_i+0x1cc>
 8003dd8:	6019      	str	r1, [r3, #0]
 8003dda:	e002      	b.n	8003de2 <_printf_i+0x1d2>
 8003ddc:	0670      	lsls	r0, r6, #25
 8003dde:	d5fb      	bpl.n	8003dd8 <_printf_i+0x1c8>
 8003de0:	8019      	strh	r1, [r3, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	6123      	str	r3, [r4, #16]
 8003de6:	4615      	mov	r5, r2
 8003de8:	e7ba      	b.n	8003d60 <_printf_i+0x150>
 8003dea:	682b      	ldr	r3, [r5, #0]
 8003dec:	1d1a      	adds	r2, r3, #4
 8003dee:	602a      	str	r2, [r5, #0]
 8003df0:	681d      	ldr	r5, [r3, #0]
 8003df2:	6862      	ldr	r2, [r4, #4]
 8003df4:	2100      	movs	r1, #0
 8003df6:	4628      	mov	r0, r5
 8003df8:	f7fc f9c2 	bl	8000180 <memchr>
 8003dfc:	b108      	cbz	r0, 8003e02 <_printf_i+0x1f2>
 8003dfe:	1b40      	subs	r0, r0, r5
 8003e00:	6060      	str	r0, [r4, #4]
 8003e02:	6863      	ldr	r3, [r4, #4]
 8003e04:	6123      	str	r3, [r4, #16]
 8003e06:	2300      	movs	r3, #0
 8003e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e0c:	e7a8      	b.n	8003d60 <_printf_i+0x150>
 8003e0e:	6923      	ldr	r3, [r4, #16]
 8003e10:	462a      	mov	r2, r5
 8003e12:	4649      	mov	r1, r9
 8003e14:	4640      	mov	r0, r8
 8003e16:	47d0      	blx	sl
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d0ab      	beq.n	8003d74 <_printf_i+0x164>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	079b      	lsls	r3, r3, #30
 8003e20:	d413      	bmi.n	8003e4a <_printf_i+0x23a>
 8003e22:	68e0      	ldr	r0, [r4, #12]
 8003e24:	9b03      	ldr	r3, [sp, #12]
 8003e26:	4298      	cmp	r0, r3
 8003e28:	bfb8      	it	lt
 8003e2a:	4618      	movlt	r0, r3
 8003e2c:	e7a4      	b.n	8003d78 <_printf_i+0x168>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	4632      	mov	r2, r6
 8003e32:	4649      	mov	r1, r9
 8003e34:	4640      	mov	r0, r8
 8003e36:	47d0      	blx	sl
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d09b      	beq.n	8003d74 <_printf_i+0x164>
 8003e3c:	3501      	adds	r5, #1
 8003e3e:	68e3      	ldr	r3, [r4, #12]
 8003e40:	9903      	ldr	r1, [sp, #12]
 8003e42:	1a5b      	subs	r3, r3, r1
 8003e44:	42ab      	cmp	r3, r5
 8003e46:	dcf2      	bgt.n	8003e2e <_printf_i+0x21e>
 8003e48:	e7eb      	b.n	8003e22 <_printf_i+0x212>
 8003e4a:	2500      	movs	r5, #0
 8003e4c:	f104 0619 	add.w	r6, r4, #25
 8003e50:	e7f5      	b.n	8003e3e <_printf_i+0x22e>
 8003e52:	bf00      	nop
 8003e54:	08004719 	.word	0x08004719
 8003e58:	0800472a 	.word	0x0800472a

08003e5c <_sbrk_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4d06      	ldr	r5, [pc, #24]	; (8003e78 <_sbrk_r+0x1c>)
 8003e60:	2300      	movs	r3, #0
 8003e62:	4604      	mov	r4, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	f7fc fd8e 	bl	8000988 <_sbrk>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d102      	bne.n	8003e76 <_sbrk_r+0x1a>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	b103      	cbz	r3, 8003e76 <_sbrk_r+0x1a>
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	20000188 	.word	0x20000188

08003e7c <__sread>:
 8003e7c:	b510      	push	{r4, lr}
 8003e7e:	460c      	mov	r4, r1
 8003e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e84:	f000 f8a0 	bl	8003fc8 <_read_r>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	bfab      	itete	ge
 8003e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e90:	181b      	addge	r3, r3, r0
 8003e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e96:	bfac      	ite	ge
 8003e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e9a:	81a3      	strhlt	r3, [r4, #12]
 8003e9c:	bd10      	pop	{r4, pc}

08003e9e <__swrite>:
 8003e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea2:	461f      	mov	r7, r3
 8003ea4:	898b      	ldrh	r3, [r1, #12]
 8003ea6:	05db      	lsls	r3, r3, #23
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	4616      	mov	r6, r2
 8003eae:	d505      	bpl.n	8003ebc <__swrite+0x1e>
 8003eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f000 f868 	bl	8003f8c <_lseek_r>
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec6:	81a3      	strh	r3, [r4, #12]
 8003ec8:	4632      	mov	r2, r6
 8003eca:	463b      	mov	r3, r7
 8003ecc:	4628      	mov	r0, r5
 8003ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed2:	f000 b817 	b.w	8003f04 <_write_r>

08003ed6 <__sseek>:
 8003ed6:	b510      	push	{r4, lr}
 8003ed8:	460c      	mov	r4, r1
 8003eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ede:	f000 f855 	bl	8003f8c <_lseek_r>
 8003ee2:	1c43      	adds	r3, r0, #1
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	bf15      	itete	ne
 8003ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ef2:	81a3      	strheq	r3, [r4, #12]
 8003ef4:	bf18      	it	ne
 8003ef6:	81a3      	strhne	r3, [r4, #12]
 8003ef8:	bd10      	pop	{r4, pc}

08003efa <__sclose>:
 8003efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003efe:	f000 b813 	b.w	8003f28 <_close_r>
	...

08003f04 <_write_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4d07      	ldr	r5, [pc, #28]	; (8003f24 <_write_r+0x20>)
 8003f08:	4604      	mov	r4, r0
 8003f0a:	4608      	mov	r0, r1
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	2200      	movs	r2, #0
 8003f10:	602a      	str	r2, [r5, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f000 f911 	bl	800413a <_write>
 8003f18:	1c43      	adds	r3, r0, #1
 8003f1a:	d102      	bne.n	8003f22 <_write_r+0x1e>
 8003f1c:	682b      	ldr	r3, [r5, #0]
 8003f1e:	b103      	cbz	r3, 8003f22 <_write_r+0x1e>
 8003f20:	6023      	str	r3, [r4, #0]
 8003f22:	bd38      	pop	{r3, r4, r5, pc}
 8003f24:	20000188 	.word	0x20000188

08003f28 <_close_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4d06      	ldr	r5, [pc, #24]	; (8003f44 <_close_r+0x1c>)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	4604      	mov	r4, r0
 8003f30:	4608      	mov	r0, r1
 8003f32:	602b      	str	r3, [r5, #0]
 8003f34:	f000 f932 	bl	800419c <_close>
 8003f38:	1c43      	adds	r3, r0, #1
 8003f3a:	d102      	bne.n	8003f42 <_close_r+0x1a>
 8003f3c:	682b      	ldr	r3, [r5, #0]
 8003f3e:	b103      	cbz	r3, 8003f42 <_close_r+0x1a>
 8003f40:	6023      	str	r3, [r4, #0]
 8003f42:	bd38      	pop	{r3, r4, r5, pc}
 8003f44:	20000188 	.word	0x20000188

08003f48 <_fstat_r>:
 8003f48:	b538      	push	{r3, r4, r5, lr}
 8003f4a:	4d07      	ldr	r5, [pc, #28]	; (8003f68 <_fstat_r+0x20>)
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	4604      	mov	r4, r0
 8003f50:	4608      	mov	r0, r1
 8003f52:	4611      	mov	r1, r2
 8003f54:	602b      	str	r3, [r5, #0]
 8003f56:	f000 f968 	bl	800422a <_fstat>
 8003f5a:	1c43      	adds	r3, r0, #1
 8003f5c:	d102      	bne.n	8003f64 <_fstat_r+0x1c>
 8003f5e:	682b      	ldr	r3, [r5, #0]
 8003f60:	b103      	cbz	r3, 8003f64 <_fstat_r+0x1c>
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	bd38      	pop	{r3, r4, r5, pc}
 8003f66:	bf00      	nop
 8003f68:	20000188 	.word	0x20000188

08003f6c <_isatty_r>:
 8003f6c:	b538      	push	{r3, r4, r5, lr}
 8003f6e:	4d06      	ldr	r5, [pc, #24]	; (8003f88 <_isatty_r+0x1c>)
 8003f70:	2300      	movs	r3, #0
 8003f72:	4604      	mov	r4, r0
 8003f74:	4608      	mov	r0, r1
 8003f76:	602b      	str	r3, [r5, #0]
 8003f78:	f000 fabe 	bl	80044f8 <_isatty>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	d102      	bne.n	8003f86 <_isatty_r+0x1a>
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	b103      	cbz	r3, 8003f86 <_isatty_r+0x1a>
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
 8003f88:	20000188 	.word	0x20000188

08003f8c <_lseek_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4d07      	ldr	r5, [pc, #28]	; (8003fac <_lseek_r+0x20>)
 8003f90:	4604      	mov	r4, r0
 8003f92:	4608      	mov	r0, r1
 8003f94:	4611      	mov	r1, r2
 8003f96:	2200      	movs	r2, #0
 8003f98:	602a      	str	r2, [r5, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f000 f8bb 	bl	8004116 <_lseek>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d102      	bne.n	8003faa <_lseek_r+0x1e>
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	b103      	cbz	r3, 8003faa <_lseek_r+0x1e>
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	20000188 	.word	0x20000188

08003fb0 <__malloc_lock>:
 8003fb0:	4801      	ldr	r0, [pc, #4]	; (8003fb8 <__malloc_lock+0x8>)
 8003fb2:	f7ff bb1d 	b.w	80035f0 <__retarget_lock_acquire_recursive>
 8003fb6:	bf00      	nop
 8003fb8:	2000017c 	.word	0x2000017c

08003fbc <__malloc_unlock>:
 8003fbc:	4801      	ldr	r0, [pc, #4]	; (8003fc4 <__malloc_unlock+0x8>)
 8003fbe:	f7ff bb18 	b.w	80035f2 <__retarget_lock_release_recursive>
 8003fc2:	bf00      	nop
 8003fc4:	2000017c 	.word	0x2000017c

08003fc8 <_read_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	4d07      	ldr	r5, [pc, #28]	; (8003fe8 <_read_r+0x20>)
 8003fcc:	4604      	mov	r4, r0
 8003fce:	4608      	mov	r0, r1
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	602a      	str	r2, [r5, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f000 f845 	bl	8004066 <_read>
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	d102      	bne.n	8003fe6 <_read_r+0x1e>
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	b103      	cbz	r3, 8003fe6 <_read_r+0x1e>
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	20000188 	.word	0x20000188

08003fec <findslot>:
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <findslot+0x2c>)
 8003fee:	b510      	push	{r4, lr}
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	b118      	cbz	r0, 8003ffe <findslot+0x12>
 8003ff6:	6983      	ldr	r3, [r0, #24]
 8003ff8:	b90b      	cbnz	r3, 8003ffe <findslot+0x12>
 8003ffa:	f7ff fa5b 	bl	80034b4 <__sinit>
 8003ffe:	2c13      	cmp	r4, #19
 8004000:	d807      	bhi.n	8004012 <findslot+0x26>
 8004002:	4806      	ldr	r0, [pc, #24]	; (800401c <findslot+0x30>)
 8004004:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004008:	3201      	adds	r2, #1
 800400a:	d002      	beq.n	8004012 <findslot+0x26>
 800400c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004010:	bd10      	pop	{r4, pc}
 8004012:	2000      	movs	r0, #0
 8004014:	e7fc      	b.n	8004010 <findslot+0x24>
 8004016:	bf00      	nop
 8004018:	20000010 	.word	0x20000010
 800401c:	20000198 	.word	0x20000198

08004020 <error>:
 8004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004022:	4604      	mov	r4, r0
 8004024:	f7fe ffac 	bl	8002f80 <__errno>
 8004028:	2613      	movs	r6, #19
 800402a:	4605      	mov	r5, r0
 800402c:	2700      	movs	r7, #0
 800402e:	4630      	mov	r0, r6
 8004030:	4639      	mov	r1, r7
 8004032:	beab      	bkpt	0x00ab
 8004034:	4606      	mov	r6, r0
 8004036:	602e      	str	r6, [r5, #0]
 8004038:	4620      	mov	r0, r4
 800403a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800403c <checkerror>:
 800403c:	1c43      	adds	r3, r0, #1
 800403e:	d101      	bne.n	8004044 <checkerror+0x8>
 8004040:	f7ff bfee 	b.w	8004020 <error>
 8004044:	4770      	bx	lr

08004046 <_swiread>:
 8004046:	b530      	push	{r4, r5, lr}
 8004048:	b085      	sub	sp, #20
 800404a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800404e:	9203      	str	r2, [sp, #12]
 8004050:	2406      	movs	r4, #6
 8004052:	ad01      	add	r5, sp, #4
 8004054:	4620      	mov	r0, r4
 8004056:	4629      	mov	r1, r5
 8004058:	beab      	bkpt	0x00ab
 800405a:	4604      	mov	r4, r0
 800405c:	4620      	mov	r0, r4
 800405e:	f7ff ffed 	bl	800403c <checkerror>
 8004062:	b005      	add	sp, #20
 8004064:	bd30      	pop	{r4, r5, pc}

08004066 <_read>:
 8004066:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004068:	4615      	mov	r5, r2
 800406a:	9101      	str	r1, [sp, #4]
 800406c:	f7ff ffbe 	bl	8003fec <findslot>
 8004070:	9901      	ldr	r1, [sp, #4]
 8004072:	4604      	mov	r4, r0
 8004074:	b938      	cbnz	r0, 8004086 <_read+0x20>
 8004076:	f7fe ff83 	bl	8002f80 <__errno>
 800407a:	2309      	movs	r3, #9
 800407c:	6003      	str	r3, [r0, #0]
 800407e:	f04f 30ff 	mov.w	r0, #4294967295
 8004082:	b003      	add	sp, #12
 8004084:	bd30      	pop	{r4, r5, pc}
 8004086:	6800      	ldr	r0, [r0, #0]
 8004088:	462a      	mov	r2, r5
 800408a:	f7ff ffdc 	bl	8004046 <_swiread>
 800408e:	1c43      	adds	r3, r0, #1
 8004090:	d0f7      	beq.n	8004082 <_read+0x1c>
 8004092:	6863      	ldr	r3, [r4, #4]
 8004094:	1a2a      	subs	r2, r5, r0
 8004096:	4413      	add	r3, r2
 8004098:	6063      	str	r3, [r4, #4]
 800409a:	4610      	mov	r0, r2
 800409c:	e7f1      	b.n	8004082 <_read+0x1c>

0800409e <_swilseek>:
 800409e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040a0:	460c      	mov	r4, r1
 80040a2:	4616      	mov	r6, r2
 80040a4:	f7ff ffa2 	bl	8003fec <findslot>
 80040a8:	4605      	mov	r5, r0
 80040aa:	b940      	cbnz	r0, 80040be <_swilseek+0x20>
 80040ac:	f7fe ff68 	bl	8002f80 <__errno>
 80040b0:	2309      	movs	r3, #9
 80040b2:	6003      	str	r3, [r0, #0]
 80040b4:	f04f 34ff 	mov.w	r4, #4294967295
 80040b8:	4620      	mov	r0, r4
 80040ba:	b003      	add	sp, #12
 80040bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040be:	2e02      	cmp	r6, #2
 80040c0:	d903      	bls.n	80040ca <_swilseek+0x2c>
 80040c2:	f7fe ff5d 	bl	8002f80 <__errno>
 80040c6:	2316      	movs	r3, #22
 80040c8:	e7f3      	b.n	80040b2 <_swilseek+0x14>
 80040ca:	2e01      	cmp	r6, #1
 80040cc:	d112      	bne.n	80040f4 <_swilseek+0x56>
 80040ce:	6843      	ldr	r3, [r0, #4]
 80040d0:	18e4      	adds	r4, r4, r3
 80040d2:	d4f6      	bmi.n	80040c2 <_swilseek+0x24>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	260a      	movs	r6, #10
 80040d8:	e9cd 3400 	strd	r3, r4, [sp]
 80040dc:	466f      	mov	r7, sp
 80040de:	4630      	mov	r0, r6
 80040e0:	4639      	mov	r1, r7
 80040e2:	beab      	bkpt	0x00ab
 80040e4:	4606      	mov	r6, r0
 80040e6:	4630      	mov	r0, r6
 80040e8:	f7ff ffa8 	bl	800403c <checkerror>
 80040ec:	2800      	cmp	r0, #0
 80040ee:	dbe1      	blt.n	80040b4 <_swilseek+0x16>
 80040f0:	606c      	str	r4, [r5, #4]
 80040f2:	e7e1      	b.n	80040b8 <_swilseek+0x1a>
 80040f4:	2e02      	cmp	r6, #2
 80040f6:	d1ed      	bne.n	80040d4 <_swilseek+0x36>
 80040f8:	6803      	ldr	r3, [r0, #0]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	260c      	movs	r6, #12
 80040fe:	466f      	mov	r7, sp
 8004100:	4630      	mov	r0, r6
 8004102:	4639      	mov	r1, r7
 8004104:	beab      	bkpt	0x00ab
 8004106:	4606      	mov	r6, r0
 8004108:	4630      	mov	r0, r6
 800410a:	f7ff ff97 	bl	800403c <checkerror>
 800410e:	1c43      	adds	r3, r0, #1
 8004110:	d0d0      	beq.n	80040b4 <_swilseek+0x16>
 8004112:	4404      	add	r4, r0
 8004114:	e7de      	b.n	80040d4 <_swilseek+0x36>

08004116 <_lseek>:
 8004116:	f7ff bfc2 	b.w	800409e <_swilseek>

0800411a <_swiwrite>:
 800411a:	b530      	push	{r4, r5, lr}
 800411c:	b085      	sub	sp, #20
 800411e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004122:	9203      	str	r2, [sp, #12]
 8004124:	2405      	movs	r4, #5
 8004126:	ad01      	add	r5, sp, #4
 8004128:	4620      	mov	r0, r4
 800412a:	4629      	mov	r1, r5
 800412c:	beab      	bkpt	0x00ab
 800412e:	4604      	mov	r4, r0
 8004130:	4620      	mov	r0, r4
 8004132:	f7ff ff83 	bl	800403c <checkerror>
 8004136:	b005      	add	sp, #20
 8004138:	bd30      	pop	{r4, r5, pc}

0800413a <_write>:
 800413a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800413c:	4615      	mov	r5, r2
 800413e:	9101      	str	r1, [sp, #4]
 8004140:	f7ff ff54 	bl	8003fec <findslot>
 8004144:	9901      	ldr	r1, [sp, #4]
 8004146:	4604      	mov	r4, r0
 8004148:	b930      	cbnz	r0, 8004158 <_write+0x1e>
 800414a:	f7fe ff19 	bl	8002f80 <__errno>
 800414e:	2309      	movs	r3, #9
 8004150:	6003      	str	r3, [r0, #0]
 8004152:	f04f 30ff 	mov.w	r0, #4294967295
 8004156:	e012      	b.n	800417e <_write+0x44>
 8004158:	6800      	ldr	r0, [r0, #0]
 800415a:	462a      	mov	r2, r5
 800415c:	f7ff ffdd 	bl	800411a <_swiwrite>
 8004160:	2800      	cmp	r0, #0
 8004162:	dbf6      	blt.n	8004152 <_write+0x18>
 8004164:	6862      	ldr	r2, [r4, #4]
 8004166:	1a2b      	subs	r3, r5, r0
 8004168:	441a      	add	r2, r3
 800416a:	42a8      	cmp	r0, r5
 800416c:	6062      	str	r2, [r4, #4]
 800416e:	d105      	bne.n	800417c <_write+0x42>
 8004170:	2000      	movs	r0, #0
 8004172:	b003      	add	sp, #12
 8004174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004178:	f7ff bf52 	b.w	8004020 <error>
 800417c:	4618      	mov	r0, r3
 800417e:	b003      	add	sp, #12
 8004180:	bd30      	pop	{r4, r5, pc}

08004182 <_swiclose>:
 8004182:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004184:	2402      	movs	r4, #2
 8004186:	9001      	str	r0, [sp, #4]
 8004188:	ad01      	add	r5, sp, #4
 800418a:	4620      	mov	r0, r4
 800418c:	4629      	mov	r1, r5
 800418e:	beab      	bkpt	0x00ab
 8004190:	4604      	mov	r4, r0
 8004192:	4620      	mov	r0, r4
 8004194:	f7ff ff52 	bl	800403c <checkerror>
 8004198:	b003      	add	sp, #12
 800419a:	bd30      	pop	{r4, r5, pc}

0800419c <_close>:
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4605      	mov	r5, r0
 80041a0:	f7ff ff24 	bl	8003fec <findslot>
 80041a4:	4604      	mov	r4, r0
 80041a6:	b930      	cbnz	r0, 80041b6 <_close+0x1a>
 80041a8:	f7fe feea 	bl	8002f80 <__errno>
 80041ac:	2309      	movs	r3, #9
 80041ae:	6003      	str	r3, [r0, #0]
 80041b0:	f04f 30ff 	mov.w	r0, #4294967295
 80041b4:	bd38      	pop	{r3, r4, r5, pc}
 80041b6:	3d01      	subs	r5, #1
 80041b8:	2d01      	cmp	r5, #1
 80041ba:	d809      	bhi.n	80041d0 <_close+0x34>
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <_close+0x48>)
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d104      	bne.n	80041d0 <_close+0x34>
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ca:	6003      	str	r3, [r0, #0]
 80041cc:	2000      	movs	r0, #0
 80041ce:	e7f1      	b.n	80041b4 <_close+0x18>
 80041d0:	6820      	ldr	r0, [r4, #0]
 80041d2:	f7ff ffd6 	bl	8004182 <_swiclose>
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d1ec      	bne.n	80041b4 <_close+0x18>
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	6023      	str	r3, [r4, #0]
 80041e0:	e7e8      	b.n	80041b4 <_close+0x18>
 80041e2:	bf00      	nop
 80041e4:	20000198 	.word	0x20000198

080041e8 <_swistat>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	460c      	mov	r4, r1
 80041ec:	f7ff fefe 	bl	8003fec <findslot>
 80041f0:	4605      	mov	r5, r0
 80041f2:	b930      	cbnz	r0, 8004202 <_swistat+0x1a>
 80041f4:	f7fe fec4 	bl	8002f80 <__errno>
 80041f8:	2309      	movs	r3, #9
 80041fa:	6003      	str	r3, [r0, #0]
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004200:	bd70      	pop	{r4, r5, r6, pc}
 8004202:	6863      	ldr	r3, [r4, #4]
 8004204:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004208:	6063      	str	r3, [r4, #4]
 800420a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800420e:	64a3      	str	r3, [r4, #72]	; 0x48
 8004210:	260c      	movs	r6, #12
 8004212:	4630      	mov	r0, r6
 8004214:	4629      	mov	r1, r5
 8004216:	beab      	bkpt	0x00ab
 8004218:	4605      	mov	r5, r0
 800421a:	4628      	mov	r0, r5
 800421c:	f7ff ff0e 	bl	800403c <checkerror>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	bf1c      	itt	ne
 8004224:	6120      	strne	r0, [r4, #16]
 8004226:	2000      	movne	r0, #0
 8004228:	e7ea      	b.n	8004200 <_swistat+0x18>

0800422a <_fstat>:
 800422a:	460b      	mov	r3, r1
 800422c:	b510      	push	{r4, lr}
 800422e:	2100      	movs	r1, #0
 8004230:	4604      	mov	r4, r0
 8004232:	2258      	movs	r2, #88	; 0x58
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe fecd 	bl	8002fd4 <memset>
 800423a:	4601      	mov	r1, r0
 800423c:	4620      	mov	r0, r4
 800423e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004242:	f7ff bfd1 	b.w	80041e8 <_swistat>

08004246 <_stat>:
 8004246:	b538      	push	{r3, r4, r5, lr}
 8004248:	460d      	mov	r5, r1
 800424a:	4604      	mov	r4, r0
 800424c:	2258      	movs	r2, #88	; 0x58
 800424e:	2100      	movs	r1, #0
 8004250:	4628      	mov	r0, r5
 8004252:	f7fe febf 	bl	8002fd4 <memset>
 8004256:	4620      	mov	r0, r4
 8004258:	2100      	movs	r1, #0
 800425a:	f000 f811 	bl	8004280 <_swiopen>
 800425e:	1c43      	adds	r3, r0, #1
 8004260:	4604      	mov	r4, r0
 8004262:	d00b      	beq.n	800427c <_stat+0x36>
 8004264:	686b      	ldr	r3, [r5, #4]
 8004266:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800426a:	606b      	str	r3, [r5, #4]
 800426c:	4629      	mov	r1, r5
 800426e:	f7ff ffbb 	bl	80041e8 <_swistat>
 8004272:	4605      	mov	r5, r0
 8004274:	4620      	mov	r0, r4
 8004276:	f7ff ff91 	bl	800419c <_close>
 800427a:	462c      	mov	r4, r5
 800427c:	4620      	mov	r0, r4
 800427e:	bd38      	pop	{r3, r4, r5, pc}

08004280 <_swiopen>:
 8004280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004284:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004330 <_swiopen+0xb0>
 8004288:	b097      	sub	sp, #92	; 0x5c
 800428a:	4607      	mov	r7, r0
 800428c:	460e      	mov	r6, r1
 800428e:	2500      	movs	r5, #0
 8004290:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8004294:	1c61      	adds	r1, r4, #1
 8004296:	d037      	beq.n	8004308 <_swiopen+0x88>
 8004298:	3501      	adds	r5, #1
 800429a:	2d14      	cmp	r5, #20
 800429c:	d1f8      	bne.n	8004290 <_swiopen+0x10>
 800429e:	f7fe fe6f 	bl	8002f80 <__errno>
 80042a2:	2318      	movs	r3, #24
 80042a4:	6003      	str	r3, [r0, #0]
 80042a6:	f04f 34ff 	mov.w	r4, #4294967295
 80042aa:	e03d      	b.n	8004328 <_swiopen+0xa8>
 80042ac:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80042b0:	f240 6301 	movw	r3, #1537	; 0x601
 80042b4:	07b2      	lsls	r2, r6, #30
 80042b6:	bf48      	it	mi
 80042b8:	f044 0402 	orrmi.w	r4, r4, #2
 80042bc:	421e      	tst	r6, r3
 80042be:	bf18      	it	ne
 80042c0:	f044 0404 	orrne.w	r4, r4, #4
 80042c4:	0733      	lsls	r3, r6, #28
 80042c6:	bf48      	it	mi
 80042c8:	f024 0404 	bicmi.w	r4, r4, #4
 80042cc:	4638      	mov	r0, r7
 80042ce:	bf48      	it	mi
 80042d0:	f044 0408 	orrmi.w	r4, r4, #8
 80042d4:	9700      	str	r7, [sp, #0]
 80042d6:	f7fb ffa3 	bl	8000220 <strlen>
 80042da:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80042de:	2401      	movs	r4, #1
 80042e0:	4620      	mov	r0, r4
 80042e2:	4649      	mov	r1, r9
 80042e4:	beab      	bkpt	0x00ab
 80042e6:	4604      	mov	r4, r0
 80042e8:	2c00      	cmp	r4, #0
 80042ea:	db08      	blt.n	80042fe <_swiopen+0x7e>
 80042ec:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80042f0:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80042f4:	2300      	movs	r3, #0
 80042f6:	f8c8 3004 	str.w	r3, [r8, #4]
 80042fa:	462c      	mov	r4, r5
 80042fc:	e014      	b.n	8004328 <_swiopen+0xa8>
 80042fe:	4620      	mov	r0, r4
 8004300:	f7ff fe8e 	bl	8004020 <error>
 8004304:	4604      	mov	r4, r0
 8004306:	e00f      	b.n	8004328 <_swiopen+0xa8>
 8004308:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800430c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004310:	46e9      	mov	r9, sp
 8004312:	d1cb      	bne.n	80042ac <_swiopen+0x2c>
 8004314:	4649      	mov	r1, r9
 8004316:	4638      	mov	r0, r7
 8004318:	f7ff ff95 	bl	8004246 <_stat>
 800431c:	3001      	adds	r0, #1
 800431e:	d0c5      	beq.n	80042ac <_swiopen+0x2c>
 8004320:	f7fe fe2e 	bl	8002f80 <__errno>
 8004324:	2311      	movs	r3, #17
 8004326:	6003      	str	r3, [r0, #0]
 8004328:	4620      	mov	r0, r4
 800432a:	b017      	add	sp, #92	; 0x5c
 800432c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004330:	20000198 	.word	0x20000198

08004334 <_get_semihosting_exts>:
 8004334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004338:	4606      	mov	r6, r0
 800433a:	460f      	mov	r7, r1
 800433c:	482a      	ldr	r0, [pc, #168]	; (80043e8 <_get_semihosting_exts+0xb4>)
 800433e:	2100      	movs	r1, #0
 8004340:	4615      	mov	r5, r2
 8004342:	f7ff ff9d 	bl	8004280 <_swiopen>
 8004346:	462a      	mov	r2, r5
 8004348:	4604      	mov	r4, r0
 800434a:	2100      	movs	r1, #0
 800434c:	4630      	mov	r0, r6
 800434e:	f7fe fe41 	bl	8002fd4 <memset>
 8004352:	1c63      	adds	r3, r4, #1
 8004354:	d016      	beq.n	8004384 <_get_semihosting_exts+0x50>
 8004356:	4620      	mov	r0, r4
 8004358:	f7ff fe48 	bl	8003fec <findslot>
 800435c:	f04f 090c 	mov.w	r9, #12
 8004360:	4680      	mov	r8, r0
 8004362:	4648      	mov	r0, r9
 8004364:	4641      	mov	r1, r8
 8004366:	beab      	bkpt	0x00ab
 8004368:	4680      	mov	r8, r0
 800436a:	4640      	mov	r0, r8
 800436c:	f7ff fe66 	bl	800403c <checkerror>
 8004370:	2803      	cmp	r0, #3
 8004372:	dd02      	ble.n	800437a <_get_semihosting_exts+0x46>
 8004374:	1ec3      	subs	r3, r0, #3
 8004376:	42ab      	cmp	r3, r5
 8004378:	dc08      	bgt.n	800438c <_get_semihosting_exts+0x58>
 800437a:	4620      	mov	r0, r4
 800437c:	f7ff ff0e 	bl	800419c <_close>
 8004380:	f04f 34ff 	mov.w	r4, #4294967295
 8004384:	4620      	mov	r0, r4
 8004386:	b003      	add	sp, #12
 8004388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800438c:	2204      	movs	r2, #4
 800438e:	eb0d 0102 	add.w	r1, sp, r2
 8004392:	4620      	mov	r0, r4
 8004394:	f7ff fe67 	bl	8004066 <_read>
 8004398:	2803      	cmp	r0, #3
 800439a:	ddee      	ble.n	800437a <_get_semihosting_exts+0x46>
 800439c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80043a0:	2b53      	cmp	r3, #83	; 0x53
 80043a2:	d1ea      	bne.n	800437a <_get_semihosting_exts+0x46>
 80043a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80043a8:	2b48      	cmp	r3, #72	; 0x48
 80043aa:	d1e6      	bne.n	800437a <_get_semihosting_exts+0x46>
 80043ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80043b0:	2b46      	cmp	r3, #70	; 0x46
 80043b2:	d1e2      	bne.n	800437a <_get_semihosting_exts+0x46>
 80043b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80043b8:	2b42      	cmp	r3, #66	; 0x42
 80043ba:	d1de      	bne.n	800437a <_get_semihosting_exts+0x46>
 80043bc:	2201      	movs	r2, #1
 80043be:	4639      	mov	r1, r7
 80043c0:	4620      	mov	r0, r4
 80043c2:	f7ff fe6c 	bl	800409e <_swilseek>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	dbd7      	blt.n	800437a <_get_semihosting_exts+0x46>
 80043ca:	462a      	mov	r2, r5
 80043cc:	4631      	mov	r1, r6
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7ff fe49 	bl	8004066 <_read>
 80043d4:	4605      	mov	r5, r0
 80043d6:	4620      	mov	r0, r4
 80043d8:	f7ff fee0 	bl	800419c <_close>
 80043dc:	4628      	mov	r0, r5
 80043de:	f7ff fe2d 	bl	800403c <checkerror>
 80043e2:	4604      	mov	r4, r0
 80043e4:	e7ce      	b.n	8004384 <_get_semihosting_exts+0x50>
 80043e6:	bf00      	nop
 80043e8:	0800473b 	.word	0x0800473b

080043ec <initialise_semihosting_exts>:
 80043ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ee:	4d0a      	ldr	r5, [pc, #40]	; (8004418 <initialise_semihosting_exts+0x2c>)
 80043f0:	4c0a      	ldr	r4, [pc, #40]	; (800441c <initialise_semihosting_exts+0x30>)
 80043f2:	2100      	movs	r1, #0
 80043f4:	2201      	movs	r2, #1
 80043f6:	a801      	add	r0, sp, #4
 80043f8:	6029      	str	r1, [r5, #0]
 80043fa:	6022      	str	r2, [r4, #0]
 80043fc:	f7ff ff9a 	bl	8004334 <_get_semihosting_exts>
 8004400:	2800      	cmp	r0, #0
 8004402:	dd07      	ble.n	8004414 <initialise_semihosting_exts+0x28>
 8004404:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004408:	f003 0201 	and.w	r2, r3, #1
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	602a      	str	r2, [r5, #0]
 8004412:	6023      	str	r3, [r4, #0]
 8004414:	b003      	add	sp, #12
 8004416:	bd30      	pop	{r4, r5, pc}
 8004418:	20000074 	.word	0x20000074
 800441c:	20000078 	.word	0x20000078

08004420 <_has_ext_stdout_stderr>:
 8004420:	b510      	push	{r4, lr}
 8004422:	4c04      	ldr	r4, [pc, #16]	; (8004434 <_has_ext_stdout_stderr+0x14>)
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	da01      	bge.n	800442e <_has_ext_stdout_stderr+0xe>
 800442a:	f7ff ffdf 	bl	80043ec <initialise_semihosting_exts>
 800442e:	6820      	ldr	r0, [r4, #0]
 8004430:	bd10      	pop	{r4, pc}
 8004432:	bf00      	nop
 8004434:	20000078 	.word	0x20000078

08004438 <initialise_monitor_handles>:
 8004438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443c:	b085      	sub	sp, #20
 800443e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80044f0 <initialise_monitor_handles+0xb8>
 8004442:	f8cd 9004 	str.w	r9, [sp, #4]
 8004446:	2303      	movs	r3, #3
 8004448:	2400      	movs	r4, #0
 800444a:	9303      	str	r3, [sp, #12]
 800444c:	af01      	add	r7, sp, #4
 800444e:	9402      	str	r4, [sp, #8]
 8004450:	2501      	movs	r5, #1
 8004452:	4628      	mov	r0, r5
 8004454:	4639      	mov	r1, r7
 8004456:	beab      	bkpt	0x00ab
 8004458:	4605      	mov	r5, r0
 800445a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80044f4 <initialise_monitor_handles+0xbc>
 800445e:	4623      	mov	r3, r4
 8004460:	4c20      	ldr	r4, [pc, #128]	; (80044e4 <initialise_monitor_handles+0xac>)
 8004462:	f8c8 5000 	str.w	r5, [r8]
 8004466:	f04f 32ff 	mov.w	r2, #4294967295
 800446a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800446e:	3301      	adds	r3, #1
 8004470:	2b14      	cmp	r3, #20
 8004472:	d1fa      	bne.n	800446a <initialise_monitor_handles+0x32>
 8004474:	f7ff ffd4 	bl	8004420 <_has_ext_stdout_stderr>
 8004478:	4d1b      	ldr	r5, [pc, #108]	; (80044e8 <initialise_monitor_handles+0xb0>)
 800447a:	b1d0      	cbz	r0, 80044b2 <initialise_monitor_handles+0x7a>
 800447c:	f04f 0a03 	mov.w	sl, #3
 8004480:	2304      	movs	r3, #4
 8004482:	f8cd 9004 	str.w	r9, [sp, #4]
 8004486:	2601      	movs	r6, #1
 8004488:	f8cd a00c 	str.w	sl, [sp, #12]
 800448c:	9302      	str	r3, [sp, #8]
 800448e:	4630      	mov	r0, r6
 8004490:	4639      	mov	r1, r7
 8004492:	beab      	bkpt	0x00ab
 8004494:	4683      	mov	fp, r0
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <initialise_monitor_handles+0xb4>)
 8004498:	f8cd 9004 	str.w	r9, [sp, #4]
 800449c:	f8c3 b000 	str.w	fp, [r3]
 80044a0:	2308      	movs	r3, #8
 80044a2:	f8cd a00c 	str.w	sl, [sp, #12]
 80044a6:	9302      	str	r3, [sp, #8]
 80044a8:	4630      	mov	r0, r6
 80044aa:	4639      	mov	r1, r7
 80044ac:	beab      	bkpt	0x00ab
 80044ae:	4606      	mov	r6, r0
 80044b0:	602e      	str	r6, [r5, #0]
 80044b2:	682b      	ldr	r3, [r5, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	bf02      	ittt	eq
 80044b8:	4b0c      	ldreq	r3, [pc, #48]	; (80044ec <initialise_monitor_handles+0xb4>)
 80044ba:	681b      	ldreq	r3, [r3, #0]
 80044bc:	602b      	streq	r3, [r5, #0]
 80044be:	2600      	movs	r6, #0
 80044c0:	f8d8 3000 	ldr.w	r3, [r8]
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	6066      	str	r6, [r4, #4]
 80044c8:	f7ff ffaa 	bl	8004420 <_has_ext_stdout_stderr>
 80044cc:	b130      	cbz	r0, 80044dc <initialise_monitor_handles+0xa4>
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <initialise_monitor_handles+0xb4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80044d6:	682b      	ldr	r3, [r5, #0]
 80044d8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80044dc:	b005      	add	sp, #20
 80044de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e2:	bf00      	nop
 80044e4:	20000198 	.word	0x20000198
 80044e8:	2000018c 	.word	0x2000018c
 80044ec:	20000194 	.word	0x20000194
 80044f0:	08004751 	.word	0x08004751
 80044f4:	20000190 	.word	0x20000190

080044f8 <_isatty>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	f7ff fd77 	bl	8003fec <findslot>
 80044fe:	2509      	movs	r5, #9
 8004500:	4604      	mov	r4, r0
 8004502:	b920      	cbnz	r0, 800450e <_isatty+0x16>
 8004504:	f7fe fd3c 	bl	8002f80 <__errno>
 8004508:	6005      	str	r5, [r0, #0]
 800450a:	4620      	mov	r0, r4
 800450c:	bd70      	pop	{r4, r5, r6, pc}
 800450e:	4628      	mov	r0, r5
 8004510:	4621      	mov	r1, r4
 8004512:	beab      	bkpt	0x00ab
 8004514:	4604      	mov	r4, r0
 8004516:	2c01      	cmp	r4, #1
 8004518:	d0f7      	beq.n	800450a <_isatty+0x12>
 800451a:	f7fe fd31 	bl	8002f80 <__errno>
 800451e:	2400      	movs	r4, #0
 8004520:	4605      	mov	r5, r0
 8004522:	2613      	movs	r6, #19
 8004524:	4630      	mov	r0, r6
 8004526:	4621      	mov	r1, r4
 8004528:	beab      	bkpt	0x00ab
 800452a:	4606      	mov	r6, r0
 800452c:	602e      	str	r6, [r5, #0]
 800452e:	e7ec      	b.n	800450a <_isatty+0x12>

08004530 <_init>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr

0800453c <_fini>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr

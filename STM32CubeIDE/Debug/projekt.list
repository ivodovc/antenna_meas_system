
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca30  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000073c  0800cb70  0800cb70  0001cb70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d2ac  0800d2ac  0001d2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d2b0  0800d2b0  0001d2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000004  0800d2b4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000384  200001e0  0800d490  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000564  0800d490  00020564  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001eb6e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004275  00000000  00000000  0003ed7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001b88  00000000  00000000  00042ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001ac0  00000000  00000000  00044b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00021fb6  00000000  00000000  00046640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f3dd  00000000  00000000  000685f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cfcbb  00000000  00000000  000879d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0015768e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000870c  00000000  00000000  001576e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cb58 	.word	0x0800cb58

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800cb58 	.word	0x0800cb58

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c64:	4a2f      	ldr	r2, [pc, #188]	; (8000d24 <MX_ADC1_Init+0xd8>)
 8000c66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c82:	2204      	movs	r2, #4
 8000c84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cc4:	221c      	movs	r2, #28
 8000cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cda:	4811      	ldr	r0, [pc, #68]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cdc:	f002 fa2e 	bl	800313c <HAL_ADC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000ce6:	f001 f843 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_ADC1_Init+0xdc>)
 8000cec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf6:	237f      	movs	r3, #127	; 0x7f
 8000cf8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000d08:	f002 fc86 	bl	8003618 <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000d12:	f001 f82d 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200001fc 	.word	0x200001fc
 8000d24:	50040000 	.word	0x50040000
 8000d28:	14f00020 	.word	0x14f00020

08000d2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	2224      	movs	r2, #36	; 0x24
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f008 fc85 	bl	800965c <memset>
  if(adcHandle->Instance==ADC1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <HAL_ADC_MspInit+0x80>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d123      	bne.n	8000da4 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d60:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d62:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000d66:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f005 fa17 	bl	80061a0 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d78:	f000 fffa 	bl	8001d70 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d80:	f7ff ff4a 	bl	8000c18 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff ff47 	bl	8000c18 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f003 fcf2 	bl	8004788 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000da4:	bf00      	nop
 8000da6:	3740      	adds	r7, #64	; 0x40
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	50040000 	.word	0x50040000

08000db0 <read_raw>:
	 voltage =raw*VDDA/4095;
	 //printf("voltage in adc_control %.5f\n", voltage);
	 return voltage;
}

uint16_t read_raw(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
		 HAL_ADC_Start(&hadc1);
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <read_raw+0x30>)
 8000db8:	f002 fb0c 	bl	80033d4 <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <read_raw+0x30>)
 8000dc2:	f002 fb8e 	bl	80034e2 <HAL_ADC_PollForConversion>
		 uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <read_raw+0x30>)
 8000dc8:	f002 fc18 	bl	80035fc <HAL_ADC_GetValue>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	80fb      	strh	r3, [r7, #6]
		 HAL_ADC_Stop(&hadc1);
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <read_raw+0x30>)
 8000dd2:	f002 fb53 	bl	800347c <HAL_ADC_Stop>
		 //printf("voltage in adc_control %.5f\n", voltage);
		 return raw;
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200001fc 	.word	0x200001fc

08000de4 <process_arguments_int>:
#include <string.h>
#include "main.h"
#include "command_processor.h"


void process_arguments_int(char* args, uint32_t* global_args){
 8000de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000de8:	b08b      	sub	sp, #44	; 0x2c
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
	uint32_t size = strlen(args);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff f9cf 	bl	8000194 <strlen>
 8000df6:	61b8      	str	r0, [r7, #24]
	uint32_t global_i = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
	// '()' is minimum string, if not return
	if (size<2){
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d978      	bls.n	8000ef4 <process_arguments_int+0x110>
		return;
	}
	// if first char is not (, something is wrong
	if (args[0] != '('){
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b28      	cmp	r3, #40	; 0x28
 8000e08:	d176      	bne.n	8000ef8 <process_arguments_int+0x114>
		return;
	}
	// last separation symbol
	uint32_t last_symbol_i = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
	// main loop, go char by char and add to args
	for (uint32_t i=1; i<size; i++){
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	e06a      	b.n	8000eea <process_arguments_int+0x106>
		// if closing parenthessis ) is found, return
		uint8_t c = args[i];
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	75fb      	strb	r3, [r7, #23]

		// parse int
		if (c == ',' || c == ')'){
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	2b2c      	cmp	r3, #44	; 0x2c
 8000e22:	d002      	beq.n	8000e2a <process_arguments_int+0x46>
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b29      	cmp	r3, #41	; 0x29
 8000e28:	d159      	bne.n	8000ede <process_arguments_int+0xfa>
 8000e2a:	466b      	mov	r3, sp
 8000e2c:	461e      	mov	r6, r3
			// if not long enough string is found, e.g. (,,)
			if (i-last_symbol_i-1 <= 0){
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d103      	bne.n	8000e40 <process_arguments_int+0x5c>
				last_symbol_i = i;
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	46b5      	mov	sp, r6
 8000e3e:	e051      	b.n	8000ee4 <process_arguments_int+0x100>
				continue;
			}
			char arg_as_str[i - last_symbol_i];
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	1ad1      	subs	r1, r2, r3
 8000e46:	460b      	mov	r3, r1
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	461d      	mov	r5, r3
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	00eb      	lsls	r3, r5, #3
 8000e5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e60:	00e2      	lsls	r2, r4, #3
 8000e62:	2300      	movs	r3, #0
 8000e64:	4688      	mov	r8, r1
 8000e66:	4699      	mov	r9, r3
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e7c:	1dcb      	adds	r3, r1, #7
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	ebad 0d03 	sub.w	sp, sp, r3
 8000e86:	466b      	mov	r3, sp
 8000e88:	3300      	adds	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
			// add delimiting symbol
			arg_as_str[i - last_symbol_i-1] = '\0';
 8000e8c:	69fa      	ldr	r2, [r7, #28]
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	3b01      	subs	r3, #1
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	2100      	movs	r1, #0
 8000e98:	54d1      	strb	r1, [r2, r3]
			memcpy(arg_as_str, args+last_symbol_i+1, i - last_symbol_i-1);
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	18d1      	adds	r1, r2, r3
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f008 fbc7 	bl	8009640 <memcpy>
			last_symbol_i = i;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	623b      	str	r3, [r7, #32]
			// add to global_args
			uint32_t parsed_int = atoi(arg_as_str);
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f008 fb8c 	bl	80095d4 <atoi>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60bb      	str	r3, [r7, #8]
			global_args[global_i] = parsed_int;
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	601a      	str	r2, [r3, #0]
			global_i++;
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	3301      	adds	r3, #1
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
			if (global_i > MAX_ARG_LEN){
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	2b0a      	cmp	r3, #10
 8000ed6:	d901      	bls.n	8000edc <process_arguments_int+0xf8>
 8000ed8:	46b5      	mov	sp, r6
 8000eda:	e010      	b.n	8000efe <process_arguments_int+0x11a>
 8000edc:	46b5      	mov	sp, r6
				return;
			}
		}
		if (c == ')'){
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
 8000ee0:	2b29      	cmp	r3, #41	; 0x29
 8000ee2:	d00b      	beq.n	8000efc <process_arguments_int+0x118>
	for (uint32_t i=1; i<size; i++){
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d390      	bcc.n	8000e14 <process_arguments_int+0x30>
 8000ef2:	e004      	b.n	8000efe <process_arguments_int+0x11a>
		return;
 8000ef4:	bf00      	nop
 8000ef6:	e002      	b.n	8000efe <process_arguments_int+0x11a>
		return;
 8000ef8:	bf00      	nop
 8000efa:	e000      	b.n	8000efe <process_arguments_int+0x11a>
					return;
 8000efc:	bf00      	nop
		}
	}
}
 8000efe:	372c      	adds	r7, #44	; 0x2c
 8000f00:	46bd      	mov	sp, r7
 8000f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f06 <process_arguments_hex>:

void process_arguments_hex(char* args, uint32_t* global_args){
 8000f06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f0a:	b08b      	sub	sp, #44	; 0x2c
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
	uint32_t size = strlen(args);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff f93e 	bl	8000194 <strlen>
 8000f18:	61b8      	str	r0, [r7, #24]
	uint32_t global_i = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
	// '()' is minimum string, if not return
	if (size<2){
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d97a      	bls.n	800101a <process_arguments_hex+0x114>
		return;
	}
	// if first char is not (, something is wrong
	if (args[0] != '('){
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b28      	cmp	r3, #40	; 0x28
 8000f2a:	d178      	bne.n	800101e <process_arguments_hex+0x118>
		return;
	}
	// last separation symbol
	uint32_t last_symbol_i = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
	// main loop, go char by char and add to args
	for (uint32_t i=1; i<size; i++){
 8000f30:	2301      	movs	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	e06c      	b.n	8001010 <process_arguments_hex+0x10a>
		// if closing parenthessis ) is found, return
		uint8_t c = args[i];
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	75fb      	strb	r3, [r7, #23]

		// parse int
		if (c == ',' || c == ')'){
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	2b2c      	cmp	r3, #44	; 0x2c
 8000f44:	d002      	beq.n	8000f4c <process_arguments_hex+0x46>
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
 8000f48:	2b29      	cmp	r3, #41	; 0x29
 8000f4a:	d15b      	bne.n	8001004 <process_arguments_hex+0xfe>
 8000f4c:	466b      	mov	r3, sp
 8000f4e:	461e      	mov	r6, r3
			// if not long enough string is found, e.g. (,,)
			if (i-last_symbol_i-1 <= 0){
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d103      	bne.n	8000f62 <process_arguments_hex+0x5c>
				last_symbol_i = i;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	623b      	str	r3, [r7, #32]
 8000f5e:	46b5      	mov	sp, r6
 8000f60:	e053      	b.n	800100a <process_arguments_hex+0x104>
				continue;
			}
			char arg_as_str[i - last_symbol_i];
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	1ad1      	subs	r1, r2, r3
 8000f68:	460b      	mov	r3, r1
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	460c      	mov	r4, r1
 8000f72:	461d      	mov	r5, r3
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	00eb      	lsls	r3, r5, #3
 8000f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f82:	00e2      	lsls	r2, r4, #3
 8000f84:	2300      	movs	r3, #0
 8000f86:	4688      	mov	r8, r1
 8000f88:	4699      	mov	r9, r3
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f9e:	1dcb      	adds	r3, r1, #7
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	ebad 0d03 	sub.w	sp, sp, r3
 8000fa8:	466b      	mov	r3, sp
 8000faa:	3300      	adds	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
			// add delimiting symbol
			arg_as_str[i - last_symbol_i-1] = '\0';
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	2100      	movs	r1, #0
 8000fba:	54d1      	strb	r1, [r2, r3]
			memcpy(arg_as_str, args+last_symbol_i+1, i - last_symbol_i-1);
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	18d1      	adds	r1, r2, r3
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	461a      	mov	r2, r3
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f008 fb36 	bl	8009640 <memcpy>
			last_symbol_i = i;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	623b      	str	r3, [r7, #32]
			// add to global_args
			// convert from HEX string
			// ueed to use strtoul instead of strtol, as we are converting to an unsigned int
			uint32_t parsed_int = strtoul(arg_as_str, NULL, 16);
 8000fd8:	2210      	movs	r2, #16
 8000fda:	2100      	movs	r1, #0
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f009 fa59 	bl	800a494 <strtoul>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60bb      	str	r3, [r7, #8]
			global_args[global_i] = parsed_int;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	601a      	str	r2, [r3, #0]
			global_i++;
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
			if (global_i > MAX_ARG_LEN){
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	2b0a      	cmp	r3, #10
 8000ffc:	d901      	bls.n	8001002 <process_arguments_hex+0xfc>
 8000ffe:	46b5      	mov	sp, r6
 8001000:	e010      	b.n	8001024 <process_arguments_hex+0x11e>
 8001002:	46b5      	mov	sp, r6
				return;
			}
		}
		if (c == ')'){
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2b29      	cmp	r3, #41	; 0x29
 8001008:	d00b      	beq.n	8001022 <process_arguments_hex+0x11c>
	for (uint32_t i=1; i<size; i++){
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3301      	adds	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	429a      	cmp	r2, r3
 8001016:	d38e      	bcc.n	8000f36 <process_arguments_hex+0x30>
 8001018:	e004      	b.n	8001024 <process_arguments_hex+0x11e>
		return;
 800101a:	bf00      	nop
 800101c:	e002      	b.n	8001024 <process_arguments_hex+0x11e>
		return;
 800101e:	bf00      	nop
 8001020:	e000      	b.n	8001024 <process_arguments_hex+0x11e>
					return;
 8001022:	bf00      	nop
		}
	}
}
 8001024:	372c      	adds	r7, #44	; 0x2c
 8001026:	46bd      	mov	sp, r7
 8001028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800102c <process_command_string>:

// Process string commands
void process_command_string(char* string, command_t* global_command, uint32_t* global_args){
 800102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001030:	b08f      	sub	sp, #60	; 0x3c
 8001032:	af00      	add	r7, sp, #0
 8001034:	6178      	str	r0, [r7, #20]
 8001036:	6139      	str	r1, [r7, #16]
 8001038:	60fa      	str	r2, [r7, #12]
 800103a:	466b      	mov	r3, sp
 800103c:	461e      	mov	r6, r3
	char AMS_substr[4];
	AMS_substr[3] = '\0';
 800103e:	2300      	movs	r3, #0
 8001040:	77fb      	strb	r3, [r7, #31]
	memcpy(AMS_substr, &string[0], 3);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	2203      	movs	r2, #3
 8001048:	6979      	ldr	r1, [r7, #20]
 800104a:	4618      	mov	r0, r3
 800104c:	f008 faf8 	bl	8009640 <memcpy>
	// If command doesnt begin with AMS set global_command to NONE and return
	if (strcmp(AMS_substr, "AMS") != 0){
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	49aa      	ldr	r1, [pc, #680]	; (8001300 <process_command_string+0x2d4>)
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f892 	bl	8000180 <strcmp>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <process_command_string+0x40>
		*global_command = AMS_NONE;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	46b5      	mov	sp, r6
 800106a:	e144      	b.n	80012f6 <process_command_string+0x2ca>
		return;
	}
	// find string between _ and (
	uint8_t start_index = strchr(string, '_') - string;
 800106c:	215f      	movs	r1, #95	; 0x5f
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f009 f904 	bl	800a27c <strchr>
 8001074:	4602      	mov	r2, r0
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t end_index = strchr(string, '(') - string;
 800107e:	2128      	movs	r1, #40	; 0x28
 8001080:	6978      	ldr	r0, [r7, #20]
 8001082:	f009 f8fb 	bl	800a27c <strchr>
 8001086:	4602      	mov	r2, r0
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	char command[end_index - start_index];
 8001090:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001098:	1ad1      	subs	r1, r2, r3
 800109a:	1e4b      	subs	r3, r1, #1
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
 800109e:	460a      	mov	r2, r1
 80010a0:	2300      	movs	r3, #0
 80010a2:	603a      	str	r2, [r7, #0]
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	f04f 0300 	mov.w	r3, #0
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	00c3      	lsls	r3, r0, #3
 80010b2:	6838      	ldr	r0, [r7, #0]
 80010b4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	00c2      	lsls	r2, r0, #3
 80010bc:	460a      	mov	r2, r1
 80010be:	2300      	movs	r3, #0
 80010c0:	4692      	mov	sl, r2
 80010c2:	469b      	mov	fp, r3
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80010d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80010d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80010d8:	460b      	mov	r3, r1
 80010da:	3307      	adds	r3, #7
 80010dc:	08db      	lsrs	r3, r3, #3
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	ebad 0d03 	sub.w	sp, sp, r3
 80010e4:	466b      	mov	r3, sp
 80010e6:	3300      	adds	r3, #0
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	command[end_index - start_index - 1] = '\0';
 80010ea:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80010ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	3b01      	subs	r3, #1
 80010f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010f8:	2100      	movs	r1, #0
 80010fa:	54d1      	strb	r1, [r2, r3]
	memcpy(command, &string[start_index+1], end_index-start_index-1);
 80010fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001100:	3301      	adds	r3, #1
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	18d1      	adds	r1, r2, r3
 8001106:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800110a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	3b01      	subs	r3, #1
 8001112:	461a      	mov	r2, r3
 8001114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001116:	f008 fa93 	bl	8009640 <memcpy>
	// set command based on string

	if (strcmp(command, "VERSION") == 0){
 800111a:	497a      	ldr	r1, [pc, #488]	; (8001304 <process_command_string+0x2d8>)
 800111c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800111e:	f7ff f82f 	bl	8000180 <strcmp>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <process_command_string+0x104>
		*global_command = AMS_VERSION;
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	2208      	movs	r2, #8
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e07b      	b.n	8001228 <process_command_string+0x1fc>
	}else if (strcmp(command, "SWEEP") == 0){
 8001130:	4975      	ldr	r1, [pc, #468]	; (8001308 <process_command_string+0x2dc>)
 8001132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001134:	f7ff f824 	bl	8000180 <strcmp>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d103      	bne.n	8001146 <process_command_string+0x11a>
		*global_command = AMS_SWEEP;
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e070      	b.n	8001228 <process_command_string+0x1fc>
	}else if (strcmp(command, "SWEEP_NDIV") == 0){
 8001146:	4971      	ldr	r1, [pc, #452]	; (800130c <process_command_string+0x2e0>)
 8001148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800114a:	f7ff f819 	bl	8000180 <strcmp>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <process_command_string+0x130>
		*global_command = AMS_SWEEP_NDIV;
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	2204      	movs	r2, #4
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	e065      	b.n	8001228 <process_command_string+0x1fc>
	}else if (strcmp(command, "SWEEP_CONT") == 0){
 800115c:	496c      	ldr	r1, [pc, #432]	; (8001310 <process_command_string+0x2e4>)
 800115e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001160:	f7ff f80e 	bl	8000180 <strcmp>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <process_command_string+0x146>
		*global_command = AMS_SWEEP_CONT;
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	2202      	movs	r2, #2
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	e05a      	b.n	8001228 <process_command_string+0x1fc>
	}else if (strcmp(command, "REGISTER")== 0){
 8001172:	4968      	ldr	r1, [pc, #416]	; (8001314 <process_command_string+0x2e8>)
 8001174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001176:	f7ff f803 	bl	8000180 <strcmp>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d103      	bne.n	8001188 <process_command_string+0x15c>
		*global_command = AMS_REGISTER;
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	2203      	movs	r2, #3
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e04f      	b.n	8001228 <process_command_string+0x1fc>
	}else if (strcmp(command, "SINGLE")== 0){
 8001188:	4963      	ldr	r1, [pc, #396]	; (8001318 <process_command_string+0x2ec>)
 800118a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800118c:	f7fe fff8 	bl	8000180 <strcmp>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d103      	bne.n	800119e <process_command_string+0x172>
		*global_command = AMS_SINGLE;
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	2209      	movs	r2, #9
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e044      	b.n	8001228 <process_command_string+0x1fc>
	}else if (strcmp(command, "HOWAREYOU")== 0){
 800119e:	495f      	ldr	r1, [pc, #380]	; (800131c <process_command_string+0x2f0>)
 80011a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011a2:	f7fe ffed 	bl	8000180 <strcmp>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d103      	bne.n	80011b4 <process_command_string+0x188>
		*global_command = AMS_HOWAREYOU;
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	220a      	movs	r2, #10
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e039      	b.n	8001228 <process_command_string+0x1fc>
	}else if (strcmp(command, "STOP")== 0){
 80011b4:	495a      	ldr	r1, [pc, #360]	; (8001320 <process_command_string+0x2f4>)
 80011b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011b8:	f7fe ffe2 	bl	8000180 <strcmp>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d103      	bne.n	80011ca <process_command_string+0x19e>
		*global_command = AMS_STOP;
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	220b      	movs	r2, #11
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	e02e      	b.n	8001228 <process_command_string+0x1fc>
	}else if (strcmp(command, "CHECK")== 0){
 80011ca:	4956      	ldr	r1, [pc, #344]	; (8001324 <process_command_string+0x2f8>)
 80011cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011ce:	f7fe ffd7 	bl	8000180 <strcmp>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d103      	bne.n	80011e0 <process_command_string+0x1b4>
		*global_command = AMS_CHECK;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	220c      	movs	r2, #12
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e023      	b.n	8001228 <process_command_string+0x1fc>
	}else if (strcmp(command, "LOWPOWER")== 0){
 80011e0:	4951      	ldr	r1, [pc, #324]	; (8001328 <process_command_string+0x2fc>)
 80011e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011e4:	f7fe ffcc 	bl	8000180 <strcmp>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d103      	bne.n	80011f6 <process_command_string+0x1ca>
		*global_command = AMS_LOWPOWER;
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	2205      	movs	r2, #5
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e018      	b.n	8001228 <process_command_string+0x1fc>
	}else if (strcmp(command, "WAKEUP")== 0){
 80011f6:	494d      	ldr	r1, [pc, #308]	; (800132c <process_command_string+0x300>)
 80011f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011fa:	f7fe ffc1 	bl	8000180 <strcmp>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d103      	bne.n	800120c <process_command_string+0x1e0>
		*global_command = AMS_WAKEUP;
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	2206      	movs	r2, #6
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e00d      	b.n	8001228 <process_command_string+0x1fc>
	}else if (strcmp(command, "GETPOWERSTATUS")== 0){
 800120c:	4948      	ldr	r1, [pc, #288]	; (8001330 <process_command_string+0x304>)
 800120e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001210:	f7fe ffb6 	bl	8000180 <strcmp>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d103      	bne.n	8001222 <process_command_string+0x1f6>
		*global_command = AMS_GETPOWERSTATUS;
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	2207      	movs	r2, #7
 800121e:	701a      	strb	r2, [r3, #0]
 8001220:	e002      	b.n	8001228 <process_command_string+0x1fc>
	}else{
		*global_command = AMS_NONE;
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
	}
	// process arguments (max length is 10)
	memcpy(command, &string[start_index], end_index-start_index+1);
 8001228:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	18d1      	adds	r1, r2, r3
 8001230:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001234:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	3301      	adds	r3, #1
 800123c:	461a      	mov	r2, r3
 800123e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001240:	f008 f9fe 	bl	8009640 <memcpy>
	uint8_t total_end_index = strchr(string, ')') - string;
 8001244:	2129      	movs	r1, #41	; 0x29
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f009 f818 	bl	800a27c <strchr>
 800124c:	4602      	mov	r2, r0
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	char args[total_end_index - end_index + 2];
 8001256:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800125a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	1c99      	adds	r1, r3, #2
 8001262:	1e4b      	subs	r3, r1, #1
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
 8001266:	460a      	mov	r2, r1
 8001268:	2300      	movs	r3, #0
 800126a:	4690      	mov	r8, r2
 800126c:	4699      	mov	r9, r3
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800127a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800127e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001282:	460a      	mov	r2, r1
 8001284:	2300      	movs	r3, #0
 8001286:	4614      	mov	r4, r2
 8001288:	461d      	mov	r5, r3
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	00eb      	lsls	r3, r5, #3
 8001294:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001298:	00e2      	lsls	r2, r4, #3
 800129a:	460b      	mov	r3, r1
 800129c:	3307      	adds	r3, #7
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	ebad 0d03 	sub.w	sp, sp, r3
 80012a6:	466b      	mov	r3, sp
 80012a8:	3300      	adds	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
	args[total_end_index - end_index + 1] = '\0';
 80012ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80012b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	6a3a      	ldr	r2, [r7, #32]
 80012ba:	2100      	movs	r1, #0
 80012bc:	54d1      	strb	r1, [r2, r3]
	memcpy(args, &string[end_index], total_end_index-end_index+1);
 80012be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	18d1      	adds	r1, r2, r3
 80012c6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80012ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	3301      	adds	r3, #1
 80012d2:	461a      	mov	r2, r3
 80012d4:	6a38      	ldr	r0, [r7, #32]
 80012d6:	f008 f9b3 	bl	8009640 <memcpy>
	// for command AMS_REGISTER use hex version of string processor
	if (*global_command==AMS_REGISTER){
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d104      	bne.n	80012ec <process_command_string+0x2c0>
		process_arguments_hex(args, global_args);
 80012e2:	68f9      	ldr	r1, [r7, #12]
 80012e4:	6a38      	ldr	r0, [r7, #32]
 80012e6:	f7ff fe0e 	bl	8000f06 <process_arguments_hex>
 80012ea:	e003      	b.n	80012f4 <process_command_string+0x2c8>
	} else {
		process_arguments_int(args, global_args);
 80012ec:	68f9      	ldr	r1, [r7, #12]
 80012ee:	6a38      	ldr	r0, [r7, #32]
 80012f0:	f7ff fd78 	bl	8000de4 <process_arguments_int>
 80012f4:	46b5      	mov	sp, r6
	}
}
 80012f6:	373c      	adds	r7, #60	; 0x3c
 80012f8:	46bd      	mov	sp, r7
 80012fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012fe:	bf00      	nop
 8001300:	0800cb70 	.word	0x0800cb70
 8001304:	0800cb74 	.word	0x0800cb74
 8001308:	0800cb7c 	.word	0x0800cb7c
 800130c:	0800cb84 	.word	0x0800cb84
 8001310:	0800cb90 	.word	0x0800cb90
 8001314:	0800cb9c 	.word	0x0800cb9c
 8001318:	0800cba8 	.word	0x0800cba8
 800131c:	0800cbb0 	.word	0x0800cbb0
 8001320:	0800cbbc 	.word	0x0800cbbc
 8001324:	0800cbc4 	.word	0x0800cbc4
 8001328:	0800cbcc 	.word	0x0800cbcc
 800132c:	0800cbd8 	.word	0x0800cbd8
 8001330:	0800cbe0 	.word	0x0800cbe0

08001334 <LL_AHB1_GRP1_EnableClock>:
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800133c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001340:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4313      	orrs	r3, r2
 800134a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800134c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4013      	ands	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001358:	68fb      	ldr	r3, [r7, #12]
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800136a:	2004      	movs	r0, #4
 800136c:	f7ff ffe2 	bl	8001334 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ffdf 	bl	8001334 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	200b      	movs	r0, #11
 800137c:	f002 ff83 	bl	8004286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001380:	200b      	movs	r0, #11
 8001382:	f002 ff9a 	bl	80042ba <HAL_NVIC_EnableIRQ>

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}

0800138a <LL_AHB2_GRP1_EnableClock>:
{
 800138a:	b480      	push	{r7}
 800138c:	b085      	sub	sp, #20
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4313      	orrs	r3, r2
 80013a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4013      	ands	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff ffda 	bl	800138a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2002      	movs	r0, #2
 80013d8:	f7ff ffd7 	bl	800138a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|LED_RED_Pin
 80013dc:	2200      	movs	r2, #0
 80013de:	f641 011c 	movw	r1, #6172	; 0x181c
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f003 fb37 	bl	8004a58 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2102      	movs	r1, #2
 80013ee:	4825      	ldr	r0, [pc, #148]	; (8001484 <MX_GPIO_Init+0xc8>)
 80013f0:	f003 fb32 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2130      	movs	r1, #48	; 0x30
 80013f8:	4822      	ldr	r0, [pc, #136]	; (8001484 <MX_GPIO_Init+0xc8>)
 80013fa:	f003 fb2d 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PAPin
                           PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|LED_RED_Pin
 80013fe:	f641 031c 	movw	r3, #6172	; 0x181c
 8001402:	607b      	str	r3, [r7, #4]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f003 f9b6 	bl	8004788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800141c:	2340      	movs	r3, #64	; 0x40
 800141e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001430:	f003 f9aa 	bl	8004788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001434:	2304      	movs	r3, #4
 8001436:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	4619      	mov	r1, r3
 8001444:	480f      	ldr	r0, [pc, #60]	; (8001484 <MX_GPIO_Init+0xc8>)
 8001446:	f003 f99f 	bl	8004788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800144a:	2301      	movs	r3, #1
 800144c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001452:	2301      	movs	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4619      	mov	r1, r3
 800145a:	480a      	ldr	r0, [pc, #40]	; (8001484 <MX_GPIO_Init+0xc8>)
 800145c:	f003 f994 	bl	8004788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001460:	2332      	movs	r3, #50	; 0x32
 8001462:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4619      	mov	r1, r3
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_GPIO_Init+0xc8>)
 8001476:	f003 f987 	bl	8004788 <HAL_GPIO_Init>

}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	48000400 	.word	0x48000400

08001488 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ac:	68fb      	ldr	r3, [r7, #12]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_IPCC_Init+0x20>)
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <MX_IPCC_Init+0x24>)
 80014c4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_IPCC_Init+0x20>)
 80014c8:	f003 faf8 	bl	8004abc <HAL_IPCC_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80014d2:	f000 fc4d 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000260 	.word	0x20000260
 80014e0:	58000c00 	.word	0x58000c00

080014e4 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <HAL_IPCC_MspInit+0x44>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d113      	bne.n	800151e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80014f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80014fa:	f7ff ffc5 	bl	8001488 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	202c      	movs	r0, #44	; 0x2c
 8001504:	f002 febf 	bl	8004286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001508:	202c      	movs	r0, #44	; 0x2c
 800150a:	f002 fed6 	bl	80042ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	202d      	movs	r0, #45	; 0x2d
 8001514:	f002 feb7 	bl	8004286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001518:	202d      	movs	r0, #45	; 0x2d
 800151a:	f002 fece 	bl	80042ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	58000c00 	.word	0x58000c00

0800152c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001534:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001538:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001544:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001548:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800154c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00b      	beq.n	800156c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001554:	e000      	b.n	8001558 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001556:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001558:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f9      	beq.n	8001556 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001562:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800156c:	687b      	ldr	r3, [r7, #4]
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_write>:

void set_requested_frequency_NDIV(float freq, uint32_t NDIV);
void write_reg(uint32_t reg);


int _write(int file, char *ptr, int len) {
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e009      	b.n	80015a0 <_write+0x26>
    ITM_SendChar(*ptr++);
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60ba      	str	r2, [r7, #8]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ffc9 	bl	800152c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf1      	blt.n	800158c <_write+0x12>
  }
  return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c4:	d125      	bne.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		if (global_command==AMS_NONE || global_command==AMS_STOP){
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x22>
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b0b      	cmp	r3, #11
 80015d4:	d10f      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0x42>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f003 fa3a 	bl	8004a58 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80015e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f003 fa4c 	bl	8004a88 <HAL_GPIO_TogglePin>
			DisableRFOutput();//safeguard in case something bad happened in the code
 80015f0:	f000 fbe1 	bl	8001db6 <DisableRFOutput>
		}else{
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		}
	}
}
 80015f4:	e00d      	b.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x5e>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001600:	f003 fa2a 	bl	8004a58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800160a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160e:	f003 fa23 	bl	8004a58 <HAL_GPIO_WritePin>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000300 	.word	0x20000300

08001620 <do_commands>:
void HAL_Uart_RxCpltCallback(UART_HandleTypeDef *huart);



char strbuf[100];
void do_commands(){
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b09e      	sub	sp, #120	; 0x78
 8001624:	af02      	add	r7, sp, #8
	// check if there is command and if is, then process it
	if (global_command == AMS_SWEEP){
 8001626:	4b93      	ldr	r3, [pc, #588]	; (8001874 <do_commands+0x254>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d169      	bne.n	8001702 <do_commands+0xe2>
		uint32_t from = global_args[0];
 800162e:	4b92      	ldr	r3, [pc, #584]	; (8001878 <do_commands+0x258>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	663b      	str	r3, [r7, #96]	; 0x60
		uint32_t to = global_args[1];
 8001634:	4b90      	ldr	r3, [pc, #576]	; (8001878 <do_commands+0x258>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	65fb      	str	r3, [r7, #92]	; 0x5c
		uint32_t step = global_args[2];
 800163a:	4b8f      	ldr	r3, [pc, #572]	; (8001878 <do_commands+0x258>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	65bb      	str	r3, [r7, #88]	; 0x58
		uint32_t pwr = global_args[3];
 8001640:	4b8d      	ldr	r3, [pc, #564]	; (8001878 <do_commands+0x258>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	657b      	str	r3, [r7, #84]	; 0x54
		EnableRFOutput();
 8001646:	f000 fbac 	bl	8001da2 <EnableRFOutput>
		setRFA_PWR(pwr-1); // -1 because pwr is defined as 1,2,3,4 but MAX2870 expects 0,1,2,3
 800164a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164c:	3b01      	subs	r3, #1
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fc8e 	bl	8001f70 <setRFA_PWR>
		uint32_t i;
		for (i=from; i<=to; i+=step){
 8001654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001656:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001658:	e024      	b.n	80016a4 <do_commands+0x84>
			  //printf("setting %d MHz\n", i);
			  if (global_command==AMS_STOP)
 800165a:	4b86      	ldr	r3, [pc, #536]	; (8001874 <do_commands+0x254>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b0b      	cmp	r3, #11
 8001660:	f000 8296 	beq.w	8001b90 <do_commands+0x570>
				  return;
			  set_requested_frequency(i);
 8001664:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001666:	f000 fcf3 	bl	8002050 <set_requested_frequency>
			  HAL_Delay(1);
 800166a:	2001      	movs	r0, #1
 800166c:	f001 fb2c 	bl	8002cc8 <HAL_Delay>
			  uint16_t raw = read_raw();
 8001670:	f7ff fb9e 	bl	8000db0 <read_raw>
 8001674:	4603      	mov	r3, r0
 8001676:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			  sprintf(strbuf, "{%lu, %u}", i, raw);
 800167a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800167e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001680:	497e      	ldr	r1, [pc, #504]	; (800187c <do_commands+0x25c>)
 8001682:	487f      	ldr	r0, [pc, #508]	; (8001880 <do_commands+0x260>)
 8001684:	f008 fdda 	bl	800a23c <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)&strbuf, strlen(strbuf), UART_TIMEOUT);
 8001688:	487d      	ldr	r0, [pc, #500]	; (8001880 <do_commands+0x260>)
 800168a:	f7fe fd83 	bl	8000194 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	2364      	movs	r3, #100	; 0x64
 8001694:	497a      	ldr	r1, [pc, #488]	; (8001880 <do_commands+0x260>)
 8001696:	487b      	ldr	r0, [pc, #492]	; (8001884 <do_commands+0x264>)
 8001698:	f005 fe66 	bl	8007368 <HAL_UART_Transmit>
		for (i=from; i<=to; i+=step){
 800169c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800169e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016a0:	4413      	add	r3, r2
 80016a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80016a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80016a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d9d6      	bls.n	800165a <do_commands+0x3a>
		 }
		// send last frequency
		if (i!=to){
 80016ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80016ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d018      	beq.n	80016e6 <do_commands+0xc6>
			set_requested_frequency(to);
 80016b4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80016b6:	f000 fccb 	bl	8002050 <set_requested_frequency>
			//HAL_Delay(1);
			uint16_t raw = read_raw();
 80016ba:	f7ff fb79 	bl	8000db0 <read_raw>
 80016be:	4603      	mov	r3, r0
 80016c0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
			sprintf(strbuf, "{%lu, %u}", to, raw);
 80016c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016ca:	496c      	ldr	r1, [pc, #432]	; (800187c <do_commands+0x25c>)
 80016cc:	486c      	ldr	r0, [pc, #432]	; (8001880 <do_commands+0x260>)
 80016ce:	f008 fdb5 	bl	800a23c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)&strbuf, strlen(strbuf), UART_TIMEOUT);
 80016d2:	486b      	ldr	r0, [pc, #428]	; (8001880 <do_commands+0x260>)
 80016d4:	f7fe fd5e 	bl	8000194 <strlen>
 80016d8:	4603      	mov	r3, r0
 80016da:	b29a      	uxth	r2, r3
 80016dc:	2364      	movs	r3, #100	; 0x64
 80016de:	4968      	ldr	r1, [pc, #416]	; (8001880 <do_commands+0x260>)
 80016e0:	4868      	ldr	r0, [pc, #416]	; (8001884 <do_commands+0x264>)
 80016e2:	f005 fe41 	bl	8007368 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)";", 2, UART_TIMEOUT);
 80016e6:	2364      	movs	r3, #100	; 0x64
 80016e8:	2202      	movs	r2, #2
 80016ea:	4967      	ldr	r1, [pc, #412]	; (8001888 <do_commands+0x268>)
 80016ec:	4865      	ldr	r0, [pc, #404]	; (8001884 <do_commands+0x264>)
 80016ee:	f005 fe3b 	bl	8007368 <HAL_UART_Transmit>
		printf("Done\n");
 80016f2:	4866      	ldr	r0, [pc, #408]	; (800188c <do_commands+0x26c>)
 80016f4:	f008 fd8a 	bl	800a20c <puts>
		global_command = AMS_NONE;
 80016f8:	4b5e      	ldr	r3, [pc, #376]	; (8001874 <do_commands+0x254>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
		DisableRFOutput();
 80016fe:	f000 fb5a 	bl	8001db6 <DisableRFOutput>

	}if (global_command == AMS_SWEEP_NDIV){
 8001702:	4b5c      	ldr	r3, [pc, #368]	; (8001874 <do_commands+0x254>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b04      	cmp	r3, #4
 8001708:	f040 8098 	bne.w	800183c <do_commands+0x21c>
		uint32_t from = global_args[0];
 800170c:	4b5a      	ldr	r3, [pc, #360]	; (8001878 <do_commands+0x258>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
		uint32_t to = global_args[1];
 8001712:	4b59      	ldr	r3, [pc, #356]	; (8001878 <do_commands+0x258>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	617b      	str	r3, [r7, #20]
		uint32_t step = global_args[2];
 8001718:	4b57      	ldr	r3, [pc, #348]	; (8001878 <do_commands+0x258>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	613b      	str	r3, [r7, #16]
		uint32_t pwr = global_args[3];
 800171e:	4b56      	ldr	r3, [pc, #344]	; (8001878 <do_commands+0x258>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	60fb      	str	r3, [r7, #12]
		uint32_t ndiv = global_args[4];
 8001724:	4b54      	ldr	r3, [pc, #336]	; (8001878 <do_commands+0x258>)
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	60bb      	str	r3, [r7, #8]
		float real_step = (float)step/(float)ndiv;
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800173e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001742:	edc7 7a01 	vstr	s15, [r7, #4]
		EnableRFOutput();
 8001746:	f000 fb2c 	bl	8001da2 <EnableRFOutput>
		setRFA_PWR(pwr-1); // -1 because pwr is defined as 1,2,3,4 but MAX2870 expects 0,1,2,3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3b01      	subs	r3, #1
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fc0e 	bl	8001f70 <setRFA_PWR>
		float a = (float)from;
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800175e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		while (a<=(float)to){
 8001762:	e02d      	b.n	80017c0 <do_commands+0x1a0>
			  //printf("setting %d MHz\n", i);
			  //printf("%f\n", i);
			  if (global_command==AMS_STOP)
 8001764:	4b43      	ldr	r3, [pc, #268]	; (8001874 <do_commands+0x254>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b0b      	cmp	r3, #11
 800176a:	f000 8213 	beq.w	8001b94 <do_commands+0x574>
				  return;
			  set_requested_frequency_NDIV(a, ndiv);
 800176e:	68b8      	ldr	r0, [r7, #8]
 8001770:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8001774:	f000 fcdc 	bl	8002130 <set_requested_frequency_NDIV>
			  HAL_Delay(1);
 8001778:	2001      	movs	r0, #1
 800177a:	f001 faa5 	bl	8002cc8 <HAL_Delay>
			  uint16_t raw = read_raw();
 800177e:	f7ff fb17 	bl	8000db0 <read_raw>
 8001782:	4603      	mov	r3, r0
 8001784:	803b      	strh	r3, [r7, #0]
			  sprintf(strbuf, "{%.6f, %u}", a, raw);
 8001786:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001788:	f7fe fec6 	bl	8000518 <__aeabi_f2d>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	8839      	ldrh	r1, [r7, #0]
 8001792:	9100      	str	r1, [sp, #0]
 8001794:	493e      	ldr	r1, [pc, #248]	; (8001890 <do_commands+0x270>)
 8001796:	483a      	ldr	r0, [pc, #232]	; (8001880 <do_commands+0x260>)
 8001798:	f008 fd50 	bl	800a23c <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)&strbuf, strlen(strbuf), UART_TIMEOUT);
 800179c:	4838      	ldr	r0, [pc, #224]	; (8001880 <do_commands+0x260>)
 800179e:	f7fe fcf9 	bl	8000194 <strlen>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	2364      	movs	r3, #100	; 0x64
 80017a8:	4935      	ldr	r1, [pc, #212]	; (8001880 <do_commands+0x260>)
 80017aa:	4836      	ldr	r0, [pc, #216]	; (8001884 <do_commands+0x264>)
 80017ac:	f005 fddc 	bl	8007368 <HAL_UART_Transmit>
			  a = a + (float)real_step;
 80017b0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80017b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017bc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		while (a<=(float)to){
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ca:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80017ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	d9c5      	bls.n	8001764 <do_commands+0x144>
		}
		// send last frequency
		if (a!=to){
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e2:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80017e6:	eeb4 7a67 	vcmp.f32	s14, s15
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	d016      	beq.n	800181e <do_commands+0x1fe>
			set_requested_frequency(to);
 80017f0:	6978      	ldr	r0, [r7, #20]
 80017f2:	f000 fc2d 	bl	8002050 <set_requested_frequency>
			//HAL_Delay(1);
			uint16_t raw = read_raw();
 80017f6:	f7ff fadb 	bl	8000db0 <read_raw>
 80017fa:	4603      	mov	r3, r0
 80017fc:	807b      	strh	r3, [r7, #2]
			sprintf(strbuf, "{%lu, %u}", to, raw);
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	491e      	ldr	r1, [pc, #120]	; (800187c <do_commands+0x25c>)
 8001804:	481e      	ldr	r0, [pc, #120]	; (8001880 <do_commands+0x260>)
 8001806:	f008 fd19 	bl	800a23c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)&strbuf, strlen(strbuf), UART_TIMEOUT);
 800180a:	481d      	ldr	r0, [pc, #116]	; (8001880 <do_commands+0x260>)
 800180c:	f7fe fcc2 	bl	8000194 <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	b29a      	uxth	r2, r3
 8001814:	2364      	movs	r3, #100	; 0x64
 8001816:	491a      	ldr	r1, [pc, #104]	; (8001880 <do_commands+0x260>)
 8001818:	481a      	ldr	r0, [pc, #104]	; (8001884 <do_commands+0x264>)
 800181a:	f005 fda5 	bl	8007368 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)";", 2, UART_TIMEOUT);
 800181e:	2364      	movs	r3, #100	; 0x64
 8001820:	2202      	movs	r2, #2
 8001822:	4919      	ldr	r1, [pc, #100]	; (8001888 <do_commands+0x268>)
 8001824:	4817      	ldr	r0, [pc, #92]	; (8001884 <do_commands+0x264>)
 8001826:	f005 fd9f 	bl	8007368 <HAL_UART_Transmit>
		printf("Done\n");
 800182a:	4818      	ldr	r0, [pc, #96]	; (800188c <do_commands+0x26c>)
 800182c:	f008 fcee 	bl	800a20c <puts>
		global_command = AMS_NONE;
 8001830:	4b10      	ldr	r3, [pc, #64]	; (8001874 <do_commands+0x254>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
		DisableRFOutput();
 8001836:	f000 fabe 	bl	8001db6 <DisableRFOutput>
 800183a:	e1ae      	b.n	8001b9a <do_commands+0x57a>

	}else if (global_command == AMS_SWEEP_CONT){
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <do_commands+0x254>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d179      	bne.n	8001938 <do_commands+0x318>
		uint32_t from = global_args[0];
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <do_commands+0x258>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t to = global_args[1];
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <do_commands+0x258>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t step = global_args[2];
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <do_commands+0x258>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t pwr = global_args[3];
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <do_commands+0x258>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	623b      	str	r3, [r7, #32]
		EnableRFOutput();
 800185c:	f000 faa1 	bl	8001da2 <EnableRFOutput>
		setRFA_PWR(pwr-1); // -1 because pwr is defined as 1,2,3,4 but MAX2870 expects 0,1,2,3
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	3b01      	subs	r3, #1
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fb83 	bl	8001f70 <setRFA_PWR>
		uint32_t i;
		while (global_command!=AMS_STOP){
 800186a:	e055      	b.n	8001918 <do_commands+0x2f8>
			for (i=from; i<=to; i+=step){
 800186c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186e:	667b      	str	r3, [r7, #100]	; 0x64
 8001870:	e033      	b.n	80018da <do_commands+0x2ba>
 8001872:	bf00      	nop
 8001874:	20000300 	.word	0x20000300
 8001878:	20000304 	.word	0x20000304
 800187c:	0800cbf0 	.word	0x0800cbf0
 8001880:	2000032c 	.word	0x2000032c
 8001884:	200004bc 	.word	0x200004bc
 8001888:	0800cbfc 	.word	0x0800cbfc
 800188c:	0800cc00 	.word	0x0800cc00
 8001890:	0800cc08 	.word	0x0800cc08
				  //printf("setting %d MHz\n", i);
				  if (global_command==AMS_STOP)
 8001894:	4ba1      	ldr	r3, [pc, #644]	; (8001b1c <do_commands+0x4fc>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b0b      	cmp	r3, #11
 800189a:	f000 817d 	beq.w	8001b98 <do_commands+0x578>
					  return;
				  set_requested_frequency(i);
 800189e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80018a0:	f000 fbd6 	bl	8002050 <set_requested_frequency>
				  HAL_Delay(1);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f001 fa0f 	bl	8002cc8 <HAL_Delay>
				  uint16_t raw = read_raw();
 80018aa:	f7ff fa81 	bl	8000db0 <read_raw>
 80018ae:	4603      	mov	r3, r0
 80018b0:	83bb      	strh	r3, [r7, #28]
				  sprintf(strbuf, "{%lu, %u}", i, raw);
 80018b2:	8bbb      	ldrh	r3, [r7, #28]
 80018b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018b6:	499a      	ldr	r1, [pc, #616]	; (8001b20 <do_commands+0x500>)
 80018b8:	489a      	ldr	r0, [pc, #616]	; (8001b24 <do_commands+0x504>)
 80018ba:	f008 fcbf 	bl	800a23c <siprintf>
				  HAL_UART_Transmit(&huart1, (uint8_t*)&strbuf, strlen(strbuf), UART_TIMEOUT);
 80018be:	4899      	ldr	r0, [pc, #612]	; (8001b24 <do_commands+0x504>)
 80018c0:	f7fe fc68 	bl	8000194 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	2364      	movs	r3, #100	; 0x64
 80018ca:	4996      	ldr	r1, [pc, #600]	; (8001b24 <do_commands+0x504>)
 80018cc:	4896      	ldr	r0, [pc, #600]	; (8001b28 <do_commands+0x508>)
 80018ce:	f005 fd4b 	bl	8007368 <HAL_UART_Transmit>
			for (i=from; i<=to; i+=step){
 80018d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	4413      	add	r3, r2
 80018d8:	667b      	str	r3, [r7, #100]	; 0x64
 80018da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018de:	429a      	cmp	r2, r3
 80018e0:	d9d8      	bls.n	8001894 <do_commands+0x274>
			 }
			// send last frequency
			if (i!=to){
 80018e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d016      	beq.n	8001918 <do_commands+0x2f8>
				set_requested_frequency(to);
 80018ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018ec:	f000 fbb0 	bl	8002050 <set_requested_frequency>
				//HAL_Delay(1);
				uint16_t raw = read_raw();
 80018f0:	f7ff fa5e 	bl	8000db0 <read_raw>
 80018f4:	4603      	mov	r3, r0
 80018f6:	83fb      	strh	r3, [r7, #30]
				sprintf(strbuf, "{%lu, %u}", to, raw);
 80018f8:	8bfb      	ldrh	r3, [r7, #30]
 80018fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018fc:	4988      	ldr	r1, [pc, #544]	; (8001b20 <do_commands+0x500>)
 80018fe:	4889      	ldr	r0, [pc, #548]	; (8001b24 <do_commands+0x504>)
 8001900:	f008 fc9c 	bl	800a23c <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)&strbuf, strlen(strbuf), UART_TIMEOUT);
 8001904:	4887      	ldr	r0, [pc, #540]	; (8001b24 <do_commands+0x504>)
 8001906:	f7fe fc45 	bl	8000194 <strlen>
 800190a:	4603      	mov	r3, r0
 800190c:	b29a      	uxth	r2, r3
 800190e:	2364      	movs	r3, #100	; 0x64
 8001910:	4984      	ldr	r1, [pc, #528]	; (8001b24 <do_commands+0x504>)
 8001912:	4885      	ldr	r0, [pc, #532]	; (8001b28 <do_commands+0x508>)
 8001914:	f005 fd28 	bl	8007368 <HAL_UART_Transmit>
		while (global_command!=AMS_STOP){
 8001918:	4b80      	ldr	r3, [pc, #512]	; (8001b1c <do_commands+0x4fc>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b0b      	cmp	r3, #11
 800191e:	d1a5      	bne.n	800186c <do_commands+0x24c>
			}
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)";", 2, UART_TIMEOUT);
 8001920:	2364      	movs	r3, #100	; 0x64
 8001922:	2202      	movs	r2, #2
 8001924:	4981      	ldr	r1, [pc, #516]	; (8001b2c <do_commands+0x50c>)
 8001926:	4880      	ldr	r0, [pc, #512]	; (8001b28 <do_commands+0x508>)
 8001928:	f005 fd1e 	bl	8007368 <HAL_UART_Transmit>
		DisableRFOutput();
 800192c:	f000 fa43 	bl	8001db6 <DisableRFOutput>
		global_command = AMS_NONE;
 8001930:	4b7a      	ldr	r3, [pc, #488]	; (8001b1c <do_commands+0x4fc>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	e130      	b.n	8001b9a <do_commands+0x57a>
	}else if (global_command == AMS_SINGLE){
 8001938:	4b78      	ldr	r3, [pc, #480]	; (8001b1c <do_commands+0x4fc>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b09      	cmp	r3, #9
 800193e:	d11a      	bne.n	8001976 <do_commands+0x356>
		EnableRFOutput();
 8001940:	f000 fa2f 	bl	8001da2 <EnableRFOutput>
		uint32_t f = global_args[0];
 8001944:	4b7a      	ldr	r3, [pc, #488]	; (8001b30 <do_commands+0x510>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t pwr = global_args[1];
 800194a:	4b79      	ldr	r3, [pc, #484]	; (8001b30 <do_commands+0x510>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
		setRFA_PWR(pwr-1);
 8001950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001952:	3b01      	subs	r3, #1
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fb0b 	bl	8001f70 <setRFA_PWR>
		set_requested_frequency(f);
 800195a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800195c:	f000 fb78 	bl	8002050 <set_requested_frequency>
		while(global_command==AMS_SINGLE){
 8001960:	bf00      	nop
 8001962:	4b6e      	ldr	r3, [pc, #440]	; (8001b1c <do_commands+0x4fc>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b09      	cmp	r3, #9
 8001968:	d0fb      	beq.n	8001962 <do_commands+0x342>
			;
		}
		DisableRFOutput();
 800196a:	f000 fa24 	bl	8001db6 <DisableRFOutput>
		global_command = AMS_NONE;
 800196e:	4b6b      	ldr	r3, [pc, #428]	; (8001b1c <do_commands+0x4fc>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e111      	b.n	8001b9a <do_commands+0x57a>
	}else if (global_command == AMS_REGISTER){
 8001976:	4b69      	ldr	r3, [pc, #420]	; (8001b1c <do_commands+0x4fc>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d14f      	bne.n	8001a1e <do_commands+0x3fe>
		// all registers should be 32bit numbers
		uint32_t reg_value_0 = global_args[0];
 800197e:	4b6c      	ldr	r3, [pc, #432]	; (8001b30 <do_commands+0x510>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint32_t reg_value_1 = global_args[1];
 8001984:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <do_commands+0x510>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	64bb      	str	r3, [r7, #72]	; 0x48
		uint32_t reg_value_2 = global_args[2];
 800198a:	4b69      	ldr	r3, [pc, #420]	; (8001b30 <do_commands+0x510>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
		uint32_t reg_value_3 = global_args[3];
 8001990:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <do_commands+0x510>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	643b      	str	r3, [r7, #64]	; 0x40
		uint32_t reg_value_4 = global_args[4];
 8001996:	4b66      	ldr	r3, [pc, #408]	; (8001b30 <do_commands+0x510>)
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint32_t reg_value_5 = global_args[5];
 800199c:	4b64      	ldr	r3, [pc, #400]	; (8001b30 <do_commands+0x510>)
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
		write_reg(reg_value_0);
 80019a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019a4:	f000 fcbc 	bl	8002320 <write_reg>
		write_reg(reg_value_1);
 80019a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80019aa:	f000 fcb9 	bl	8002320 <write_reg>
		write_reg(reg_value_2);
 80019ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019b0:	f000 fcb6 	bl	8002320 <write_reg>
		write_reg(reg_value_3);
 80019b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80019b6:	f000 fcb3 	bl	8002320 <write_reg>
		write_reg(reg_value_4);
 80019ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80019bc:	f000 fcb0 	bl	8002320 <write_reg>
		write_reg(reg_value_5);
 80019c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80019c2:	f000 fcad 	bl	8002320 <write_reg>
		printf("reg0: %x\n", reg_value_0);
 80019c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80019c8:	485a      	ldr	r0, [pc, #360]	; (8001b34 <do_commands+0x514>)
 80019ca:	f008 fb99 	bl	800a100 <iprintf>
		printf("reg1: %x\n", reg_value_1);
 80019ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80019d0:	4859      	ldr	r0, [pc, #356]	; (8001b38 <do_commands+0x518>)
 80019d2:	f008 fb95 	bl	800a100 <iprintf>
		printf("reg2: %x\n", reg_value_2);
 80019d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019d8:	4858      	ldr	r0, [pc, #352]	; (8001b3c <do_commands+0x51c>)
 80019da:	f008 fb91 	bl	800a100 <iprintf>
		printf("reg3: %x\n", reg_value_3);
 80019de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019e0:	4857      	ldr	r0, [pc, #348]	; (8001b40 <do_commands+0x520>)
 80019e2:	f008 fb8d 	bl	800a100 <iprintf>
		printf("reg4: %x\n", reg_value_4);
 80019e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80019e8:	4856      	ldr	r0, [pc, #344]	; (8001b44 <do_commands+0x524>)
 80019ea:	f008 fb89 	bl	800a100 <iprintf>
		printf("reg5: %x\n", reg_value_5);
 80019ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019f0:	4855      	ldr	r0, [pc, #340]	; (8001b48 <do_commands+0x528>)
 80019f2:	f008 fb85 	bl	800a100 <iprintf>
		printf("DONE\n");
 80019f6:	4855      	ldr	r0, [pc, #340]	; (8001b4c <do_commands+0x52c>)
 80019f8:	f008 fc08 	bl	800a20c <puts>
		print_registers();
 80019fc:	f000 f9e6 	bl	8001dcc <print_registers>
		program_PLL();
 8001a00:	f000 fcd4 	bl	80023ac <program_PLL>
		EnableRFOutput();
 8001a04:	f000 f9cd 	bl	8001da2 <EnableRFOutput>
		while(global_command==AMS_REGISTER){
 8001a08:	bf00      	nop
 8001a0a:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <do_commands+0x4fc>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d0fb      	beq.n	8001a0a <do_commands+0x3ea>
					;
		}
		DisableRFOutput();
 8001a12:	f000 f9d0 	bl	8001db6 <DisableRFOutput>
		global_command = AMS_NONE;
 8001a16:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <do_commands+0x4fc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e0bd      	b.n	8001b9a <do_commands+0x57a>
	}else if (global_command == AMS_LOWPOWER){
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <do_commands+0x4fc>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d11b      	bne.n	8001a5e <do_commands+0x43e>
		strcpy(strbuf, "AMS_MSG(Disabling PLL);");
 8001a26:	4a3f      	ldr	r2, [pc, #252]	; (8001b24 <do_commands+0x504>)
 8001a28:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <do_commands+0x530>)
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a36:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 8001a3a:	483a      	ldr	r0, [pc, #232]	; (8001b24 <do_commands+0x504>)
 8001a3c:	f7fe fbaa 	bl	8000194 <strlen>
 8001a40:	4603      	mov	r3, r0
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	4937      	ldr	r1, [pc, #220]	; (8001b24 <do_commands+0x504>)
 8001a48:	4837      	ldr	r0, [pc, #220]	; (8001b28 <do_commands+0x508>)
 8001a4a:	f005 fd1b 	bl	8007484 <HAL_UART_Transmit_IT>
		DisableRFOutput();
 8001a4e:	f000 f9b2 	bl	8001db6 <DisableRFOutput>
		DisableChip();
 8001a52:	f000 f99c 	bl	8001d8e <DisableChip>
		global_command = AMS_NONE;
 8001a56:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <do_commands+0x4fc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e09d      	b.n	8001b9a <do_commands+0x57a>

	}else if (global_command == AMS_WAKEUP){
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <do_commands+0x4fc>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d121      	bne.n	8001aaa <do_commands+0x48a>
		strcpy(strbuf, "AMS_MSG(Enabling PLL);");
 8001a66:	4a2f      	ldr	r2, [pc, #188]	; (8001b24 <do_commands+0x504>)
 8001a68:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <do_commands+0x534>)
 8001a6a:	4614      	mov	r4, r2
 8001a6c:	461d      	mov	r5, r3
 8001a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a76:	6020      	str	r0, [r4, #0]
 8001a78:	3404      	adds	r4, #4
 8001a7a:	8021      	strh	r1, [r4, #0]
 8001a7c:	3402      	adds	r4, #2
 8001a7e:	0c0b      	lsrs	r3, r1, #16
 8001a80:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 8001a82:	4828      	ldr	r0, [pc, #160]	; (8001b24 <do_commands+0x504>)
 8001a84:	f7fe fb86 	bl	8000194 <strlen>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4925      	ldr	r1, [pc, #148]	; (8001b24 <do_commands+0x504>)
 8001a90:	4825      	ldr	r0, [pc, #148]	; (8001b28 <do_commands+0x508>)
 8001a92:	f005 fcf7 	bl	8007484 <HAL_UART_Transmit_IT>
		EnableChip();
 8001a96:	f000 f970 	bl	8001d7a <EnableChip>
		init_PLL();
 8001a9a:	f000 fbb3 	bl	8002204 <init_PLL>
		write_regs_SOFT();
 8001a9e:	f000 fbfd 	bl	800229c <write_regs_SOFT>
		global_command = AMS_NONE;
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <do_commands+0x4fc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	e077      	b.n	8001b9a <do_commands+0x57a>

	}else if (global_command == AMS_VERSION){
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <do_commands+0x4fc>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d119      	bne.n	8001ae6 <do_commands+0x4c6>
		strcpy(strbuf, "AMS_MSG(Antenna Measurement System Version 0.9);");
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <do_commands+0x504>)
 8001ab4:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <do_commands+0x538>)
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	461d      	mov	r5, r3
 8001aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac6:	682b      	ldr	r3, [r5, #0]
 8001ac8:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 8001aca:	4816      	ldr	r0, [pc, #88]	; (8001b24 <do_commands+0x504>)
 8001acc:	f7fe fb62 	bl	8000194 <strlen>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4913      	ldr	r1, [pc, #76]	; (8001b24 <do_commands+0x504>)
 8001ad8:	4813      	ldr	r0, [pc, #76]	; (8001b28 <do_commands+0x508>)
 8001ada:	f005 fcd3 	bl	8007484 <HAL_UART_Transmit_IT>
		global_command = AMS_NONE;
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <do_commands+0x4fc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e059      	b.n	8001b9a <do_commands+0x57a>

	}else if (global_command == AMS_HOWAREYOU){
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <do_commands+0x4fc>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b0a      	cmp	r3, #10
 8001aec:	d138      	bne.n	8001b60 <do_commands+0x540>
		strcpy(strbuf, "AMS_MSG(I am fine and working. So far so good.\nI feel bit exhausted, but ya know, that's life.);");
 8001aee:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <do_commands+0x504>)
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <do_commands+0x53c>)
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	2361      	movs	r3, #97	; 0x61
 8001af8:	461a      	mov	r2, r3
 8001afa:	f007 fda1 	bl	8009640 <memcpy>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 8001afe:	4809      	ldr	r0, [pc, #36]	; (8001b24 <do_commands+0x504>)
 8001b00:	f7fe fb48 	bl	8000194 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4906      	ldr	r1, [pc, #24]	; (8001b24 <do_commands+0x504>)
 8001b0c:	4806      	ldr	r0, [pc, #24]	; (8001b28 <do_commands+0x508>)
 8001b0e:	f005 fcb9 	bl	8007484 <HAL_UART_Transmit_IT>
		global_command = AMS_NONE;
 8001b12:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <do_commands+0x4fc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	e03f      	b.n	8001b9a <do_commands+0x57a>
 8001b1a:	bf00      	nop
 8001b1c:	20000300 	.word	0x20000300
 8001b20:	0800cbf0 	.word	0x0800cbf0
 8001b24:	2000032c 	.word	0x2000032c
 8001b28:	200004bc 	.word	0x200004bc
 8001b2c:	0800cbfc 	.word	0x0800cbfc
 8001b30:	20000304 	.word	0x20000304
 8001b34:	0800cc14 	.word	0x0800cc14
 8001b38:	0800cc20 	.word	0x0800cc20
 8001b3c:	0800cc2c 	.word	0x0800cc2c
 8001b40:	0800cc38 	.word	0x0800cc38
 8001b44:	0800cc44 	.word	0x0800cc44
 8001b48:	0800cc50 	.word	0x0800cc50
 8001b4c:	0800cc5c 	.word	0x0800cc5c
 8001b50:	0800cc64 	.word	0x0800cc64
 8001b54:	0800cc7c 	.word	0x0800cc7c
 8001b58:	0800cc94 	.word	0x0800cc94
 8001b5c:	0800ccc8 	.word	0x0800ccc8

	}else if (global_command == AMS_CHECK){
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <do_commands+0x580>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d118      	bne.n	8001b9a <do_commands+0x57a>
		strcpy(strbuf, "AMS_OK;");
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <do_commands+0x584>)
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <do_commands+0x588>)
 8001b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b70:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <do_commands+0x584>)
 8001b76:	f7fe fb0d 	bl	8000194 <strlen>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <do_commands+0x584>)
 8001b82:	480a      	ldr	r0, [pc, #40]	; (8001bac <do_commands+0x58c>)
 8001b84:	f005 fc7e 	bl	8007484 <HAL_UART_Transmit_IT>
		global_command = AMS_NONE;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <do_commands+0x580>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e004      	b.n	8001b9a <do_commands+0x57a>
				  return;
 8001b90:	bf00      	nop
 8001b92:	e002      	b.n	8001b9a <do_commands+0x57a>
				  return;
 8001b94:	bf00      	nop
 8001b96:	e000      	b.n	8001b9a <do_commands+0x57a>
					  return;
 8001b98:	bf00      	nop
	}
}
 8001b9a:	3770      	adds	r7, #112	; 0x70
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba0:	20000300 	.word	0x20000300
 8001ba4:	2000032c 	.word	0x2000032c
 8001ba8:	0800cd2c 	.word	0x0800cd2c
 8001bac:	200004bc 	.word	0x200004bc

08001bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb6:	f001 f801 	bl	8002bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bba:	f000 f853 	bl	8001c64 <SystemClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001bbe:	f7ff fc7d 	bl	80014bc <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc2:	f7ff fbfb 	bl	80013bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001bc6:	f7ff fbce 	bl	8001366 <MX_DMA_Init>
  MX_SPI1_Init();
 8001bca:	f000 fc7b 	bl	80024c4 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001bce:	f7ff f83d 	bl	8000c4c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001bd2:	f000 fe3b 	bl	800284c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001bd6:	f000 fed1 	bl	800297c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001bda:	481b      	ldr	r0, [pc, #108]	; (8001c48 <main+0x98>)
 8001bdc:	f004 ff88 	bl	8006af0 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *) RxBuffer, RX_BFR_SIZE);
 8001be0:	2264      	movs	r2, #100	; 0x64
 8001be2:	491a      	ldr	r1, [pc, #104]	; (8001c4c <main+0x9c>)
 8001be4:	481a      	ldr	r0, [pc, #104]	; (8001c50 <main+0xa0>)
 8001be6:	f007 fc52 	bl	800948e <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Setting up HC06 module");
 8001bea:	481a      	ldr	r0, [pc, #104]	; (8001c54 <main+0xa4>)
 8001bec:	f008 fa88 	bl	800a100 <iprintf>
  char at_set_name[] = "AT+NAMEAntennaMeasSystem";
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <main+0xa8>)
 8001bf2:	1d3c      	adds	r4, r7, #4
 8001bf4:	461d      	mov	r5, r3
 8001bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bfe:	c403      	stmia	r4!, {r0, r1}
 8001c00:	7022      	strb	r2, [r4, #0]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)&at_set_name, strlen(at_set_name));
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fac5 	bl	8000194 <strlen>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	480f      	ldr	r0, [pc, #60]	; (8001c50 <main+0xa0>)
 8001c14:	f005 fc36 	bl	8007484 <HAL_UART_Transmit_IT>


  printf("Starting STM32\n");
 8001c18:	4810      	ldr	r0, [pc, #64]	; (8001c5c <main+0xac>)
 8001c1a:	f008 faf7 	bl	800a20c <puts>
  printf("Starting MAX\n");
 8001c1e:	4810      	ldr	r0, [pc, #64]	; (8001c60 <main+0xb0>)
 8001c20:	f008 faf4 	bl	800a20c <puts>
  EnableChip();
 8001c24:	f000 f8a9 	bl	8001d7a <EnableChip>
  // just to be sure PLL RF output is turned off
  DisableRFOutput();
 8001c28:	f000 f8c5 	bl	8001db6 <DisableRFOutput>
  // PLL Must be initialized on PowerUp
  init_PLL();
 8001c2c:	f000 faea 	bl	8002204 <init_PLL>

  // PLL must be set to default configuration specified in write_regs_SOFT
  write_regs_SOFT();
 8001c30:	f000 fb34 	bl	800229c <write_regs_SOFT>
  setIntegerMode();
 8001c34:	f000 f9fe 	bl	8002034 <setIntegerMode>

  //calibrate();
  setRFA_PWR(3);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f999 	bl	8001f70 <setRFA_PWR>
  program_PLL();
 8001c3e:	f000 fbb5 	bl	80023ac <program_PLL>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  do_commands();
 8001c42:	f7ff fced 	bl	8001620 <do_commands>
 8001c46:	e7fc      	b.n	8001c42 <main+0x92>
 8001c48:	20000470 	.word	0x20000470
 8001c4c:	2000029c 	.word	0x2000029c
 8001c50:	200004bc 	.word	0x200004bc
 8001c54:	0800cd34 	.word	0x0800cd34
 8001c58:	0800cd6c 	.word	0x0800cd6c
 8001c5c:	0800cd4c 	.word	0x0800cd4c
 8001c60:	0800cd5c 	.word	0x0800cd5c

08001c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b09a      	sub	sp, #104	; 0x68
 8001c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6a:	f107 0320 	add.w	r3, r7, #32
 8001c6e:	2248      	movs	r2, #72	; 0x48
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f007 fcf2 	bl	800965c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]
 8001c86:	615a      	str	r2, [r3, #20]
 8001c88:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001c8a:	2323      	movs	r3, #35	; 0x23
 8001c8c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c9e:	2340      	movs	r3, #64	; 0x40
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ca6:	2360      	movs	r3, #96	; 0x60
 8001ca8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001caa:	2302      	movs	r3, #2
 8001cac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001cb6:	2340      	movs	r3, #64	; 0x40
 8001cb8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001cba:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8001cc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001cc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001cc6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001cca:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ccc:	f107 0320 	add.w	r3, r7, #32
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fb8d 	bl	80053f0 <HAL_RCC_OscConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001cdc:	f000 f848 	bl	8001d70 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001ce0:	236f      	movs	r3, #111	; 0x6f
 8001ce2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fedf 	bl	8005ac4 <HAL_RCC_ClockConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001d0c:	f000 f830 	bl	8001d70 <Error_Handler>
  }
}
 8001d10:	bf00      	nop
 8001d12:	3768      	adds	r7, #104	; 0x68
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]

		/* start the DMA again */
		printf("Size %d\n", Size);
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	4619      	mov	r1, r3
 8001d28:	480b      	ldr	r0, [pc, #44]	; (8001d58 <HAL_UARTEx_RxEventCallback+0x40>)
 8001d2a:	f008 f9e9 	bl	800a100 <iprintf>
		printf(RxBuffer);
 8001d2e:	480b      	ldr	r0, [pc, #44]	; (8001d5c <HAL_UARTEx_RxEventCallback+0x44>)
 8001d30:	f008 f9e6 	bl	800a100 <iprintf>
		printf("Received\n");
 8001d34:	480a      	ldr	r0, [pc, #40]	; (8001d60 <HAL_UARTEx_RxEventCallback+0x48>)
 8001d36:	f008 fa69 	bl	800a20c <puts>
		process_command_string(RxBuffer, &global_command, global_args);
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001d3c:	490a      	ldr	r1, [pc, #40]	; (8001d68 <HAL_UARTEx_RxEventCallback+0x50>)
 8001d3e:	4807      	ldr	r0, [pc, #28]	; (8001d5c <HAL_UARTEx_RxEventCallback+0x44>)
 8001d40:	f7ff f974 	bl	800102c <process_command_string>
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *) RxBuffer, RX_BFR_SIZE);
 8001d44:	2264      	movs	r2, #100	; 0x64
 8001d46:	4905      	ldr	r1, [pc, #20]	; (8001d5c <HAL_UARTEx_RxEventCallback+0x44>)
 8001d48:	4808      	ldr	r0, [pc, #32]	; (8001d6c <HAL_UARTEx_RxEventCallback+0x54>)
 8001d4a:	f007 fba0 	bl	800948e <HAL_UARTEx_ReceiveToIdle_IT>
		//__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);

}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	0800cd88 	.word	0x0800cd88
 8001d5c:	2000029c 	.word	0x2000029c
 8001d60:	0800cd94 	.word	0x0800cd94
 8001d64:	20000304 	.word	0x20000304
 8001d68:	20000300 	.word	0x20000300
 8001d6c:	200004bc 	.word	0x200004bc

08001d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d74:	b672      	cpsid	i
}
 8001d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <Error_Handler+0x8>

08001d7a <EnableChip>:
/**
  * @brief Turn MAX2870 PLL on
  * By setting CE pin high
  * @retval
  */
void EnableChip(){
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2104      	movs	r1, #4
 8001d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d86:	f002 fe67 	bl	8004a58 <HAL_GPIO_WritePin>
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <DisableChip>:

void DisableChip(){
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2104      	movs	r1, #4
 8001d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9a:	f002 fe5d 	bl	8004a58 <HAL_GPIO_WritePin>
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <EnableRFOutput>:

void EnableRFOutput(){
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001da6:	2201      	movs	r2, #1
 8001da8:	2108      	movs	r1, #8
 8001daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dae:	f002 fe53 	bl	8004a58 <HAL_GPIO_WritePin>
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <DisableRFOutput>:

void DisableRFOutput(){
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc2:	f002 fe49 	bl	8004a58 <HAL_GPIO_WritePin>
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <print_registers>:

void print_registers(){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	printf("reg0: %x\n", reg0);
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <print_registers+0x50>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4812      	ldr	r0, [pc, #72]	; (8001e20 <print_registers+0x54>)
 8001dd8:	f008 f992 	bl	800a100 <iprintf>
	printf("reg1: %x\n", reg1);
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <print_registers+0x58>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4811      	ldr	r0, [pc, #68]	; (8001e28 <print_registers+0x5c>)
 8001de4:	f008 f98c 	bl	800a100 <iprintf>
	printf("reg2: %x\n", reg2);
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <print_registers+0x60>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	4810      	ldr	r0, [pc, #64]	; (8001e30 <print_registers+0x64>)
 8001df0:	f008 f986 	bl	800a100 <iprintf>
	printf("reg3: %x\n", reg3);
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <print_registers+0x68>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480f      	ldr	r0, [pc, #60]	; (8001e38 <print_registers+0x6c>)
 8001dfc:	f008 f980 	bl	800a100 <iprintf>
	printf("reg4: %x\n", reg4);
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <print_registers+0x70>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	480e      	ldr	r0, [pc, #56]	; (8001e40 <print_registers+0x74>)
 8001e08:	f008 f97a 	bl	800a100 <iprintf>
	printf("reg5: %x\n", reg5);
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <print_registers+0x78>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	480d      	ldr	r0, [pc, #52]	; (8001e48 <print_registers+0x7c>)
 8001e14:	f008 f974 	bl	800a100 <iprintf>
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000390 	.word	0x20000390
 8001e20:	0800cda0 	.word	0x0800cda0
 8001e24:	20000394 	.word	0x20000394
 8001e28:	0800cdac 	.word	0x0800cdac
 8001e2c:	20000398 	.word	0x20000398
 8001e30:	0800cdb8 	.word	0x0800cdb8
 8001e34:	2000039c 	.word	0x2000039c
 8001e38:	0800cdc4 	.word	0x0800cdc4
 8001e3c:	200003a0 	.word	0x200003a0
 8001e40:	0800cdd0 	.word	0x0800cdd0
 8001e44:	200003a4 	.word	0x200003a4
 8001e48:	0800cddc 	.word	0x0800cddc

08001e4c <setDIVA>:
	uint32_t SHDN_BIT = 1 << 5;
	write_reg(reg2 & ~(SHDN_BIT));
}

// permitted n values: 1, 2, 4, 8, 16, 32, 64, 128
void setDIVA(uint8_t n){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
	uint32_t diva_value = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
	//sets DIVA to 111
	switch (n){
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	2b80      	cmp	r3, #128	; 0x80
 8001e5e:	d04e      	beq.n	8001efe <setDIVA+0xb2>
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	dc7e      	bgt.n	8001f62 <setDIVA+0x116>
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	dc47      	bgt.n	8001ef8 <setDIVA+0xac>
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	dd7a      	ble.n	8001f62 <setDIVA+0x116>
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	2b1f      	cmp	r3, #31
 8001e70:	d877      	bhi.n	8001f62 <setDIVA+0x116>
 8001e72:	a201      	add	r2, pc, #4	; (adr r2, 8001e78 <setDIVA+0x2c>)
 8001e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e78:	08001f37 	.word	0x08001f37
 8001e7c:	08001f2f 	.word	0x08001f2f
 8001e80:	08001f63 	.word	0x08001f63
 8001e84:	08001f27 	.word	0x08001f27
 8001e88:	08001f63 	.word	0x08001f63
 8001e8c:	08001f63 	.word	0x08001f63
 8001e90:	08001f63 	.word	0x08001f63
 8001e94:	08001f1f 	.word	0x08001f1f
 8001e98:	08001f63 	.word	0x08001f63
 8001e9c:	08001f63 	.word	0x08001f63
 8001ea0:	08001f63 	.word	0x08001f63
 8001ea4:	08001f63 	.word	0x08001f63
 8001ea8:	08001f63 	.word	0x08001f63
 8001eac:	08001f63 	.word	0x08001f63
 8001eb0:	08001f63 	.word	0x08001f63
 8001eb4:	08001f17 	.word	0x08001f17
 8001eb8:	08001f63 	.word	0x08001f63
 8001ebc:	08001f63 	.word	0x08001f63
 8001ec0:	08001f63 	.word	0x08001f63
 8001ec4:	08001f63 	.word	0x08001f63
 8001ec8:	08001f63 	.word	0x08001f63
 8001ecc:	08001f63 	.word	0x08001f63
 8001ed0:	08001f63 	.word	0x08001f63
 8001ed4:	08001f63 	.word	0x08001f63
 8001ed8:	08001f63 	.word	0x08001f63
 8001edc:	08001f63 	.word	0x08001f63
 8001ee0:	08001f63 	.word	0x08001f63
 8001ee4:	08001f63 	.word	0x08001f63
 8001ee8:	08001f63 	.word	0x08001f63
 8001eec:	08001f63 	.word	0x08001f63
 8001ef0:	08001f63 	.word	0x08001f63
 8001ef4:	08001f0f 	.word	0x08001f0f
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d004      	beq.n	8001f06 <setDIVA+0xba>
		case 1:
			diva_value = 0b000 << 20;
			break;
		default:
			// do not set diva mask
			return;
 8001efc:	e031      	b.n	8001f62 <setDIVA+0x116>
			diva_value = 0b111 << 20;
 8001efe:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8001f02:	617b      	str	r3, [r7, #20]
			break;
 8001f04:	e01a      	b.n	8001f3c <setDIVA+0xf0>
			diva_value = 0b110 << 20;
 8001f06:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
 8001f0a:	617b      	str	r3, [r7, #20]
			break;
 8001f0c:	e016      	b.n	8001f3c <setDIVA+0xf0>
			diva_value = 0b101 << 20;
 8001f0e:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
 8001f12:	617b      	str	r3, [r7, #20]
			break;
 8001f14:	e012      	b.n	8001f3c <setDIVA+0xf0>
			diva_value = 0b100 << 20;
 8001f16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f1a:	617b      	str	r3, [r7, #20]
			break;
 8001f1c:	e00e      	b.n	8001f3c <setDIVA+0xf0>
			diva_value = 0b011 << 20;
 8001f1e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001f22:	617b      	str	r3, [r7, #20]
			break;
 8001f24:	e00a      	b.n	8001f3c <setDIVA+0xf0>
			diva_value = 0b010 << 20;
 8001f26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f2a:	617b      	str	r3, [r7, #20]
			break;
 8001f2c:	e006      	b.n	8001f3c <setDIVA+0xf0>
			diva_value = 0b001 << 20;
 8001f2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f32:	617b      	str	r3, [r7, #20]
			break;
 8001f34:	e002      	b.n	8001f3c <setDIVA+0xf0>
			diva_value = 0b000 << 20;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
			break;
 8001f3a:	bf00      	nop
			break;
	}
	uint32_t DIVA_MASK = 0b111 << 20;
 8001f3c:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8001f40:	613b      	str	r3, [r7, #16]
	uint32_t new_reg4 = reg4 & ~(DIVA_MASK);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43da      	mvns	r2, r3
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <setDIVA+0x120>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
	uint32_t newnewreg4 = new_reg4 | ((diva_value)&DIVA_MASK);
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60bb      	str	r3, [r7, #8]
	write_reg(newnewreg4);
 8001f5a:	68b8      	ldr	r0, [r7, #8]
 8001f5c:	f000 f9e0 	bl	8002320 <write_reg>
 8001f60:	e000      	b.n	8001f64 <setDIVA+0x118>
			return;
 8001f62:	bf00      	nop
}
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200003a0 	.word	0x200003a0

08001f70 <setRFA_PWR>:

//00, 01, 02, 03
void setRFA_PWR(uint8_t rfa_pwr){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
	if (rfa_pwr > 4 || rfa_pwr < 0){
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d813      	bhi.n	8001fa8 <setRFA_PWR+0x38>
		return;//invalid value
	}
	// bits 4 and 3
	uint32_t RFA_PWR_MASK = 0b11 << 3;
 8001f80:	2318      	movs	r3, #24
 8001f82:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg4 = reg4 & ~(RFA_PWR_MASK);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	43da      	mvns	r2, r3
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <setRFA_PWR+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
	uint32_t newnewreg4 = newreg4 | ((rfa_pwr << 3)&RFA_PWR_MASK);
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	461a      	mov	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg4);
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f9bd 	bl	8002320 <write_reg>
 8001fa6:	e000      	b.n	8001faa <setRFA_PWR+0x3a>
		return;//invalid value
 8001fa8:	bf00      	nop
}
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200003a0 	.word	0x200003a0

08001fb4 <setN>:

void setN(uint16_t N){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
	// set mask
	uint32_t N_MASK = 0xFFFF << 15;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <setN+0x38>)
 8001fc0:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg0 = reg0 & ~(N_MASK);
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <setN+0x3c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
	// set bits that are supposed to one to one
	uint32_t newnewreg0 = newreg0 | ((N << 15)&N_MASK);
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	03db      	lsls	r3, r3, #15
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg0);
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f99e 	bl	8002320 <write_reg>
}
 8001fe4:	bf00      	nop
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	7fff8000 	.word	0x7fff8000
 8001ff0:	20000390 	.word	0x20000390

08001ff4 <setR>:

void setR(uint16_t R){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
	// bits 4 and 3
	uint32_t R_MASK = 0xFFC << 12;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <setR+0x38>)
 8002000:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg2 = reg2 & ~(R_MASK);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	43da      	mvns	r2, r3
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <setR+0x3c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
	uint32_t newnewreg2 = newreg2 | ((R << 14)&R_MASK);
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	039b      	lsls	r3, r3, #14
 8002012:	461a      	mov	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	4013      	ands	r3, r2
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg2);
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f97e 	bl	8002320 <write_reg>
}
 8002024:	bf00      	nop
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	00ffc000 	.word	0x00ffc000
 8002030:	20000398 	.word	0x20000398

08002034 <setIntegerMode>:

void enableRFA(){
	write_reg(reg4 | (1<<5));
}

void setIntegerMode(){
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	write_reg(reg0 | (1<<31));
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <setIntegerMode+0x18>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002040:	4618      	mov	r0, r3
 8002042:	f000 f96d 	bl	8002320 <write_reg>
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000390 	.word	0x20000390

08002050 <set_requested_frequency>:

// freq is in MHz
void set_requested_frequency(uint32_t freq){
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	// first determine required DIVA value
	float divided_by_235 = freq/23.5;
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7fe fa3b 	bl	80004d4 <__aeabi_ui2d>
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <set_requested_frequency+0xd8>)
 8002064:	f7fe fbda 	bl	800081c <__aeabi_ddiv>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f7fe fd82 	bl	8000b78 <__aeabi_d2f>
 8002074:	4603      	mov	r3, r0
 8002076:	61fb      	str	r3, [r7, #28]
	float band = log2(divided_by_235);
 8002078:	69f8      	ldr	r0, [r7, #28]
 800207a:	f7fe fa4d 	bl	8000518 <__aeabi_f2d>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	ec43 2b10 	vmov	d0, r2, r3
 8002086:	f00a fb63 	bl	800c750 <log>
 800208a:	ec51 0b10 	vmov	r0, r1, d0
 800208e:	a324      	add	r3, pc, #144	; (adr r3, 8002120 <set_requested_frequency+0xd0>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fbc2 	bl	800081c <__aeabi_ddiv>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fd6a 	bl	8000b78 <__aeabi_d2f>
 80020a4:	4603      	mov	r3, r0
 80020a6:	61bb      	str	r3, [r7, #24]
	uint32_t band_i = band;
 80020a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80020ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020b0:	ee17 3a90 	vmov	r3, s15
 80020b4:	617b      	str	r3, [r7, #20]
	uint32_t DIVA_caluclated = 128>>band_i;
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa42 f303 	asr.w	r3, r2, r3
 80020be:	613b      	str	r3, [r7, #16]

	uint32_t R_value = 1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t N_1MHZ_step = 1;
 80020c4:	2301      	movs	r3, #1
 80020c6:	623b      	str	r3, [r7, #32]
	if (DIVA_caluclated<32){
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	2b1f      	cmp	r3, #31
 80020cc:	d804      	bhi.n	80020d8 <set_requested_frequency+0x88>
		R_value = 32/DIVA_caluclated;
 80020ce:	2220      	movs	r2, #32
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (DIVA_caluclated>32){
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d902      	bls.n	80020e4 <set_requested_frequency+0x94>
		N_1MHZ_step = DIVA_caluclated/32;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	095b      	lsrs	r3, r3, #5
 80020e2:	623b      	str	r3, [r7, #32]
	}
	uint32_t N_value = N_1MHZ_step * freq;
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	60fb      	str	r3, [r7, #12]
	printf("band_i: %d\n", band_i);
	printf("1MHz step: %d \n", N_1MHZ_step);
	printf("DIVA: %d\n", DIVA_caluclated);
	printf("R: %d\n", R_value);
	printf("N: %d\n", N_value);*/
	setN(N_value);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff5e 	bl	8001fb4 <setN>
	setDIVA(DIVA_caluclated);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fea5 	bl	8001e4c <setDIVA>
	setR(R_value);
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	b29b      	uxth	r3, r3
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff74 	bl	8001ff4 <setR>
	program_PLL();
 800210c:	f000 f94e 	bl	80023ac <program_PLL>
	// give time to allow PLL to lock into frequency
	HAL_Delay(1);
 8002110:	2001      	movs	r0, #1
 8002112:	f000 fdd9 	bl	8002cc8 <HAL_Delay>
	//while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET){;}
}
 8002116:	bf00      	nop
 8002118:	3728      	adds	r7, #40	; 0x28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	fefa39ef 	.word	0xfefa39ef
 8002124:	3fe62e42 	.word	0x3fe62e42
 8002128:	40378000 	.word	0x40378000
 800212c:	00000000 	.word	0x00000000

08002130 <set_requested_frequency_NDIV>:

// freq is in MHz
void set_requested_frequency_NDIV(float freq, uint32_t NDIV){
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	ed87 0a01 	vstr	s0, [r7, #4]
 800213a:	6038      	str	r0, [r7, #0]
	// first determine required DIVA value
	float divided_by_235 = freq/23.5;
 800213c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002140:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002200 <set_requested_frequency_NDIV+0xd0>
 8002144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002148:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float band = log2(divided_by_235);
 800214c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800214e:	f7fe f9e3 	bl	8000518 <__aeabi_f2d>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	ec43 2b10 	vmov	d0, r2, r3
 800215a:	f00a faf9 	bl	800c750 <log>
 800215e:	ec51 0b10 	vmov	r0, r1, d0
 8002162:	a325      	add	r3, pc, #148	; (adr r3, 80021f8 <set_requested_frequency_NDIV+0xc8>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fe fb58 	bl	800081c <__aeabi_ddiv>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	f7fe fd00 	bl	8000b78 <__aeabi_d2f>
 8002178:	4603      	mov	r3, r0
 800217a:	623b      	str	r3, [r7, #32]
	uint32_t band_i = band;
 800217c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002184:	ee17 3a90 	vmov	r3, s15
 8002188:	61fb      	str	r3, [r7, #28]
	uint32_t DIVA_caluclated = 128>>band_i;
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	fa42 f303 	asr.w	r3, r2, r3
 8002192:	61bb      	str	r3, [r7, #24]

	uint32_t R_value = 16; // najviac jak sa da
 8002194:	2310      	movs	r3, #16
 8002196:	617b      	str	r3, [r7, #20]
	float krok = 2*(1/(float)DIVA_caluclated);
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021ae:	edc7 7a04 	vstr	s15, [r7, #16]
	uint32_t N_value = freq/krok;
 80021b2:	edd7 6a01 	vldr	s13, [r7, #4]
 80021b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80021ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021c2:	ee17 3a90 	vmov	r3, s15
 80021c6:	60fb      	str	r3, [r7, #12]
	printf("band_i: %d\n", band_i);
	printf("krok: %f \n", krok);
	printf("%d\n", DIVA_caluclated);
	printf("R: %d\n", R_value);
	printf("N: %d\n", N_value);*/
	setN(N_value);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fef1 	bl	8001fb4 <setN>
	setDIVA(DIVA_caluclated);
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fe38 	bl	8001e4c <setDIVA>
	setR(R_value);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff07 	bl	8001ff4 <setR>
	program_PLL();
 80021e6:	f000 f8e1 	bl	80023ac <program_PLL>
	// give time to allow PLL to lock into frequency
	HAL_Delay(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f000 fd6c 	bl	8002cc8 <HAL_Delay>
}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	; 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	fefa39ef 	.word	0xfefa39ef
 80021fc:	3fe62e42 	.word	0x3fe62e42
 8002200:	41bc0000 	.word	0x41bc0000

08002204 <init_PLL>:

/**
  * @brief Initialize chip as specified in datasheet
  * @retval GPIO_PinState Lock Detect
  */
void init_PLL(){
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	// Zapis registrov default hodnotami
	write_reg(default_reg5);
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <init_PLL+0x8c>)
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f888 	bl	8002320 <write_reg>
	// disable RF outputs
	write_reg(default_reg4 & ~((1 << 5) | (1<<8)));
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <init_PLL+0x90>)
 8002212:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f882 	bl	8002320 <write_reg>
	write_reg(default_reg3);
 800221c:	230b      	movs	r3, #11
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f87e 	bl	8002320 <write_reg>
	write_reg(default_reg2);
 8002224:	f244 0342 	movw	r3, #16450	; 0x4042
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f879 	bl	8002320 <write_reg>
	write_reg(default_reg1);
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <init_PLL+0x94>)
 8002230:	4618      	mov	r0, r3
 8002232:	f000 f875 	bl	8002320 <write_reg>
	write_reg(default_reg0);
 8002236:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f870 	bl	8002320 <write_reg>
	program_PLL();
 8002240:	f000 f8b4 	bl	80023ac <program_PLL>
	// 20 ms between writes as specified in datasheet
	HAL_Delay(20);
 8002244:	2014      	movs	r0, #20
 8002246:	f000 fd3f 	bl	8002cc8 <HAL_Delay>
	write_reg(default_reg5);
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <init_PLL+0x8c>)
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f867 	bl	8002320 <write_reg>
	write_reg(default_reg4 & ~((1 << 5) | (1<<8)));
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <init_PLL+0x90>)
 8002254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f861 	bl	8002320 <write_reg>
	write_reg(default_reg3);
 800225e:	230b      	movs	r3, #11
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f85d 	bl	8002320 <write_reg>
	write_reg(default_reg2);
 8002266:	f244 0342 	movw	r3, #16450	; 0x4042
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f858 	bl	8002320 <write_reg>
	write_reg(default_reg1);
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <init_PLL+0x94>)
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f854 	bl	8002320 <write_reg>
	write_reg(default_reg0);
 8002278:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f84f 	bl	8002320 <write_reg>
	program_PLL();
 8002282:	f000 f893 	bl	80023ac <program_PLL>
	HAL_Delay(20);
 8002286:	2014      	movs	r0, #20
 8002288:	f000 fd1e 	bl	8002cc8 <HAL_Delay>
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	00400005 	.word	0x00400005
 8002294:	6180b23c 	.word	0x6180b23c
 8002298:	2000fff9 	.word	0x2000fff9

0800229c <write_regs_SOFT>:

void write_regs_SOFT(){
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
	//write to registers
	uint32_t reg0 = 0x80320000;
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <write_regs_SOFT+0x50>)
 80022a4:	617b      	str	r3, [r7, #20]
	uint32_t reg1 = 0x80033E81;
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <write_regs_SOFT+0x54>)
 80022a8:	613b      	str	r3, [r7, #16]
	uint32_t reg2 = 0x0C0041C2;
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <write_regs_SOFT+0x58>)
 80022ac:	60fb      	str	r3, [r7, #12]
	uint32_t reg3 = 0x0000800B;
 80022ae:	f248 030b 	movw	r3, #32779	; 0x800b
 80022b2:	60bb      	str	r3, [r7, #8]
	uint32_t reg4 = 0x629802FC;
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <write_regs_SOFT+0x5c>)
 80022b6:	607b      	str	r3, [r7, #4]
	uint32_t reg5 = 0x00400005;
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <write_regs_SOFT+0x60>)
 80022ba:	603b      	str	r3, [r7, #0]
	write_reg(reg5);
 80022bc:	6838      	ldr	r0, [r7, #0]
 80022be:	f000 f82f 	bl	8002320 <write_reg>
	write_reg(reg4);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f82c 	bl	8002320 <write_reg>
	write_reg(reg3);
 80022c8:	68b8      	ldr	r0, [r7, #8]
 80022ca:	f000 f829 	bl	8002320 <write_reg>
	write_reg(reg2);
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f826 	bl	8002320 <write_reg>
	write_reg(reg1);
 80022d4:	6938      	ldr	r0, [r7, #16]
 80022d6:	f000 f823 	bl	8002320 <write_reg>
	write_reg(reg0);
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f000 f820 	bl	8002320 <write_reg>
	program_PLL();
 80022e0:	f000 f864 	bl	80023ac <program_PLL>
}
 80022e4:	bf00      	nop
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	80320000 	.word	0x80320000
 80022f0:	80033e81 	.word	0x80033e81
 80022f4:	0c0041c2 	.word	0x0c0041c2
 80022f8:	629802fc 	.word	0x629802fc
 80022fc:	00400005 	.word	0x00400005

08002300 <swap_words>:

// big endian to little endian for 32bits
uint32_t swap_words(uint32_t rozumne){
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	uint32_t swapped = (rozumne >> 16) | (rozumne << 16);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	ea4f 4333 	mov.w	r3, r3, ror #16
 800230e:	60fb      	str	r3, [r7, #12]
	return swapped;
 8002310:	68fb      	ldr	r3, [r7, #12]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <write_reg>:

// preforms write to register
void write_reg(uint32_t data){
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	// determine register address
	uint32_t reg_addr = data & 0b111;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	60fb      	str	r3, [r7, #12]

	switch (reg_addr){
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b05      	cmp	r3, #5
 8002334:	d826      	bhi.n	8002384 <write_reg+0x64>
 8002336:	a201      	add	r2, pc, #4	; (adr r2, 800233c <write_reg+0x1c>)
 8002338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233c:	08002355 	.word	0x08002355
 8002340:	0800235d 	.word	0x0800235d
 8002344:	08002365 	.word	0x08002365
 8002348:	0800236d 	.word	0x0800236d
 800234c:	08002375 	.word	0x08002375
 8002350:	0800237d 	.word	0x0800237d
			case 0:
				reg0 = data;
 8002354:	4a0f      	ldr	r2, [pc, #60]	; (8002394 <write_reg+0x74>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6013      	str	r3, [r2, #0]
				break;
 800235a:	e014      	b.n	8002386 <write_reg+0x66>
			case 1:
				reg1 = data;
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <write_reg+0x78>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6013      	str	r3, [r2, #0]
				break;
 8002362:	e010      	b.n	8002386 <write_reg+0x66>
			case 2:
				reg2 = data;
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <write_reg+0x7c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6013      	str	r3, [r2, #0]
				break;
 800236a:	e00c      	b.n	8002386 <write_reg+0x66>
			case 3:
				reg3 = data;
 800236c:	4a0c      	ldr	r2, [pc, #48]	; (80023a0 <write_reg+0x80>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6013      	str	r3, [r2, #0]
				break;
 8002372:	e008      	b.n	8002386 <write_reg+0x66>
			case 4:
				reg4 = data;
 8002374:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <write_reg+0x84>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6013      	str	r3, [r2, #0]
				break;
 800237a:	e004      	b.n	8002386 <write_reg+0x66>
			case 5:
				reg5 = data;
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <write_reg+0x88>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6013      	str	r3, [r2, #0]
				break;
 8002382:	e000      	b.n	8002386 <write_reg+0x66>
			default:
				// invalid addressLED_GPIO_Port
				break;
 8002384:	bf00      	nop
	}
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000390 	.word	0x20000390
 8002398:	20000394 	.word	0x20000394
 800239c:	20000398 	.word	0x20000398
 80023a0:	2000039c 	.word	0x2000039c
 80023a4:	200003a0 	.word	0x200003a0
 80023a8:	200003a4 	.word	0x200003a4

080023ac <program_PLL>:

// sends all registers to PLL
void program_PLL(){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	write_to_PLL(reg5);
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <program_PLL+0x44>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f827 	bl	8002408 <write_to_PLL>
	write_to_PLL(reg4);
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <program_PLL+0x48>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f822 	bl	8002408 <write_to_PLL>
	write_to_PLL(reg3);
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <program_PLL+0x4c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f81d 	bl	8002408 <write_to_PLL>
	write_to_PLL(reg2);
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <program_PLL+0x50>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f818 	bl	8002408 <write_to_PLL>
	write_to_PLL(reg1);
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <program_PLL+0x54>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f813 	bl	8002408 <write_to_PLL>
	write_to_PLL(reg0);
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <program_PLL+0x58>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f80e 	bl	8002408 <write_to_PLL>
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200003a4 	.word	0x200003a4
 80023f4:	200003a0 	.word	0x200003a0
 80023f8:	2000039c 	.word	0x2000039c
 80023fc:	20000398 	.word	0x20000398
 8002400:	20000394 	.word	0x20000394
 8002404:	20000390 	.word	0x20000390

08002408 <write_to_PLL>:

uint8_t write_to_PLL(uint32_t data){
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	// endianness swap
	uint32_t swapped_data = swap_words(data);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff75 	bl	8002300 <swap_words>
 8002416:	4603      	mov	r3, r0
 8002418:	60bb      	str	r3, [r7, #8]
	uint16_t* pData = (uint16_t*)&swapped_data;
 800241a:	f107 0308 	add.w	r3, r7, #8
 800241e:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	2110      	movs	r1, #16
 8002424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002428:	f002 fb16 	bl	8004a58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800242c:	2001      	movs	r0, #1
 800242e:	f000 fc4b 	bl	8002cc8 <HAL_Delay>
	//HAL_StatusTypeDef result =  HAL_SPI_Transmit(&hspi1, (uint8_t*)pData, 2, 1000);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)pData, 2, 100);
 8002432:	2364      	movs	r3, #100	; 0x64
 8002434:	2202      	movs	r2, #2
 8002436:	68f9      	ldr	r1, [r7, #12]
 8002438:	4808      	ldr	r0, [pc, #32]	; (800245c <write_to_PLL+0x54>)
 800243a:	f004 f82f 	bl	800649c <HAL_SPI_Transmit>
	//printf("SPI Transmit result: %x\n", result);
	HAL_Delay(1);
 800243e:	2001      	movs	r0, #1
 8002440:	f000 fc42 	bl	8002cc8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	2110      	movs	r1, #16
 8002448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244c:	f002 fb04 	bl	8004a58 <HAL_GPIO_WritePin>

	return 0;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200003a8 	.word	0x200003a8

08002460 <LL_AHB2_GRP1_EnableClock>:
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800246e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4313      	orrs	r3, r2
 8002476:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4013      	ands	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002484:	68fb      	ldr	r3, [r7, #12]
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4013      	ands	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024b6:	68fb      	ldr	r3, [r7, #12]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <MX_SPI1_Init+0x74>)
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <MX_SPI1_Init+0x78>)
 80024cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <MX_SPI1_Init+0x74>)
 80024d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80024d6:	4b18      	ldr	r3, [pc, #96]	; (8002538 <MX_SPI1_Init+0x74>)
 80024d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <MX_SPI1_Init+0x74>)
 80024e0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80024e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <MX_SPI1_Init+0x74>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <MX_SPI1_Init+0x74>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <MX_SPI1_Init+0x74>)
 80024f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <MX_SPI1_Init+0x74>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <MX_SPI1_Init+0x74>)
 8002502:	2200      	movs	r2, #0
 8002504:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <MX_SPI1_Init+0x74>)
 8002508:	2200      	movs	r2, #0
 800250a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <MX_SPI1_Init+0x74>)
 800250e:	2200      	movs	r2, #0
 8002510:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <MX_SPI1_Init+0x74>)
 8002514:	2207      	movs	r2, #7
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <MX_SPI1_Init+0x74>)
 800251a:	2200      	movs	r2, #0
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <MX_SPI1_Init+0x74>)
 8002520:	2208      	movs	r2, #8
 8002522:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002524:	4804      	ldr	r0, [pc, #16]	; (8002538 <MX_SPI1_Init+0x74>)
 8002526:	f003 ff16 	bl	8006356 <HAL_SPI_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8002530:	f7ff fc1e 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200003a8 	.word	0x200003a8
 800253c:	40013000 	.word	0x40013000

08002540 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a24      	ldr	r2, [pc, #144]	; (80025f0 <HAL_SPI_MspInit+0xb0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d142      	bne.n	80025e8 <HAL_SPI_MspInit+0xa8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002562:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002566:	f7ff ff94 	bl	8002492 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff ff78 	bl	8002460 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002570:	23a0      	movs	r3, #160	; 0xa0
 8002572:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002580:	2305      	movs	r3, #5
 8002582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 030c 	add.w	r3, r7, #12
 8002588:	4619      	mov	r1, r3
 800258a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800258e:	f002 f8fb 	bl	8004788 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_SPI_MspInit+0xb4>)
 8002594:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <HAL_SPI_MspInit+0xb8>)
 8002596:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_SPI_MspInit+0xb4>)
 800259a:	2207      	movs	r2, #7
 800259c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_SPI_MspInit+0xb4>)
 80025a0:	2210      	movs	r2, #16
 80025a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_SPI_MspInit+0xb4>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_SPI_MspInit+0xb4>)
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_SPI_MspInit+0xb4>)
 80025b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_SPI_MspInit+0xb4>)
 80025ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025be:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_SPI_MspInit+0xb4>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_SPI_MspInit+0xb4>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80025cc:	4809      	ldr	r0, [pc, #36]	; (80025f4 <HAL_SPI_MspInit+0xb4>)
 80025ce:	f001 fe8f 	bl	80042f0 <HAL_DMA_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_SPI_MspInit+0x9c>
    {
      Error_Handler();
 80025d8:	f7ff fbca 	bl	8001d70 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <HAL_SPI_MspInit+0xb4>)
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
 80025e2:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_SPI_MspInit+0xb4>)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025e8:	bf00      	nop
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40013000 	.word	0x40013000
 80025f4:	2000040c 	.word	0x2000040c
 80025f8:	40020008 	.word	0x40020008

080025fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800260e:	e7fe      	b.n	800260e <NMI_Handler+0x4>

08002610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <HardFault_Handler+0x4>

08002616 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <MemManage_Handler+0x4>

0800261c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <BusFault_Handler+0x4>

08002622 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <UsageFault_Handler+0x4>

08002628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002656:	f000 fb0b 	bl	8002c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <DMA1_Channel1_IRQHandler+0x10>)
 8002666:	f001 ff8d 	bl	8004584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000040c 	.word	0x2000040c

08002674 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <TIM2_IRQHandler+0x10>)
 800267a:	f004 fa87 	bl	8006b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000470 	.word	0x20000470

08002688 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <USART1_IRQHandler+0x10>)
 800268e:	f004 ff8d 	bl	80075ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200004bc 	.word	0x200004bc

0800269c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <IPCC_C1_RX_IRQHandler+0x10>)
 80026a2:	f002 fa8b 	bl	8004bbc <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000260 	.word	0x20000260

080026b0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <IPCC_C1_TX_IRQHandler+0x10>)
 80026b6:	f002 fa33 	bl	8004b20 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000260 	.word	0x20000260

080026c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return 1;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <_kill>:

int _kill(int pid, int sig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026de:	f006 ff7d 	bl	80095dc <__errno>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2216      	movs	r2, #22
 80026e6:	601a      	str	r2, [r3, #0]
  return -1;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_exit>:

void _exit (int status)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ffe7 	bl	80026d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002706:	e7fe      	b.n	8002706 <_exit+0x12>

08002708 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e00a      	b.n	8002730 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800271a:	f3af 8000 	nop.w
 800271e:	4601      	mov	r1, r0
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	b2ca      	uxtb	r2, r1
 8002728:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	429a      	cmp	r2, r3
 8002736:	dbf0      	blt.n	800271a <_read+0x12>
  }

  return len;
 8002738:	687b      	ldr	r3, [r7, #4]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800276a:	605a      	str	r2, [r3, #4]
  return 0;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <_isatty>:

int _isatty(int file)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002782:	2301      	movs	r3, #1
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b4:	4a14      	ldr	r2, [pc, #80]	; (8002808 <_sbrk+0x5c>)
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <_sbrk+0x60>)
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <_sbrk+0x64>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <_sbrk+0x64>)
 80027ca:	4a12      	ldr	r2, [pc, #72]	; (8002814 <_sbrk+0x68>)
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <_sbrk+0x64>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d207      	bcs.n	80027ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027dc:	f006 fefe 	bl	80095dc <__errno>
 80027e0:	4603      	mov	r3, r0
 80027e2:	220c      	movs	r2, #12
 80027e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	e009      	b.n	8002800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <_sbrk+0x64>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <_sbrk+0x64>)
 80027fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20010000 	.word	0x20010000
 800280c:	00000400 	.word	0x00000400
 8002810:	2000046c 	.word	0x2000046c
 8002814:	20000568 	.word	0x20000568

08002818 <LL_APB1_GRP1_EnableClock>:
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002826:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4313      	orrs	r3, r2
 800282e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4013      	ands	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800283c:	68fb      	ldr	r3, [r7, #12]
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002852:	f107 0310 	add.w	r3, r7, #16
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <MX_TIM2_Init+0x98>)
 800286c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002870:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <MX_TIM2_Init+0x98>)
 8002874:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002878:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287a:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <MX_TIM2_Init+0x98>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002880:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <MX_TIM2_Init+0x98>)
 8002882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002886:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <MX_TIM2_Init+0x98>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <MX_TIM2_Init+0x98>)
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002894:	4813      	ldr	r0, [pc, #76]	; (80028e4 <MX_TIM2_Init+0x98>)
 8002896:	f004 f8d3 	bl	8006a40 <HAL_TIM_Base_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80028a0:	f7ff fa66 	bl	8001d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	4619      	mov	r1, r3
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <MX_TIM2_Init+0x98>)
 80028b2:	f004 fa8a 	bl	8006dca <HAL_TIM_ConfigClockSource>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80028bc:	f7ff fa58 	bl	8001d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c0:	2300      	movs	r3, #0
 80028c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	4619      	mov	r1, r3
 80028cc:	4805      	ldr	r0, [pc, #20]	; (80028e4 <MX_TIM2_Init+0x98>)
 80028ce:	f004 fc6d 	bl	80071ac <HAL_TIMEx_MasterConfigSynchronization>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80028d8:	f7ff fa4a 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028dc:	bf00      	nop
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000470 	.word	0x20000470

080028e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d10a      	bne.n	8002910 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028fa:	2001      	movs	r0, #1
 80028fc:	f7ff ff8c 	bl	8002818 <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	2100      	movs	r1, #0
 8002904:	201c      	movs	r0, #28
 8002906:	f001 fcbe 	bl	8004286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800290a:	201c      	movs	r0, #28
 800290c:	f001 fcd5 	bl	80042ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <LL_AHB2_GRP1_EnableClock>:
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002924:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4313      	orrs	r3, r2
 800292e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_APB2_GRP1_EnableClock>:
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002956:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4313      	orrs	r3, r2
 8002960:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002966:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4013      	ands	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 8002982:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <MX_USART1_UART_Init+0x94>)
 8002984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 8002988:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800298c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029a2:	220c      	movs	r2, #12
 80029a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029c4:	4811      	ldr	r0, [pc, #68]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029c6:	f004 fc7f 	bl	80072c8 <HAL_UART_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80029d0:	f7ff f9ce 	bl	8001d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029d4:	2100      	movs	r1, #0
 80029d6:	480d      	ldr	r0, [pc, #52]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029d8:	f006 fcdd 	bl	8009396 <HAL_UARTEx_SetTxFifoThreshold>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80029e2:	f7ff f9c5 	bl	8001d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029e6:	2100      	movs	r1, #0
 80029e8:	4808      	ldr	r0, [pc, #32]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029ea:	f006 fd12 	bl	8009412 <HAL_UARTEx_SetRxFifoThreshold>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80029f4:	f7ff f9bc 	bl	8001d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80029f8:	4804      	ldr	r0, [pc, #16]	; (8002a0c <MX_USART1_UART_Init+0x90>)
 80029fa:	f006 fc93 	bl	8009324 <HAL_UARTEx_DisableFifoMode>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a04:	f7ff f9b4 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	200004bc 	.word	0x200004bc
 8002a10:	40013800 	.word	0x40013800

08002a14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b090      	sub	sp, #64	; 0x40
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a2c:	f107 0308 	add.w	r3, r7, #8
 8002a30:	2224      	movs	r2, #36	; 0x24
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f006 fe11 	bl	800965c <memset>
  if(uartHandle->Instance==USART1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <HAL_UART_MspInit+0x94>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d12c      	bne.n	8002a9e <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a44:	2301      	movs	r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a4c:	f107 0308 	add.w	r3, r7, #8
 8002a50:	4618      	mov	r0, r3
 8002a52:	f003 fba5 	bl	80061a0 <HAL_RCCEx_PeriphCLKConfig>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a5c:	f7ff f988 	bl	8001d70 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a64:	f7ff ff71 	bl	800294a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a68:	2002      	movs	r0, #2
 8002a6a:	f7ff ff55 	bl	8002918 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a6e:	23c0      	movs	r3, #192	; 0xc0
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a7e:	2307      	movs	r3, #7
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a86:	4619      	mov	r1, r3
 8002a88:	4808      	ldr	r0, [pc, #32]	; (8002aac <HAL_UART_MspInit+0x98>)
 8002a8a:	f001 fe7d 	bl	8004788 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	2024      	movs	r0, #36	; 0x24
 8002a94:	f001 fbf7 	bl	8004286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a98:	2024      	movs	r0, #36	; 0x24
 8002a9a:	f001 fc0e 	bl	80042ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	3740      	adds	r7, #64	; 0x40
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40013800 	.word	0x40013800
 8002aac:	48000400 	.word	0x48000400

08002ab0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002ab0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ab4:	3304      	adds	r3, #4

08002ab6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002aba:	d3f9      	bcc.n	8002ab0 <CopyDataInit>
  bx lr
 8002abc:	4770      	bx	lr

08002abe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002abe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002ac0:	3004      	adds	r0, #4

08002ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002ac2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002ac4:	d3fb      	bcc.n	8002abe <FillZerobss>
  bx lr
 8002ac6:	4770      	bx	lr

08002ac8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8002ac8:	480c      	ldr	r0, [pc, #48]	; (8002afc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002aca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002acc:	f000 f828 	bl	8002b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002ad0:	480b      	ldr	r0, [pc, #44]	; (8002b00 <LoopForever+0x8>)
 8002ad2:	490c      	ldr	r1, [pc, #48]	; (8002b04 <LoopForever+0xc>)
 8002ad4:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <LoopForever+0x10>)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f7ff ffed 	bl	8002ab6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002adc:	480b      	ldr	r0, [pc, #44]	; (8002b0c <LoopForever+0x14>)
 8002ade:	490c      	ldr	r1, [pc, #48]	; (8002b10 <LoopForever+0x18>)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f7ff ffee 	bl	8002ac2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002ae6:	480b      	ldr	r0, [pc, #44]	; (8002b14 <LoopForever+0x1c>)
 8002ae8:	490b      	ldr	r1, [pc, #44]	; (8002b18 <LoopForever+0x20>)
 8002aea:	2300      	movs	r3, #0
 8002aec:	f7ff ffe9 	bl	8002ac2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002af0:	f006 fd7a 	bl	80095e8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002af4:	f7ff f85c 	bl	8001bb0 <main>

08002af8 <LoopForever>:

LoopForever:
  b LoopForever
 8002af8:	e7fe      	b.n	8002af8 <LoopForever>
 8002afa:	0000      	.short	0x0000
   ldr   r0, =_estack
 8002afc:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 8002b00:	20000004 	.word	0x20000004
 8002b04:	200001e0 	.word	0x200001e0
 8002b08:	0800d2b4 	.word	0x0800d2b4
  INIT_BSS _sbss, _ebss
 8002b0c:	200001e0 	.word	0x200001e0
 8002b10:	20000564 	.word	0x20000564
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002b14:	20030000 	.word	0x20030000
 8002b18:	20030000 	.word	0x20030000

08002b1c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b1c:	e7fe      	b.n	8002b1c <ADC1_IRQHandler>
	...

08002b20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002b24:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <SystemInit+0x90>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	4a21      	ldr	r2, [pc, #132]	; (8002bb0 <SystemInit+0x90>)
 8002b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002b4c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b58:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <SystemInit+0x94>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b6a:	f023 0305 	bic.w	r3, r3, #5
 8002b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <SystemInit+0x98>)
 8002b8c:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	619a      	str	r2, [r3, #24]
}
 8002ba6:	bf00      	nop
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000ed00 	.word	0xe000ed00
 8002bb4:	faf6fefb 	.word	0xfaf6fefb
 8002bb8:	22041000 	.word	0x22041000

08002bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <HAL_Init+0x3c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a0b      	ldr	r2, [pc, #44]	; (8002bf8 <HAL_Init+0x3c>)
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd2:	2003      	movs	r0, #3
 8002bd4:	f001 fb4c 	bl	8004270 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f000 f80f 	bl	8002bfc <HAL_InitTick>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	71fb      	strb	r3, [r7, #7]
 8002be8:	e001      	b.n	8002bee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bea:	f7ff fd07 	bl	80025fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bee:	79fb      	ldrb	r3, [r7, #7]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	58004000 	.word	0x58004000

08002bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_InitTick+0x6c>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d024      	beq.n	8002c5a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c10:	f003 f904 	bl	8005e1c <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_InitTick+0x6c>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c20:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 fb54 	bl	80042d6 <HAL_SYSTICK_Config>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10f      	bne.n	8002c54 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	d809      	bhi.n	8002c4e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c42:	f001 fb20 	bl	8004286 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <HAL_InitTick+0x70>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	e007      	b.n	8002c5e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
 8002c52:	e004      	b.n	8002c5e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	e001      	b.n	8002c5e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	2000000c 	.word	0x2000000c
 8002c6c:	20000008 	.word	0x20000008

08002c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_IncTick+0x20>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_IncTick+0x24>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_IncTick+0x24>)
 8002c82:	6013      	str	r3, [r2, #0]
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	2000000c 	.word	0x2000000c
 8002c94:	20000550 	.word	0x20000550

08002c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_GetTick+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000550 	.word	0x20000550

08002cb0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_GetTickPrio+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000008 	.word	0x20000008

08002cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7ff ffe2 	bl	8002c98 <HAL_GetTick>
 8002cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d005      	beq.n	8002cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <HAL_Delay+0x44>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4413      	add	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cee:	bf00      	nop
 8002cf0:	f7ff ffd2 	bl	8002c98 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d8f7      	bhi.n	8002cf0 <HAL_Delay+0x28>
  {
  }
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	2000000c 	.word	0x2000000c

08002d10 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3360      	adds	r3, #96	; 0x60
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <LL_ADC_SetOffset+0x44>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	03fff000 	.word	0x03fff000

08002dc0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3360      	adds	r3, #96	; 0x60
 8002dce:	461a      	mov	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3360      	adds	r3, #96	; 0x60
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e3a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3330      	adds	r3, #48	; 0x30
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	4413      	add	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	211f      	movs	r1, #31
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	0e9b      	lsrs	r3, r3, #26
 8002e80:	f003 011f 	and.w	r1, r3, #31
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002e94:	bf00      	nop
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3314      	adds	r3, #20
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	0e5b      	lsrs	r3, r3, #25
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	4413      	add	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	0d1b      	lsrs	r3, r3, #20
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2107      	movs	r1, #7
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	0d1b      	lsrs	r3, r3, #20
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f10:	43db      	mvns	r3, r3
 8002f12:	401a      	ands	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0318 	and.w	r3, r3, #24
 8002f1a:	4908      	ldr	r1, [pc, #32]	; (8002f3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f1c:	40d9      	lsrs	r1, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	400b      	ands	r3, r1
 8002f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f26:	431a      	orrs	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	0007ffff 	.word	0x0007ffff

08002f40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6093      	str	r3, [r2, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f78:	d101      	bne.n	8002f7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fa0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fc8:	d101      	bne.n	8002fce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ff0:	f043 0201 	orr.w	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003018:	f043 0202 	orr.w	r2, r3, #2
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <LL_ADC_IsEnabled+0x18>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <LL_ADC_IsEnabled+0x1a>
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b02      	cmp	r3, #2
 8003064:	d101      	bne.n	800306a <LL_ADC_IsDisableOngoing+0x18>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <LL_ADC_IsDisableOngoing+0x1a>
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800308c:	f043 0204 	orr.w	r2, r3, #4
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030b4:	f043 0210 	orr.w	r2, r3, #16
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d101      	bne.n	80030e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003102:	f043 0220 	orr.w	r2, r3, #32
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b08      	cmp	r3, #8
 8003128:	d101      	bne.n	800312e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800314c:	2300      	movs	r3, #0
 800314e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e12e      	b.n	80033b8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7fd fddf 	bl	8000d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff feef 	bl	8002f64 <LL_ADC_IsDeepPowerDownEnabled>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d004      	beq.n	8003196 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fed5 	bl	8002f40 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff ff0a 	bl	8002fb4 <LL_ADC_IsInternalRegulatorEnabled>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d115      	bne.n	80031d2 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff feee 	bl	8002f8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031b0:	4b83      	ldr	r3, [pc, #524]	; (80033c0 <HAL_ADC_Init+0x284>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	4a83      	ldr	r2, [pc, #524]	; (80033c4 <HAL_ADC_Init+0x288>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	3301      	adds	r3, #1
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031c4:	e002      	b.n	80031cc <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f9      	bne.n	80031c6 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff feec 	bl	8002fb4 <LL_ADC_IsInternalRegulatorEnabled>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10d      	bne.n	80031fe <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	f043 0210 	orr.w	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	f043 0201 	orr.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ff60 	bl	80030c8 <LL_ADC_REG_IsConversionOngoing>
 8003208:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 80c7 	bne.w	80033a6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 80c3 	bne.w	80033a6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003228:	f043 0202 	orr.w	r2, r3, #2
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fef9 	bl	800302c <LL_ADC_IsEnabled>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003240:	4861      	ldr	r0, [pc, #388]	; (80033c8 <HAL_ADC_Init+0x28c>)
 8003242:	f7ff fef3 	bl	800302c <LL_ADC_IsEnabled>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4619      	mov	r1, r3
 8003252:	485e      	ldr	r0, [pc, #376]	; (80033cc <HAL_ADC_Init+0x290>)
 8003254:	f7ff fd5c 	bl	8002d10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	7e5b      	ldrb	r3, [r3, #25]
 800325c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003262:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003268:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800326e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003276:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003278:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d106      	bne.n	8003298 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	3b01      	subs	r3, #1
 8003290:	045b      	lsls	r3, r3, #17
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	d009      	beq.n	80032b4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <HAL_ADC_Init+0x294>)
 80032bc:	4013      	ands	r3, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	69b9      	ldr	r1, [r7, #24]
 80032c4:	430b      	orrs	r3, r1
 80032c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fefb 	bl	80030c8 <LL_ADC_REG_IsConversionOngoing>
 80032d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff1c 	bl	8003116 <LL_ADC_INJ_IsConversionOngoing>
 80032de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d13d      	bne.n	8003362 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d13a      	bne.n	8003362 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003308:	f023 0302 	bic.w	r3, r3, #2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	69b9      	ldr	r1, [r7, #24]
 8003312:	430b      	orrs	r3, r1
 8003314:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800331c:	2b01      	cmp	r3, #1
 800331e:	d118      	bne.n	8003352 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800332a:	f023 0304 	bic.w	r3, r3, #4
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003336:	4311      	orrs	r1, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800333c:	4311      	orrs	r1, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003342:	430a      	orrs	r2, r1
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	611a      	str	r2, [r3, #16]
 8003350:	e007      	b.n	8003362 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d10c      	bne.n	8003384 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	f023 010f 	bic.w	r1, r3, #15
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	1e5a      	subs	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
 8003382:	e007      	b.n	8003394 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 020f 	bic.w	r2, r2, #15
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f023 0303 	bic.w	r3, r3, #3
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
 80033a4:	e007      	b.n	80033b6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f043 0210 	orr.w	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000004 	.word	0x20000004
 80033c4:	053e2d63 	.word	0x053e2d63
 80033c8:	50040000 	.word	0x50040000
 80033cc:	50040300 	.word	0x50040300
 80033d0:	fff0c007 	.word	0xfff0c007

080033d4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fe71 	bl	80030c8 <LL_ADC_REG_IsConversionOngoing>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d140      	bne.n	800346e <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_ADC_Start+0x26>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e03c      	b.n	8003474 <HAL_ADC_Start+0xa0>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fd8a 	bl	8003f1c <ADC_Enable>
 8003408:	4603      	mov	r3, r0
 800340a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d128      	bne.n	8003464 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003416:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003432:	d106      	bne.n	8003442 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	f023 0206 	bic.w	r2, r3, #6
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	659a      	str	r2, [r3, #88]	; 0x58
 8003440:	e002      	b.n	8003448 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	221c      	movs	r2, #28
 800344e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fe0b 	bl	8003078 <LL_ADC_REG_StartConversion>
 8003462:	e006      	b.n	8003472 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800346c:	e001      	b.n	8003472 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800346e:	2302      	movs	r3, #2
 8003470:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_ADC_Stop+0x16>
 800348e:	2302      	movs	r3, #2
 8003490:	e023      	b.n	80034da <HAL_ADC_Stop+0x5e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800349a:	2103      	movs	r1, #3
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fc81 	bl	8003da4 <ADC_ConversionStop>
 80034a2:	4603      	mov	r3, r0
 80034a4:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d111      	bne.n	80034d0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fdaf 	bl	8004010 <ADC_Disable>
 80034b2:	4603      	mov	r3, r0
 80034b4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	f043 0201 	orr.w	r2, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d102      	bne.n	80034fa <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80034f4:	2308      	movs	r3, #8
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e010      	b.n	800351c <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e06d      	b.n	80035f4 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003518:	2304      	movs	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800351c:	f7ff fbbc 	bl	8002c98 <HAL_GetTick>
 8003520:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003522:	e021      	b.n	8003568 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d01d      	beq.n	8003568 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800352c:	f7ff fbb4 	bl	8002c98 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <HAL_ADC_PollForConversion+0x60>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d112      	bne.n	8003568 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f043 0204 	orr.w	r2, r3, #4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e045      	b.n	80035f4 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0d6      	beq.n	8003524 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fc4b 	bl	8002e22 <LL_ADC_REG_IsTriggerSourceSWStart>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01c      	beq.n	80035cc <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	7e5b      	ldrb	r3, [r3, #25]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d111      	bne.n	80035cc <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	f043 0201 	orr.w	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d104      	bne.n	80035dc <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2208      	movs	r2, #8
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e00a      	b.n	80035f2 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	220c      	movs	r2, #12
 80035f0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b0b6      	sub	sp, #216	; 0xd8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_ADC_ConfigChannel+0x22>
 8003636:	2302      	movs	r3, #2
 8003638:	e39f      	b.n	8003d7a <HAL_ADC_ConfigChannel+0x762>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fd3e 	bl	80030c8 <LL_ADC_REG_IsConversionOngoing>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 8384 	bne.w	8003d5c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	f7ff fbf1 	bl	8002e48 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fd2c 	bl	80030c8 <LL_ADC_REG_IsConversionOngoing>
 8003670:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fd4c 	bl	8003116 <LL_ADC_INJ_IsConversionOngoing>
 800367e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003682:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 81a6 	bne.w	80039d8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800368c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003690:	2b00      	cmp	r3, #0
 8003692:	f040 81a1 	bne.w	80039d8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	461a      	mov	r2, r3
 80036a4:	f7ff fbfc 	bl	8002ea0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d00a      	beq.n	80036e0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6919      	ldr	r1, [r3, #16]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036da:	f7ff fb4d 	bl	8002d78 <LL_ADC_SetOffset>
 80036de:	e17b      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fb6a 	bl	8002dc0 <LL_ADC_GetOffsetChannel>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <HAL_ADC_ConfigChannel+0xf4>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fb5f 	bl	8002dc0 <LL_ADC_GetOffsetChannel>
 8003702:	4603      	mov	r3, r0
 8003704:	0e9b      	lsrs	r3, r3, #26
 8003706:	f003 021f 	and.w	r2, r3, #31
 800370a:	e01e      	b.n	800374a <HAL_ADC_ConfigChannel+0x132>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fb54 	bl	8002dc0 <LL_ADC_GetOffsetChannel>
 8003718:	4603      	mov	r3, r0
 800371a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800372a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800372e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003732:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800373a:	2320      	movs	r3, #32
 800373c:	e004      	b.n	8003748 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800373e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x14a>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	0e9b      	lsrs	r3, r3, #26
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	e018      	b.n	8003794 <HAL_ADC_ConfigChannel+0x17c>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800377a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800377e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003786:	2320      	movs	r3, #32
 8003788:	e004      	b.n	8003794 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800378a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	429a      	cmp	r2, r3
 8003796:	d106      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2200      	movs	r2, #0
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fb23 	bl	8002dec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2101      	movs	r1, #1
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fb07 	bl	8002dc0 <LL_ADC_GetOffsetChannel>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x1ba>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2101      	movs	r1, #1
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fafc 	bl	8002dc0 <LL_ADC_GetOffsetChannel>
 80037c8:	4603      	mov	r3, r0
 80037ca:	0e9b      	lsrs	r3, r3, #26
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	e01e      	b.n	8003810 <HAL_ADC_ConfigChannel+0x1f8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff faf1 	bl	8002dc0 <LL_ADC_GetOffsetChannel>
 80037de:	4603      	mov	r3, r0
 80037e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003800:	2320      	movs	r3, #32
 8003802:	e004      	b.n	800380e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003818:	2b00      	cmp	r3, #0
 800381a:	d105      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x210>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	0e9b      	lsrs	r3, r3, #26
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	e018      	b.n	800385a <HAL_ADC_ConfigChannel+0x242>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003834:	fa93 f3a3 	rbit	r3, r3
 8003838:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800383c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800384c:	2320      	movs	r3, #32
 800384e:	e004      	b.n	800385a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003854:	fab3 f383 	clz	r3, r3
 8003858:	b2db      	uxtb	r3, r3
 800385a:	429a      	cmp	r2, r3
 800385c:	d106      	bne.n	800386c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	2101      	movs	r1, #1
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fac0 	bl	8002dec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2102      	movs	r1, #2
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff faa4 	bl	8002dc0 <LL_ADC_GetOffsetChannel>
 8003878:	4603      	mov	r3, r0
 800387a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x280>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff fa99 	bl	8002dc0 <LL_ADC_GetOffsetChannel>
 800388e:	4603      	mov	r3, r0
 8003890:	0e9b      	lsrs	r3, r3, #26
 8003892:	f003 021f 	and.w	r2, r3, #31
 8003896:	e01e      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x2be>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2102      	movs	r1, #2
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fa8e 	bl	8002dc0 <LL_ADC_GetOffsetChannel>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80038b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80038c6:	2320      	movs	r3, #32
 80038c8:	e004      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80038ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x2d6>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	0e9b      	lsrs	r3, r3, #26
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	e016      	b.n	800391c <HAL_ADC_ConfigChannel+0x304>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800390e:	2320      	movs	r3, #32
 8003910:	e004      	b.n	800391c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003912:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	429a      	cmp	r2, r3
 800391e:	d106      	bne.n	800392e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2200      	movs	r2, #0
 8003926:	2102      	movs	r1, #2
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fa5f 	bl	8002dec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2103      	movs	r1, #3
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fa43 	bl	8002dc0 <LL_ADC_GetOffsetChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <HAL_ADC_ConfigChannel+0x342>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2103      	movs	r1, #3
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fa38 	bl	8002dc0 <LL_ADC_GetOffsetChannel>
 8003950:	4603      	mov	r3, r0
 8003952:	0e9b      	lsrs	r3, r3, #26
 8003954:	f003 021f 	and.w	r2, r3, #31
 8003958:	e017      	b.n	800398a <HAL_ADC_ConfigChannel+0x372>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2103      	movs	r1, #3
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fa2d 	bl	8002dc0 <LL_ADC_GetOffsetChannel>
 8003966:	4603      	mov	r3, r0
 8003968:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003974:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800397c:	2320      	movs	r3, #32
 800397e:	e003      	b.n	8003988 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003992:	2b00      	cmp	r3, #0
 8003994:	d105      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x38a>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	0e9b      	lsrs	r3, r3, #26
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	e011      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x3ae>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039aa:	fa93 f3a3 	rbit	r3, r3
 80039ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80039b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80039b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80039ba:	2320      	movs	r3, #32
 80039bc:	e003      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d106      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2200      	movs	r2, #0
 80039d0:	2103      	movs	r1, #3
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fa0a 	bl	8002dec <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fb25 	bl	800302c <LL_ADC_IsEnabled>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f040 81c2 	bne.w	8003d6e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6819      	ldr	r1, [r3, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f7ff fa7e 	bl	8002ef8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a8e      	ldr	r2, [pc, #568]	; (8003c3c <HAL_ADC_ConfigChannel+0x624>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	f040 8130 	bne.w	8003c68 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x418>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	0e9b      	lsrs	r3, r3, #26
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2b09      	cmp	r3, #9
 8003a26:	bf94      	ite	ls
 8003a28:	2301      	movls	r3, #1
 8003a2a:	2300      	movhi	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e019      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x44c>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a40:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003a48:	2320      	movs	r3, #32
 8003a4a:	e003      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	3301      	adds	r3, #1
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2b09      	cmp	r3, #9
 8003a5c:	bf94      	ite	ls
 8003a5e:	2301      	movls	r3, #1
 8003a60:	2300      	movhi	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d079      	beq.n	8003b5c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d107      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x46c>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	0e9b      	lsrs	r3, r3, #26
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	069b      	lsls	r3, r3, #26
 8003a7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a82:	e015      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x498>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8c:	fa93 f3a3 	rbit	r3, r3
 8003a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a94:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	e003      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	069b      	lsls	r3, r3, #26
 8003aac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x4b8>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	0e9b      	lsrs	r3, r3, #26
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	e017      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x4e8>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad8:	fa93 f3a3 	rbit	r3, r3
 8003adc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003ae8:	2320      	movs	r3, #32
 8003aea:	e003      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	3301      	adds	r3, #1
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2101      	movs	r1, #1
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	ea42 0103 	orr.w	r1, r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x50e>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	0e9b      	lsrs	r3, r3, #26
 8003b16:	3301      	adds	r3, #1
 8003b18:	f003 021f 	and.w	r2, r3, #31
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4413      	add	r3, r2
 8003b22:	051b      	lsls	r3, r3, #20
 8003b24:	e018      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x540>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003b3e:	2320      	movs	r3, #32
 8003b40:	e003      	b.n	8003b4a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b44:	fab3 f383 	clz	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	e080      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x560>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	0e9b      	lsrs	r3, r3, #26
 8003b6e:	3301      	adds	r3, #1
 8003b70:	069b      	lsls	r3, r3, #26
 8003b72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b76:	e015      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x58c>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003b90:	2320      	movs	r3, #32
 8003b92:	e003      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	069b      	lsls	r3, r3, #26
 8003ba0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x5ac>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	0e9b      	lsrs	r3, r3, #26
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	e017      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x5dc>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	61fb      	str	r3, [r7, #28]
  return result;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003bdc:	2320      	movs	r3, #32
 8003bde:	e003      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	3301      	adds	r3, #1
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2101      	movs	r1, #1
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	ea42 0103 	orr.w	r1, r2, r3
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10d      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x608>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0e9b      	lsrs	r3, r3, #26
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f003 021f 	and.w	r2, r3, #31
 8003c10:	4613      	mov	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	3b1e      	subs	r3, #30
 8003c18:	051b      	lsls	r3, r3, #20
 8003c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	e01d      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x644>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	613b      	str	r3, [r7, #16]
  return result;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d103      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003c38:	2320      	movs	r3, #32
 8003c3a:	e005      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x630>
 8003c3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	3301      	adds	r3, #1
 8003c4a:	f003 021f 	and.w	r2, r3, #31
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	3b1e      	subs	r3, #30
 8003c56:	051b      	lsls	r3, r3, #20
 8003c58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	6892      	ldr	r2, [r2, #8]
 8003c62:	4619      	mov	r1, r3
 8003c64:	f7ff f91c 	bl	8002ea0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b45      	ldr	r3, [pc, #276]	; (8003d84 <HAL_ADC_ConfigChannel+0x76c>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d07c      	beq.n	8003d6e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c74:	4844      	ldr	r0, [pc, #272]	; (8003d88 <HAL_ADC_ConfigChannel+0x770>)
 8003c76:	f7ff f871 	bl	8002d5c <LL_ADC_GetCommonPathInternalCh>
 8003c7a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c7e:	4843      	ldr	r0, [pc, #268]	; (8003d8c <HAL_ADC_ConfigChannel+0x774>)
 8003c80:	f7ff f9d4 	bl	800302c <LL_ADC_IsEnabled>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d15e      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <HAL_ADC_ConfigChannel+0x778>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d127      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x6cc>
 8003c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d121      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a39      	ldr	r2, [pc, #228]	; (8003d8c <HAL_ADC_ConfigChannel+0x774>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d161      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4834      	ldr	r0, [pc, #208]	; (8003d88 <HAL_ADC_ConfigChannel+0x770>)
 8003cb6:	f7ff f83e 	bl	8002d36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cba:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <HAL_ADC_ConfigChannel+0x77c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	099b      	lsrs	r3, r3, #6
 8003cc0:	4a35      	ldr	r2, [pc, #212]	; (8003d98 <HAL_ADC_ConfigChannel+0x780>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	4613      	mov	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003cd4:	e002      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f9      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ce2:	e044      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <HAL_ADC_ConfigChannel+0x784>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d113      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x6fe>
 8003cee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10d      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a23      	ldr	r2, [pc, #140]	; (8003d8c <HAL_ADC_ConfigChannel+0x774>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d134      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	481e      	ldr	r0, [pc, #120]	; (8003d88 <HAL_ADC_ConfigChannel+0x770>)
 8003d10:	f7ff f811 	bl	8002d36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d14:	e02b      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <HAL_ADC_ConfigChannel+0x788>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d126      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x756>
 8003d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d120      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <HAL_ADC_ConfigChannel+0x774>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d11b      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4811      	ldr	r0, [pc, #68]	; (8003d88 <HAL_ADC_ConfigChannel+0x770>)
 8003d42:	f7fe fff8 	bl	8002d36 <LL_ADC_SetCommonPathInternalCh>
 8003d46:	e012      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4c:	f043 0220 	orr.w	r2, r3, #32
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003d5a:	e008      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003d76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	37d8      	adds	r7, #216	; 0xd8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	80080000 	.word	0x80080000
 8003d88:	50040300 	.word	0x50040300
 8003d8c:	50040000 	.word	0x50040000
 8003d90:	c7520000 	.word	0xc7520000
 8003d94:	20000004 	.word	0x20000004
 8003d98:	053e2d63 	.word	0x053e2d63
 8003d9c:	cb840000 	.word	0xcb840000
 8003da0:	80000001 	.word	0x80000001

08003da4 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f984 	bl	80030c8 <LL_ADC_REG_IsConversionOngoing>
 8003dc0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff f9a5 	bl	8003116 <LL_ADC_INJ_IsConversionOngoing>
 8003dcc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d103      	bne.n	8003ddc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8098 	beq.w	8003f0c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d02a      	beq.n	8003e40 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	7e5b      	ldrb	r3, [r3, #25]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d126      	bne.n	8003e40 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	7e1b      	ldrb	r3, [r3, #24]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d122      	bne.n	8003e40 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003dfe:	e014      	b.n	8003e2a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	4a45      	ldr	r2, [pc, #276]	; (8003f18 <ADC_ConversionStop+0x174>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d90d      	bls.n	8003e24 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0c:	f043 0210 	orr.w	r2, r3, #16
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	f043 0201 	orr.w	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e074      	b.n	8003f0e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	3301      	adds	r3, #1
 8003e28:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d1e3      	bne.n	8003e00 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2240      	movs	r2, #64	; 0x40
 8003e3e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d014      	beq.n	8003e70 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff f93c 	bl	80030c8 <LL_ADC_REG_IsConversionOngoing>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00c      	beq.n	8003e70 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff f8f9 	bl	8003052 <LL_ADC_IsDisableOngoing>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff f918 	bl	80030a0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d014      	beq.n	8003ea0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff f94b 	bl	8003116 <LL_ADC_INJ_IsConversionOngoing>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00c      	beq.n	8003ea0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff f8e1 	bl	8003052 <LL_ADC_IsDisableOngoing>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff f927 	bl	80030ee <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d005      	beq.n	8003eb2 <ADC_ConversionStop+0x10e>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d105      	bne.n	8003eb8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003eac:	230c      	movs	r3, #12
 8003eae:	617b      	str	r3, [r7, #20]
        break;
 8003eb0:	e005      	b.n	8003ebe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	617b      	str	r3, [r7, #20]
        break;
 8003eb6:	e002      	b.n	8003ebe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003eb8:	2304      	movs	r3, #4
 8003eba:	617b      	str	r3, [r7, #20]
        break;
 8003ebc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003ebe:	f7fe feeb 	bl	8002c98 <HAL_GetTick>
 8003ec2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ec4:	e01b      	b.n	8003efe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ec6:	f7fe fee7 	bl	8002c98 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d914      	bls.n	8003efe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	f043 0210 	orr.w	r2, r3, #16
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f043 0201 	orr.w	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e007      	b.n	8003f0e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1dc      	bne.n	8003ec6 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	a33fffff 	.word	0xa33fffff

08003f1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff f87d 	bl	800302c <LL_ADC_IsEnabled>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d15e      	bne.n	8003ff6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	4b30      	ldr	r3, [pc, #192]	; (8004000 <ADC_Enable+0xe4>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4a:	f043 0210 	orr.w	r2, r3, #16
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	f043 0201 	orr.w	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e04a      	b.n	8003ff8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff f838 	bl	8002fdc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f6c:	4825      	ldr	r0, [pc, #148]	; (8004004 <ADC_Enable+0xe8>)
 8003f6e:	f7fe fef5 	bl	8002d5c <LL_ADC_GetCommonPathInternalCh>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00f      	beq.n	8003f9c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f7c:	4b22      	ldr	r3, [pc, #136]	; (8004008 <ADC_Enable+0xec>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	099b      	lsrs	r3, r3, #6
 8003f82:	4a22      	ldr	r2, [pc, #136]	; (800400c <ADC_Enable+0xf0>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	099b      	lsrs	r3, r3, #6
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003f8e:	e002      	b.n	8003f96 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f9      	bne.n	8003f90 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003f9c:	f7fe fe7c 	bl	8002c98 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fa2:	e021      	b.n	8003fe8 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff f83f 	bl	800302c <LL_ADC_IsEnabled>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d104      	bne.n	8003fbe <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff f80f 	bl	8002fdc <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fbe:	f7fe fe6b 	bl	8002c98 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d90d      	bls.n	8003fe8 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	f043 0210 	orr.w	r2, r3, #16
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	f043 0201 	orr.w	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e007      	b.n	8003ff8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d1d6      	bne.n	8003fa4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	8000003f 	.word	0x8000003f
 8004004:	50040300 	.word	0x50040300
 8004008:	20000004 	.word	0x20000004
 800400c:	053e2d63 	.word	0x053e2d63

08004010 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff f818 	bl	8003052 <LL_ADC_IsDisableOngoing>
 8004022:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7fe ffff 	bl	800302c <LL_ADC_IsEnabled>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d047      	beq.n	80040c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d144      	bne.n	80040c4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 030d 	and.w	r3, r3, #13
 8004044:	2b01      	cmp	r3, #1
 8004046:	d10c      	bne.n	8004062 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe ffd9 	bl	8003004 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2203      	movs	r2, #3
 8004058:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800405a:	f7fe fe1d 	bl	8002c98 <HAL_GetTick>
 800405e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004060:	e029      	b.n	80040b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f043 0210 	orr.w	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e023      	b.n	80040c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800407e:	f7fe fe0b 	bl	8002c98 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d914      	bls.n	80040b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f043 0210 	orr.w	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e007      	b.n	80040c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1dc      	bne.n	800407e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <__NVIC_SetPriorityGrouping>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <__NVIC_SetPriorityGrouping+0x44>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040ec:	4013      	ands	r3, r2
 80040ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <__NVIC_SetPriorityGrouping+0x44>)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	60d3      	str	r3, [r2, #12]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <__NVIC_GetPriorityGrouping>:
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800411c:	4b04      	ldr	r3, [pc, #16]	; (8004130 <__NVIC_GetPriorityGrouping+0x18>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	0a1b      	lsrs	r3, r3, #8
 8004122:	f003 0307 	and.w	r3, r3, #7
}
 8004126:	4618      	mov	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <__NVIC_EnableIRQ>:
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800413e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004142:	2b00      	cmp	r3, #0
 8004144:	db0b      	blt.n	800415e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	f003 021f 	and.w	r2, r3, #31
 800414c:	4907      	ldr	r1, [pc, #28]	; (800416c <__NVIC_EnableIRQ+0x38>)
 800414e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2001      	movs	r0, #1
 8004156:	fa00 f202 	lsl.w	r2, r0, r2
 800415a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	e000e100 	.word	0xe000e100

08004170 <__NVIC_SetPriority>:
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004180:	2b00      	cmp	r3, #0
 8004182:	db0a      	blt.n	800419a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	490c      	ldr	r1, [pc, #48]	; (80041bc <__NVIC_SetPriority+0x4c>)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	0112      	lsls	r2, r2, #4
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	440b      	add	r3, r1
 8004194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004198:	e00a      	b.n	80041b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4908      	ldr	r1, [pc, #32]	; (80041c0 <__NVIC_SetPriority+0x50>)
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	3b04      	subs	r3, #4
 80041a8:	0112      	lsls	r2, r2, #4
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	440b      	add	r3, r1
 80041ae:	761a      	strb	r2, [r3, #24]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000e100 	.word	0xe000e100
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <NVIC_EncodePriority>:
{
 80041c4:	b480      	push	{r7}
 80041c6:	b089      	sub	sp, #36	; 0x24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f1c3 0307 	rsb	r3, r3, #7
 80041de:	2b04      	cmp	r3, #4
 80041e0:	bf28      	it	cs
 80041e2:	2304      	movcs	r3, #4
 80041e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3304      	adds	r3, #4
 80041ea:	2b06      	cmp	r3, #6
 80041ec:	d902      	bls.n	80041f4 <NVIC_EncodePriority+0x30>
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3b03      	subs	r3, #3
 80041f2:	e000      	b.n	80041f6 <NVIC_EncodePriority+0x32>
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f8:	f04f 32ff 	mov.w	r2, #4294967295
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43da      	mvns	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	401a      	ands	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800420c:	f04f 31ff 	mov.w	r1, #4294967295
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	43d9      	mvns	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800421c:	4313      	orrs	r3, r2
}
 800421e:	4618      	mov	r0, r3
 8004220:	3724      	adds	r7, #36	; 0x24
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <SysTick_Config>:
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3b01      	subs	r3, #1
 8004238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800423c:	d301      	bcc.n	8004242 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800423e:	2301      	movs	r3, #1
 8004240:	e00f      	b.n	8004262 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <SysTick_Config+0x40>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3b01      	subs	r3, #1
 8004248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800424a:	210f      	movs	r1, #15
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	f7ff ff8e 	bl	8004170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <SysTick_Config+0x40>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800425a:	4b04      	ldr	r3, [pc, #16]	; (800426c <SysTick_Config+0x40>)
 800425c:	2207      	movs	r2, #7
 800425e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	e000e010 	.word	0xe000e010

08004270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff29 	bl	80040d0 <__NVIC_SetPriorityGrouping>
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af00      	add	r7, sp, #0
 800428c:	4603      	mov	r3, r0
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004294:	f7ff ff40 	bl	8004118 <__NVIC_GetPriorityGrouping>
 8004298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	6978      	ldr	r0, [r7, #20]
 80042a0:	f7ff ff90 	bl	80041c4 <NVIC_EncodePriority>
 80042a4:	4602      	mov	r2, r0
 80042a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ff5f 	bl	8004170 <__NVIC_SetPriority>
}
 80042b2:	bf00      	nop
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4603      	mov	r3, r0
 80042c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ff33 	bl	8004134 <__NVIC_EnableIRQ>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ffa4 	bl	800422c <SysTick_Config>
 80042e4:	4603      	mov	r3, r0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e078      	b.n	80043f4 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	4b3c      	ldr	r3, [pc, #240]	; (80043fc <HAL_DMA_Init+0x10c>)
 800430a:	4413      	add	r3, r2
 800430c:	4a3c      	ldr	r2, [pc, #240]	; (8004400 <HAL_DMA_Init+0x110>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	091b      	lsrs	r3, r3, #4
 8004314:	009a      	lsls	r2, r3, #2
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a39      	ldr	r2, [pc, #228]	; (8004404 <HAL_DMA_Init+0x114>)
 800431e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004344:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004350:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800435c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f9b6 	bl	80046e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004380:	d102      	bne.n	8004388 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004390:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004394:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800439e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d010      	beq.n	80043ca <HAL_DMA_Init+0xda>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d80c      	bhi.n	80043ca <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f9c3 	bl	800473c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	e008      	b.n	80043dc <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	bffdfff8 	.word	0xbffdfff8
 8004400:	cccccccd 	.word	0xcccccccd
 8004404:	40020000 	.word	0x40020000

08004408 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e04f      	b.n	80044ba <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d008      	beq.n	8004438 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2204      	movs	r2, #4
 800442a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e040      	b.n	80044ba <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 020e 	bic.w	r2, r2, #14
 8004446:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004456:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446c:	f003 021c 	and.w	r2, r3, #28
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f202 	lsl.w	r2, r1, r2
 800447a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004484:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800449c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d005      	beq.n	80044ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2204      	movs	r2, #4
 80044e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	73fb      	strb	r3, [r7, #15]
 80044e8:	e047      	b.n	800457a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 020e 	bic.w	r2, r2, #14
 80044f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0201 	bic.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004518:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	f003 021c 	and.w	r2, r3, #28
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	2101      	movs	r1, #1
 8004528:	fa01 f202 	lsl.w	r2, r1, r2
 800452c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004536:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00c      	beq.n	800455a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800454e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004558:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
    }
  }
  return status;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	f003 031c 	and.w	r3, r3, #28
 80045a4:	2204      	movs	r2, #4
 80045a6:	409a      	lsls	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d026      	beq.n	80045fe <HAL_DMA_IRQHandler+0x7a>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d021      	beq.n	80045fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d107      	bne.n	80045d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0204 	bic.w	r2, r2, #4
 80045d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045dc:	f003 021c 	and.w	r2, r3, #28
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2104      	movs	r1, #4
 80045e6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d071      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045fc:	e06c      	b.n	80046d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	f003 031c 	and.w	r3, r3, #28
 8004606:	2202      	movs	r2, #2
 8004608:	409a      	lsls	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4013      	ands	r3, r2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02e      	beq.n	8004670 <HAL_DMA_IRQHandler+0xec>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d029      	beq.n	8004670 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 020a 	bic.w	r2, r2, #10
 8004638:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	f003 021c 	and.w	r2, r3, #28
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2102      	movs	r1, #2
 8004650:	fa01 f202 	lsl.w	r2, r1, r2
 8004654:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d038      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800466e:	e033      	b.n	80046d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	f003 031c 	and.w	r3, r3, #28
 8004678:	2208      	movs	r2, #8
 800467a:	409a      	lsls	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d02a      	beq.n	80046da <HAL_DMA_IRQHandler+0x156>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d025      	beq.n	80046da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 020e 	bic.w	r2, r2, #14
 800469c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	f003 021c 	and.w	r2, r3, #28
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	2101      	movs	r1, #1
 80046ac:	fa01 f202 	lsl.w	r2, r1, r2
 80046b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
}
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f0:	089b      	lsrs	r3, r3, #2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046f8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	3b08      	subs	r3, #8
 8004708:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a08      	ldr	r2, [pc, #32]	; (8004738 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004716:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 031f 	and.w	r3, r3, #31
 800471e:	2201      	movs	r2, #1
 8004720:	409a      	lsls	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004726:	bf00      	nop
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	cccccccd 	.word	0xcccccccd
 8004738:	40020880 	.word	0x40020880

0800473c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800474c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	461a      	mov	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004760:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3b01      	subs	r3, #1
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2201      	movs	r2, #1
 800476c:	409a      	lsls	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	1000823f 	.word	0x1000823f
 8004784:	40020940 	.word	0x40020940

08004788 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004796:	e146      	b.n	8004a26 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	2101      	movs	r1, #1
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	fa01 f303 	lsl.w	r3, r1, r3
 80047a4:	4013      	ands	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8138 	beq.w	8004a20 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d005      	beq.n	80047c8 <HAL_GPIO_Init+0x40>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d130      	bne.n	800482a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	2203      	movs	r2, #3
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047fe:	2201      	movs	r2, #1
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	43db      	mvns	r3, r3
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4013      	ands	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	091b      	lsrs	r3, r3, #4
 8004814:	f003 0201 	and.w	r2, r3, #1
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b03      	cmp	r3, #3
 8004834:	d017      	beq.n	8004866 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	2203      	movs	r2, #3
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4013      	ands	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d123      	bne.n	80048ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	08da      	lsrs	r2, r3, #3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3208      	adds	r2, #8
 800487a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800487e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	220f      	movs	r2, #15
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4013      	ands	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	08da      	lsrs	r2, r3, #3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3208      	adds	r2, #8
 80048b4:	6939      	ldr	r1, [r7, #16]
 80048b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	2203      	movs	r2, #3
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43db      	mvns	r3, r3
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4013      	ands	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f003 0203 	and.w	r2, r3, #3
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 8092 	beq.w	8004a20 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80048fc:	4a51      	ldr	r2, [pc, #324]	; (8004a44 <HAL_GPIO_Init+0x2bc>)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	089b      	lsrs	r3, r3, #2
 8004902:	3302      	adds	r3, #2
 8004904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004908:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	220f      	movs	r2, #15
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4013      	ands	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004926:	d013      	beq.n	8004950 <HAL_GPIO_Init+0x1c8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a47      	ldr	r2, [pc, #284]	; (8004a48 <HAL_GPIO_Init+0x2c0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00d      	beq.n	800494c <HAL_GPIO_Init+0x1c4>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a46      	ldr	r2, [pc, #280]	; (8004a4c <HAL_GPIO_Init+0x2c4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d007      	beq.n	8004948 <HAL_GPIO_Init+0x1c0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a45      	ldr	r2, [pc, #276]	; (8004a50 <HAL_GPIO_Init+0x2c8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d101      	bne.n	8004944 <HAL_GPIO_Init+0x1bc>
 8004940:	2304      	movs	r3, #4
 8004942:	e006      	b.n	8004952 <HAL_GPIO_Init+0x1ca>
 8004944:	2307      	movs	r3, #7
 8004946:	e004      	b.n	8004952 <HAL_GPIO_Init+0x1ca>
 8004948:	2302      	movs	r3, #2
 800494a:	e002      	b.n	8004952 <HAL_GPIO_Init+0x1ca>
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <HAL_GPIO_Init+0x1ca>
 8004950:	2300      	movs	r3, #0
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	f002 0203 	and.w	r2, r2, #3
 8004958:	0092      	lsls	r2, r2, #2
 800495a:	4093      	lsls	r3, r2
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004962:	4938      	ldr	r1, [pc, #224]	; (8004a44 <HAL_GPIO_Init+0x2bc>)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	3302      	adds	r3, #2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004970:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <HAL_GPIO_Init+0x2cc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	43db      	mvns	r3, r3
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004994:	4a2f      	ldr	r2, [pc, #188]	; (8004a54 <HAL_GPIO_Init+0x2cc>)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800499a:	4b2e      	ldr	r3, [pc, #184]	; (8004a54 <HAL_GPIO_Init+0x2cc>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	43db      	mvns	r3, r3
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049be:	4a25      	ldr	r2, [pc, #148]	; (8004a54 <HAL_GPIO_Init+0x2cc>)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049c4:	4b23      	ldr	r3, [pc, #140]	; (8004a54 <HAL_GPIO_Init+0x2cc>)
 80049c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4013      	ands	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049ea:	4a1a      	ldr	r2, [pc, #104]	; (8004a54 <HAL_GPIO_Init+0x2cc>)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80049f2:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <HAL_GPIO_Init+0x2cc>)
 80049f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4013      	ands	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a18:	4a0e      	ldr	r2, [pc, #56]	; (8004a54 <HAL_GPIO_Init+0x2cc>)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	3301      	adds	r3, #1
 8004a24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f47f aeb1 	bne.w	8004798 <HAL_GPIO_Init+0x10>
  }
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	40010000 	.word	0x40010000
 8004a48:	48000400 	.word	0x48000400
 8004a4c:	48000800 	.word	0x48000800
 8004a50:	48001000 	.word	0x48001000
 8004a54:	58000800 	.word	0x58000800

08004a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	807b      	strh	r3, [r7, #2]
 8004a64:	4613      	mov	r3, r2
 8004a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a68:	787b      	ldrb	r3, [r7, #1]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a6e:	887a      	ldrh	r2, [r7, #2]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a74:	e002      	b.n	8004a7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a76:	887a      	ldrh	r2, [r7, #2]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a9a:	887a      	ldrh	r2, [r7, #2]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	041a      	lsls	r2, r3, #16
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	43d9      	mvns	r1, r3
 8004aa6:	887b      	ldrh	r3, [r7, #2]
 8004aa8:	400b      	ands	r3, r1
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
}
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01e      	beq.n	8004b0c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004ace:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <HAL_IPCC_Init+0x60>)
 8004ad0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc fd00 	bl	80014e4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004ae4:	68b8      	ldr	r0, [r7, #8]
 8004ae6:	f000 f8f5 	bl	8004cd4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f8c6 	bl	8004c88 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004b0a:	e001      	b.n	8004b10 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	58000c00 	.word	0x58000c00

08004b20 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004b2c:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <HAL_IPCC_TX_IRQHandler+0x98>)
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004b3a:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	041b      	lsls	r3, r3, #16
 8004b42:	43db      	mvns	r3, r3
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4013      	ands	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8004b4a:	e02c      	b.n	8004ba6 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	3310      	adds	r3, #16
 8004b54:	2201      	movs	r2, #1
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01c      	beq.n	8004ba0 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	3306      	adds	r3, #6
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	3306      	adds	r3, #6
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	6939      	ldr	r1, [r7, #16]
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1cf      	bne.n	8004b4c <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	58000c00 	.word	0x58000c00

08004bbc <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004bc8:	4b20      	ldr	r3, [pc, #128]	; (8004c4c <HAL_IPCC_RX_IRQHandler+0x90>)
 8004bca:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 8004bcc:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <HAL_IPCC_RX_IRQHandler+0x94>)
 8004bce:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bda:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	4013      	ands	r3, r2
 8004be4:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8004be6:	e029      	b.n	8004c3c <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	2201      	movs	r2, #1
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01a      	beq.n	8004c36 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d008      	beq.n	8004c2c <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	69b9      	ldr	r1, [r7, #24]
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	4013      	ands	r3, r2
 8004c34:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1d2      	bne.n	8004be8 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 8004c42:	bf00      	nop
 8004c44:	bf00      	nop
 8004c46:	3720      	adds	r7, #32
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	58000c00 	.word	0x58000c00
 8004c50:	58000c10 	.word	0x58000c10

08004c54 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e00f      	b.n	8004cb6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	4a0b      	ldr	r2, [pc, #44]	; (8004ccc <IPCC_SetDefaultCallbacks+0x44>)
 8004ca0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3306      	adds	r3, #6
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <IPCC_SetDefaultCallbacks+0x48>)
 8004cae:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b05      	cmp	r3, #5
 8004cba:	d9ec      	bls.n	8004c96 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	08004c55 	.word	0x08004c55
 8004cd0:	08004c6f 	.word	0x08004c6f

08004cd4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004ce8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	223f      	movs	r2, #63	; 0x3f
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a04      	ldr	r2, [pc, #16]	; (8004d18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0a:	6013      	str	r3, [r2, #0]
}
 8004d0c:	bf00      	nop
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	58000400 	.word	0x58000400

08004d1c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2e:	d101      	bne.n	8004d34 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d52:	6013      	str	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d70:	6013      	str	r3, [r2, #0]
}
 8004d72:	bf00      	nop
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d8e:	d101      	bne.n	8004d94 <LL_RCC_HSE_IsReady+0x18>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <LL_RCC_HSE_IsReady+0x1a>
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db2:	6013      	str	r3, [r2, #0]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd0:	6013      	str	r3, [r2, #0]
}
 8004dd2:	bf00      	nop
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dee:	d101      	bne.n	8004df4 <LL_RCC_HSI_IsReady+0x18>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <LL_RCC_HSI_IsReady+0x1a>
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004e64:	bf00      	nop
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d101      	bne.n	8004e86 <LL_RCC_HSI48_IsReady+0x18>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <LL_RCC_HSI48_IsReady+0x1a>
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8004e92:	b480      	push	{r7}
 8004e94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004eaa:	bf00      	nop
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ec4:	f023 0301 	bic.w	r3, r3, #1
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ecc:	bf00      	nop
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ee6:	f043 0304 	orr.w	r3, r3, #4
 8004eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004eee:	bf00      	nop
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f08:	f023 0304 	bic.w	r3, r3, #4
 8004f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f10:	bf00      	nop
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d101      	bne.n	8004f32 <LL_RCC_LSE_IsReady+0x18>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <LL_RCC_LSE_IsReady+0x1a>
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f56:	bf00      	nop
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f70:	f023 0301 	bic.w	r3, r3, #1
 8004f74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f78:	bf00      	nop
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004f82:	b480      	push	{r7}
 8004f84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d101      	bne.n	8004f9a <LL_RCC_LSI1_IsReady+0x18>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <LL_RCC_LSI1_IsReady+0x1a>
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fb6:	f043 0304 	orr.w	r3, r3, #4
 8004fba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004fbe:	bf00      	nop
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd8:	f023 0304 	bic.w	r3, r3, #4
 8004fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004fea:	b480      	push	{r7}
 8004fec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d101      	bne.n	8005002 <LL_RCC_LSI2_IsReady+0x18>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <LL_RCC_LSI2_IsReady+0x1a>
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800501e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6013      	str	r3, [r2, #0]
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800505a:	b480      	push	{r7}
 800505c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	6013      	str	r3, [r2, #0]
}
 800506e:	bf00      	nop
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b02      	cmp	r3, #2
 8005088:	d101      	bne.n	800508e <LL_RCC_MSI_IsReady+0x16>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <LL_RCC_MSI_IsReady+0x18>
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80050c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050d2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2bb0      	cmp	r3, #176	; 0xb0
 80050d8:	d901      	bls.n	80050de <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80050da:	23b0      	movs	r3, #176	; 0xb0
 80050dc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80050de:	687b      	ldr	r3, [r7, #4]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80050f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005106:	4313      	orrs	r3, r2
 8005108:	604b      	str	r3, [r1, #4]
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800511e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f023 0203 	bic.w	r2, r3, #3
 8005128:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800513e:	b480      	push	{r7}
 8005140:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 030c 	and.w	r3, r3, #12
}
 800514c:	4618      	mov	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005168:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800518e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051ba:	f023 020f 	bic.w	r2, r3, #15
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80051e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	608b      	str	r3, [r1, #8]
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005212:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800522c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005236:	4618      	mov	r0, r3
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005248:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005252:	4618      	mov	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800526a:	4618      	mov	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005292:	b480      	push	{r7}
 8005294:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a4:	6013      	str	r3, [r2, #0]
}
 80052a6:	bf00      	nop
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80052b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052c2:	d101      	bne.n	80052c8 <LL_RCC_PLL_IsReady+0x18>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <LL_RCC_PLL_IsReady+0x1a>
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80052d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80052f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005306:	b480      	push	{r7}
 8005308:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800530a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005314:	4618      	mov	r0, r3
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800531e:	b480      	push	{r7}
 8005320:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0303 	and.w	r3, r3, #3
}
 800532c:	4618      	mov	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005336:	b480      	push	{r7}
 8005338:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800533a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005348:	d101      	bne.n	800534e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800535a:	b480      	push	{r7}
 800535c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800535e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005362:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800536e:	d101      	bne.n	8005374 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005388:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800538c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005394:	d101      	bne.n	800539a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80053a6:	b480      	push	{r7}
 80053a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053b8:	d101      	bne.n	80053be <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80053ca:	b480      	push	{r7}
 80053cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80053ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053dc:	d101      	bne.n	80053e2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	b08d      	sub	sp, #52	; 0x34
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e35c      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 808d 	beq.w	800552a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005410:	f7ff fe95 	bl	800513e <LL_RCC_GetSysClkSource>
 8005414:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005416:	f7ff ff82 	bl	800531e <LL_RCC_PLL_GetMainSource>
 800541a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <HAL_RCC_OscConfig+0x3e>
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	2b0c      	cmp	r3, #12
 8005426:	d147      	bne.n	80054b8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	2b01      	cmp	r3, #1
 800542c:	d144      	bne.n	80054b8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e340      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800543e:	f7ff fe40 	bl	80050c2 <LL_RCC_MSI_GetRange>
 8005442:	4603      	mov	r3, r0
 8005444:	429c      	cmp	r4, r3
 8005446:	d914      	bls.n	8005472 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fd0f 	bl	8005e70 <RCC_SetFlashLatencyFromMSIRange>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e32f      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff fe1a 	bl	800509a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fe3e 	bl	80050ec <LL_RCC_MSI_SetCalibTrimming>
 8005470:	e013      	b.n	800549a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fe0f 	bl	800509a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fe33 	bl	80050ec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fcf0 	bl	8005e70 <RCC_SetFlashLatencyFromMSIRange>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e310      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800549a:	f000 fcbf 	bl	8005e1c <HAL_RCC_GetHCLKFreq>
 800549e:	4603      	mov	r3, r0
 80054a0:	4aa4      	ldr	r2, [pc, #656]	; (8005734 <HAL_RCC_OscConfig+0x344>)
 80054a2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054a4:	4ba4      	ldr	r3, [pc, #656]	; (8005738 <HAL_RCC_OscConfig+0x348>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fd fba7 	bl	8002bfc <HAL_InitTick>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d039      	beq.n	8005528 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e301      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01e      	beq.n	80054fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054c0:	f7ff fdbc 	bl	800503c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054c4:	f7fd fbe8 	bl	8002c98 <HAL_GetTick>
 80054c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054cc:	f7fd fbe4 	bl	8002c98 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e2ee      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() == 0U)
 80054de:	f7ff fdcb 	bl	8005078 <LL_RCC_MSI_IsReady>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f1      	beq.n	80054cc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff fdd4 	bl	800509a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fdf8 	bl	80050ec <LL_RCC_MSI_SetCalibTrimming>
 80054fc:	e015      	b.n	800552a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054fe:	f7ff fdac 	bl	800505a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005502:	f7fd fbc9 	bl	8002c98 <HAL_GetTick>
 8005506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800550a:	f7fd fbc5 	bl	8002c98 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e2cf      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() != 0U)
 800551c:	f7ff fdac 	bl	8005078 <LL_RCC_MSI_IsReady>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f1      	bne.n	800550a <HAL_RCC_OscConfig+0x11a>
 8005526:	e000      	b.n	800552a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005528:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d047      	beq.n	80055c6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005536:	f7ff fe02 	bl	800513e <LL_RCC_GetSysClkSource>
 800553a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800553c:	f7ff feef 	bl	800531e <LL_RCC_PLL_GetMainSource>
 8005540:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	2b08      	cmp	r3, #8
 8005546:	d005      	beq.n	8005554 <HAL_RCC_OscConfig+0x164>
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	2b0c      	cmp	r3, #12
 800554c:	d108      	bne.n	8005560 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	2b03      	cmp	r3, #3
 8005552:	d105      	bne.n	8005560 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d134      	bne.n	80055c6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e2ad      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005568:	d102      	bne.n	8005570 <HAL_RCC_OscConfig+0x180>
 800556a:	f7ff fbe9 	bl	8004d40 <LL_RCC_HSE_Enable>
 800556e:	e001      	b.n	8005574 <HAL_RCC_OscConfig+0x184>
 8005570:	f7ff fbf5 	bl	8004d5e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d012      	beq.n	80055a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557c:	f7fd fb8c 	bl	8002c98 <HAL_GetTick>
 8005580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005584:	f7fd fb88 	bl	8002c98 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b64      	cmp	r3, #100	; 0x64
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e292      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005596:	f7ff fbf1 	bl	8004d7c <LL_RCC_HSE_IsReady>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f1      	beq.n	8005584 <HAL_RCC_OscConfig+0x194>
 80055a0:	e011      	b.n	80055c6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a2:	f7fd fb79 	bl	8002c98 <HAL_GetTick>
 80055a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055aa:	f7fd fb75 	bl	8002c98 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b64      	cmp	r3, #100	; 0x64
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e27f      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() != 0U)
 80055bc:	f7ff fbde 	bl	8004d7c <LL_RCC_HSE_IsReady>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f1      	bne.n	80055aa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d04c      	beq.n	800566c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055d2:	f7ff fdb4 	bl	800513e <LL_RCC_GetSysClkSource>
 80055d6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055d8:	f7ff fea1 	bl	800531e <LL_RCC_PLL_GetMainSource>
 80055dc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d005      	beq.n	80055f0 <HAL_RCC_OscConfig+0x200>
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	2b0c      	cmp	r3, #12
 80055e8:	d10e      	bne.n	8005608 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d10b      	bne.n	8005608 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e25f      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fbfd 	bl	8004e00 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005606:	e031      	b.n	800566c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d019      	beq.n	8005644 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005610:	f7ff fbc6 	bl	8004da0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005614:	f7fd fb40 	bl	8002c98 <HAL_GetTick>
 8005618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800561c:	f7fd fb3c 	bl	8002c98 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e246      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() == 0U)
 800562e:	f7ff fbd5 	bl	8004ddc <LL_RCC_HSI_IsReady>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f1      	beq.n	800561c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff fbdf 	bl	8004e00 <LL_RCC_HSI_SetCalibTrimming>
 8005642:	e013      	b.n	800566c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005644:	f7ff fbbb 	bl	8004dbe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fd fb26 	bl	8002c98 <HAL_GetTick>
 800564c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005650:	f7fd fb22 	bl	8002c98 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e22c      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005662:	f7ff fbbb 	bl	8004ddc <LL_RCC_HSI_IsReady>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f1      	bne.n	8005650 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80a3 	beq.w	80057cc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d076      	beq.n	800577c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b00      	cmp	r3, #0
 8005698:	d046      	beq.n	8005728 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800569a:	f7ff fc72 	bl	8004f82 <LL_RCC_LSI1_IsReady>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d113      	bne.n	80056cc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80056a4:	f7ff fc4b 	bl	8004f3e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056a8:	f7fd faf6 	bl	8002c98 <HAL_GetTick>
 80056ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80056b0:	f7fd faf2 	bl	8002c98 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e1fc      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80056c2:	f7ff fc5e 	bl	8004f82 <LL_RCC_LSI1_IsReady>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f1      	beq.n	80056b0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80056cc:	f7ff fc6b 	bl	8004fa6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fd fae2 	bl	8002c98 <HAL_GetTick>
 80056d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80056d8:	f7fd fade 	bl	8002c98 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e1e8      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80056ea:	f7ff fc7e 	bl	8004fea <LL_RCC_LSI2_IsReady>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0f1      	beq.n	80056d8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff fc88 	bl	800500e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80056fe:	f7ff fc2f 	bl	8004f60 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005702:	f7fd fac9 	bl	8002c98 <HAL_GetTick>
 8005706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005708:	e008      	b.n	800571c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800570a:	f7fd fac5 	bl	8002c98 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e1cf      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800571c:	f7ff fc31 	bl	8004f82 <LL_RCC_LSI1_IsReady>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f1      	bne.n	800570a <HAL_RCC_OscConfig+0x31a>
 8005726:	e051      	b.n	80057cc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005728:	f7ff fc09 	bl	8004f3e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fd fab4 	bl	8002c98 <HAL_GetTick>
 8005730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005732:	e00c      	b.n	800574e <HAL_RCC_OscConfig+0x35e>
 8005734:	20000004 	.word	0x20000004
 8005738:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800573c:	f7fd faac 	bl	8002c98 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e1b6      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800574e:	f7ff fc18 	bl	8004f82 <LL_RCC_LSI1_IsReady>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0f1      	beq.n	800573c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005758:	f7ff fc36 	bl	8004fc8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800575e:	f7fd fa9b 	bl	8002c98 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b03      	cmp	r3, #3
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e1a5      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005770:	f7ff fc3b 	bl	8004fea <LL_RCC_LSI2_IsReady>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f1      	bne.n	800575e <HAL_RCC_OscConfig+0x36e>
 800577a:	e027      	b.n	80057cc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800577c:	f7ff fc24 	bl	8004fc8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005780:	f7fd fa8a 	bl	8002c98 <HAL_GetTick>
 8005784:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005788:	f7fd fa86 	bl	8002c98 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b03      	cmp	r3, #3
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e190      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800579a:	f7ff fc26 	bl	8004fea <LL_RCC_LSI2_IsReady>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1f1      	bne.n	8005788 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80057a4:	f7ff fbdc 	bl	8004f60 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a8:	f7fd fa76 	bl	8002c98 <HAL_GetTick>
 80057ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80057b0:	f7fd fa72 	bl	8002c98 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e17c      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80057c2:	f7ff fbde 	bl	8004f82 <LL_RCC_LSI1_IsReady>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f1      	bne.n	80057b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d05b      	beq.n	8005890 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057d8:	4ba7      	ldr	r3, [pc, #668]	; (8005a78 <HAL_RCC_OscConfig+0x688>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d114      	bne.n	800580e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80057e4:	f7ff fa8a 	bl	8004cfc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057e8:	f7fd fa56 	bl	8002c98 <HAL_GetTick>
 80057ec:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f0:	f7fd fa52 	bl	8002c98 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e15c      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005802:	4b9d      	ldr	r3, [pc, #628]	; (8005a78 <HAL_RCC_OscConfig+0x688>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d102      	bne.n	800581c <HAL_RCC_OscConfig+0x42c>
 8005816:	f7ff fb3c 	bl	8004e92 <LL_RCC_LSE_Enable>
 800581a:	e00c      	b.n	8005836 <HAL_RCC_OscConfig+0x446>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b05      	cmp	r3, #5
 8005822:	d104      	bne.n	800582e <HAL_RCC_OscConfig+0x43e>
 8005824:	f7ff fb57 	bl	8004ed6 <LL_RCC_LSE_EnableBypass>
 8005828:	f7ff fb33 	bl	8004e92 <LL_RCC_LSE_Enable>
 800582c:	e003      	b.n	8005836 <HAL_RCC_OscConfig+0x446>
 800582e:	f7ff fb41 	bl	8004eb4 <LL_RCC_LSE_Disable>
 8005832:	f7ff fb61 	bl	8004ef8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d014      	beq.n	8005868 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583e:	f7fd fa2b 	bl	8002c98 <HAL_GetTick>
 8005842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005844:	e00a      	b.n	800585c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005846:	f7fd fa27 	bl	8002c98 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	f241 3288 	movw	r2, #5000	; 0x1388
 8005854:	4293      	cmp	r3, r2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e12f      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() == 0U)
 800585c:	f7ff fb5d 	bl	8004f1a <LL_RCC_LSE_IsReady>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0ef      	beq.n	8005846 <HAL_RCC_OscConfig+0x456>
 8005866:	e013      	b.n	8005890 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005868:	f7fd fa16 	bl	8002c98 <HAL_GetTick>
 800586c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800586e:	e00a      	b.n	8005886 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005870:	f7fd fa12 	bl	8002c98 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	f241 3288 	movw	r2, #5000	; 0x1388
 800587e:	4293      	cmp	r3, r2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e11a      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005886:	f7ff fb48 	bl	8004f1a <LL_RCC_LSE_IsReady>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1ef      	bne.n	8005870 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d02c      	beq.n	80058f6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d014      	beq.n	80058ce <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058a4:	f7ff fac1 	bl	8004e2a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a8:	f7fd f9f6 	bl	8002c98 <HAL_GetTick>
 80058ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058b0:	f7fd f9f2 	bl	8002c98 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e0fc      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80058c2:	f7ff fad4 	bl	8004e6e <LL_RCC_HSI48_IsReady>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f1      	beq.n	80058b0 <HAL_RCC_OscConfig+0x4c0>
 80058cc:	e013      	b.n	80058f6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058ce:	f7ff fabd 	bl	8004e4c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d2:	f7fd f9e1 	bl	8002c98 <HAL_GetTick>
 80058d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058da:	f7fd f9dd 	bl	8002c98 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e0e7      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80058ec:	f7ff fabf 	bl	8004e6e <LL_RCC_HSI48_IsReady>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f1      	bne.n	80058da <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 80dd 	beq.w	8005aba <HAL_RCC_OscConfig+0x6ca>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005900:	f7ff fc1d 	bl	800513e <LL_RCC_GetSysClkSource>
 8005904:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	2b02      	cmp	r3, #2
 8005914:	f040 80a6 	bne.w	8005a64 <HAL_RCC_OscConfig+0x674>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0203 	and.w	r2, r3, #3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	429a      	cmp	r2, r3
 8005924:	d123      	bne.n	800596e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005930:	429a      	cmp	r2, r3
 8005932:	d11c      	bne.n	800596e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	0a1b      	lsrs	r3, r3, #8
 8005938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005940:	429a      	cmp	r2, r3
 8005942:	d114      	bne.n	800596e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800594e:	429a      	cmp	r2, r3
 8005950:	d10d      	bne.n	800596e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800595c:	429a      	cmp	r2, r3
 800595e:	d106      	bne.n	800596e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800596a:	429a      	cmp	r2, r3
 800596c:	d054      	beq.n	8005a18 <HAL_RCC_OscConfig+0x628>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b0c      	cmp	r3, #12
 8005972:	d04f      	beq.n	8005a14 <HAL_RCC_OscConfig+0x624>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005974:	f7ff fc8d 	bl	8005292 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005978:	f7fd f98e 	bl	8002c98 <HAL_GetTick>
 800597c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x5a2>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005980:	f7fd f98a 	bl	8002c98 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x5a2>
              {
                return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e094      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ef      	bne.n	8005980 <HAL_RCC_OscConfig+0x590>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	4b35      	ldr	r3, [pc, #212]	; (8005a7c <HAL_RCC_OscConfig+0x68c>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059b2:	4311      	orrs	r1, r2
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059b8:	0212      	lsls	r2, r2, #8
 80059ba:	4311      	orrs	r1, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80059c0:	4311      	orrs	r1, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80059c6:	4311      	orrs	r1, r2
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80059cc:	430a      	orrs	r2, r1
 80059ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80059d6:	f7ff fc4d 	bl	8005274 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059ea:	f7fd f955 	bl	8002c98 <HAL_GetTick>
 80059ee:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x614>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f2:	f7fd f951 	bl	8002c98 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x614>
              {
                return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e05b      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0ef      	beq.n	80059f2 <HAL_RCC_OscConfig+0x602>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a12:	e052      	b.n	8005aba <HAL_RCC_OscConfig+0x6ca>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e051      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d149      	bne.n	8005aba <HAL_RCC_OscConfig+0x6ca>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a26:	f7ff fc25 	bl	8005274 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a38:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a3a:	f7fd f92d 	bl	8002c98 <HAL_GetTick>
 8005a3e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x664>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a42:	f7fd f929 	bl	8002c98 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x664>
            {
              return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e033      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0ef      	beq.n	8005a42 <HAL_RCC_OscConfig+0x652>
 8005a62:	e02a      	b.n	8005aba <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	2b0c      	cmp	r3, #12
 8005a68:	d025      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x6c6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6a:	f7ff fc12 	bl	8005292 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6e:	f7fd f913 	bl	8002c98 <HAL_GetTick>
 8005a72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a74:	e00d      	b.n	8005a92 <HAL_RCC_OscConfig+0x6a2>
 8005a76:	bf00      	nop
 8005a78:	58000400 	.word	0x58000400
 8005a7c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a80:	f7fd f90a 	bl	8002c98 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x6a2>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e014      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1ef      	bne.n	8005a80 <HAL_RCC_OscConfig+0x690>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8005aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	60d3      	str	r3, [r2, #12]
 8005ab4:	e001      	b.n	8005aba <HAL_RCC_OscConfig+0x6ca>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_RCC_OscConfig+0x6cc>
      }
    }
  }
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3734      	adds	r7, #52	; 0x34
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd90      	pop	{r4, r7, pc}

08005ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e12d      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ad8:	4b98      	ldr	r3, [pc, #608]	; (8005d3c <HAL_RCC_ClockConfig+0x278>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d91b      	bls.n	8005b1e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae6:	4b95      	ldr	r3, [pc, #596]	; (8005d3c <HAL_RCC_ClockConfig+0x278>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f023 0207 	bic.w	r2, r3, #7
 8005aee:	4993      	ldr	r1, [pc, #588]	; (8005d3c <HAL_RCC_ClockConfig+0x278>)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af6:	f7fd f8cf 	bl	8002c98 <HAL_GetTick>
 8005afa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005afe:	f7fd f8cb 	bl	8002c98 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e111      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b10:	4b8a      	ldr	r3, [pc, #552]	; (8005d3c <HAL_RCC_ClockConfig+0x278>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d1ef      	bne.n	8005afe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d016      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff fb11 	bl	8005156 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b34:	f7fd f8b0 	bl	8002c98 <HAL_GetTick>
 8005b38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b3c:	f7fd f8ac 	bl	8002c98 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e0f2      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b4e:	f7ff fbf2 	bl	8005336 <LL_RCC_IsActiveFlag_HPRE>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0f1      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d016      	beq.n	8005b92 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff fb08 	bl	800517e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b6e:	f7fd f893 	bl	8002c98 <HAL_GetTick>
 8005b72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b76:	f7fd f88f 	bl	8002c98 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e0d5      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005b88:	f7ff fbe7 	bl	800535a <LL_RCC_IsActiveFlag_C2HPRE>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0f1      	beq.n	8005b76 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d016      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fb01 	bl	80051aa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ba8:	f7fd f876 	bl	8002c98 <HAL_GetTick>
 8005bac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bb0:	f7fd f872 	bl	8002c98 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e0b8      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005bc2:	f7ff fbdd 	bl	8005380 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0f1      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d016      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff fafb 	bl	80051d8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005be2:	f7fd f859 	bl	8002c98 <HAL_GetTick>
 8005be6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bea:	f7fd f855 	bl	8002c98 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e09b      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005bfc:	f7ff fbd3 	bl	80053a6 <LL_RCC_IsActiveFlag_PPRE1>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0f1      	beq.n	8005bea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d017      	beq.n	8005c42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff faf1 	bl	8005200 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c1e:	f7fd f83b 	bl	8002c98 <HAL_GetTick>
 8005c22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c26:	f7fd f837 	bl	8002c98 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e07d      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c38:	f7ff fbc7 	bl	80053ca <LL_RCC_IsActiveFlag_PPRE2>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f1      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d043      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d106      	bne.n	8005c64 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005c56:	f7ff f891 	bl	8004d7c <LL_RCC_HSE_IsReady>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d11e      	bne.n	8005c9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e067      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d106      	bne.n	8005c7a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005c6c:	f7ff fb20 	bl	80052b0 <LL_RCC_PLL_IsReady>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d113      	bne.n	8005c9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e05c      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005c82:	f7ff f9f9 	bl	8005078 <LL_RCC_MSI_IsReady>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d108      	bne.n	8005c9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e051      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005c90:	f7ff f8a4 	bl	8004ddc <LL_RCC_HSI_IsReady>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e04a      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff fa37 	bl	8005116 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca8:	f7fc fff6 	bl	8002c98 <HAL_GetTick>
 8005cac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cae:	e00a      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb0:	f7fc fff2 	bl	8002c98 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e036      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc6:	f7ff fa3a 	bl	800513e <LL_RCC_GetSysClkSource>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d1ec      	bne.n	8005cb0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd6:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <HAL_RCC_ClockConfig+0x278>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d21b      	bcs.n	8005d1c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce4:	4b15      	ldr	r3, [pc, #84]	; (8005d3c <HAL_RCC_ClockConfig+0x278>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f023 0207 	bic.w	r2, r3, #7
 8005cec:	4913      	ldr	r1, [pc, #76]	; (8005d3c <HAL_RCC_ClockConfig+0x278>)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf4:	f7fc ffd0 	bl	8002c98 <HAL_GetTick>
 8005cf8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005cfc:	f7fc ffcc 	bl	8002c98 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e012      	b.n	8005d34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0e:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_RCC_ClockConfig+0x278>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d1ef      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d1c:	f000 f87e 	bl	8005e1c <HAL_RCC_GetHCLKFreq>
 8005d20:	4603      	mov	r3, r0
 8005d22:	4a07      	ldr	r2, [pc, #28]	; (8005d40 <HAL_RCC_ClockConfig+0x27c>)
 8005d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005d26:	f7fc ffc3 	bl	8002cb0 <HAL_GetTickPrio>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fc ff65 	bl	8002bfc <HAL_InitTick>
 8005d32:	4603      	mov	r3, r0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	58004000 	.word	0x58004000
 8005d40:	20000004 	.word	0x20000004

08005d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d4a:	f7ff f9f8 	bl	800513e <LL_RCC_GetSysClkSource>
 8005d4e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10a      	bne.n	8005d6c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d56:	f7ff f9b4 	bl	80050c2 <LL_RCC_MSI_GetRange>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	091b      	lsrs	r3, r3, #4
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	4a2b      	ldr	r2, [pc, #172]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e04b      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d102      	bne.n	8005d78 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d72:	4b28      	ldr	r3, [pc, #160]	; (8005e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	e045      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d10a      	bne.n	8005d94 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d7e:	f7fe ffcd 	bl	8004d1c <LL_RCC_HSE_IsEnabledDiv2>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d102      	bne.n	8005d8e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005d88:	4b22      	ldr	r3, [pc, #136]	; (8005e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e03a      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005d8e:	4b22      	ldr	r3, [pc, #136]	; (8005e18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e037      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005d94:	f7ff fac3 	bl	800531e <LL_RCC_PLL_GetMainSource>
 8005d98:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d003      	beq.n	8005da8 <HAL_RCC_GetSysClockFreq+0x64>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d003      	beq.n	8005dae <HAL_RCC_GetSysClockFreq+0x6a>
 8005da6:	e00d      	b.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005da8:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005daa:	60bb      	str	r3, [r7, #8]
        break;
 8005dac:	e015      	b.n	8005dda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005dae:	f7fe ffb5 	bl	8004d1c <LL_RCC_HSE_IsEnabledDiv2>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d102      	bne.n	8005dbe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005db8:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005dba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005dbc:	e00d      	b.n	8005dda <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005dbe:	4b16      	ldr	r3, [pc, #88]	; (8005e18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005dc0:	60bb      	str	r3, [r7, #8]
        break;
 8005dc2:	e00a      	b.n	8005dda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005dc4:	f7ff f97d 	bl	80050c2 <LL_RCC_MSI_GetRange>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	091b      	lsrs	r3, r3, #4
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	4a0f      	ldr	r2, [pc, #60]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd6:	60bb      	str	r3, [r7, #8]
        break;
 8005dd8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005dda:	f7ff fa7b 	bl	80052d4 <LL_RCC_PLL_GetN>
 8005dde:	4602      	mov	r2, r0
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	fb03 f402 	mul.w	r4, r3, r2
 8005de6:	f7ff fa8e 	bl	8005306 <LL_RCC_PLL_GetDivider>
 8005dea:	4603      	mov	r3, r0
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	3301      	adds	r3, #1
 8005df0:	fbb4 f4f3 	udiv	r4, r4, r3
 8005df4:	f7ff fa7b 	bl	80052ee <LL_RCC_PLL_GetR>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	0f5b      	lsrs	r3, r3, #29
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	fbb4 f3f3 	udiv	r3, r4, r3
 8005e02:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005e04:	68fb      	ldr	r3, [r7, #12]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd90      	pop	{r4, r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	0800ce68 	.word	0x0800ce68
 8005e14:	00f42400 	.word	0x00f42400
 8005e18:	01e84800 	.word	0x01e84800

08005e1c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e1c:	b598      	push	{r3, r4, r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005e20:	f7ff ff90 	bl	8005d44 <HAL_RCC_GetSysClockFreq>
 8005e24:	4604      	mov	r4, r0
 8005e26:	f7ff f9ff 	bl	8005228 <LL_RCC_GetAHBPrescaler>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	4a03      	ldr	r2, [pc, #12]	; (8005e40 <HAL_RCC_GetHCLKFreq+0x24>)
 8005e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e38:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	bd98      	pop	{r3, r4, r7, pc}
 8005e40:	0800ce08 	.word	0x0800ce08

08005e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e44:	b598      	push	{r3, r4, r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005e48:	f7ff ffe8 	bl	8005e1c <HAL_RCC_GetHCLKFreq>
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	f7ff fa05 	bl	800525c <LL_RCC_GetAPB2Prescaler>
 8005e52:	4603      	mov	r3, r0
 8005e54:	0adb      	lsrs	r3, r3, #11
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	4a04      	ldr	r2, [pc, #16]	; (8005e6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e60:	f003 031f 	and.w	r3, r3, #31
 8005e64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	bd98      	pop	{r3, r4, r7, pc}
 8005e6c:	0800ce48 	.word	0x0800ce48

08005e70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2bb0      	cmp	r3, #176	; 0xb0
 8005e7c:	d903      	bls.n	8005e86 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e007      	b.n	8005e96 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	4a10      	ldr	r2, [pc, #64]	; (8005ed0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e94:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005e96:	f7ff f9d3 	bl	8005240 <LL_RCC_GetAHB4Prescaler>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	091b      	lsrs	r3, r3, #4
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	4a0c      	ldr	r2, [pc, #48]	; (8005ed4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	0c9b      	lsrs	r3, r3, #18
 8005eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 f80c 	bl	8005edc <RCC_SetFlashLatency>
 8005ec4:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	0800ce68 	.word	0x0800ce68
 8005ed4:	0800ce08 	.word	0x0800ce08
 8005ed8:	431bde83 	.word	0x431bde83

08005edc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005edc:	b590      	push	{r4, r7, lr}
 8005ede:	b08f      	sub	sp, #60	; 0x3c
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005ee6:	4b24      	ldr	r3, [pc, #144]	; (8005f78 <RCC_SetFlashLatency+0x9c>)
 8005ee8:	f107 041c 	add.w	r4, r7, #28
 8005eec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005eee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005ef2:	4b22      	ldr	r3, [pc, #136]	; (8005f7c <RCC_SetFlashLatency+0xa0>)
 8005ef4:	f107 040c 	add.w	r4, r7, #12
 8005ef8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005efa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005efe:	2300      	movs	r3, #0
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005f02:	2300      	movs	r3, #0
 8005f04:	633b      	str	r3, [r7, #48]	; 0x30
 8005f06:	e013      	b.n	8005f30 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	3338      	adds	r3, #56	; 0x38
 8005f0e:	443b      	add	r3, r7
 8005f10:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d807      	bhi.n	8005f2a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	3338      	adds	r3, #56	; 0x38
 8005f20:	443b      	add	r3, r7
 8005f22:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005f26:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005f28:	e005      	b.n	8005f36 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d9e8      	bls.n	8005f08 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005f36:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <RCC_SetFlashLatency+0xa4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f023 0207 	bic.w	r2, r3, #7
 8005f3e:	4910      	ldr	r1, [pc, #64]	; (8005f80 <RCC_SetFlashLatency+0xa4>)
 8005f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f42:	4313      	orrs	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f46:	f7fc fea7 	bl	8002c98 <HAL_GetTick>
 8005f4a:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f4c:	e008      	b.n	8005f60 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f4e:	f7fc fea3 	bl	8002c98 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e007      	b.n	8005f70 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <RCC_SetFlashLatency+0xa4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d1ef      	bne.n	8005f4e <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	373c      	adds	r7, #60	; 0x3c
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd90      	pop	{r4, r7, pc}
 8005f78:	0800cde8 	.word	0x0800cde8
 8005f7c:	0800cdf8 	.word	0x0800cdf8
 8005f80:	58004000 	.word	0x58004000

08005f84 <LL_RCC_LSE_IsEnabled>:
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <LL_RCC_LSE_IsEnabled+0x18>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <LL_RCC_LSE_IsEnabled+0x1a>
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <LL_RCC_LSE_IsReady>:
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d101      	bne.n	8005fc0 <LL_RCC_LSE_IsReady+0x18>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e000      	b.n	8005fc2 <LL_RCC_LSE_IsReady+0x1a>
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <LL_RCC_SetRFWKPClockSource>:
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <LL_RCC_SetUSARTClockSource>:
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006008:	f023 0203 	bic.w	r2, r3, #3
 800600c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <LL_RCC_SetI2CClockSource>:
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800602c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006030:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	091b      	lsrs	r3, r3, #4
 8006038:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800603c:	43db      	mvns	r3, r3
 800603e:	401a      	ands	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <LL_RCC_SetLPTIMClockSource>:
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800606a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	041b      	lsls	r3, r3, #16
 8006074:	43db      	mvns	r3, r3
 8006076:	401a      	ands	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	041b      	lsls	r3, r3, #16
 800607c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <LL_RCC_SetRNGClockSource>:
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800609a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80060a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <LL_RCC_SetCLK48ClockSource>:
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80060c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <LL_RCC_SetADCClockSource>:
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80060f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <LL_RCC_SetRTCClockSource>:
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800611e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800612a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4313      	orrs	r3, r2
 8006132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <LL_RCC_GetRTCClockSource>:
{
 8006142:	b480      	push	{r7}
 8006144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006152:	4618      	mov	r0, r3
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <LL_RCC_ForceBackupDomainReset>:
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006168:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800616c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <LL_RCC_ReleaseBackupDomainReset>:
{
 800617e:	b480      	push	{r7}
 8006180:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800618e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006196:	bf00      	nop
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80061a8:	2300      	movs	r3, #0
 80061aa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80061ac:	2300      	movs	r3, #0
 80061ae:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d046      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80061bc:	f7ff ffc1 	bl	8006142 <LL_RCC_GetRTCClockSource>
 80061c0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d03c      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80061cc:	f7fe fd96 	bl	8004cfc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d105      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff ff9b 	bl	8006116 <LL_RCC_SetRTCClockSource>
 80061e0:	e02e      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80061e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ea:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80061ec:	f7ff ffb6 	bl	800615c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80061f0:	f7ff ffc5 	bl	800617e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800620c:	f7ff feba 	bl	8005f84 <LL_RCC_LSE_IsEnabled>
 8006210:	4603      	mov	r3, r0
 8006212:	2b01      	cmp	r3, #1
 8006214:	d114      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006216:	f7fc fd3f 	bl	8002c98 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800621c:	e00b      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800621e:	f7fc fd3b 	bl	8002c98 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	f241 3288 	movw	r2, #5000	; 0x1388
 800622c:	4293      	cmp	r3, r2
 800622e:	d902      	bls.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	77fb      	strb	r3, [r7, #31]
              break;
 8006234:	e004      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006236:	f7ff feb7 	bl	8005fa8 <LL_RCC_LSE_IsReady>
 800623a:	4603      	mov	r3, r0
 800623c:	2b01      	cmp	r3, #1
 800623e:	d1ee      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006240:	7ffb      	ldrb	r3, [r7, #31]
 8006242:	77bb      	strb	r3, [r7, #30]
 8006244:	e001      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006246:	7ffb      	ldrb	r3, [r7, #31]
 8006248:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d004      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fecc 	bl	8005ff8 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff fef4 	bl	800605e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d004      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff fee9 	bl	800605e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	4618      	mov	r0, r3
 800629e:	f7ff fec1 	bl	8006024 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d02b      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b6:	d008      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c0:	d003      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d105      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fedf 	bl	8006092 <LL_RCC_SetRNGClockSource>
 80062d4:	e00a      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	2000      	movs	r0, #0
 80062e2:	f7ff fed6 	bl	8006092 <LL_RCC_SetRNGClockSource>
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7ff fee9 	bl	80060be <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80062f4:	d107      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80062f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006304:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800630e:	2b00      	cmp	r3, #0
 8006310:	d011      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff fee7 	bl	80060ea <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006324:	d107      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006334:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d004      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff fe40 	bl	8005fcc <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800634c:	7fbb      	ldrb	r3, [r7, #30]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e095      	b.n	8006494 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	2b00      	cmp	r3, #0
 800636e:	d108      	bne.n	8006382 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006378:	d009      	beq.n	800638e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	61da      	str	r2, [r3, #28]
 8006380:	e005      	b.n	800638e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d106      	bne.n	80063ae <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7fc f8c9 	bl	8002540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063ce:	d902      	bls.n	80063d6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	e002      	b.n	80063dc <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80063d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80063e4:	d007      	beq.n	80063f6 <HAL_SPI_Init+0xa0>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063ee:	d002      	beq.n	80063f6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006438:	ea42 0103 	orr.w	r1, r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006440:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	0c1b      	lsrs	r3, r3, #16
 8006452:	f003 0204 	and.w	r2, r3, #4
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	f003 0310 	and.w	r3, r3, #16
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006472:	ea42 0103 	orr.w	r1, r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_SPI_Transmit+0x22>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e158      	b.n	8006770 <HAL_SPI_Transmit+0x2d4>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064c6:	f7fc fbe7 	bl	8002c98 <HAL_GetTick>
 80064ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d002      	beq.n	80064e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064dc:	2302      	movs	r3, #2
 80064de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064e0:	e13d      	b.n	800675e <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <HAL_SPI_Transmit+0x52>
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064f2:	e134      	b.n	800675e <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2203      	movs	r2, #3
 80064f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	88fa      	ldrh	r2, [r7, #6]
 8006512:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800653e:	d10f      	bne.n	8006560 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800654e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800655e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656a:	2b40      	cmp	r3, #64	; 0x40
 800656c:	d007      	beq.n	800657e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800657c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006586:	d94b      	bls.n	8006620 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_SPI_Transmit+0xfa>
 8006590:	8afb      	ldrh	r3, [r7, #22]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d13e      	bne.n	8006614 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	881a      	ldrh	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	1c9a      	adds	r2, r3, #2
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065ba:	e02b      	b.n	8006614 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d112      	bne.n	80065f0 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	1c9a      	adds	r2, r3, #2
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065ee:	e011      	b.n	8006614 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065f0:	f7fc fb52 	bl	8002c98 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d803      	bhi.n	8006608 <HAL_SPI_Transmit+0x16c>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006606:	d102      	bne.n	800660e <HAL_SPI_Transmit+0x172>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d102      	bne.n	8006614 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006612:	e0a4      	b.n	800675e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1ce      	bne.n	80065bc <HAL_SPI_Transmit+0x120>
 800661e:	e07c      	b.n	800671a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <HAL_SPI_Transmit+0x192>
 8006628:	8afb      	ldrh	r3, [r7, #22]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d170      	bne.n	8006710 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	d912      	bls.n	800665e <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	881a      	ldrh	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	1c9a      	adds	r2, r3, #2
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b02      	subs	r3, #2
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800665c:	e058      	b.n	8006710 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	330c      	adds	r3, #12
 8006668:	7812      	ldrb	r2, [r2, #0]
 800666a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006684:	e044      	b.n	8006710 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b02      	cmp	r3, #2
 8006692:	d12b      	bne.n	80066ec <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b01      	cmp	r3, #1
 800669c:	d912      	bls.n	80066c4 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	881a      	ldrh	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	1c9a      	adds	r2, r3, #2
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b02      	subs	r3, #2
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066c2:	e025      	b.n	8006710 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	330c      	adds	r3, #12
 80066ce:	7812      	ldrb	r2, [r2, #0]
 80066d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066ea:	e011      	b.n	8006710 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ec:	f7fc fad4 	bl	8002c98 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d803      	bhi.n	8006704 <HAL_SPI_Transmit+0x268>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006702:	d102      	bne.n	800670a <HAL_SPI_Transmit+0x26e>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d102      	bne.n	8006710 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800670e:	e026      	b.n	800675e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1b5      	bne.n	8006686 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f948 	bl	80069b4 <SPI_EndRxTxTransaction>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006738:	2300      	movs	r3, #0
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	77fb      	strb	r3, [r7, #31]
 800675a:	e000      	b.n	800675e <HAL_SPI_Transmit+0x2c2>
  }

error:
 800675c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800676e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3720      	adds	r7, #32
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	4613      	mov	r3, r2
 8006786:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006788:	f7fc fa86 	bl	8002c98 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	4413      	add	r3, r2
 8006796:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006798:	f7fc fa7e 	bl	8002c98 <HAL_GetTick>
 800679c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800679e:	4b39      	ldr	r3, [pc, #228]	; (8006884 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	015b      	lsls	r3, r3, #5
 80067a4:	0d1b      	lsrs	r3, r3, #20
 80067a6:	69fa      	ldr	r2, [r7, #28]
 80067a8:	fb02 f303 	mul.w	r3, r2, r3
 80067ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067ae:	e054      	b.n	800685a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d050      	beq.n	800685a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067b8:	f7fc fa6e 	bl	8002c98 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d902      	bls.n	80067ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d13d      	bne.n	800684a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067e6:	d111      	bne.n	800680c <SPI_WaitFlagStateUntilTimeout+0x94>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f0:	d004      	beq.n	80067fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fa:	d107      	bne.n	800680c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800680a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006814:	d10f      	bne.n	8006836 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e017      	b.n	800687a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	3b01      	subs	r3, #1
 8006858:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4013      	ands	r3, r2
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	bf0c      	ite	eq
 800686a:	2301      	moveq	r3, #1
 800686c:	2300      	movne	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	461a      	mov	r2, r3
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	429a      	cmp	r2, r3
 8006876:	d19b      	bne.n	80067b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000004 	.word	0x20000004

08006888 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	; 0x28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800689a:	f7fc f9fd 	bl	8002c98 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	4413      	add	r3, r2
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80068aa:	f7fc f9f5 	bl	8002c98 <HAL_GetTick>
 80068ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	330c      	adds	r3, #12
 80068b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80068b8:	4b3d      	ldr	r3, [pc, #244]	; (80069b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	00da      	lsls	r2, r3, #3
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	0d1b      	lsrs	r3, r3, #20
 80068c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ca:	fb02 f303 	mul.w	r3, r2, r3
 80068ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80068d0:	e060      	b.n	8006994 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068d8:	d107      	bne.n	80068ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d104      	bne.n	80068ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80068e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f0:	d050      	beq.n	8006994 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068f2:	f7fc f9d1 	bl	8002c98 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fe:	429a      	cmp	r2, r3
 8006900:	d902      	bls.n	8006908 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	2b00      	cmp	r3, #0
 8006906:	d13d      	bne.n	8006984 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006916:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006920:	d111      	bne.n	8006946 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692a:	d004      	beq.n	8006936 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006934:	d107      	bne.n	8006946 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006944:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800694e:	d10f      	bne.n	8006970 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800696e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e010      	b.n	80069a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	3b01      	subs	r3, #1
 8006992:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689a      	ldr	r2, [r3, #8]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	4013      	ands	r3, r2
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d196      	bne.n	80068d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3728      	adds	r7, #40	; 0x28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20000004 	.word	0x20000004

080069b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7ff ff5b 	bl	8006888 <SPI_WaitFifoStateUntilTimeout>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069dc:	f043 0220 	orr.w	r2, r3, #32
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e027      	b.n	8006a38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2200      	movs	r2, #0
 80069f0:	2180      	movs	r1, #128	; 0x80
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f7ff fec0 	bl	8006778 <SPI_WaitFlagStateUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d007      	beq.n	8006a0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a02:	f043 0220 	orr.w	r2, r3, #32
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e014      	b.n	8006a38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff ff34 	bl	8006888 <SPI_WaitFifoStateUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2a:	f043 0220 	orr.w	r2, r3, #32
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e000      	b.n	8006a38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e049      	b.n	8006ae6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fb ff3e 	bl	80028e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4610      	mov	r0, r2
 8006a80:	f000 fa94 	bl	8006fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d001      	beq.n	8006b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e036      	b.n	8006b76 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0201 	orr.w	r2, r2, #1
 8006b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a17      	ldr	r2, [pc, #92]	; (8006b84 <HAL_TIM_Base_Start_IT+0x94>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d004      	beq.n	8006b34 <HAL_TIM_Base_Start_IT+0x44>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b32:	d115      	bne.n	8006b60 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <HAL_TIM_Base_Start_IT+0x98>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b06      	cmp	r3, #6
 8006b44:	d015      	beq.n	8006b72 <HAL_TIM_Base_Start_IT+0x82>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b4c:	d011      	beq.n	8006b72 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5e:	e008      	b.n	8006b72 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0201 	orr.w	r2, r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	e000      	b.n	8006b74 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40012c00 	.word	0x40012c00
 8006b88:	00010007 	.word	0x00010007

08006b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d122      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d11b      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0202 	mvn.w	r2, #2
 8006bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f9ce 	bl	8006f70 <HAL_TIM_IC_CaptureCallback>
 8006bd4:	e005      	b.n	8006be2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f9c0 	bl	8006f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f9d1 	bl	8006f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d122      	bne.n	8006c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d11b      	bne.n	8006c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f06f 0204 	mvn.w	r2, #4
 8006c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f9a4 	bl	8006f70 <HAL_TIM_IC_CaptureCallback>
 8006c28:	e005      	b.n	8006c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f996 	bl	8006f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f9a7 	bl	8006f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d122      	bne.n	8006c90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d11b      	bne.n	8006c90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f06f 0208 	mvn.w	r2, #8
 8006c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2204      	movs	r2, #4
 8006c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f97a 	bl	8006f70 <HAL_TIM_IC_CaptureCallback>
 8006c7c:	e005      	b.n	8006c8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f96c 	bl	8006f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f97d 	bl	8006f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	f003 0310 	and.w	r3, r3, #16
 8006c9a:	2b10      	cmp	r3, #16
 8006c9c:	d122      	bne.n	8006ce4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f003 0310 	and.w	r3, r3, #16
 8006ca8:	2b10      	cmp	r3, #16
 8006caa:	d11b      	bne.n	8006ce4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f06f 0210 	mvn.w	r2, #16
 8006cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2208      	movs	r2, #8
 8006cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f950 	bl	8006f70 <HAL_TIM_IC_CaptureCallback>
 8006cd0:	e005      	b.n	8006cde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f942 	bl	8006f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f953 	bl	8006f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d10e      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d107      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f06f 0201 	mvn.w	r2, #1
 8006d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fa fc52 	bl	80015b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1a:	2b80      	cmp	r3, #128	; 0x80
 8006d1c:	d10e      	bne.n	8006d3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d28:	2b80      	cmp	r3, #128	; 0x80
 8006d2a:	d107      	bne.n	8006d3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 faa2 	bl	8007280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d4a:	d10e      	bne.n	8006d6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	2b80      	cmp	r3, #128	; 0x80
 8006d58:	d107      	bne.n	8006d6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fa95 	bl	8007294 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d74:	2b40      	cmp	r3, #64	; 0x40
 8006d76:	d10e      	bne.n	8006d96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d82:	2b40      	cmp	r3, #64	; 0x40
 8006d84:	d107      	bne.n	8006d96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f901 	bl	8006f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f003 0320 	and.w	r3, r3, #32
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d10e      	bne.n	8006dc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f003 0320 	and.w	r3, r3, #32
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	d107      	bne.n	8006dc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f06f 0220 	mvn.w	r2, #32
 8006dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fa55 	bl	800726c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d101      	bne.n	8006de6 <HAL_TIM_ConfigClockSource+0x1c>
 8006de2:	2302      	movs	r3, #2
 8006de4:	e0b6      	b.n	8006f54 <HAL_TIM_ConfigClockSource+0x18a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e04:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e10:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e22:	d03e      	beq.n	8006ea2 <HAL_TIM_ConfigClockSource+0xd8>
 8006e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e28:	f200 8087 	bhi.w	8006f3a <HAL_TIM_ConfigClockSource+0x170>
 8006e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e30:	f000 8086 	beq.w	8006f40 <HAL_TIM_ConfigClockSource+0x176>
 8006e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e38:	d87f      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x170>
 8006e3a:	2b70      	cmp	r3, #112	; 0x70
 8006e3c:	d01a      	beq.n	8006e74 <HAL_TIM_ConfigClockSource+0xaa>
 8006e3e:	2b70      	cmp	r3, #112	; 0x70
 8006e40:	d87b      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x170>
 8006e42:	2b60      	cmp	r3, #96	; 0x60
 8006e44:	d050      	beq.n	8006ee8 <HAL_TIM_ConfigClockSource+0x11e>
 8006e46:	2b60      	cmp	r3, #96	; 0x60
 8006e48:	d877      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x170>
 8006e4a:	2b50      	cmp	r3, #80	; 0x50
 8006e4c:	d03c      	beq.n	8006ec8 <HAL_TIM_ConfigClockSource+0xfe>
 8006e4e:	2b50      	cmp	r3, #80	; 0x50
 8006e50:	d873      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x170>
 8006e52:	2b40      	cmp	r3, #64	; 0x40
 8006e54:	d058      	beq.n	8006f08 <HAL_TIM_ConfigClockSource+0x13e>
 8006e56:	2b40      	cmp	r3, #64	; 0x40
 8006e58:	d86f      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x170>
 8006e5a:	2b30      	cmp	r3, #48	; 0x30
 8006e5c:	d064      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0x15e>
 8006e5e:	2b30      	cmp	r3, #48	; 0x30
 8006e60:	d86b      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x170>
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d060      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0x15e>
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	d867      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x170>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d05c      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0x15e>
 8006e6e:	2b10      	cmp	r3, #16
 8006e70:	d05a      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0x15e>
 8006e72:	e062      	b.n	8006f3a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	6899      	ldr	r1, [r3, #8]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f000 f972 	bl	800716c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	609a      	str	r2, [r3, #8]
      break;
 8006ea0:	e04f      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6899      	ldr	r1, [r3, #8]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f000 f95b 	bl	800716c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ec4:	609a      	str	r2, [r3, #8]
      break;
 8006ec6:	e03c      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	6859      	ldr	r1, [r3, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f000 f8cd 	bl	8007074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2150      	movs	r1, #80	; 0x50
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 f926 	bl	8007132 <TIM_ITRx_SetConfig>
      break;
 8006ee6:	e02c      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	6859      	ldr	r1, [r3, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f000 f8ec 	bl	80070d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2160      	movs	r1, #96	; 0x60
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 f916 	bl	8007132 <TIM_ITRx_SetConfig>
      break;
 8006f06:	e01c      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6818      	ldr	r0, [r3, #0]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	6859      	ldr	r1, [r3, #4]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	461a      	mov	r2, r3
 8006f16:	f000 f8ad 	bl	8007074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2140      	movs	r1, #64	; 0x40
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 f906 	bl	8007132 <TIM_ITRx_SetConfig>
      break;
 8006f26:	e00c      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f000 f8fd 	bl	8007132 <TIM_ITRx_SetConfig>
      break;
 8006f38:	e003      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f3e:	e000      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006f40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a2a      	ldr	r2, [pc, #168]	; (8007068 <TIM_Base_SetConfig+0xbc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_Base_SetConfig+0x20>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fca:	d108      	bne.n	8006fde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a21      	ldr	r2, [pc, #132]	; (8007068 <TIM_Base_SetConfig+0xbc>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00b      	beq.n	8006ffe <TIM_Base_SetConfig+0x52>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fec:	d007      	beq.n	8006ffe <TIM_Base_SetConfig+0x52>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a1e      	ldr	r2, [pc, #120]	; (800706c <TIM_Base_SetConfig+0xc0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d003      	beq.n	8006ffe <TIM_Base_SetConfig+0x52>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a1d      	ldr	r2, [pc, #116]	; (8007070 <TIM_Base_SetConfig+0xc4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d108      	bne.n	8007010 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a0c      	ldr	r2, [pc, #48]	; (8007068 <TIM_Base_SetConfig+0xbc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d007      	beq.n	800704c <TIM_Base_SetConfig+0xa0>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a0b      	ldr	r2, [pc, #44]	; (800706c <TIM_Base_SetConfig+0xc0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <TIM_Base_SetConfig+0xa0>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a0a      	ldr	r2, [pc, #40]	; (8007070 <TIM_Base_SetConfig+0xc4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d103      	bne.n	8007054 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	691a      	ldr	r2, [r3, #16]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	615a      	str	r2, [r3, #20]
}
 800705a:	bf00      	nop
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40014400 	.word	0x40014400
 8007070:	40014800 	.word	0x40014800

08007074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f023 0201 	bic.w	r2, r3, #1
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800709e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f023 030a 	bic.w	r3, r3, #10
 80070b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	621a      	str	r2, [r3, #32]
}
 80070c6:	bf00      	nop
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b087      	sub	sp, #28
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	f023 0210 	bic.w	r2, r3, #16
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	031b      	lsls	r3, r3, #12
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800710e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	621a      	str	r2, [r3, #32]
}
 8007126:	bf00      	nop
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	f043 0307 	orr.w	r3, r3, #7
 8007158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	609a      	str	r2, [r3, #8]
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	021a      	lsls	r2, r3, #8
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	431a      	orrs	r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4313      	orrs	r3, r2
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	609a      	str	r2, [r3, #8]
}
 80071a0:	bf00      	nop
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e04a      	b.n	800725a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a1f      	ldr	r2, [pc, #124]	; (8007268 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d108      	bne.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a12      	ldr	r2, [pc, #72]	; (8007268 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d004      	beq.n	800722e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800722c:	d10c      	bne.n	8007248 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	4313      	orrs	r3, r2
 800723e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	40012c00 	.word	0x40012c00

0800726c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <LL_RCC_GetUSARTClockSource>:
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80072b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4013      	ands	r3, r2
}
 80072bc:	4618      	mov	r0, r3
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e042      	b.n	8007360 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d106      	bne.n	80072f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7fb fb91 	bl	8002a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2224      	movs	r2, #36	; 0x24
 80072f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0201 	bic.w	r2, r2, #1
 8007308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fc90 	bl	8007c30 <UART_SetConfig>
 8007310:	4603      	mov	r3, r0
 8007312:	2b01      	cmp	r3, #1
 8007314:	d101      	bne.n	800731a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e022      	b.n	8007360 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fdc0 	bl	8007ea8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689a      	ldr	r2, [r3, #8]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fe47 	bl	8007fec <UART_CheckIdleState>
 800735e:	4603      	mov	r3, r0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af02      	add	r7, sp, #8
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	603b      	str	r3, [r7, #0]
 8007374:	4613      	mov	r3, r2
 8007376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800737e:	2b20      	cmp	r3, #32
 8007380:	d17b      	bne.n	800747a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <HAL_UART_Transmit+0x26>
 8007388:	88fb      	ldrh	r3, [r7, #6]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e074      	b.n	800747c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2221      	movs	r2, #33	; 0x21
 800739e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073a2:	f7fb fc79 	bl	8002c98 <HAL_GetTick>
 80073a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	88fa      	ldrh	r2, [r7, #6]
 80073ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	88fa      	ldrh	r2, [r7, #6]
 80073b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c0:	d108      	bne.n	80073d4 <HAL_UART_Transmit+0x6c>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d104      	bne.n	80073d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	61bb      	str	r3, [r7, #24]
 80073d2:	e003      	b.n	80073dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073dc:	e030      	b.n	8007440 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2200      	movs	r2, #0
 80073e6:	2180      	movs	r1, #128	; 0x80
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fea9 	bl	8008140 <UART_WaitOnFlagUntilTimeout>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d005      	beq.n	8007400 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e03d      	b.n	800747c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10b      	bne.n	800741e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007414:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	3302      	adds	r3, #2
 800741a:	61bb      	str	r3, [r7, #24]
 800741c:	e007      	b.n	800742e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	781a      	ldrb	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	3301      	adds	r3, #1
 800742c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007446:	b29b      	uxth	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1c8      	bne.n	80073de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2200      	movs	r2, #0
 8007454:	2140      	movs	r1, #64	; 0x40
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 fe72 	bl	8008140 <UART_WaitOnFlagUntilTimeout>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d005      	beq.n	800746e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2220      	movs	r2, #32
 8007466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e006      	b.n	800747c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2220      	movs	r2, #32
 8007472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	e000      	b.n	800747c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800747a:	2302      	movs	r3, #2
  }
}
 800747c:	4618      	mov	r0, r3
 800747e:	3720      	adds	r7, #32
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007484:	b480      	push	{r7}
 8007486:	b091      	sub	sp, #68	; 0x44
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007498:	2b20      	cmp	r3, #32
 800749a:	d178      	bne.n	800758e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_UART_Transmit_IT+0x24>
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e071      	b.n	8007590 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	88fa      	ldrh	r2, [r7, #6]
 80074b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	88fa      	ldrh	r2, [r7, #6]
 80074be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2221      	movs	r2, #33	; 0x21
 80074d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e0:	d12a      	bne.n	8007538 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ea:	d107      	bne.n	80074fc <HAL_UART_Transmit_IT+0x78>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d103      	bne.n	80074fc <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4a29      	ldr	r2, [pc, #164]	; (800759c <HAL_UART_Transmit_IT+0x118>)
 80074f8:	679a      	str	r2, [r3, #120]	; 0x78
 80074fa:	e002      	b.n	8007502 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4a28      	ldr	r2, [pc, #160]	; (80075a0 <HAL_UART_Transmit_IT+0x11c>)
 8007500:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3308      	adds	r3, #8
 8007508:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007518:	63bb      	str	r3, [r7, #56]	; 0x38
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3308      	adds	r3, #8
 8007520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007522:	637a      	str	r2, [r7, #52]	; 0x34
 8007524:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e5      	bne.n	8007502 <HAL_UART_Transmit_IT+0x7e>
 8007536:	e028      	b.n	800758a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007540:	d107      	bne.n	8007552 <HAL_UART_Transmit_IT+0xce>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d103      	bne.n	8007552 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a15      	ldr	r2, [pc, #84]	; (80075a4 <HAL_UART_Transmit_IT+0x120>)
 800754e:	679a      	str	r2, [r3, #120]	; 0x78
 8007550:	e002      	b.n	8007558 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4a14      	ldr	r2, [pc, #80]	; (80075a8 <HAL_UART_Transmit_IT+0x124>)
 8007556:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	613b      	str	r3, [r7, #16]
   return(result);
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800756c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007576:	623b      	str	r3, [r7, #32]
 8007578:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	69f9      	ldr	r1, [r7, #28]
 800757c:	6a3a      	ldr	r2, [r7, #32]
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	61bb      	str	r3, [r7, #24]
   return(result);
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e6      	bne.n	8007558 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	e000      	b.n	8007590 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800758e:	2302      	movs	r3, #2
  }
}
 8007590:	4618      	mov	r0, r3
 8007592:	3744      	adds	r7, #68	; 0x44
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	080087a7 	.word	0x080087a7
 80075a0:	080086c7 	.word	0x080086c7
 80075a4:	08008605 	.word	0x08008605
 80075a8:	0800854d 	.word	0x0800854d

080075ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b0ba      	sub	sp, #232	; 0xe8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80075da:	4013      	ands	r3, r2
 80075dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d11b      	bne.n	8007620 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d015      	beq.n	8007620 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d105      	bne.n	800760c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d009      	beq.n	8007620 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 82e3 	beq.w	8007bdc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
      }
      return;
 800761e:	e2dd      	b.n	8007bdc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 8123 	beq.w	8007870 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800762a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800762e:	4b8d      	ldr	r3, [pc, #564]	; (8007864 <HAL_UART_IRQHandler+0x2b8>)
 8007630:	4013      	ands	r3, r2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007636:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800763a:	4b8b      	ldr	r3, [pc, #556]	; (8007868 <HAL_UART_IRQHandler+0x2bc>)
 800763c:	4013      	ands	r3, r2
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8116 	beq.w	8007870 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d011      	beq.n	8007674 <HAL_UART_IRQHandler+0xc8>
 8007650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2201      	movs	r2, #1
 8007662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766a:	f043 0201 	orr.w	r2, r3, #1
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d011      	beq.n	80076a4 <HAL_UART_IRQHandler+0xf8>
 8007680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00b      	beq.n	80076a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2202      	movs	r2, #2
 8007692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769a:	f043 0204 	orr.w	r2, r3, #4
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d011      	beq.n	80076d4 <HAL_UART_IRQHandler+0x128>
 80076b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2204      	movs	r2, #4
 80076c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ca:	f043 0202 	orr.w	r2, r3, #2
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d8:	f003 0308 	and.w	r3, r3, #8
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d017      	beq.n	8007710 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d105      	bne.n	80076f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80076ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076f0:	4b5c      	ldr	r3, [pc, #368]	; (8007864 <HAL_UART_IRQHandler+0x2b8>)
 80076f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2208      	movs	r2, #8
 80076fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007706:	f043 0208 	orr.w	r2, r3, #8
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007718:	2b00      	cmp	r3, #0
 800771a:	d012      	beq.n	8007742 <HAL_UART_IRQHandler+0x196>
 800771c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00c      	beq.n	8007742 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007730:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007738:	f043 0220 	orr.w	r2, r3, #32
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 8249 	beq.w	8007be0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800774e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d013      	beq.n	8007782 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800775a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b00      	cmp	r3, #0
 8007764:	d105      	bne.n	8007772 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800776a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d007      	beq.n	8007782 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007788:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d005      	beq.n	80077a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800779a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800779e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d054      	beq.n	8007850 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fe54 	bl	8008454 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	d146      	bne.n	8007848 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3308      	adds	r3, #8
 80077e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1d9      	bne.n	80077ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800780c:	2b00      	cmp	r3, #0
 800780e:	d017      	beq.n	8007840 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007816:	4a15      	ldr	r2, [pc, #84]	; (800786c <HAL_UART_IRQHandler+0x2c0>)
 8007818:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007820:	4618      	mov	r0, r3
 8007822:	f7fc fe50 	bl	80044c6 <HAL_DMA_Abort_IT>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d019      	beq.n	8007860 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800783a:	4610      	mov	r0, r2
 800783c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783e:	e00f      	b.n	8007860 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9eb 	bl	8007c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007846:	e00b      	b.n	8007860 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f9e7 	bl	8007c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784e:	e007      	b.n	8007860 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f9e3 	bl	8007c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800785e:	e1bf      	b.n	8007be0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007860:	bf00      	nop
    return;
 8007862:	e1bd      	b.n	8007be0 <HAL_UART_IRQHandler+0x634>
 8007864:	10000001 	.word	0x10000001
 8007868:	04000120 	.word	0x04000120
 800786c:	08008521 	.word	0x08008521

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007874:	2b01      	cmp	r3, #1
 8007876:	f040 8153 	bne.w	8007b20 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800787a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787e:	f003 0310 	and.w	r3, r3, #16
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 814c 	beq.w	8007b20 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8145 	beq.w	8007b20 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2210      	movs	r2, #16
 800789c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a8:	2b40      	cmp	r3, #64	; 0x40
 80078aa:	f040 80bb 	bne.w	8007a24 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 818f 	beq.w	8007be4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078d0:	429a      	cmp	r2, r3
 80078d2:	f080 8187 	bcs.w	8007be4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0320 	and.w	r3, r3, #32
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f040 8087 	bne.w	8007a02 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800790c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800791e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007922:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800792a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800792e:	e841 2300 	strex	r3, r2, [r1]
 8007932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1da      	bne.n	80078f4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3308      	adds	r3, #8
 8007944:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800794e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3308      	adds	r3, #8
 800795e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007962:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007966:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800796a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e1      	bne.n	800793e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3308      	adds	r3, #8
 8007980:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007984:	e853 3f00 	ldrex	r3, [r3]
 8007988:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800798a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800798c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3308      	adds	r3, #8
 800799a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800799e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e3      	bne.n	800797a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079d0:	f023 0310 	bic.w	r3, r3, #16
 80079d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80079e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e4      	bne.n	80079c0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fc fd03 	bl	8004408 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2202      	movs	r2, #2
 8007a06:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7fa f97b 	bl	8001d18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a22:	e0df      	b.n	8007be4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 80d1 	beq.w	8007be8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007a46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 80cc 	beq.w	8007be8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a72:	647b      	str	r3, [r7, #68]	; 0x44
 8007a74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e4      	bne.n	8007a50 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	623b      	str	r3, [r7, #32]
   return(result);
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007aae:	633a      	str	r2, [r7, #48]	; 0x30
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e1      	bne.n	8007a86 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0310 	bic.w	r3, r3, #16
 8007aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	69b9      	ldr	r1, [r7, #24]
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	617b      	str	r3, [r7, #20]
   return(result);
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e4      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fa f8fd 	bl	8001d18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b1e:	e063      	b.n	8007be8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00e      	beq.n	8007b4a <HAL_UART_IRQHandler+0x59e>
 8007b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d008      	beq.n	8007b4a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 fbd0 	bl	80092e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b48:	e051      	b.n	8007bee <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d014      	beq.n	8007b80 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d105      	bne.n	8007b6e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d008      	beq.n	8007b80 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d03a      	beq.n	8007bec <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	4798      	blx	r3
    }
    return;
 8007b7e:	e035      	b.n	8007bec <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d009      	beq.n	8007ba0 <HAL_UART_IRQHandler+0x5f4>
 8007b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fe79 	bl	8008890 <UART_EndTransmit_IT>
    return;
 8007b9e:	e026      	b.n	8007bee <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d009      	beq.n	8007bc0 <HAL_UART_IRQHandler+0x614>
 8007bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 fba9 	bl	8009310 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bbe:	e016      	b.n	8007bee <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d010      	beq.n	8007bee <HAL_UART_IRQHandler+0x642>
 8007bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da0c      	bge.n	8007bee <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 fb91 	bl	80092fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bda:	e008      	b.n	8007bee <HAL_UART_IRQHandler+0x642>
      return;
 8007bdc:	bf00      	nop
 8007bde:	e006      	b.n	8007bee <HAL_UART_IRQHandler+0x642>
    return;
 8007be0:	bf00      	nop
 8007be2:	e004      	b.n	8007bee <HAL_UART_IRQHandler+0x642>
      return;
 8007be4:	bf00      	nop
 8007be6:	e002      	b.n	8007bee <HAL_UART_IRQHandler+0x642>
      return;
 8007be8:	bf00      	nop
 8007bea:	e000      	b.n	8007bee <HAL_UART_IRQHandler+0x642>
    return;
 8007bec:	bf00      	nop
  }
}
 8007bee:	37e8      	adds	r7, #232	; 0xe8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	431a      	orrs	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4b8f      	ldr	r3, [pc, #572]	; (8007e98 <UART_SetConfig+0x268>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6812      	ldr	r2, [r2, #0]
 8007c62:	6979      	ldr	r1, [r7, #20]
 8007c64:	430b      	orrs	r3, r1
 8007c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007c98:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6812      	ldr	r2, [r2, #0]
 8007ca0:	6979      	ldr	r1, [r7, #20]
 8007ca2:	430b      	orrs	r3, r1
 8007ca4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	f023 010f 	bic.w	r1, r3, #15
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a76      	ldr	r2, [pc, #472]	; (8007e9c <UART_SetConfig+0x26c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d11f      	bne.n	8007d06 <UART_SetConfig+0xd6>
 8007cc6:	2003      	movs	r0, #3
 8007cc8:	f7ff faee 	bl	80072a8 <LL_RCC_GetUSARTClockSource>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d816      	bhi.n	8007d00 <UART_SetConfig+0xd0>
 8007cd2:	a201      	add	r2, pc, #4	; (adr r2, 8007cd8 <UART_SetConfig+0xa8>)
 8007cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd8:	08007ce9 	.word	0x08007ce9
 8007cdc:	08007cf5 	.word	0x08007cf5
 8007ce0:	08007cef 	.word	0x08007cef
 8007ce4:	08007cfb 	.word	0x08007cfb
 8007ce8:	2301      	movs	r3, #1
 8007cea:	77fb      	strb	r3, [r7, #31]
 8007cec:	e00d      	b.n	8007d0a <UART_SetConfig+0xda>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	77fb      	strb	r3, [r7, #31]
 8007cf2:	e00a      	b.n	8007d0a <UART_SetConfig+0xda>
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	77fb      	strb	r3, [r7, #31]
 8007cf8:	e007      	b.n	8007d0a <UART_SetConfig+0xda>
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	77fb      	strb	r3, [r7, #31]
 8007cfe:	e004      	b.n	8007d0a <UART_SetConfig+0xda>
 8007d00:	2310      	movs	r3, #16
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e001      	b.n	8007d0a <UART_SetConfig+0xda>
 8007d06:	2310      	movs	r3, #16
 8007d08:	77fb      	strb	r3, [r7, #31]
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d12:	d15e      	bne.n	8007dd2 <UART_SetConfig+0x1a2>
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007d14:	7ffb      	ldrb	r3, [r7, #31]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	2b07      	cmp	r3, #7
 8007d1a:	d822      	bhi.n	8007d62 <UART_SetConfig+0x132>
 8007d1c:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <UART_SetConfig+0xf4>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007d45 	.word	0x08007d45
 8007d28:	08007d4d 	.word	0x08007d4d
 8007d2c:	08007d63 	.word	0x08007d63
 8007d30:	08007d53 	.word	0x08007d53
 8007d34:	08007d63 	.word	0x08007d63
 8007d38:	08007d63 	.word	0x08007d63
 8007d3c:	08007d63 	.word	0x08007d63
 8007d40:	08007d5b 	.word	0x08007d5b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d44:	f7fe f87e 	bl	8005e44 <HAL_RCC_GetPCLK2Freq>
 8007d48:	61b8      	str	r0, [r7, #24]
        break;
 8007d4a:	e00f      	b.n	8007d6c <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d4c:	4b54      	ldr	r3, [pc, #336]	; (8007ea0 <UART_SetConfig+0x270>)
 8007d4e:	61bb      	str	r3, [r7, #24]
        break;
 8007d50:	e00c      	b.n	8007d6c <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d52:	f7fd fff7 	bl	8005d44 <HAL_RCC_GetSysClockFreq>
 8007d56:	61b8      	str	r0, [r7, #24]
        break;
 8007d58:	e008      	b.n	8007d6c <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d5e:	61bb      	str	r3, [r7, #24]
        break;
 8007d60:	e004      	b.n	8007d6c <UART_SetConfig+0x13c>
      default:
        pclk = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	77bb      	strb	r3, [r7, #30]
        break;
 8007d6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d07e      	beq.n	8007e70 <UART_SetConfig+0x240>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	4a4b      	ldr	r2, [pc, #300]	; (8007ea4 <UART_SetConfig+0x274>)
 8007d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d84:	005a      	lsls	r2, r3, #1
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	085b      	lsrs	r3, r3, #1
 8007d8c:	441a      	add	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b0f      	cmp	r3, #15
 8007d9c:	d916      	bls.n	8007dcc <UART_SetConfig+0x19c>
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007da4:	d212      	bcs.n	8007dcc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	f023 030f 	bic.w	r3, r3, #15
 8007dae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	085b      	lsrs	r3, r3, #1
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	89fb      	ldrh	r3, [r7, #14]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	89fa      	ldrh	r2, [r7, #14]
 8007dc8:	60da      	str	r2, [r3, #12]
 8007dca:	e051      	b.n	8007e70 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	77bb      	strb	r3, [r7, #30]
 8007dd0:	e04e      	b.n	8007e70 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dd2:	7ffb      	ldrb	r3, [r7, #31]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	2b07      	cmp	r3, #7
 8007dd8:	d821      	bhi.n	8007e1e <UART_SetConfig+0x1ee>
 8007dda:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <UART_SetConfig+0x1b0>)
 8007ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de0:	08007e01 	.word	0x08007e01
 8007de4:	08007e09 	.word	0x08007e09
 8007de8:	08007e1f 	.word	0x08007e1f
 8007dec:	08007e0f 	.word	0x08007e0f
 8007df0:	08007e1f 	.word	0x08007e1f
 8007df4:	08007e1f 	.word	0x08007e1f
 8007df8:	08007e1f 	.word	0x08007e1f
 8007dfc:	08007e17 	.word	0x08007e17
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e00:	f7fe f820 	bl	8005e44 <HAL_RCC_GetPCLK2Freq>
 8007e04:	61b8      	str	r0, [r7, #24]
        break;
 8007e06:	e00f      	b.n	8007e28 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e08:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <UART_SetConfig+0x270>)
 8007e0a:	61bb      	str	r3, [r7, #24]
        break;
 8007e0c:	e00c      	b.n	8007e28 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e0e:	f7fd ff99 	bl	8005d44 <HAL_RCC_GetSysClockFreq>
 8007e12:	61b8      	str	r0, [r7, #24]
        break;
 8007e14:	e008      	b.n	8007e28 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e1a:	61bb      	str	r3, [r7, #24]
        break;
 8007e1c:	e004      	b.n	8007e28 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	77bb      	strb	r3, [r7, #30]
        break;
 8007e26:	bf00      	nop
    }

    if (pclk != 0U)
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d020      	beq.n	8007e70 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	4a1c      	ldr	r2, [pc, #112]	; (8007ea4 <UART_SetConfig+0x274>)
 8007e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	085b      	lsrs	r3, r3, #1
 8007e46:	441a      	add	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	2b0f      	cmp	r3, #15
 8007e56:	d909      	bls.n	8007e6c <UART_SetConfig+0x23c>
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e5e:	d205      	bcs.n	8007e6c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60da      	str	r2, [r3, #12]
 8007e6a:	e001      	b.n	8007e70 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007e8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3720      	adds	r7, #32
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	cfff69f3 	.word	0xcfff69f3
 8007e9c:	40013800 	.word	0x40013800
 8007ea0:	00f42400 	.word	0x00f42400
 8007ea4:	0800cea8 	.word	0x0800cea8

08007ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00a      	beq.n	8007f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3c:	f003 0310 	and.w	r3, r3, #16
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00a      	beq.n	8007f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5e:	f003 0320 	and.w	r3, r3, #32
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00a      	beq.n	8007f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01a      	beq.n	8007fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fa6:	d10a      	bne.n	8007fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	605a      	str	r2, [r3, #4]
  }
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b098      	sub	sp, #96	; 0x60
 8007ff0:	af02      	add	r7, sp, #8
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ffc:	f7fa fe4c 	bl	8002c98 <HAL_GetTick>
 8008000:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	2b08      	cmp	r3, #8
 800800e:	d12f      	bne.n	8008070 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008018:	2200      	movs	r2, #0
 800801a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f88e 	bl	8008140 <UART_WaitOnFlagUntilTimeout>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d022      	beq.n	8008070 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800803e:	653b      	str	r3, [r7, #80]	; 0x50
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008048:	647b      	str	r3, [r7, #68]	; 0x44
 800804a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800804e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e6      	bne.n	800802a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e063      	b.n	8008138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0304 	and.w	r3, r3, #4
 800807a:	2b04      	cmp	r3, #4
 800807c:	d149      	bne.n	8008112 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800807e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008086:	2200      	movs	r2, #0
 8008088:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f857 	bl	8008140 <UART_WaitOnFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d03c      	beq.n	8008112 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	623b      	str	r3, [r7, #32]
   return(result);
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080b6:	633b      	str	r3, [r7, #48]	; 0x30
 80080b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e6      	bne.n	8008098 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3308      	adds	r3, #8
 80080d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f023 0301 	bic.w	r3, r3, #1
 80080e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3308      	adds	r3, #8
 80080e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080ea:	61fa      	str	r2, [r7, #28]
 80080ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	69b9      	ldr	r1, [r7, #24]
 80080f0:	69fa      	ldr	r2, [r7, #28]
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	617b      	str	r3, [r7, #20]
   return(result);
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e5      	bne.n	80080ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e012      	b.n	8008138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2220      	movs	r2, #32
 8008116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3758      	adds	r7, #88	; 0x58
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	4613      	mov	r3, r2
 800814e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008150:	e049      	b.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008158:	d045      	beq.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800815a:	f7fa fd9d 	bl	8002c98 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	429a      	cmp	r2, r3
 8008168:	d302      	bcc.n	8008170 <UART_WaitOnFlagUntilTimeout+0x30>
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e048      	b.n	8008206 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b00      	cmp	r3, #0
 8008180:	d031      	beq.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	f003 0308 	and.w	r3, r3, #8
 800818c:	2b08      	cmp	r3, #8
 800818e:	d110      	bne.n	80081b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2208      	movs	r2, #8
 8008196:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f95b 	bl	8008454 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2208      	movs	r2, #8
 80081a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e029      	b.n	8008206 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081c0:	d111      	bne.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f941 	bl	8008454 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e00f      	b.n	8008206 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69da      	ldr	r2, [r3, #28]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4013      	ands	r3, r2
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	bf0c      	ite	eq
 80081f6:	2301      	moveq	r3, #1
 80081f8:	2300      	movne	r3, #0
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	461a      	mov	r2, r3
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	429a      	cmp	r2, r3
 8008202:	d0a6      	beq.n	8008152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008210:	b480      	push	{r7}
 8008212:	b0a3      	sub	sp, #140	; 0x8c
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	4613      	mov	r3, r2
 800821c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	88fa      	ldrh	r2, [r7, #6]
 8008228:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	88fa      	ldrh	r2, [r7, #6]
 8008230:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008242:	d10e      	bne.n	8008262 <UART_Start_Receive_IT+0x52>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d105      	bne.n	8008258 <UART_Start_Receive_IT+0x48>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008252:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008256:	e02d      	b.n	80082b4 <UART_Start_Receive_IT+0xa4>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	22ff      	movs	r2, #255	; 0xff
 800825c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008260:	e028      	b.n	80082b4 <UART_Start_Receive_IT+0xa4>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10d      	bne.n	8008286 <UART_Start_Receive_IT+0x76>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d104      	bne.n	800827c <UART_Start_Receive_IT+0x6c>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	22ff      	movs	r2, #255	; 0xff
 8008276:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800827a:	e01b      	b.n	80082b4 <UART_Start_Receive_IT+0xa4>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	227f      	movs	r2, #127	; 0x7f
 8008280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008284:	e016      	b.n	80082b4 <UART_Start_Receive_IT+0xa4>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800828e:	d10d      	bne.n	80082ac <UART_Start_Receive_IT+0x9c>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d104      	bne.n	80082a2 <UART_Start_Receive_IT+0x92>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	227f      	movs	r2, #127	; 0x7f
 800829c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082a0:	e008      	b.n	80082b4 <UART_Start_Receive_IT+0xa4>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	223f      	movs	r2, #63	; 0x3f
 80082a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082aa:	e003      	b.n	80082b4 <UART_Start_Receive_IT+0xa4>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2222      	movs	r2, #34	; 0x22
 80082c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3308      	adds	r3, #8
 80082ca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ce:	e853 3f00 	ldrex	r3, [r3]
 80082d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80082d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082d6:	f043 0301 	orr.w	r3, r3, #1
 80082da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80082e8:	673a      	str	r2, [r7, #112]	; 0x70
 80082ea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80082ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80082f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e3      	bne.n	80082c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008304:	d14f      	bne.n	80083a6 <UART_Start_Receive_IT+0x196>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800830c:	88fa      	ldrh	r2, [r7, #6]
 800830e:	429a      	cmp	r2, r3
 8008310:	d349      	bcc.n	80083a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800831a:	d107      	bne.n	800832c <UART_Start_Receive_IT+0x11c>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d103      	bne.n	800832c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4a47      	ldr	r2, [pc, #284]	; (8008444 <UART_Start_Receive_IT+0x234>)
 8008328:	675a      	str	r2, [r3, #116]	; 0x74
 800832a:	e002      	b.n	8008332 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4a46      	ldr	r2, [pc, #280]	; (8008448 <UART_Start_Receive_IT+0x238>)
 8008330:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d01a      	beq.n	8008370 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008342:	e853 3f00 	ldrex	r3, [r3]
 8008346:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800834e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800835c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800835e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008362:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800836a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e4      	bne.n	800833a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837a:	e853 3f00 	ldrex	r3, [r3]
 800837e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008386:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3308      	adds	r3, #8
 800838e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008390:	64ba      	str	r2, [r7, #72]	; 0x48
 8008392:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800839e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e5      	bne.n	8008370 <UART_Start_Receive_IT+0x160>
 80083a4:	e046      	b.n	8008434 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ae:	d107      	bne.n	80083c0 <UART_Start_Receive_IT+0x1b0>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d103      	bne.n	80083c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4a24      	ldr	r2, [pc, #144]	; (800844c <UART_Start_Receive_IT+0x23c>)
 80083bc:	675a      	str	r2, [r3, #116]	; 0x74
 80083be:	e002      	b.n	80083c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4a23      	ldr	r2, [pc, #140]	; (8008450 <UART_Start_Receive_IT+0x240>)
 80083c4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d019      	beq.n	8008402 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80083e2:	677b      	str	r3, [r7, #116]	; 0x74
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083ec:	637b      	str	r3, [r7, #52]	; 0x34
 80083ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e6      	bne.n	80083ce <UART_Start_Receive_IT+0x1be>
 8008400:	e018      	b.n	8008434 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	e853 3f00 	ldrex	r3, [r3]
 800840e:	613b      	str	r3, [r7, #16]
   return(result);
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	f043 0320 	orr.w	r3, r3, #32
 8008416:	67bb      	str	r3, [r7, #120]	; 0x78
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008420:	623b      	str	r3, [r7, #32]
 8008422:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	69f9      	ldr	r1, [r7, #28]
 8008426:	6a3a      	ldr	r2, [r7, #32]
 8008428:	e841 2300 	strex	r3, r2, [r1]
 800842c:	61bb      	str	r3, [r7, #24]
   return(result);
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e6      	bne.n	8008402 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	378c      	adds	r7, #140	; 0x8c
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	08008f8d 	.word	0x08008f8d
 8008448:	08008c39 	.word	0x08008c39
 800844c:	08008a8f 	.word	0x08008a8f
 8008450:	080088e7 	.word	0x080088e7

08008454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008454:	b480      	push	{r7}
 8008456:	b095      	sub	sp, #84	; 0x54
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008470:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847a:	643b      	str	r3, [r7, #64]	; 0x40
 800847c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e6      	bne.n	800845c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3308      	adds	r3, #8
 8008494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	61fb      	str	r3, [r7, #28]
   return(result);
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084a4:	f023 0301 	bic.w	r3, r3, #1
 80084a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3308      	adds	r3, #8
 80084b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e3      	bne.n	800848e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d118      	bne.n	8008500 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	60bb      	str	r3, [r7, #8]
   return(result);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f023 0310 	bic.w	r3, r3, #16
 80084e2:	647b      	str	r3, [r7, #68]	; 0x44
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ec:	61bb      	str	r3, [r7, #24]
 80084ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6979      	ldr	r1, [r7, #20]
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	613b      	str	r3, [r7, #16]
   return(result);
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e6      	bne.n	80084ce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2220      	movs	r2, #32
 8008504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008514:	bf00      	nop
 8008516:	3754      	adds	r7, #84	; 0x54
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7ff fb6c 	bl	8007c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008544:	bf00      	nop
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800854c:	b480      	push	{r7}
 800854e:	b08f      	sub	sp, #60	; 0x3c
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800855a:	2b21      	cmp	r3, #33	; 0x21
 800855c:	d14c      	bne.n	80085f8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d132      	bne.n	80085d0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	61fb      	str	r3, [r7, #28]
   return(result);
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800858a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800858e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008590:	e841 2300 	strex	r3, r2, [r1]
 8008594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e6      	bne.n	800856a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085b0:	633b      	str	r3, [r7, #48]	; 0x30
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6979      	ldr	r1, [r7, #20]
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	613b      	str	r3, [r7, #16]
   return(result);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e6      	bne.n	800859c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80085ce:	e013      	b.n	80085f8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d4:	781a      	ldrb	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	3b01      	subs	r3, #1
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80085f8:	bf00      	nop
 80085fa:	373c      	adds	r7, #60	; 0x3c
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008604:	b480      	push	{r7}
 8008606:	b091      	sub	sp, #68	; 0x44
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008612:	2b21      	cmp	r3, #33	; 0x21
 8008614:	d151      	bne.n	80086ba <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800861c:	b29b      	uxth	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d132      	bne.n	8008688 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	623b      	str	r3, [r7, #32]
   return(result);
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008636:	63bb      	str	r3, [r7, #56]	; 0x38
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	461a      	mov	r2, r3
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	633b      	str	r3, [r7, #48]	; 0x30
 8008642:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e6      	bne.n	8008622 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	60fb      	str	r3, [r7, #12]
   return(result);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008672:	61fb      	str	r3, [r7, #28]
 8008674:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	69b9      	ldr	r1, [r7, #24]
 8008678:	69fa      	ldr	r2, [r7, #28]
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	617b      	str	r3, [r7, #20]
   return(result);
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e6      	bne.n	8008654 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008686:	e018      	b.n	80086ba <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800868e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800869c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a2:	1c9a      	adds	r2, r3, #2
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80086ba:	bf00      	nop
 80086bc:	3744      	adds	r7, #68	; 0x44
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b091      	sub	sp, #68	; 0x44
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d4:	2b21      	cmp	r3, #33	; 0x21
 80086d6:	d160      	bne.n	800879a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80086de:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80086e0:	e057      	b.n	8008792 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d133      	bne.n	8008756 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3308      	adds	r3, #8
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	e853 3f00 	ldrex	r3, [r3]
 80086fc:	623b      	str	r3, [r7, #32]
   return(result);
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008704:	63bb      	str	r3, [r7, #56]	; 0x38
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3308      	adds	r3, #8
 800870c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800870e:	633a      	str	r2, [r7, #48]	; 0x30
 8008710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008716:	e841 2300 	strex	r3, r2, [r1]
 800871a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1e5      	bne.n	80086ee <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008736:	637b      	str	r3, [r7, #52]	; 0x34
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	461a      	mov	r2, r3
 800873e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	69b9      	ldr	r1, [r7, #24]
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	617b      	str	r3, [r7, #20]
   return(result);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e6      	bne.n	8008722 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008754:	e021      	b.n	800879a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	69db      	ldr	r3, [r3, #28]
 800875c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008760:	2b00      	cmp	r3, #0
 8008762:	d013      	beq.n	800878c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008768:	781a      	ldrb	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008774:	1c5a      	adds	r2, r3, #1
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008780:	b29b      	uxth	r3, r3
 8008782:	3b01      	subs	r3, #1
 8008784:	b29a      	uxth	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800878c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800878e:	3b01      	subs	r3, #1
 8008790:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008792:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1a4      	bne.n	80086e2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008798:	e7ff      	b.n	800879a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800879a:	bf00      	nop
 800879c:	3744      	adds	r7, #68	; 0x44
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b091      	sub	sp, #68	; 0x44
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b4:	2b21      	cmp	r3, #33	; 0x21
 80087b6:	d165      	bne.n	8008884 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087be:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80087c0:	e05c      	b.n	800887c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d133      	bne.n	8008836 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3308      	adds	r3, #8
 80087d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3308      	adds	r3, #8
 80087ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e5      	bne.n	80087ce <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	e853 3f00 	ldrex	r3, [r3]
 800880e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008816:	633b      	str	r3, [r7, #48]	; 0x30
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	61bb      	str	r3, [r7, #24]
 8008822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	6979      	ldr	r1, [r7, #20]
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	613b      	str	r3, [r7, #16]
   return(result);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e6      	bne.n	8008802 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008834:	e026      	b.n	8008884 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008840:	2b00      	cmp	r3, #0
 8008842:	d018      	beq.n	8008876 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008848:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008858:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885e:	1c9a      	adds	r2, r3, #2
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800886a:	b29b      	uxth	r3, r3
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008876:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008878:	3b01      	subs	r3, #1
 800887a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800887c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800887e:	2b00      	cmp	r3, #0
 8008880:	d19f      	bne.n	80087c2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008882:	e7ff      	b.n	8008884 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008884:	bf00      	nop
 8008886:	3744      	adds	r7, #68	; 0x44
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b088      	sub	sp, #32
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	e853 3f00 	ldrex	r3, [r3]
 80088a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ac:	61fb      	str	r3, [r7, #28]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	61bb      	str	r3, [r7, #24]
 80088b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ba:	6979      	ldr	r1, [r7, #20]
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	e841 2300 	strex	r3, r2, [r1]
 80088c2:	613b      	str	r3, [r7, #16]
   return(result);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1e6      	bne.n	8008898 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff f98b 	bl	8007bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088de:	bf00      	nop
 80088e0:	3720      	adds	r7, #32
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b09c      	sub	sp, #112	; 0x70
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80088f4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088fe:	2b22      	cmp	r3, #34	; 0x22
 8008900:	f040 80b9 	bne.w	8008a76 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800890e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008912:	b2d9      	uxtb	r1, r3
 8008914:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008918:	b2da      	uxtb	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891e:	400a      	ands	r2, r1
 8008920:	b2d2      	uxtb	r2, r2
 8008922:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008934:	b29b      	uxth	r3, r3
 8008936:	3b01      	subs	r3, #1
 8008938:	b29a      	uxth	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008946:	b29b      	uxth	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	f040 809c 	bne.w	8008a86 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008956:	e853 3f00 	ldrex	r3, [r3]
 800895a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800895c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800895e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008962:	66bb      	str	r3, [r7, #104]	; 0x68
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800896c:	65bb      	str	r3, [r7, #88]	; 0x58
 800896e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008970:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008972:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008974:	e841 2300 	strex	r3, r2, [r1]
 8008978:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800897a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e6      	bne.n	800894e <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3308      	adds	r3, #8
 8008986:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008992:	f023 0301 	bic.w	r3, r3, #1
 8008996:	667b      	str	r3, [r7, #100]	; 0x64
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3308      	adds	r3, #8
 800899e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80089a0:	647a      	str	r2, [r7, #68]	; 0x44
 80089a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e5      	bne.n	8008980 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	671a      	str	r2, [r3, #112]	; 0x70
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
        }
      }
#else
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d018      	beq.n	8008a08 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	e853 3f00 	ldrex	r3, [r3]
 80089e2:	623b      	str	r3, [r7, #32]
   return(result);
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089ea:	663b      	str	r3, [r7, #96]	; 0x60
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089f4:	633b      	str	r3, [r7, #48]	; 0x30
 80089f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fc:	e841 2300 	strex	r3, r2, [r1]
 8008a00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e6      	bne.n	80089d6 <UART_RxISR_8BIT+0xf0>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d12e      	bne.n	8008a6e <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	e853 3f00 	ldrex	r3, [r3]
 8008a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 0310 	bic.w	r3, r3, #16
 8008a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	461a      	mov	r2, r3
 8008a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a34:	61fb      	str	r3, [r7, #28]
 8008a36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a38:	69b9      	ldr	r1, [r7, #24]
 8008a3a:	69fa      	ldr	r2, [r7, #28]
 8008a3c:	e841 2300 	strex	r3, r2, [r1]
 8008a40:	617b      	str	r3, [r7, #20]
   return(result);
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1e6      	bne.n	8008a16 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	f003 0310 	and.w	r3, r3, #16
 8008a52:	2b10      	cmp	r3, #16
 8008a54:	d103      	bne.n	8008a5e <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2210      	movs	r2, #16
 8008a5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7f9 f956 	bl	8001d18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a6c:	e00b      	b.n	8008a86 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff f8ca 	bl	8007c08 <HAL_UART_RxCpltCallback>
}
 8008a74:	e007      	b.n	8008a86 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	699a      	ldr	r2, [r3, #24]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f042 0208 	orr.w	r2, r2, #8
 8008a84:	619a      	str	r2, [r3, #24]
}
 8008a86:	bf00      	nop
 8008a88:	3770      	adds	r7, #112	; 0x70
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b09c      	sub	sp, #112	; 0x70
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a9c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aa6:	2b22      	cmp	r3, #34	; 0x22
 8008aa8:	f040 80b9 	bne.w	8008c1e <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aba:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008abc:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008ac0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008aca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad0:	1c9a      	adds	r2, r3, #2
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f040 809c 	bne.w	8008c2e <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b0a:	667b      	str	r3, [r7, #100]	; 0x64
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	461a      	mov	r2, r3
 8008b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b14:	657b      	str	r3, [r7, #84]	; 0x54
 8008b16:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b1c:	e841 2300 	strex	r3, r2, [r1]
 8008b20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e6      	bne.n	8008af6 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3308      	adds	r3, #8
 8008b2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	f023 0301 	bic.w	r3, r3, #1
 8008b3e:	663b      	str	r3, [r7, #96]	; 0x60
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3308      	adds	r3, #8
 8008b46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b48:	643a      	str	r2, [r7, #64]	; 0x40
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e5      	bne.n	8008b28 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	671a      	str	r2, [r3, #112]	; 0x70
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
        }
      }
#else
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d018      	beq.n	8008bb0 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	e853 3f00 	ldrex	r3, [r3]
 8008b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b9e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ba4:	e841 2300 	strex	r3, r2, [r1]
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e6      	bne.n	8008b7e <UART_RxISR_16BIT+0xf0>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d12e      	bne.n	8008c16 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	e853 3f00 	ldrex	r3, [r3]
 8008bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f023 0310 	bic.w	r3, r3, #16
 8008bd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bdc:	61bb      	str	r3, [r7, #24]
 8008bde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	6979      	ldr	r1, [r7, #20]
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	613b      	str	r3, [r7, #16]
   return(result);
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e6      	bne.n	8008bbe <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	f003 0310 	and.w	r3, r3, #16
 8008bfa:	2b10      	cmp	r3, #16
 8008bfc:	d103      	bne.n	8008c06 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2210      	movs	r2, #16
 8008c04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7f9 f882 	bl	8001d18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c14:	e00b      	b.n	8008c2e <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7fe fff6 	bl	8007c08 <HAL_UART_RxCpltCallback>
}
 8008c1c:	e007      	b.n	8008c2e <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	699a      	ldr	r2, [r3, #24]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f042 0208 	orr.w	r2, r2, #8
 8008c2c:	619a      	str	r2, [r3, #24]
}
 8008c2e:	bf00      	nop
 8008c30:	3770      	adds	r7, #112	; 0x70
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
	...

08008c38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b0ac      	sub	sp, #176	; 0xb0
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c46:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c6e:	2b22      	cmp	r3, #34	; 0x22
 8008c70:	f040 817d 	bne.w	8008f6e <UART_RxISR_8BIT_FIFOEN+0x336>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c7a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c7e:	e120      	b.n	8008ec2 <UART_RxISR_8BIT_FIFOEN+0x28a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008c8e:	b2d9      	uxtb	r1, r3
 8008c90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c9a:	400a      	ands	r2, r1
 8008c9c:	b2d2      	uxtb	r2, r2
 8008c9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d053      	beq.n	8008d7a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d011      	beq.n	8008d02 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008cde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00b      	beq.n	8008d02 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf8:	f043 0201 	orr.w	r2, r3, #1
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d011      	beq.n	8008d32 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00b      	beq.n	8008d32 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d28:	f043 0204 	orr.w	r2, r3, #4
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d36:	f003 0304 	and.w	r3, r3, #4
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d011      	beq.n	8008d62 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008d3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00b      	beq.n	8008d62 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2204      	movs	r2, #4
 8008d50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d58:	f043 0202 	orr.w	r2, r3, #2
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d006      	beq.n	8008d7a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7fe ff55 	bl	8007c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f040 809d 	bne.w	8008ec2 <UART_RxISR_8BIT_FIFOEN+0x28a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	461a      	mov	r2, r3
 8008da6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008daa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008dac:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008db0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e4      	bne.n	8008d88 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dd4:	f023 0301 	bic.w	r3, r3, #1
 8008dd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	3308      	adds	r3, #8
 8008de2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008de6:	66ba      	str	r2, [r7, #104]	; 0x68
 8008de8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008dec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dee:	e841 2300 	strex	r3, r2, [r1]
 8008df2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e1      	bne.n	8008dbe <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	671a      	str	r2, [r3, #112]	; 0x70
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
          }
        }
#else
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01a      	beq.n	8008e52 <UART_RxISR_8BIT_FIFOEN+0x21a>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8008e40:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e4      	bne.n	8008e1c <UART_RxISR_8BIT_FIFOEN+0x1e4>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d130      	bne.n	8008ebc <UART_RxISR_8BIT_FIFOEN+0x284>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e68:	e853 3f00 	ldrex	r3, [r3]
 8008e6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	f023 0310 	bic.w	r3, r3, #16
 8008e74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e82:	643b      	str	r3, [r7, #64]	; 0x40
 8008e84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e8a:	e841 2300 	strex	r3, r2, [r1]
 8008e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1e4      	bne.n	8008e60 <UART_RxISR_8BIT_FIFOEN+0x228>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	f003 0310 	and.w	r3, r3, #16
 8008ea0:	2b10      	cmp	r3, #16
 8008ea2:	d103      	bne.n	8008eac <UART_RxISR_8BIT_FIFOEN+0x274>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2210      	movs	r2, #16
 8008eaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7f8 ff2f 	bl	8001d18 <HAL_UARTEx_RxEventCallback>
 8008eba:	e002      	b.n	8008ec2 <UART_RxISR_8BIT_FIFOEN+0x28a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7fe fea3 	bl	8007c08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ec2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d006      	beq.n	8008ed8 <UART_RxISR_8BIT_FIFOEN+0x2a0>
 8008eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ece:	f003 0320 	and.w	r3, r3, #32
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f47f aed4 	bne.w	8008c80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ede:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ee2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d049      	beq.n	8008f7e <UART_RxISR_8BIT_FIFOEN+0x346>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ef0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d242      	bcs.n	8008f7e <UART_RxISR_8BIT_FIFOEN+0x346>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3308      	adds	r3, #8
 8008efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	e853 3f00 	ldrex	r3, [r3]
 8008f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3308      	adds	r3, #8
 8008f18:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008f1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f24:	e841 2300 	strex	r3, r2, [r1]
 8008f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e3      	bne.n	8008ef8 <UART_RxISR_8BIT_FIFOEN+0x2c0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a15      	ldr	r2, [pc, #84]	; (8008f88 <UART_RxISR_8BIT_FIFOEN+0x350>)
 8008f34:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	e853 3f00 	ldrex	r3, [r3]
 8008f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f043 0320 	orr.w	r3, r3, #32
 8008f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	461a      	mov	r2, r3
 8008f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f58:	61bb      	str	r3, [r7, #24]
 8008f5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5c:	6979      	ldr	r1, [r7, #20]
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	e841 2300 	strex	r3, r2, [r1]
 8008f64:	613b      	str	r3, [r7, #16]
   return(result);
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1e4      	bne.n	8008f36 <UART_RxISR_8BIT_FIFOEN+0x2fe>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f6c:	e007      	b.n	8008f7e <UART_RxISR_8BIT_FIFOEN+0x346>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	699a      	ldr	r2, [r3, #24]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f042 0208 	orr.w	r2, r2, #8
 8008f7c:	619a      	str	r2, [r3, #24]
}
 8008f7e:	bf00      	nop
 8008f80:	37b0      	adds	r7, #176	; 0xb0
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	080088e7 	.word	0x080088e7

08008f8c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b0ae      	sub	sp, #184	; 0xb8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f9a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69db      	ldr	r3, [r3, #28]
 8008fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fc2:	2b22      	cmp	r3, #34	; 0x22
 8008fc4:	f040 8181 	bne.w	80092ca <UART_RxISR_16BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fce:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fd2:	e124      	b.n	800921e <UART_RxISR_16BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008fe6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008fea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008fee:	4013      	ands	r3, r2
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ff6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ffc:	1c9a      	adds	r2, r3, #2
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b01      	subs	r3, #1
 800900c:	b29a      	uxth	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800901e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	2b00      	cmp	r3, #0
 8009028:	d053      	beq.n	80090d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800902a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d011      	beq.n	800905a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800903a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00b      	beq.n	800905a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2201      	movs	r2, #1
 8009048:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009050:	f043 0201 	orr.w	r2, r3, #1
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800905a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b00      	cmp	r3, #0
 8009064:	d011      	beq.n	800908a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00b      	beq.n	800908a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2202      	movs	r2, #2
 8009078:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009080:	f043 0204 	orr.w	r2, r3, #4
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800908a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800908e:	f003 0304 	and.w	r3, r3, #4
 8009092:	2b00      	cmp	r3, #0
 8009094:	d011      	beq.n	80090ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009096:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00b      	beq.n	80090ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2204      	movs	r2, #4
 80090a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b0:	f043 0202 	orr.w	r2, r3, #2
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7fe fda9 	bl	8007c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090d8:	b29b      	uxth	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f040 809f 	bne.w	800921e <UART_RxISR_16BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009102:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009106:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800910a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800910e:	e841 2300 	strex	r3, r2, [r1]
 8009112:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1e2      	bne.n	80090e0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3308      	adds	r3, #8
 8009120:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009124:	e853 3f00 	ldrex	r3, [r3]
 8009128:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800912a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800912c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009130:	f023 0301 	bic.w	r3, r3, #1
 8009134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3308      	adds	r3, #8
 800913e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009142:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009144:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009148:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e1      	bne.n	800911a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2220      	movs	r2, #32
 800915a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	671a      	str	r2, [r3, #112]	; 0x70
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
          }
        }
#else
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d01a      	beq.n	80091ae <UART_RxISR_16BIT_FIFOEN+0x222>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009188:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800918c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800919a:	65bb      	str	r3, [r7, #88]	; 0x58
 800919c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e4      	bne.n	8009178 <UART_RxISR_16BIT_FIFOEN+0x1ec>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d130      	bne.n	8009218 <UART_RxISR_16BIT_FIFOEN+0x28c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091cc:	f023 0310 	bic.w	r3, r3, #16
 80091d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	461a      	mov	r2, r3
 80091da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091de:	647b      	str	r3, [r7, #68]	; 0x44
 80091e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091e6:	e841 2300 	strex	r3, r2, [r1]
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1e4      	bne.n	80091bc <UART_RxISR_16BIT_FIFOEN+0x230>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	f003 0310 	and.w	r3, r3, #16
 80091fc:	2b10      	cmp	r3, #16
 80091fe:	d103      	bne.n	8009208 <UART_RxISR_16BIT_FIFOEN+0x27c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2210      	movs	r2, #16
 8009206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7f8 fd81 	bl	8001d18 <HAL_UARTEx_RxEventCallback>
 8009216:	e002      	b.n	800921e <UART_RxISR_16BIT_FIFOEN+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7fe fcf5 	bl	8007c08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800921e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009222:	2b00      	cmp	r3, #0
 8009224:	d006      	beq.n	8009234 <UART_RxISR_16BIT_FIFOEN+0x2a8>
 8009226:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800922a:	f003 0320 	and.w	r3, r3, #32
 800922e:	2b00      	cmp	r3, #0
 8009230:	f47f aed0 	bne.w	8008fd4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800923a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800923e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009242:	2b00      	cmp	r3, #0
 8009244:	d049      	beq.n	80092da <UART_RxISR_16BIT_FIFOEN+0x34e>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800924c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009250:	429a      	cmp	r2, r3
 8009252:	d242      	bcs.n	80092da <UART_RxISR_16BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	e853 3f00 	ldrex	r3, [r3]
 8009262:	623b      	str	r3, [r7, #32]
   return(result);
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800926a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3308      	adds	r3, #8
 8009274:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009278:	633a      	str	r2, [r7, #48]	; 0x30
 800927a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800927e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009280:	e841 2300 	strex	r3, r2, [r1]
 8009284:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1e3      	bne.n	8009254 <UART_RxISR_16BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a15      	ldr	r2, [pc, #84]	; (80092e4 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8009290:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	e853 3f00 	ldrex	r3, [r3]
 800929e:	60fb      	str	r3, [r7, #12]
   return(result);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f043 0320 	orr.w	r3, r3, #32
 80092a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092b4:	61fb      	str	r3, [r7, #28]
 80092b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	69b9      	ldr	r1, [r7, #24]
 80092ba:	69fa      	ldr	r2, [r7, #28]
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	617b      	str	r3, [r7, #20]
   return(result);
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e4      	bne.n	8009292 <UART_RxISR_16BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092c8:	e007      	b.n	80092da <UART_RxISR_16BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	699a      	ldr	r2, [r3, #24]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f042 0208 	orr.w	r2, r2, #8
 80092d8:	619a      	str	r2, [r3, #24]
}
 80092da:	bf00      	nop
 80092dc:	37b8      	adds	r7, #184	; 0xb8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	08008a8f 	.word	0x08008a8f

080092e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009332:	2b01      	cmp	r3, #1
 8009334:	d101      	bne.n	800933a <HAL_UARTEx_DisableFifoMode+0x16>
 8009336:	2302      	movs	r3, #2
 8009338:	e027      	b.n	800938a <HAL_UARTEx_DisableFifoMode+0x66>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2224      	movs	r2, #36	; 0x24
 8009346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f022 0201 	bic.w	r2, r2, #1
 8009360:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009368:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2220      	movs	r2, #32
 800937c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d101      	bne.n	80093ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093aa:	2302      	movs	r3, #2
 80093ac:	e02d      	b.n	800940a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2224      	movs	r2, #36	; 0x24
 80093ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 0201 	bic.w	r2, r2, #1
 80093d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f8a4 	bl	8009538 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009426:	2302      	movs	r3, #2
 8009428:	e02d      	b.n	8009486 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2224      	movs	r2, #36	; 0x24
 8009436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f022 0201 	bic.w	r2, r2, #1
 8009450:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f866 	bl	8009538 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2220      	movs	r2, #32
 8009478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b08c      	sub	sp, #48	; 0x30
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	4613      	mov	r3, r2
 800949a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	d142      	bne.n	800952c <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d002      	beq.n	80094b2 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 80094ac:	88fb      	ldrh	r3, [r7, #6]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e03b      	b.n	800952e <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2201      	movs	r2, #1
 80094ba:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80094c2:	88fb      	ldrh	r3, [r7, #6]
 80094c4:	461a      	mov	r2, r3
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f7fe fea1 	bl	8008210 <UART_Start_Receive_IT>
 80094ce:	4603      	mov	r3, r0
 80094d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80094d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d124      	bne.n	8009526 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d11d      	bne.n	8009520 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2210      	movs	r2, #16
 80094ea:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	617b      	str	r3, [r7, #20]
   return(result);
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f043 0310 	orr.w	r3, r3, #16
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
 800950c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	6a39      	ldr	r1, [r7, #32]
 8009510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	61fb      	str	r3, [r7, #28]
   return(result);
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e6      	bne.n	80094ec <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 800951e:	e002      	b.n	8009526 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800952a:	e000      	b.n	800952e <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800952c:	2302      	movs	r3, #2
  }
}
 800952e:	4618      	mov	r0, r3
 8009530:	3730      	adds	r7, #48	; 0x30
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009544:	2b00      	cmp	r3, #0
 8009546:	d108      	bne.n	800955a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009558:	e031      	b.n	80095be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800955a:	2308      	movs	r3, #8
 800955c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800955e:	2308      	movs	r3, #8
 8009560:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	0e5b      	lsrs	r3, r3, #25
 800956a:	b2db      	uxtb	r3, r3
 800956c:	f003 0307 	and.w	r3, r3, #7
 8009570:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	0f5b      	lsrs	r3, r3, #29
 800957a:	b2db      	uxtb	r3, r3
 800957c:	f003 0307 	and.w	r3, r3, #7
 8009580:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	7b3a      	ldrb	r2, [r7, #12]
 8009586:	4911      	ldr	r1, [pc, #68]	; (80095cc <UARTEx_SetNbDataToProcess+0x94>)
 8009588:	5c8a      	ldrb	r2, [r1, r2]
 800958a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800958e:	7b3a      	ldrb	r2, [r7, #12]
 8009590:	490f      	ldr	r1, [pc, #60]	; (80095d0 <UARTEx_SetNbDataToProcess+0x98>)
 8009592:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009594:	fb93 f3f2 	sdiv	r3, r3, r2
 8009598:	b29a      	uxth	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	7b7a      	ldrb	r2, [r7, #13]
 80095a4:	4909      	ldr	r1, [pc, #36]	; (80095cc <UARTEx_SetNbDataToProcess+0x94>)
 80095a6:	5c8a      	ldrb	r2, [r1, r2]
 80095a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095ac:	7b7a      	ldrb	r2, [r7, #13]
 80095ae:	4908      	ldr	r1, [pc, #32]	; (80095d0 <UARTEx_SetNbDataToProcess+0x98>)
 80095b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095be:	bf00      	nop
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	0800cec0 	.word	0x0800cec0
 80095d0:	0800cec8 	.word	0x0800cec8

080095d4 <atoi>:
 80095d4:	220a      	movs	r2, #10
 80095d6:	2100      	movs	r1, #0
 80095d8:	f000 bee0 	b.w	800a39c <strtol>

080095dc <__errno>:
 80095dc:	4b01      	ldr	r3, [pc, #4]	; (80095e4 <__errno+0x8>)
 80095de:	6818      	ldr	r0, [r3, #0]
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	20000010 	.word	0x20000010

080095e8 <__libc_init_array>:
 80095e8:	b570      	push	{r4, r5, r6, lr}
 80095ea:	4d0d      	ldr	r5, [pc, #52]	; (8009620 <__libc_init_array+0x38>)
 80095ec:	4c0d      	ldr	r4, [pc, #52]	; (8009624 <__libc_init_array+0x3c>)
 80095ee:	1b64      	subs	r4, r4, r5
 80095f0:	10a4      	asrs	r4, r4, #2
 80095f2:	2600      	movs	r6, #0
 80095f4:	42a6      	cmp	r6, r4
 80095f6:	d109      	bne.n	800960c <__libc_init_array+0x24>
 80095f8:	4d0b      	ldr	r5, [pc, #44]	; (8009628 <__libc_init_array+0x40>)
 80095fa:	4c0c      	ldr	r4, [pc, #48]	; (800962c <__libc_init_array+0x44>)
 80095fc:	f003 faac 	bl	800cb58 <_init>
 8009600:	1b64      	subs	r4, r4, r5
 8009602:	10a4      	asrs	r4, r4, #2
 8009604:	2600      	movs	r6, #0
 8009606:	42a6      	cmp	r6, r4
 8009608:	d105      	bne.n	8009616 <__libc_init_array+0x2e>
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009610:	4798      	blx	r3
 8009612:	3601      	adds	r6, #1
 8009614:	e7ee      	b.n	80095f4 <__libc_init_array+0xc>
 8009616:	f855 3b04 	ldr.w	r3, [r5], #4
 800961a:	4798      	blx	r3
 800961c:	3601      	adds	r6, #1
 800961e:	e7f2      	b.n	8009606 <__libc_init_array+0x1e>
 8009620:	0800d2ac 	.word	0x0800d2ac
 8009624:	0800d2ac 	.word	0x0800d2ac
 8009628:	0800d2ac 	.word	0x0800d2ac
 800962c:	0800d2b0 	.word	0x0800d2b0

08009630 <malloc>:
 8009630:	4b02      	ldr	r3, [pc, #8]	; (800963c <malloc+0xc>)
 8009632:	4601      	mov	r1, r0
 8009634:	6818      	ldr	r0, [r3, #0]
 8009636:	f000 b885 	b.w	8009744 <_malloc_r>
 800963a:	bf00      	nop
 800963c:	20000010 	.word	0x20000010

08009640 <memcpy>:
 8009640:	440a      	add	r2, r1
 8009642:	4291      	cmp	r1, r2
 8009644:	f100 33ff 	add.w	r3, r0, #4294967295
 8009648:	d100      	bne.n	800964c <memcpy+0xc>
 800964a:	4770      	bx	lr
 800964c:	b510      	push	{r4, lr}
 800964e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009656:	4291      	cmp	r1, r2
 8009658:	d1f9      	bne.n	800964e <memcpy+0xe>
 800965a:	bd10      	pop	{r4, pc}

0800965c <memset>:
 800965c:	4402      	add	r2, r0
 800965e:	4603      	mov	r3, r0
 8009660:	4293      	cmp	r3, r2
 8009662:	d100      	bne.n	8009666 <memset+0xa>
 8009664:	4770      	bx	lr
 8009666:	f803 1b01 	strb.w	r1, [r3], #1
 800966a:	e7f9      	b.n	8009660 <memset+0x4>

0800966c <_free_r>:
 800966c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800966e:	2900      	cmp	r1, #0
 8009670:	d044      	beq.n	80096fc <_free_r+0x90>
 8009672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009676:	9001      	str	r0, [sp, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	f1a1 0404 	sub.w	r4, r1, #4
 800967e:	bfb8      	it	lt
 8009680:	18e4      	addlt	r4, r4, r3
 8009682:	f002 f86f 	bl	800b764 <__malloc_lock>
 8009686:	4a1e      	ldr	r2, [pc, #120]	; (8009700 <_free_r+0x94>)
 8009688:	9801      	ldr	r0, [sp, #4]
 800968a:	6813      	ldr	r3, [r2, #0]
 800968c:	b933      	cbnz	r3, 800969c <_free_r+0x30>
 800968e:	6063      	str	r3, [r4, #4]
 8009690:	6014      	str	r4, [r2, #0]
 8009692:	b003      	add	sp, #12
 8009694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009698:	f002 b86a 	b.w	800b770 <__malloc_unlock>
 800969c:	42a3      	cmp	r3, r4
 800969e:	d908      	bls.n	80096b2 <_free_r+0x46>
 80096a0:	6825      	ldr	r5, [r4, #0]
 80096a2:	1961      	adds	r1, r4, r5
 80096a4:	428b      	cmp	r3, r1
 80096a6:	bf01      	itttt	eq
 80096a8:	6819      	ldreq	r1, [r3, #0]
 80096aa:	685b      	ldreq	r3, [r3, #4]
 80096ac:	1949      	addeq	r1, r1, r5
 80096ae:	6021      	streq	r1, [r4, #0]
 80096b0:	e7ed      	b.n	800968e <_free_r+0x22>
 80096b2:	461a      	mov	r2, r3
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	b10b      	cbz	r3, 80096bc <_free_r+0x50>
 80096b8:	42a3      	cmp	r3, r4
 80096ba:	d9fa      	bls.n	80096b2 <_free_r+0x46>
 80096bc:	6811      	ldr	r1, [r2, #0]
 80096be:	1855      	adds	r5, r2, r1
 80096c0:	42a5      	cmp	r5, r4
 80096c2:	d10b      	bne.n	80096dc <_free_r+0x70>
 80096c4:	6824      	ldr	r4, [r4, #0]
 80096c6:	4421      	add	r1, r4
 80096c8:	1854      	adds	r4, r2, r1
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	6011      	str	r1, [r2, #0]
 80096ce:	d1e0      	bne.n	8009692 <_free_r+0x26>
 80096d0:	681c      	ldr	r4, [r3, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	6053      	str	r3, [r2, #4]
 80096d6:	4421      	add	r1, r4
 80096d8:	6011      	str	r1, [r2, #0]
 80096da:	e7da      	b.n	8009692 <_free_r+0x26>
 80096dc:	d902      	bls.n	80096e4 <_free_r+0x78>
 80096de:	230c      	movs	r3, #12
 80096e0:	6003      	str	r3, [r0, #0]
 80096e2:	e7d6      	b.n	8009692 <_free_r+0x26>
 80096e4:	6825      	ldr	r5, [r4, #0]
 80096e6:	1961      	adds	r1, r4, r5
 80096e8:	428b      	cmp	r3, r1
 80096ea:	bf04      	itt	eq
 80096ec:	6819      	ldreq	r1, [r3, #0]
 80096ee:	685b      	ldreq	r3, [r3, #4]
 80096f0:	6063      	str	r3, [r4, #4]
 80096f2:	bf04      	itt	eq
 80096f4:	1949      	addeq	r1, r1, r5
 80096f6:	6021      	streq	r1, [r4, #0]
 80096f8:	6054      	str	r4, [r2, #4]
 80096fa:	e7ca      	b.n	8009692 <_free_r+0x26>
 80096fc:	b003      	add	sp, #12
 80096fe:	bd30      	pop	{r4, r5, pc}
 8009700:	20000554 	.word	0x20000554

08009704 <sbrk_aligned>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	4e0e      	ldr	r6, [pc, #56]	; (8009740 <sbrk_aligned+0x3c>)
 8009708:	460c      	mov	r4, r1
 800970a:	6831      	ldr	r1, [r6, #0]
 800970c:	4605      	mov	r5, r0
 800970e:	b911      	cbnz	r1, 8009716 <sbrk_aligned+0x12>
 8009710:	f000 fd84 	bl	800a21c <_sbrk_r>
 8009714:	6030      	str	r0, [r6, #0]
 8009716:	4621      	mov	r1, r4
 8009718:	4628      	mov	r0, r5
 800971a:	f000 fd7f 	bl	800a21c <_sbrk_r>
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	d00a      	beq.n	8009738 <sbrk_aligned+0x34>
 8009722:	1cc4      	adds	r4, r0, #3
 8009724:	f024 0403 	bic.w	r4, r4, #3
 8009728:	42a0      	cmp	r0, r4
 800972a:	d007      	beq.n	800973c <sbrk_aligned+0x38>
 800972c:	1a21      	subs	r1, r4, r0
 800972e:	4628      	mov	r0, r5
 8009730:	f000 fd74 	bl	800a21c <_sbrk_r>
 8009734:	3001      	adds	r0, #1
 8009736:	d101      	bne.n	800973c <sbrk_aligned+0x38>
 8009738:	f04f 34ff 	mov.w	r4, #4294967295
 800973c:	4620      	mov	r0, r4
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	20000558 	.word	0x20000558

08009744 <_malloc_r>:
 8009744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009748:	1ccd      	adds	r5, r1, #3
 800974a:	f025 0503 	bic.w	r5, r5, #3
 800974e:	3508      	adds	r5, #8
 8009750:	2d0c      	cmp	r5, #12
 8009752:	bf38      	it	cc
 8009754:	250c      	movcc	r5, #12
 8009756:	2d00      	cmp	r5, #0
 8009758:	4607      	mov	r7, r0
 800975a:	db01      	blt.n	8009760 <_malloc_r+0x1c>
 800975c:	42a9      	cmp	r1, r5
 800975e:	d905      	bls.n	800976c <_malloc_r+0x28>
 8009760:	230c      	movs	r3, #12
 8009762:	603b      	str	r3, [r7, #0]
 8009764:	2600      	movs	r6, #0
 8009766:	4630      	mov	r0, r6
 8009768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976c:	4e2e      	ldr	r6, [pc, #184]	; (8009828 <_malloc_r+0xe4>)
 800976e:	f001 fff9 	bl	800b764 <__malloc_lock>
 8009772:	6833      	ldr	r3, [r6, #0]
 8009774:	461c      	mov	r4, r3
 8009776:	bb34      	cbnz	r4, 80097c6 <_malloc_r+0x82>
 8009778:	4629      	mov	r1, r5
 800977a:	4638      	mov	r0, r7
 800977c:	f7ff ffc2 	bl	8009704 <sbrk_aligned>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	4604      	mov	r4, r0
 8009784:	d14d      	bne.n	8009822 <_malloc_r+0xde>
 8009786:	6834      	ldr	r4, [r6, #0]
 8009788:	4626      	mov	r6, r4
 800978a:	2e00      	cmp	r6, #0
 800978c:	d140      	bne.n	8009810 <_malloc_r+0xcc>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	4631      	mov	r1, r6
 8009792:	4638      	mov	r0, r7
 8009794:	eb04 0803 	add.w	r8, r4, r3
 8009798:	f000 fd40 	bl	800a21c <_sbrk_r>
 800979c:	4580      	cmp	r8, r0
 800979e:	d13a      	bne.n	8009816 <_malloc_r+0xd2>
 80097a0:	6821      	ldr	r1, [r4, #0]
 80097a2:	3503      	adds	r5, #3
 80097a4:	1a6d      	subs	r5, r5, r1
 80097a6:	f025 0503 	bic.w	r5, r5, #3
 80097aa:	3508      	adds	r5, #8
 80097ac:	2d0c      	cmp	r5, #12
 80097ae:	bf38      	it	cc
 80097b0:	250c      	movcc	r5, #12
 80097b2:	4629      	mov	r1, r5
 80097b4:	4638      	mov	r0, r7
 80097b6:	f7ff ffa5 	bl	8009704 <sbrk_aligned>
 80097ba:	3001      	adds	r0, #1
 80097bc:	d02b      	beq.n	8009816 <_malloc_r+0xd2>
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	442b      	add	r3, r5
 80097c2:	6023      	str	r3, [r4, #0]
 80097c4:	e00e      	b.n	80097e4 <_malloc_r+0xa0>
 80097c6:	6822      	ldr	r2, [r4, #0]
 80097c8:	1b52      	subs	r2, r2, r5
 80097ca:	d41e      	bmi.n	800980a <_malloc_r+0xc6>
 80097cc:	2a0b      	cmp	r2, #11
 80097ce:	d916      	bls.n	80097fe <_malloc_r+0xba>
 80097d0:	1961      	adds	r1, r4, r5
 80097d2:	42a3      	cmp	r3, r4
 80097d4:	6025      	str	r5, [r4, #0]
 80097d6:	bf18      	it	ne
 80097d8:	6059      	strne	r1, [r3, #4]
 80097da:	6863      	ldr	r3, [r4, #4]
 80097dc:	bf08      	it	eq
 80097de:	6031      	streq	r1, [r6, #0]
 80097e0:	5162      	str	r2, [r4, r5]
 80097e2:	604b      	str	r3, [r1, #4]
 80097e4:	4638      	mov	r0, r7
 80097e6:	f104 060b 	add.w	r6, r4, #11
 80097ea:	f001 ffc1 	bl	800b770 <__malloc_unlock>
 80097ee:	f026 0607 	bic.w	r6, r6, #7
 80097f2:	1d23      	adds	r3, r4, #4
 80097f4:	1af2      	subs	r2, r6, r3
 80097f6:	d0b6      	beq.n	8009766 <_malloc_r+0x22>
 80097f8:	1b9b      	subs	r3, r3, r6
 80097fa:	50a3      	str	r3, [r4, r2]
 80097fc:	e7b3      	b.n	8009766 <_malloc_r+0x22>
 80097fe:	6862      	ldr	r2, [r4, #4]
 8009800:	42a3      	cmp	r3, r4
 8009802:	bf0c      	ite	eq
 8009804:	6032      	streq	r2, [r6, #0]
 8009806:	605a      	strne	r2, [r3, #4]
 8009808:	e7ec      	b.n	80097e4 <_malloc_r+0xa0>
 800980a:	4623      	mov	r3, r4
 800980c:	6864      	ldr	r4, [r4, #4]
 800980e:	e7b2      	b.n	8009776 <_malloc_r+0x32>
 8009810:	4634      	mov	r4, r6
 8009812:	6876      	ldr	r6, [r6, #4]
 8009814:	e7b9      	b.n	800978a <_malloc_r+0x46>
 8009816:	230c      	movs	r3, #12
 8009818:	603b      	str	r3, [r7, #0]
 800981a:	4638      	mov	r0, r7
 800981c:	f001 ffa8 	bl	800b770 <__malloc_unlock>
 8009820:	e7a1      	b.n	8009766 <_malloc_r+0x22>
 8009822:	6025      	str	r5, [r4, #0]
 8009824:	e7de      	b.n	80097e4 <_malloc_r+0xa0>
 8009826:	bf00      	nop
 8009828:	20000554 	.word	0x20000554

0800982c <__cvt>:
 800982c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009830:	ec55 4b10 	vmov	r4, r5, d0
 8009834:	2d00      	cmp	r5, #0
 8009836:	460e      	mov	r6, r1
 8009838:	4619      	mov	r1, r3
 800983a:	462b      	mov	r3, r5
 800983c:	bfbb      	ittet	lt
 800983e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009842:	461d      	movlt	r5, r3
 8009844:	2300      	movge	r3, #0
 8009846:	232d      	movlt	r3, #45	; 0x2d
 8009848:	700b      	strb	r3, [r1, #0]
 800984a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800984c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009850:	4691      	mov	r9, r2
 8009852:	f023 0820 	bic.w	r8, r3, #32
 8009856:	bfbc      	itt	lt
 8009858:	4622      	movlt	r2, r4
 800985a:	4614      	movlt	r4, r2
 800985c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009860:	d005      	beq.n	800986e <__cvt+0x42>
 8009862:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009866:	d100      	bne.n	800986a <__cvt+0x3e>
 8009868:	3601      	adds	r6, #1
 800986a:	2102      	movs	r1, #2
 800986c:	e000      	b.n	8009870 <__cvt+0x44>
 800986e:	2103      	movs	r1, #3
 8009870:	ab03      	add	r3, sp, #12
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	ab02      	add	r3, sp, #8
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	ec45 4b10 	vmov	d0, r4, r5
 800987c:	4653      	mov	r3, sl
 800987e:	4632      	mov	r2, r6
 8009880:	f000 ff5e 	bl	800a740 <_dtoa_r>
 8009884:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009888:	4607      	mov	r7, r0
 800988a:	d102      	bne.n	8009892 <__cvt+0x66>
 800988c:	f019 0f01 	tst.w	r9, #1
 8009890:	d022      	beq.n	80098d8 <__cvt+0xac>
 8009892:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009896:	eb07 0906 	add.w	r9, r7, r6
 800989a:	d110      	bne.n	80098be <__cvt+0x92>
 800989c:	783b      	ldrb	r3, [r7, #0]
 800989e:	2b30      	cmp	r3, #48	; 0x30
 80098a0:	d10a      	bne.n	80098b8 <__cvt+0x8c>
 80098a2:	2200      	movs	r2, #0
 80098a4:	2300      	movs	r3, #0
 80098a6:	4620      	mov	r0, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	f7f7 f8f5 	bl	8000a98 <__aeabi_dcmpeq>
 80098ae:	b918      	cbnz	r0, 80098b8 <__cvt+0x8c>
 80098b0:	f1c6 0601 	rsb	r6, r6, #1
 80098b4:	f8ca 6000 	str.w	r6, [sl]
 80098b8:	f8da 3000 	ldr.w	r3, [sl]
 80098bc:	4499      	add	r9, r3
 80098be:	2200      	movs	r2, #0
 80098c0:	2300      	movs	r3, #0
 80098c2:	4620      	mov	r0, r4
 80098c4:	4629      	mov	r1, r5
 80098c6:	f7f7 f8e7 	bl	8000a98 <__aeabi_dcmpeq>
 80098ca:	b108      	cbz	r0, 80098d0 <__cvt+0xa4>
 80098cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80098d0:	2230      	movs	r2, #48	; 0x30
 80098d2:	9b03      	ldr	r3, [sp, #12]
 80098d4:	454b      	cmp	r3, r9
 80098d6:	d307      	bcc.n	80098e8 <__cvt+0xbc>
 80098d8:	9b03      	ldr	r3, [sp, #12]
 80098da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098dc:	1bdb      	subs	r3, r3, r7
 80098de:	4638      	mov	r0, r7
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	b004      	add	sp, #16
 80098e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e8:	1c59      	adds	r1, r3, #1
 80098ea:	9103      	str	r1, [sp, #12]
 80098ec:	701a      	strb	r2, [r3, #0]
 80098ee:	e7f0      	b.n	80098d2 <__cvt+0xa6>

080098f0 <__exponent>:
 80098f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098f2:	4603      	mov	r3, r0
 80098f4:	2900      	cmp	r1, #0
 80098f6:	bfb8      	it	lt
 80098f8:	4249      	neglt	r1, r1
 80098fa:	f803 2b02 	strb.w	r2, [r3], #2
 80098fe:	bfb4      	ite	lt
 8009900:	222d      	movlt	r2, #45	; 0x2d
 8009902:	222b      	movge	r2, #43	; 0x2b
 8009904:	2909      	cmp	r1, #9
 8009906:	7042      	strb	r2, [r0, #1]
 8009908:	dd2a      	ble.n	8009960 <__exponent+0x70>
 800990a:	f10d 0407 	add.w	r4, sp, #7
 800990e:	46a4      	mov	ip, r4
 8009910:	270a      	movs	r7, #10
 8009912:	46a6      	mov	lr, r4
 8009914:	460a      	mov	r2, r1
 8009916:	fb91 f6f7 	sdiv	r6, r1, r7
 800991a:	fb07 1516 	mls	r5, r7, r6, r1
 800991e:	3530      	adds	r5, #48	; 0x30
 8009920:	2a63      	cmp	r2, #99	; 0x63
 8009922:	f104 34ff 	add.w	r4, r4, #4294967295
 8009926:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800992a:	4631      	mov	r1, r6
 800992c:	dcf1      	bgt.n	8009912 <__exponent+0x22>
 800992e:	3130      	adds	r1, #48	; 0x30
 8009930:	f1ae 0502 	sub.w	r5, lr, #2
 8009934:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009938:	1c44      	adds	r4, r0, #1
 800993a:	4629      	mov	r1, r5
 800993c:	4561      	cmp	r1, ip
 800993e:	d30a      	bcc.n	8009956 <__exponent+0x66>
 8009940:	f10d 0209 	add.w	r2, sp, #9
 8009944:	eba2 020e 	sub.w	r2, r2, lr
 8009948:	4565      	cmp	r5, ip
 800994a:	bf88      	it	hi
 800994c:	2200      	movhi	r2, #0
 800994e:	4413      	add	r3, r2
 8009950:	1a18      	subs	r0, r3, r0
 8009952:	b003      	add	sp, #12
 8009954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800995a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800995e:	e7ed      	b.n	800993c <__exponent+0x4c>
 8009960:	2330      	movs	r3, #48	; 0x30
 8009962:	3130      	adds	r1, #48	; 0x30
 8009964:	7083      	strb	r3, [r0, #2]
 8009966:	70c1      	strb	r1, [r0, #3]
 8009968:	1d03      	adds	r3, r0, #4
 800996a:	e7f1      	b.n	8009950 <__exponent+0x60>

0800996c <_printf_float>:
 800996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	ed2d 8b02 	vpush	{d8}
 8009974:	b08d      	sub	sp, #52	; 0x34
 8009976:	460c      	mov	r4, r1
 8009978:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800997c:	4616      	mov	r6, r2
 800997e:	461f      	mov	r7, r3
 8009980:	4605      	mov	r5, r0
 8009982:	f001 fe83 	bl	800b68c <_localeconv_r>
 8009986:	f8d0 a000 	ldr.w	sl, [r0]
 800998a:	4650      	mov	r0, sl
 800998c:	f7f6 fc02 	bl	8000194 <strlen>
 8009990:	2300      	movs	r3, #0
 8009992:	930a      	str	r3, [sp, #40]	; 0x28
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	9305      	str	r3, [sp, #20]
 8009998:	f8d8 3000 	ldr.w	r3, [r8]
 800999c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80099a0:	3307      	adds	r3, #7
 80099a2:	f023 0307 	bic.w	r3, r3, #7
 80099a6:	f103 0208 	add.w	r2, r3, #8
 80099aa:	f8c8 2000 	str.w	r2, [r8]
 80099ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80099b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80099ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099be:	9307      	str	r3, [sp, #28]
 80099c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80099c4:	ee08 0a10 	vmov	s16, r0
 80099c8:	4b9f      	ldr	r3, [pc, #636]	; (8009c48 <_printf_float+0x2dc>)
 80099ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099ce:	f04f 32ff 	mov.w	r2, #4294967295
 80099d2:	f7f7 f893 	bl	8000afc <__aeabi_dcmpun>
 80099d6:	bb88      	cbnz	r0, 8009a3c <_printf_float+0xd0>
 80099d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099dc:	4b9a      	ldr	r3, [pc, #616]	; (8009c48 <_printf_float+0x2dc>)
 80099de:	f04f 32ff 	mov.w	r2, #4294967295
 80099e2:	f7f7 f86d 	bl	8000ac0 <__aeabi_dcmple>
 80099e6:	bb48      	cbnz	r0, 8009a3c <_printf_float+0xd0>
 80099e8:	2200      	movs	r2, #0
 80099ea:	2300      	movs	r3, #0
 80099ec:	4640      	mov	r0, r8
 80099ee:	4649      	mov	r1, r9
 80099f0:	f7f7 f85c 	bl	8000aac <__aeabi_dcmplt>
 80099f4:	b110      	cbz	r0, 80099fc <_printf_float+0x90>
 80099f6:	232d      	movs	r3, #45	; 0x2d
 80099f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099fc:	4b93      	ldr	r3, [pc, #588]	; (8009c4c <_printf_float+0x2e0>)
 80099fe:	4894      	ldr	r0, [pc, #592]	; (8009c50 <_printf_float+0x2e4>)
 8009a00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009a04:	bf94      	ite	ls
 8009a06:	4698      	movls	r8, r3
 8009a08:	4680      	movhi	r8, r0
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	6123      	str	r3, [r4, #16]
 8009a0e:	9b05      	ldr	r3, [sp, #20]
 8009a10:	f023 0204 	bic.w	r2, r3, #4
 8009a14:	6022      	str	r2, [r4, #0]
 8009a16:	f04f 0900 	mov.w	r9, #0
 8009a1a:	9700      	str	r7, [sp, #0]
 8009a1c:	4633      	mov	r3, r6
 8009a1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a20:	4621      	mov	r1, r4
 8009a22:	4628      	mov	r0, r5
 8009a24:	f000 f9d8 	bl	8009dd8 <_printf_common>
 8009a28:	3001      	adds	r0, #1
 8009a2a:	f040 8090 	bne.w	8009b4e <_printf_float+0x1e2>
 8009a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a32:	b00d      	add	sp, #52	; 0x34
 8009a34:	ecbd 8b02 	vpop	{d8}
 8009a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3c:	4642      	mov	r2, r8
 8009a3e:	464b      	mov	r3, r9
 8009a40:	4640      	mov	r0, r8
 8009a42:	4649      	mov	r1, r9
 8009a44:	f7f7 f85a 	bl	8000afc <__aeabi_dcmpun>
 8009a48:	b140      	cbz	r0, 8009a5c <_printf_float+0xf0>
 8009a4a:	464b      	mov	r3, r9
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	bfbc      	itt	lt
 8009a50:	232d      	movlt	r3, #45	; 0x2d
 8009a52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a56:	487f      	ldr	r0, [pc, #508]	; (8009c54 <_printf_float+0x2e8>)
 8009a58:	4b7f      	ldr	r3, [pc, #508]	; (8009c58 <_printf_float+0x2ec>)
 8009a5a:	e7d1      	b.n	8009a00 <_printf_float+0x94>
 8009a5c:	6863      	ldr	r3, [r4, #4]
 8009a5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a62:	9206      	str	r2, [sp, #24]
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	d13f      	bne.n	8009ae8 <_printf_float+0x17c>
 8009a68:	2306      	movs	r3, #6
 8009a6a:	6063      	str	r3, [r4, #4]
 8009a6c:	9b05      	ldr	r3, [sp, #20]
 8009a6e:	6861      	ldr	r1, [r4, #4]
 8009a70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a74:	2300      	movs	r3, #0
 8009a76:	9303      	str	r3, [sp, #12]
 8009a78:	ab0a      	add	r3, sp, #40	; 0x28
 8009a7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a7e:	ab09      	add	r3, sp, #36	; 0x24
 8009a80:	ec49 8b10 	vmov	d0, r8, r9
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	6022      	str	r2, [r4, #0]
 8009a88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f7ff fecd 	bl	800982c <__cvt>
 8009a92:	9b06      	ldr	r3, [sp, #24]
 8009a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a96:	2b47      	cmp	r3, #71	; 0x47
 8009a98:	4680      	mov	r8, r0
 8009a9a:	d108      	bne.n	8009aae <_printf_float+0x142>
 8009a9c:	1cc8      	adds	r0, r1, #3
 8009a9e:	db02      	blt.n	8009aa6 <_printf_float+0x13a>
 8009aa0:	6863      	ldr	r3, [r4, #4]
 8009aa2:	4299      	cmp	r1, r3
 8009aa4:	dd41      	ble.n	8009b2a <_printf_float+0x1be>
 8009aa6:	f1ab 0b02 	sub.w	fp, fp, #2
 8009aaa:	fa5f fb8b 	uxtb.w	fp, fp
 8009aae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ab2:	d820      	bhi.n	8009af6 <_printf_float+0x18a>
 8009ab4:	3901      	subs	r1, #1
 8009ab6:	465a      	mov	r2, fp
 8009ab8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009abc:	9109      	str	r1, [sp, #36]	; 0x24
 8009abe:	f7ff ff17 	bl	80098f0 <__exponent>
 8009ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ac4:	1813      	adds	r3, r2, r0
 8009ac6:	2a01      	cmp	r2, #1
 8009ac8:	4681      	mov	r9, r0
 8009aca:	6123      	str	r3, [r4, #16]
 8009acc:	dc02      	bgt.n	8009ad4 <_printf_float+0x168>
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	07d2      	lsls	r2, r2, #31
 8009ad2:	d501      	bpl.n	8009ad8 <_printf_float+0x16c>
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	6123      	str	r3, [r4, #16]
 8009ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d09c      	beq.n	8009a1a <_printf_float+0xae>
 8009ae0:	232d      	movs	r3, #45	; 0x2d
 8009ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ae6:	e798      	b.n	8009a1a <_printf_float+0xae>
 8009ae8:	9a06      	ldr	r2, [sp, #24]
 8009aea:	2a47      	cmp	r2, #71	; 0x47
 8009aec:	d1be      	bne.n	8009a6c <_printf_float+0x100>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1bc      	bne.n	8009a6c <_printf_float+0x100>
 8009af2:	2301      	movs	r3, #1
 8009af4:	e7b9      	b.n	8009a6a <_printf_float+0xfe>
 8009af6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009afa:	d118      	bne.n	8009b2e <_printf_float+0x1c2>
 8009afc:	2900      	cmp	r1, #0
 8009afe:	6863      	ldr	r3, [r4, #4]
 8009b00:	dd0b      	ble.n	8009b1a <_printf_float+0x1ae>
 8009b02:	6121      	str	r1, [r4, #16]
 8009b04:	b913      	cbnz	r3, 8009b0c <_printf_float+0x1a0>
 8009b06:	6822      	ldr	r2, [r4, #0]
 8009b08:	07d0      	lsls	r0, r2, #31
 8009b0a:	d502      	bpl.n	8009b12 <_printf_float+0x1a6>
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	440b      	add	r3, r1
 8009b10:	6123      	str	r3, [r4, #16]
 8009b12:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b14:	f04f 0900 	mov.w	r9, #0
 8009b18:	e7de      	b.n	8009ad8 <_printf_float+0x16c>
 8009b1a:	b913      	cbnz	r3, 8009b22 <_printf_float+0x1b6>
 8009b1c:	6822      	ldr	r2, [r4, #0]
 8009b1e:	07d2      	lsls	r2, r2, #31
 8009b20:	d501      	bpl.n	8009b26 <_printf_float+0x1ba>
 8009b22:	3302      	adds	r3, #2
 8009b24:	e7f4      	b.n	8009b10 <_printf_float+0x1a4>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e7f2      	b.n	8009b10 <_printf_float+0x1a4>
 8009b2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b30:	4299      	cmp	r1, r3
 8009b32:	db05      	blt.n	8009b40 <_printf_float+0x1d4>
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	6121      	str	r1, [r4, #16]
 8009b38:	07d8      	lsls	r0, r3, #31
 8009b3a:	d5ea      	bpl.n	8009b12 <_printf_float+0x1a6>
 8009b3c:	1c4b      	adds	r3, r1, #1
 8009b3e:	e7e7      	b.n	8009b10 <_printf_float+0x1a4>
 8009b40:	2900      	cmp	r1, #0
 8009b42:	bfd4      	ite	le
 8009b44:	f1c1 0202 	rsble	r2, r1, #2
 8009b48:	2201      	movgt	r2, #1
 8009b4a:	4413      	add	r3, r2
 8009b4c:	e7e0      	b.n	8009b10 <_printf_float+0x1a4>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	055a      	lsls	r2, r3, #21
 8009b52:	d407      	bmi.n	8009b64 <_printf_float+0x1f8>
 8009b54:	6923      	ldr	r3, [r4, #16]
 8009b56:	4642      	mov	r2, r8
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	d12c      	bne.n	8009bbc <_printf_float+0x250>
 8009b62:	e764      	b.n	8009a2e <_printf_float+0xc2>
 8009b64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b68:	f240 80e0 	bls.w	8009d2c <_printf_float+0x3c0>
 8009b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b70:	2200      	movs	r2, #0
 8009b72:	2300      	movs	r3, #0
 8009b74:	f7f6 ff90 	bl	8000a98 <__aeabi_dcmpeq>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d034      	beq.n	8009be6 <_printf_float+0x27a>
 8009b7c:	4a37      	ldr	r2, [pc, #220]	; (8009c5c <_printf_float+0x2f0>)
 8009b7e:	2301      	movs	r3, #1
 8009b80:	4631      	mov	r1, r6
 8009b82:	4628      	mov	r0, r5
 8009b84:	47b8      	blx	r7
 8009b86:	3001      	adds	r0, #1
 8009b88:	f43f af51 	beq.w	8009a2e <_printf_float+0xc2>
 8009b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b90:	429a      	cmp	r2, r3
 8009b92:	db02      	blt.n	8009b9a <_printf_float+0x22e>
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	07d8      	lsls	r0, r3, #31
 8009b98:	d510      	bpl.n	8009bbc <_printf_float+0x250>
 8009b9a:	ee18 3a10 	vmov	r3, s16
 8009b9e:	4652      	mov	r2, sl
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b8      	blx	r7
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	f43f af41 	beq.w	8009a2e <_printf_float+0xc2>
 8009bac:	f04f 0800 	mov.w	r8, #0
 8009bb0:	f104 091a 	add.w	r9, r4, #26
 8009bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	4543      	cmp	r3, r8
 8009bba:	dc09      	bgt.n	8009bd0 <_printf_float+0x264>
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	079b      	lsls	r3, r3, #30
 8009bc0:	f100 8105 	bmi.w	8009dce <_printf_float+0x462>
 8009bc4:	68e0      	ldr	r0, [r4, #12]
 8009bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc8:	4298      	cmp	r0, r3
 8009bca:	bfb8      	it	lt
 8009bcc:	4618      	movlt	r0, r3
 8009bce:	e730      	b.n	8009a32 <_printf_float+0xc6>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	464a      	mov	r2, r9
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	47b8      	blx	r7
 8009bda:	3001      	adds	r0, #1
 8009bdc:	f43f af27 	beq.w	8009a2e <_printf_float+0xc2>
 8009be0:	f108 0801 	add.w	r8, r8, #1
 8009be4:	e7e6      	b.n	8009bb4 <_printf_float+0x248>
 8009be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	dc39      	bgt.n	8009c60 <_printf_float+0x2f4>
 8009bec:	4a1b      	ldr	r2, [pc, #108]	; (8009c5c <_printf_float+0x2f0>)
 8009bee:	2301      	movs	r3, #1
 8009bf0:	4631      	mov	r1, r6
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	47b8      	blx	r7
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	f43f af19 	beq.w	8009a2e <_printf_float+0xc2>
 8009bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c00:	4313      	orrs	r3, r2
 8009c02:	d102      	bne.n	8009c0a <_printf_float+0x29e>
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	07d9      	lsls	r1, r3, #31
 8009c08:	d5d8      	bpl.n	8009bbc <_printf_float+0x250>
 8009c0a:	ee18 3a10 	vmov	r3, s16
 8009c0e:	4652      	mov	r2, sl
 8009c10:	4631      	mov	r1, r6
 8009c12:	4628      	mov	r0, r5
 8009c14:	47b8      	blx	r7
 8009c16:	3001      	adds	r0, #1
 8009c18:	f43f af09 	beq.w	8009a2e <_printf_float+0xc2>
 8009c1c:	f04f 0900 	mov.w	r9, #0
 8009c20:	f104 0a1a 	add.w	sl, r4, #26
 8009c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c26:	425b      	negs	r3, r3
 8009c28:	454b      	cmp	r3, r9
 8009c2a:	dc01      	bgt.n	8009c30 <_printf_float+0x2c4>
 8009c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c2e:	e792      	b.n	8009b56 <_printf_float+0x1ea>
 8009c30:	2301      	movs	r3, #1
 8009c32:	4652      	mov	r2, sl
 8009c34:	4631      	mov	r1, r6
 8009c36:	4628      	mov	r0, r5
 8009c38:	47b8      	blx	r7
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	f43f aef7 	beq.w	8009a2e <_printf_float+0xc2>
 8009c40:	f109 0901 	add.w	r9, r9, #1
 8009c44:	e7ee      	b.n	8009c24 <_printf_float+0x2b8>
 8009c46:	bf00      	nop
 8009c48:	7fefffff 	.word	0x7fefffff
 8009c4c:	0800ced4 	.word	0x0800ced4
 8009c50:	0800ced8 	.word	0x0800ced8
 8009c54:	0800cee0 	.word	0x0800cee0
 8009c58:	0800cedc 	.word	0x0800cedc
 8009c5c:	0800cee4 	.word	0x0800cee4
 8009c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c64:	429a      	cmp	r2, r3
 8009c66:	bfa8      	it	ge
 8009c68:	461a      	movge	r2, r3
 8009c6a:	2a00      	cmp	r2, #0
 8009c6c:	4691      	mov	r9, r2
 8009c6e:	dc37      	bgt.n	8009ce0 <_printf_float+0x374>
 8009c70:	f04f 0b00 	mov.w	fp, #0
 8009c74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c78:	f104 021a 	add.w	r2, r4, #26
 8009c7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c7e:	9305      	str	r3, [sp, #20]
 8009c80:	eba3 0309 	sub.w	r3, r3, r9
 8009c84:	455b      	cmp	r3, fp
 8009c86:	dc33      	bgt.n	8009cf0 <_printf_float+0x384>
 8009c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	db3b      	blt.n	8009d08 <_printf_float+0x39c>
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	07da      	lsls	r2, r3, #31
 8009c94:	d438      	bmi.n	8009d08 <_printf_float+0x39c>
 8009c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c98:	9a05      	ldr	r2, [sp, #20]
 8009c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c9c:	1a9a      	subs	r2, r3, r2
 8009c9e:	eba3 0901 	sub.w	r9, r3, r1
 8009ca2:	4591      	cmp	r9, r2
 8009ca4:	bfa8      	it	ge
 8009ca6:	4691      	movge	r9, r2
 8009ca8:	f1b9 0f00 	cmp.w	r9, #0
 8009cac:	dc35      	bgt.n	8009d1a <_printf_float+0x3ae>
 8009cae:	f04f 0800 	mov.w	r8, #0
 8009cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cb6:	f104 0a1a 	add.w	sl, r4, #26
 8009cba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cbe:	1a9b      	subs	r3, r3, r2
 8009cc0:	eba3 0309 	sub.w	r3, r3, r9
 8009cc4:	4543      	cmp	r3, r8
 8009cc6:	f77f af79 	ble.w	8009bbc <_printf_float+0x250>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4652      	mov	r2, sl
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	f43f aeaa 	beq.w	8009a2e <_printf_float+0xc2>
 8009cda:	f108 0801 	add.w	r8, r8, #1
 8009cde:	e7ec      	b.n	8009cba <_printf_float+0x34e>
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b8      	blx	r7
 8009cea:	3001      	adds	r0, #1
 8009cec:	d1c0      	bne.n	8009c70 <_printf_float+0x304>
 8009cee:	e69e      	b.n	8009a2e <_printf_float+0xc2>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	9205      	str	r2, [sp, #20]
 8009cf8:	47b8      	blx	r7
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	f43f ae97 	beq.w	8009a2e <_printf_float+0xc2>
 8009d00:	9a05      	ldr	r2, [sp, #20]
 8009d02:	f10b 0b01 	add.w	fp, fp, #1
 8009d06:	e7b9      	b.n	8009c7c <_printf_float+0x310>
 8009d08:	ee18 3a10 	vmov	r3, s16
 8009d0c:	4652      	mov	r2, sl
 8009d0e:	4631      	mov	r1, r6
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b8      	blx	r7
 8009d14:	3001      	adds	r0, #1
 8009d16:	d1be      	bne.n	8009c96 <_printf_float+0x32a>
 8009d18:	e689      	b.n	8009a2e <_printf_float+0xc2>
 8009d1a:	9a05      	ldr	r2, [sp, #20]
 8009d1c:	464b      	mov	r3, r9
 8009d1e:	4442      	add	r2, r8
 8009d20:	4631      	mov	r1, r6
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	d1c1      	bne.n	8009cae <_printf_float+0x342>
 8009d2a:	e680      	b.n	8009a2e <_printf_float+0xc2>
 8009d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d2e:	2a01      	cmp	r2, #1
 8009d30:	dc01      	bgt.n	8009d36 <_printf_float+0x3ca>
 8009d32:	07db      	lsls	r3, r3, #31
 8009d34:	d538      	bpl.n	8009da8 <_printf_float+0x43c>
 8009d36:	2301      	movs	r3, #1
 8009d38:	4642      	mov	r2, r8
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b8      	blx	r7
 8009d40:	3001      	adds	r0, #1
 8009d42:	f43f ae74 	beq.w	8009a2e <_printf_float+0xc2>
 8009d46:	ee18 3a10 	vmov	r3, s16
 8009d4a:	4652      	mov	r2, sl
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4628      	mov	r0, r5
 8009d50:	47b8      	blx	r7
 8009d52:	3001      	adds	r0, #1
 8009d54:	f43f ae6b 	beq.w	8009a2e <_printf_float+0xc2>
 8009d58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f7f6 fe9a 	bl	8000a98 <__aeabi_dcmpeq>
 8009d64:	b9d8      	cbnz	r0, 8009d9e <_printf_float+0x432>
 8009d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d68:	f108 0201 	add.w	r2, r8, #1
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4628      	mov	r0, r5
 8009d72:	47b8      	blx	r7
 8009d74:	3001      	adds	r0, #1
 8009d76:	d10e      	bne.n	8009d96 <_printf_float+0x42a>
 8009d78:	e659      	b.n	8009a2e <_printf_float+0xc2>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4652      	mov	r2, sl
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b8      	blx	r7
 8009d84:	3001      	adds	r0, #1
 8009d86:	f43f ae52 	beq.w	8009a2e <_printf_float+0xc2>
 8009d8a:	f108 0801 	add.w	r8, r8, #1
 8009d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d90:	3b01      	subs	r3, #1
 8009d92:	4543      	cmp	r3, r8
 8009d94:	dcf1      	bgt.n	8009d7a <_printf_float+0x40e>
 8009d96:	464b      	mov	r3, r9
 8009d98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d9c:	e6dc      	b.n	8009b58 <_printf_float+0x1ec>
 8009d9e:	f04f 0800 	mov.w	r8, #0
 8009da2:	f104 0a1a 	add.w	sl, r4, #26
 8009da6:	e7f2      	b.n	8009d8e <_printf_float+0x422>
 8009da8:	2301      	movs	r3, #1
 8009daa:	4642      	mov	r2, r8
 8009dac:	e7df      	b.n	8009d6e <_printf_float+0x402>
 8009dae:	2301      	movs	r3, #1
 8009db0:	464a      	mov	r2, r9
 8009db2:	4631      	mov	r1, r6
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	f43f ae38 	beq.w	8009a2e <_printf_float+0xc2>
 8009dbe:	f108 0801 	add.w	r8, r8, #1
 8009dc2:	68e3      	ldr	r3, [r4, #12]
 8009dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dc6:	1a5b      	subs	r3, r3, r1
 8009dc8:	4543      	cmp	r3, r8
 8009dca:	dcf0      	bgt.n	8009dae <_printf_float+0x442>
 8009dcc:	e6fa      	b.n	8009bc4 <_printf_float+0x258>
 8009dce:	f04f 0800 	mov.w	r8, #0
 8009dd2:	f104 0919 	add.w	r9, r4, #25
 8009dd6:	e7f4      	b.n	8009dc2 <_printf_float+0x456>

08009dd8 <_printf_common>:
 8009dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	4616      	mov	r6, r2
 8009dde:	4699      	mov	r9, r3
 8009de0:	688a      	ldr	r2, [r1, #8]
 8009de2:	690b      	ldr	r3, [r1, #16]
 8009de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009de8:	4293      	cmp	r3, r2
 8009dea:	bfb8      	it	lt
 8009dec:	4613      	movlt	r3, r2
 8009dee:	6033      	str	r3, [r6, #0]
 8009df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009df4:	4607      	mov	r7, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b10a      	cbz	r2, 8009dfe <_printf_common+0x26>
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	6033      	str	r3, [r6, #0]
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	0699      	lsls	r1, r3, #26
 8009e02:	bf42      	ittt	mi
 8009e04:	6833      	ldrmi	r3, [r6, #0]
 8009e06:	3302      	addmi	r3, #2
 8009e08:	6033      	strmi	r3, [r6, #0]
 8009e0a:	6825      	ldr	r5, [r4, #0]
 8009e0c:	f015 0506 	ands.w	r5, r5, #6
 8009e10:	d106      	bne.n	8009e20 <_printf_common+0x48>
 8009e12:	f104 0a19 	add.w	sl, r4, #25
 8009e16:	68e3      	ldr	r3, [r4, #12]
 8009e18:	6832      	ldr	r2, [r6, #0]
 8009e1a:	1a9b      	subs	r3, r3, r2
 8009e1c:	42ab      	cmp	r3, r5
 8009e1e:	dc26      	bgt.n	8009e6e <_printf_common+0x96>
 8009e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e24:	1e13      	subs	r3, r2, #0
 8009e26:	6822      	ldr	r2, [r4, #0]
 8009e28:	bf18      	it	ne
 8009e2a:	2301      	movne	r3, #1
 8009e2c:	0692      	lsls	r2, r2, #26
 8009e2e:	d42b      	bmi.n	8009e88 <_printf_common+0xb0>
 8009e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e34:	4649      	mov	r1, r9
 8009e36:	4638      	mov	r0, r7
 8009e38:	47c0      	blx	r8
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d01e      	beq.n	8009e7c <_printf_common+0xa4>
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	68e5      	ldr	r5, [r4, #12]
 8009e42:	6832      	ldr	r2, [r6, #0]
 8009e44:	f003 0306 	and.w	r3, r3, #6
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	bf08      	it	eq
 8009e4c:	1aad      	subeq	r5, r5, r2
 8009e4e:	68a3      	ldr	r3, [r4, #8]
 8009e50:	6922      	ldr	r2, [r4, #16]
 8009e52:	bf0c      	ite	eq
 8009e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e58:	2500      	movne	r5, #0
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	bfc4      	itt	gt
 8009e5e:	1a9b      	subgt	r3, r3, r2
 8009e60:	18ed      	addgt	r5, r5, r3
 8009e62:	2600      	movs	r6, #0
 8009e64:	341a      	adds	r4, #26
 8009e66:	42b5      	cmp	r5, r6
 8009e68:	d11a      	bne.n	8009ea0 <_printf_common+0xc8>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	e008      	b.n	8009e80 <_printf_common+0xa8>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4652      	mov	r2, sl
 8009e72:	4649      	mov	r1, r9
 8009e74:	4638      	mov	r0, r7
 8009e76:	47c0      	blx	r8
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d103      	bne.n	8009e84 <_printf_common+0xac>
 8009e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e84:	3501      	adds	r5, #1
 8009e86:	e7c6      	b.n	8009e16 <_printf_common+0x3e>
 8009e88:	18e1      	adds	r1, r4, r3
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	2030      	movs	r0, #48	; 0x30
 8009e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e92:	4422      	add	r2, r4
 8009e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e9c:	3302      	adds	r3, #2
 8009e9e:	e7c7      	b.n	8009e30 <_printf_common+0x58>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	47c0      	blx	r8
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d0e6      	beq.n	8009e7c <_printf_common+0xa4>
 8009eae:	3601      	adds	r6, #1
 8009eb0:	e7d9      	b.n	8009e66 <_printf_common+0x8e>
	...

08009eb4 <_printf_i>:
 8009eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb8:	7e0f      	ldrb	r7, [r1, #24]
 8009eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ebc:	2f78      	cmp	r7, #120	; 0x78
 8009ebe:	4691      	mov	r9, r2
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	469a      	mov	sl, r3
 8009ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009eca:	d807      	bhi.n	8009edc <_printf_i+0x28>
 8009ecc:	2f62      	cmp	r7, #98	; 0x62
 8009ece:	d80a      	bhi.n	8009ee6 <_printf_i+0x32>
 8009ed0:	2f00      	cmp	r7, #0
 8009ed2:	f000 80d8 	beq.w	800a086 <_printf_i+0x1d2>
 8009ed6:	2f58      	cmp	r7, #88	; 0x58
 8009ed8:	f000 80a3 	beq.w	800a022 <_printf_i+0x16e>
 8009edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ee4:	e03a      	b.n	8009f5c <_printf_i+0xa8>
 8009ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eea:	2b15      	cmp	r3, #21
 8009eec:	d8f6      	bhi.n	8009edc <_printf_i+0x28>
 8009eee:	a101      	add	r1, pc, #4	; (adr r1, 8009ef4 <_printf_i+0x40>)
 8009ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ef4:	08009f4d 	.word	0x08009f4d
 8009ef8:	08009f61 	.word	0x08009f61
 8009efc:	08009edd 	.word	0x08009edd
 8009f00:	08009edd 	.word	0x08009edd
 8009f04:	08009edd 	.word	0x08009edd
 8009f08:	08009edd 	.word	0x08009edd
 8009f0c:	08009f61 	.word	0x08009f61
 8009f10:	08009edd 	.word	0x08009edd
 8009f14:	08009edd 	.word	0x08009edd
 8009f18:	08009edd 	.word	0x08009edd
 8009f1c:	08009edd 	.word	0x08009edd
 8009f20:	0800a06d 	.word	0x0800a06d
 8009f24:	08009f91 	.word	0x08009f91
 8009f28:	0800a04f 	.word	0x0800a04f
 8009f2c:	08009edd 	.word	0x08009edd
 8009f30:	08009edd 	.word	0x08009edd
 8009f34:	0800a08f 	.word	0x0800a08f
 8009f38:	08009edd 	.word	0x08009edd
 8009f3c:	08009f91 	.word	0x08009f91
 8009f40:	08009edd 	.word	0x08009edd
 8009f44:	08009edd 	.word	0x08009edd
 8009f48:	0800a057 	.word	0x0800a057
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	1d1a      	adds	r2, r3, #4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	602a      	str	r2, [r5, #0]
 8009f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e0a3      	b.n	800a0a8 <_printf_i+0x1f4>
 8009f60:	6820      	ldr	r0, [r4, #0]
 8009f62:	6829      	ldr	r1, [r5, #0]
 8009f64:	0606      	lsls	r6, r0, #24
 8009f66:	f101 0304 	add.w	r3, r1, #4
 8009f6a:	d50a      	bpl.n	8009f82 <_printf_i+0xce>
 8009f6c:	680e      	ldr	r6, [r1, #0]
 8009f6e:	602b      	str	r3, [r5, #0]
 8009f70:	2e00      	cmp	r6, #0
 8009f72:	da03      	bge.n	8009f7c <_printf_i+0xc8>
 8009f74:	232d      	movs	r3, #45	; 0x2d
 8009f76:	4276      	negs	r6, r6
 8009f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f7c:	485e      	ldr	r0, [pc, #376]	; (800a0f8 <_printf_i+0x244>)
 8009f7e:	230a      	movs	r3, #10
 8009f80:	e019      	b.n	8009fb6 <_printf_i+0x102>
 8009f82:	680e      	ldr	r6, [r1, #0]
 8009f84:	602b      	str	r3, [r5, #0]
 8009f86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f8a:	bf18      	it	ne
 8009f8c:	b236      	sxthne	r6, r6
 8009f8e:	e7ef      	b.n	8009f70 <_printf_i+0xbc>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	6820      	ldr	r0, [r4, #0]
 8009f94:	1d19      	adds	r1, r3, #4
 8009f96:	6029      	str	r1, [r5, #0]
 8009f98:	0601      	lsls	r1, r0, #24
 8009f9a:	d501      	bpl.n	8009fa0 <_printf_i+0xec>
 8009f9c:	681e      	ldr	r6, [r3, #0]
 8009f9e:	e002      	b.n	8009fa6 <_printf_i+0xf2>
 8009fa0:	0646      	lsls	r6, r0, #25
 8009fa2:	d5fb      	bpl.n	8009f9c <_printf_i+0xe8>
 8009fa4:	881e      	ldrh	r6, [r3, #0]
 8009fa6:	4854      	ldr	r0, [pc, #336]	; (800a0f8 <_printf_i+0x244>)
 8009fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8009faa:	bf0c      	ite	eq
 8009fac:	2308      	moveq	r3, #8
 8009fae:	230a      	movne	r3, #10
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fb6:	6865      	ldr	r5, [r4, #4]
 8009fb8:	60a5      	str	r5, [r4, #8]
 8009fba:	2d00      	cmp	r5, #0
 8009fbc:	bfa2      	ittt	ge
 8009fbe:	6821      	ldrge	r1, [r4, #0]
 8009fc0:	f021 0104 	bicge.w	r1, r1, #4
 8009fc4:	6021      	strge	r1, [r4, #0]
 8009fc6:	b90e      	cbnz	r6, 8009fcc <_printf_i+0x118>
 8009fc8:	2d00      	cmp	r5, #0
 8009fca:	d04d      	beq.n	800a068 <_printf_i+0x1b4>
 8009fcc:	4615      	mov	r5, r2
 8009fce:	fbb6 f1f3 	udiv	r1, r6, r3
 8009fd2:	fb03 6711 	mls	r7, r3, r1, r6
 8009fd6:	5dc7      	ldrb	r7, [r0, r7]
 8009fd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fdc:	4637      	mov	r7, r6
 8009fde:	42bb      	cmp	r3, r7
 8009fe0:	460e      	mov	r6, r1
 8009fe2:	d9f4      	bls.n	8009fce <_printf_i+0x11a>
 8009fe4:	2b08      	cmp	r3, #8
 8009fe6:	d10b      	bne.n	800a000 <_printf_i+0x14c>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	07de      	lsls	r6, r3, #31
 8009fec:	d508      	bpl.n	800a000 <_printf_i+0x14c>
 8009fee:	6923      	ldr	r3, [r4, #16]
 8009ff0:	6861      	ldr	r1, [r4, #4]
 8009ff2:	4299      	cmp	r1, r3
 8009ff4:	bfde      	ittt	le
 8009ff6:	2330      	movle	r3, #48	; 0x30
 8009ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a000:	1b52      	subs	r2, r2, r5
 800a002:	6122      	str	r2, [r4, #16]
 800a004:	f8cd a000 	str.w	sl, [sp]
 800a008:	464b      	mov	r3, r9
 800a00a:	aa03      	add	r2, sp, #12
 800a00c:	4621      	mov	r1, r4
 800a00e:	4640      	mov	r0, r8
 800a010:	f7ff fee2 	bl	8009dd8 <_printf_common>
 800a014:	3001      	adds	r0, #1
 800a016:	d14c      	bne.n	800a0b2 <_printf_i+0x1fe>
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	b004      	add	sp, #16
 800a01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a022:	4835      	ldr	r0, [pc, #212]	; (800a0f8 <_printf_i+0x244>)
 800a024:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a028:	6829      	ldr	r1, [r5, #0]
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a030:	6029      	str	r1, [r5, #0]
 800a032:	061d      	lsls	r5, r3, #24
 800a034:	d514      	bpl.n	800a060 <_printf_i+0x1ac>
 800a036:	07df      	lsls	r7, r3, #31
 800a038:	bf44      	itt	mi
 800a03a:	f043 0320 	orrmi.w	r3, r3, #32
 800a03e:	6023      	strmi	r3, [r4, #0]
 800a040:	b91e      	cbnz	r6, 800a04a <_printf_i+0x196>
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	f023 0320 	bic.w	r3, r3, #32
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	2310      	movs	r3, #16
 800a04c:	e7b0      	b.n	8009fb0 <_printf_i+0xfc>
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	f043 0320 	orr.w	r3, r3, #32
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	2378      	movs	r3, #120	; 0x78
 800a058:	4828      	ldr	r0, [pc, #160]	; (800a0fc <_printf_i+0x248>)
 800a05a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a05e:	e7e3      	b.n	800a028 <_printf_i+0x174>
 800a060:	0659      	lsls	r1, r3, #25
 800a062:	bf48      	it	mi
 800a064:	b2b6      	uxthmi	r6, r6
 800a066:	e7e6      	b.n	800a036 <_printf_i+0x182>
 800a068:	4615      	mov	r5, r2
 800a06a:	e7bb      	b.n	8009fe4 <_printf_i+0x130>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	6826      	ldr	r6, [r4, #0]
 800a070:	6961      	ldr	r1, [r4, #20]
 800a072:	1d18      	adds	r0, r3, #4
 800a074:	6028      	str	r0, [r5, #0]
 800a076:	0635      	lsls	r5, r6, #24
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	d501      	bpl.n	800a080 <_printf_i+0x1cc>
 800a07c:	6019      	str	r1, [r3, #0]
 800a07e:	e002      	b.n	800a086 <_printf_i+0x1d2>
 800a080:	0670      	lsls	r0, r6, #25
 800a082:	d5fb      	bpl.n	800a07c <_printf_i+0x1c8>
 800a084:	8019      	strh	r1, [r3, #0]
 800a086:	2300      	movs	r3, #0
 800a088:	6123      	str	r3, [r4, #16]
 800a08a:	4615      	mov	r5, r2
 800a08c:	e7ba      	b.n	800a004 <_printf_i+0x150>
 800a08e:	682b      	ldr	r3, [r5, #0]
 800a090:	1d1a      	adds	r2, r3, #4
 800a092:	602a      	str	r2, [r5, #0]
 800a094:	681d      	ldr	r5, [r3, #0]
 800a096:	6862      	ldr	r2, [r4, #4]
 800a098:	2100      	movs	r1, #0
 800a09a:	4628      	mov	r0, r5
 800a09c:	f7f6 f888 	bl	80001b0 <memchr>
 800a0a0:	b108      	cbz	r0, 800a0a6 <_printf_i+0x1f2>
 800a0a2:	1b40      	subs	r0, r0, r5
 800a0a4:	6060      	str	r0, [r4, #4]
 800a0a6:	6863      	ldr	r3, [r4, #4]
 800a0a8:	6123      	str	r3, [r4, #16]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0b0:	e7a8      	b.n	800a004 <_printf_i+0x150>
 800a0b2:	6923      	ldr	r3, [r4, #16]
 800a0b4:	462a      	mov	r2, r5
 800a0b6:	4649      	mov	r1, r9
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	47d0      	blx	sl
 800a0bc:	3001      	adds	r0, #1
 800a0be:	d0ab      	beq.n	800a018 <_printf_i+0x164>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	079b      	lsls	r3, r3, #30
 800a0c4:	d413      	bmi.n	800a0ee <_printf_i+0x23a>
 800a0c6:	68e0      	ldr	r0, [r4, #12]
 800a0c8:	9b03      	ldr	r3, [sp, #12]
 800a0ca:	4298      	cmp	r0, r3
 800a0cc:	bfb8      	it	lt
 800a0ce:	4618      	movlt	r0, r3
 800a0d0:	e7a4      	b.n	800a01c <_printf_i+0x168>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	4632      	mov	r2, r6
 800a0d6:	4649      	mov	r1, r9
 800a0d8:	4640      	mov	r0, r8
 800a0da:	47d0      	blx	sl
 800a0dc:	3001      	adds	r0, #1
 800a0de:	d09b      	beq.n	800a018 <_printf_i+0x164>
 800a0e0:	3501      	adds	r5, #1
 800a0e2:	68e3      	ldr	r3, [r4, #12]
 800a0e4:	9903      	ldr	r1, [sp, #12]
 800a0e6:	1a5b      	subs	r3, r3, r1
 800a0e8:	42ab      	cmp	r3, r5
 800a0ea:	dcf2      	bgt.n	800a0d2 <_printf_i+0x21e>
 800a0ec:	e7eb      	b.n	800a0c6 <_printf_i+0x212>
 800a0ee:	2500      	movs	r5, #0
 800a0f0:	f104 0619 	add.w	r6, r4, #25
 800a0f4:	e7f5      	b.n	800a0e2 <_printf_i+0x22e>
 800a0f6:	bf00      	nop
 800a0f8:	0800cee6 	.word	0x0800cee6
 800a0fc:	0800cef7 	.word	0x0800cef7

0800a100 <iprintf>:
 800a100:	b40f      	push	{r0, r1, r2, r3}
 800a102:	4b0a      	ldr	r3, [pc, #40]	; (800a12c <iprintf+0x2c>)
 800a104:	b513      	push	{r0, r1, r4, lr}
 800a106:	681c      	ldr	r4, [r3, #0]
 800a108:	b124      	cbz	r4, 800a114 <iprintf+0x14>
 800a10a:	69a3      	ldr	r3, [r4, #24]
 800a10c:	b913      	cbnz	r3, 800a114 <iprintf+0x14>
 800a10e:	4620      	mov	r0, r4
 800a110:	f001 fa1e 	bl	800b550 <__sinit>
 800a114:	ab05      	add	r3, sp, #20
 800a116:	9a04      	ldr	r2, [sp, #16]
 800a118:	68a1      	ldr	r1, [r4, #8]
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	4620      	mov	r0, r4
 800a11e:	f002 f84d 	bl	800c1bc <_vfiprintf_r>
 800a122:	b002      	add	sp, #8
 800a124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a128:	b004      	add	sp, #16
 800a12a:	4770      	bx	lr
 800a12c:	20000010 	.word	0x20000010

0800a130 <_puts_r>:
 800a130:	b570      	push	{r4, r5, r6, lr}
 800a132:	460e      	mov	r6, r1
 800a134:	4605      	mov	r5, r0
 800a136:	b118      	cbz	r0, 800a140 <_puts_r+0x10>
 800a138:	6983      	ldr	r3, [r0, #24]
 800a13a:	b90b      	cbnz	r3, 800a140 <_puts_r+0x10>
 800a13c:	f001 fa08 	bl	800b550 <__sinit>
 800a140:	69ab      	ldr	r3, [r5, #24]
 800a142:	68ac      	ldr	r4, [r5, #8]
 800a144:	b913      	cbnz	r3, 800a14c <_puts_r+0x1c>
 800a146:	4628      	mov	r0, r5
 800a148:	f001 fa02 	bl	800b550 <__sinit>
 800a14c:	4b2c      	ldr	r3, [pc, #176]	; (800a200 <_puts_r+0xd0>)
 800a14e:	429c      	cmp	r4, r3
 800a150:	d120      	bne.n	800a194 <_puts_r+0x64>
 800a152:	686c      	ldr	r4, [r5, #4]
 800a154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a156:	07db      	lsls	r3, r3, #31
 800a158:	d405      	bmi.n	800a166 <_puts_r+0x36>
 800a15a:	89a3      	ldrh	r3, [r4, #12]
 800a15c:	0598      	lsls	r0, r3, #22
 800a15e:	d402      	bmi.n	800a166 <_puts_r+0x36>
 800a160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a162:	f001 fa98 	bl	800b696 <__retarget_lock_acquire_recursive>
 800a166:	89a3      	ldrh	r3, [r4, #12]
 800a168:	0719      	lsls	r1, r3, #28
 800a16a:	d51d      	bpl.n	800a1a8 <_puts_r+0x78>
 800a16c:	6923      	ldr	r3, [r4, #16]
 800a16e:	b1db      	cbz	r3, 800a1a8 <_puts_r+0x78>
 800a170:	3e01      	subs	r6, #1
 800a172:	68a3      	ldr	r3, [r4, #8]
 800a174:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a178:	3b01      	subs	r3, #1
 800a17a:	60a3      	str	r3, [r4, #8]
 800a17c:	bb39      	cbnz	r1, 800a1ce <_puts_r+0x9e>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	da38      	bge.n	800a1f4 <_puts_r+0xc4>
 800a182:	4622      	mov	r2, r4
 800a184:	210a      	movs	r1, #10
 800a186:	4628      	mov	r0, r5
 800a188:	f000 f98e 	bl	800a4a8 <__swbuf_r>
 800a18c:	3001      	adds	r0, #1
 800a18e:	d011      	beq.n	800a1b4 <_puts_r+0x84>
 800a190:	250a      	movs	r5, #10
 800a192:	e011      	b.n	800a1b8 <_puts_r+0x88>
 800a194:	4b1b      	ldr	r3, [pc, #108]	; (800a204 <_puts_r+0xd4>)
 800a196:	429c      	cmp	r4, r3
 800a198:	d101      	bne.n	800a19e <_puts_r+0x6e>
 800a19a:	68ac      	ldr	r4, [r5, #8]
 800a19c:	e7da      	b.n	800a154 <_puts_r+0x24>
 800a19e:	4b1a      	ldr	r3, [pc, #104]	; (800a208 <_puts_r+0xd8>)
 800a1a0:	429c      	cmp	r4, r3
 800a1a2:	bf08      	it	eq
 800a1a4:	68ec      	ldreq	r4, [r5, #12]
 800a1a6:	e7d5      	b.n	800a154 <_puts_r+0x24>
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f000 f9ce 	bl	800a54c <__swsetup_r>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d0dd      	beq.n	800a170 <_puts_r+0x40>
 800a1b4:	f04f 35ff 	mov.w	r5, #4294967295
 800a1b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1ba:	07da      	lsls	r2, r3, #31
 800a1bc:	d405      	bmi.n	800a1ca <_puts_r+0x9a>
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	059b      	lsls	r3, r3, #22
 800a1c2:	d402      	bmi.n	800a1ca <_puts_r+0x9a>
 800a1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1c6:	f001 fa67 	bl	800b698 <__retarget_lock_release_recursive>
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	bd70      	pop	{r4, r5, r6, pc}
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	da04      	bge.n	800a1dc <_puts_r+0xac>
 800a1d2:	69a2      	ldr	r2, [r4, #24]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	dc06      	bgt.n	800a1e6 <_puts_r+0xb6>
 800a1d8:	290a      	cmp	r1, #10
 800a1da:	d004      	beq.n	800a1e6 <_puts_r+0xb6>
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	6022      	str	r2, [r4, #0]
 800a1e2:	7019      	strb	r1, [r3, #0]
 800a1e4:	e7c5      	b.n	800a172 <_puts_r+0x42>
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	f000 f95d 	bl	800a4a8 <__swbuf_r>
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	d1bf      	bne.n	800a172 <_puts_r+0x42>
 800a1f2:	e7df      	b.n	800a1b4 <_puts_r+0x84>
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	250a      	movs	r5, #10
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	6022      	str	r2, [r4, #0]
 800a1fc:	701d      	strb	r5, [r3, #0]
 800a1fe:	e7db      	b.n	800a1b8 <_puts_r+0x88>
 800a200:	0800d0bc 	.word	0x0800d0bc
 800a204:	0800d0dc 	.word	0x0800d0dc
 800a208:	0800d09c 	.word	0x0800d09c

0800a20c <puts>:
 800a20c:	4b02      	ldr	r3, [pc, #8]	; (800a218 <puts+0xc>)
 800a20e:	4601      	mov	r1, r0
 800a210:	6818      	ldr	r0, [r3, #0]
 800a212:	f7ff bf8d 	b.w	800a130 <_puts_r>
 800a216:	bf00      	nop
 800a218:	20000010 	.word	0x20000010

0800a21c <_sbrk_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4d06      	ldr	r5, [pc, #24]	; (800a238 <_sbrk_r+0x1c>)
 800a220:	2300      	movs	r3, #0
 800a222:	4604      	mov	r4, r0
 800a224:	4608      	mov	r0, r1
 800a226:	602b      	str	r3, [r5, #0]
 800a228:	f7f8 fac0 	bl	80027ac <_sbrk>
 800a22c:	1c43      	adds	r3, r0, #1
 800a22e:	d102      	bne.n	800a236 <_sbrk_r+0x1a>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	b103      	cbz	r3, 800a236 <_sbrk_r+0x1a>
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	bd38      	pop	{r3, r4, r5, pc}
 800a238:	20000560 	.word	0x20000560

0800a23c <siprintf>:
 800a23c:	b40e      	push	{r1, r2, r3}
 800a23e:	b500      	push	{lr}
 800a240:	b09c      	sub	sp, #112	; 0x70
 800a242:	ab1d      	add	r3, sp, #116	; 0x74
 800a244:	9002      	str	r0, [sp, #8]
 800a246:	9006      	str	r0, [sp, #24]
 800a248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a24c:	4809      	ldr	r0, [pc, #36]	; (800a274 <siprintf+0x38>)
 800a24e:	9107      	str	r1, [sp, #28]
 800a250:	9104      	str	r1, [sp, #16]
 800a252:	4909      	ldr	r1, [pc, #36]	; (800a278 <siprintf+0x3c>)
 800a254:	f853 2b04 	ldr.w	r2, [r3], #4
 800a258:	9105      	str	r1, [sp, #20]
 800a25a:	6800      	ldr	r0, [r0, #0]
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	a902      	add	r1, sp, #8
 800a260:	f001 fe82 	bl	800bf68 <_svfiprintf_r>
 800a264:	9b02      	ldr	r3, [sp, #8]
 800a266:	2200      	movs	r2, #0
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	b01c      	add	sp, #112	; 0x70
 800a26c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a270:	b003      	add	sp, #12
 800a272:	4770      	bx	lr
 800a274:	20000010 	.word	0x20000010
 800a278:	ffff0208 	.word	0xffff0208

0800a27c <strchr>:
 800a27c:	b2c9      	uxtb	r1, r1
 800a27e:	4603      	mov	r3, r0
 800a280:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a284:	b11a      	cbz	r2, 800a28e <strchr+0x12>
 800a286:	428a      	cmp	r2, r1
 800a288:	d1f9      	bne.n	800a27e <strchr+0x2>
 800a28a:	4618      	mov	r0, r3
 800a28c:	4770      	bx	lr
 800a28e:	2900      	cmp	r1, #0
 800a290:	bf18      	it	ne
 800a292:	2300      	movne	r3, #0
 800a294:	e7f9      	b.n	800a28a <strchr+0xe>
	...

0800a298 <_strtol_l.constprop.0>:
 800a298:	2b01      	cmp	r3, #1
 800a29a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a29e:	d001      	beq.n	800a2a4 <_strtol_l.constprop.0+0xc>
 800a2a0:	2b24      	cmp	r3, #36	; 0x24
 800a2a2:	d906      	bls.n	800a2b2 <_strtol_l.constprop.0+0x1a>
 800a2a4:	f7ff f99a 	bl	80095dc <__errno>
 800a2a8:	2316      	movs	r3, #22
 800a2aa:	6003      	str	r3, [r0, #0]
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a398 <_strtol_l.constprop.0+0x100>
 800a2b6:	460d      	mov	r5, r1
 800a2b8:	462e      	mov	r6, r5
 800a2ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2be:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a2c2:	f017 0708 	ands.w	r7, r7, #8
 800a2c6:	d1f7      	bne.n	800a2b8 <_strtol_l.constprop.0+0x20>
 800a2c8:	2c2d      	cmp	r4, #45	; 0x2d
 800a2ca:	d132      	bne.n	800a332 <_strtol_l.constprop.0+0x9a>
 800a2cc:	782c      	ldrb	r4, [r5, #0]
 800a2ce:	2701      	movs	r7, #1
 800a2d0:	1cb5      	adds	r5, r6, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d05b      	beq.n	800a38e <_strtol_l.constprop.0+0xf6>
 800a2d6:	2b10      	cmp	r3, #16
 800a2d8:	d109      	bne.n	800a2ee <_strtol_l.constprop.0+0x56>
 800a2da:	2c30      	cmp	r4, #48	; 0x30
 800a2dc:	d107      	bne.n	800a2ee <_strtol_l.constprop.0+0x56>
 800a2de:	782c      	ldrb	r4, [r5, #0]
 800a2e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a2e4:	2c58      	cmp	r4, #88	; 0x58
 800a2e6:	d14d      	bne.n	800a384 <_strtol_l.constprop.0+0xec>
 800a2e8:	786c      	ldrb	r4, [r5, #1]
 800a2ea:	2310      	movs	r3, #16
 800a2ec:	3502      	adds	r5, #2
 800a2ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a2f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2f6:	f04f 0c00 	mov.w	ip, #0
 800a2fa:	fbb8 f9f3 	udiv	r9, r8, r3
 800a2fe:	4666      	mov	r6, ip
 800a300:	fb03 8a19 	mls	sl, r3, r9, r8
 800a304:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a308:	f1be 0f09 	cmp.w	lr, #9
 800a30c:	d816      	bhi.n	800a33c <_strtol_l.constprop.0+0xa4>
 800a30e:	4674      	mov	r4, lr
 800a310:	42a3      	cmp	r3, r4
 800a312:	dd24      	ble.n	800a35e <_strtol_l.constprop.0+0xc6>
 800a314:	f1bc 0f00 	cmp.w	ip, #0
 800a318:	db1e      	blt.n	800a358 <_strtol_l.constprop.0+0xc0>
 800a31a:	45b1      	cmp	r9, r6
 800a31c:	d31c      	bcc.n	800a358 <_strtol_l.constprop.0+0xc0>
 800a31e:	d101      	bne.n	800a324 <_strtol_l.constprop.0+0x8c>
 800a320:	45a2      	cmp	sl, r4
 800a322:	db19      	blt.n	800a358 <_strtol_l.constprop.0+0xc0>
 800a324:	fb06 4603 	mla	r6, r6, r3, r4
 800a328:	f04f 0c01 	mov.w	ip, #1
 800a32c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a330:	e7e8      	b.n	800a304 <_strtol_l.constprop.0+0x6c>
 800a332:	2c2b      	cmp	r4, #43	; 0x2b
 800a334:	bf04      	itt	eq
 800a336:	782c      	ldrbeq	r4, [r5, #0]
 800a338:	1cb5      	addeq	r5, r6, #2
 800a33a:	e7ca      	b.n	800a2d2 <_strtol_l.constprop.0+0x3a>
 800a33c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a340:	f1be 0f19 	cmp.w	lr, #25
 800a344:	d801      	bhi.n	800a34a <_strtol_l.constprop.0+0xb2>
 800a346:	3c37      	subs	r4, #55	; 0x37
 800a348:	e7e2      	b.n	800a310 <_strtol_l.constprop.0+0x78>
 800a34a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a34e:	f1be 0f19 	cmp.w	lr, #25
 800a352:	d804      	bhi.n	800a35e <_strtol_l.constprop.0+0xc6>
 800a354:	3c57      	subs	r4, #87	; 0x57
 800a356:	e7db      	b.n	800a310 <_strtol_l.constprop.0+0x78>
 800a358:	f04f 3cff 	mov.w	ip, #4294967295
 800a35c:	e7e6      	b.n	800a32c <_strtol_l.constprop.0+0x94>
 800a35e:	f1bc 0f00 	cmp.w	ip, #0
 800a362:	da05      	bge.n	800a370 <_strtol_l.constprop.0+0xd8>
 800a364:	2322      	movs	r3, #34	; 0x22
 800a366:	6003      	str	r3, [r0, #0]
 800a368:	4646      	mov	r6, r8
 800a36a:	b942      	cbnz	r2, 800a37e <_strtol_l.constprop.0+0xe6>
 800a36c:	4630      	mov	r0, r6
 800a36e:	e79e      	b.n	800a2ae <_strtol_l.constprop.0+0x16>
 800a370:	b107      	cbz	r7, 800a374 <_strtol_l.constprop.0+0xdc>
 800a372:	4276      	negs	r6, r6
 800a374:	2a00      	cmp	r2, #0
 800a376:	d0f9      	beq.n	800a36c <_strtol_l.constprop.0+0xd4>
 800a378:	f1bc 0f00 	cmp.w	ip, #0
 800a37c:	d000      	beq.n	800a380 <_strtol_l.constprop.0+0xe8>
 800a37e:	1e69      	subs	r1, r5, #1
 800a380:	6011      	str	r1, [r2, #0]
 800a382:	e7f3      	b.n	800a36c <_strtol_l.constprop.0+0xd4>
 800a384:	2430      	movs	r4, #48	; 0x30
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1b1      	bne.n	800a2ee <_strtol_l.constprop.0+0x56>
 800a38a:	2308      	movs	r3, #8
 800a38c:	e7af      	b.n	800a2ee <_strtol_l.constprop.0+0x56>
 800a38e:	2c30      	cmp	r4, #48	; 0x30
 800a390:	d0a5      	beq.n	800a2de <_strtol_l.constprop.0+0x46>
 800a392:	230a      	movs	r3, #10
 800a394:	e7ab      	b.n	800a2ee <_strtol_l.constprop.0+0x56>
 800a396:	bf00      	nop
 800a398:	0800cf09 	.word	0x0800cf09

0800a39c <strtol>:
 800a39c:	4613      	mov	r3, r2
 800a39e:	460a      	mov	r2, r1
 800a3a0:	4601      	mov	r1, r0
 800a3a2:	4802      	ldr	r0, [pc, #8]	; (800a3ac <strtol+0x10>)
 800a3a4:	6800      	ldr	r0, [r0, #0]
 800a3a6:	f7ff bf77 	b.w	800a298 <_strtol_l.constprop.0>
 800a3aa:	bf00      	nop
 800a3ac:	20000010 	.word	0x20000010

0800a3b0 <_strtoul_l.constprop.0>:
 800a3b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3b4:	4f36      	ldr	r7, [pc, #216]	; (800a490 <_strtoul_l.constprop.0+0xe0>)
 800a3b6:	4686      	mov	lr, r0
 800a3b8:	460d      	mov	r5, r1
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3c0:	5de6      	ldrb	r6, [r4, r7]
 800a3c2:	f016 0608 	ands.w	r6, r6, #8
 800a3c6:	d1f8      	bne.n	800a3ba <_strtoul_l.constprop.0+0xa>
 800a3c8:	2c2d      	cmp	r4, #45	; 0x2d
 800a3ca:	d12f      	bne.n	800a42c <_strtoul_l.constprop.0+0x7c>
 800a3cc:	782c      	ldrb	r4, [r5, #0]
 800a3ce:	2601      	movs	r6, #1
 800a3d0:	1c85      	adds	r5, r0, #2
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d057      	beq.n	800a486 <_strtoul_l.constprop.0+0xd6>
 800a3d6:	2b10      	cmp	r3, #16
 800a3d8:	d109      	bne.n	800a3ee <_strtoul_l.constprop.0+0x3e>
 800a3da:	2c30      	cmp	r4, #48	; 0x30
 800a3dc:	d107      	bne.n	800a3ee <_strtoul_l.constprop.0+0x3e>
 800a3de:	7828      	ldrb	r0, [r5, #0]
 800a3e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a3e4:	2858      	cmp	r0, #88	; 0x58
 800a3e6:	d149      	bne.n	800a47c <_strtoul_l.constprop.0+0xcc>
 800a3e8:	786c      	ldrb	r4, [r5, #1]
 800a3ea:	2310      	movs	r3, #16
 800a3ec:	3502      	adds	r5, #2
 800a3ee:	f04f 38ff 	mov.w	r8, #4294967295
 800a3f2:	2700      	movs	r7, #0
 800a3f4:	fbb8 f8f3 	udiv	r8, r8, r3
 800a3f8:	fb03 f908 	mul.w	r9, r3, r8
 800a3fc:	ea6f 0909 	mvn.w	r9, r9
 800a400:	4638      	mov	r0, r7
 800a402:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a406:	f1bc 0f09 	cmp.w	ip, #9
 800a40a:	d814      	bhi.n	800a436 <_strtoul_l.constprop.0+0x86>
 800a40c:	4664      	mov	r4, ip
 800a40e:	42a3      	cmp	r3, r4
 800a410:	dd22      	ble.n	800a458 <_strtoul_l.constprop.0+0xa8>
 800a412:	2f00      	cmp	r7, #0
 800a414:	db1d      	blt.n	800a452 <_strtoul_l.constprop.0+0xa2>
 800a416:	4580      	cmp	r8, r0
 800a418:	d31b      	bcc.n	800a452 <_strtoul_l.constprop.0+0xa2>
 800a41a:	d101      	bne.n	800a420 <_strtoul_l.constprop.0+0x70>
 800a41c:	45a1      	cmp	r9, r4
 800a41e:	db18      	blt.n	800a452 <_strtoul_l.constprop.0+0xa2>
 800a420:	fb00 4003 	mla	r0, r0, r3, r4
 800a424:	2701      	movs	r7, #1
 800a426:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a42a:	e7ea      	b.n	800a402 <_strtoul_l.constprop.0+0x52>
 800a42c:	2c2b      	cmp	r4, #43	; 0x2b
 800a42e:	bf04      	itt	eq
 800a430:	782c      	ldrbeq	r4, [r5, #0]
 800a432:	1c85      	addeq	r5, r0, #2
 800a434:	e7cd      	b.n	800a3d2 <_strtoul_l.constprop.0+0x22>
 800a436:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a43a:	f1bc 0f19 	cmp.w	ip, #25
 800a43e:	d801      	bhi.n	800a444 <_strtoul_l.constprop.0+0x94>
 800a440:	3c37      	subs	r4, #55	; 0x37
 800a442:	e7e4      	b.n	800a40e <_strtoul_l.constprop.0+0x5e>
 800a444:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a448:	f1bc 0f19 	cmp.w	ip, #25
 800a44c:	d804      	bhi.n	800a458 <_strtoul_l.constprop.0+0xa8>
 800a44e:	3c57      	subs	r4, #87	; 0x57
 800a450:	e7dd      	b.n	800a40e <_strtoul_l.constprop.0+0x5e>
 800a452:	f04f 37ff 	mov.w	r7, #4294967295
 800a456:	e7e6      	b.n	800a426 <_strtoul_l.constprop.0+0x76>
 800a458:	2f00      	cmp	r7, #0
 800a45a:	da07      	bge.n	800a46c <_strtoul_l.constprop.0+0xbc>
 800a45c:	2322      	movs	r3, #34	; 0x22
 800a45e:	f8ce 3000 	str.w	r3, [lr]
 800a462:	f04f 30ff 	mov.w	r0, #4294967295
 800a466:	b932      	cbnz	r2, 800a476 <_strtoul_l.constprop.0+0xc6>
 800a468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a46c:	b106      	cbz	r6, 800a470 <_strtoul_l.constprop.0+0xc0>
 800a46e:	4240      	negs	r0, r0
 800a470:	2a00      	cmp	r2, #0
 800a472:	d0f9      	beq.n	800a468 <_strtoul_l.constprop.0+0xb8>
 800a474:	b107      	cbz	r7, 800a478 <_strtoul_l.constprop.0+0xc8>
 800a476:	1e69      	subs	r1, r5, #1
 800a478:	6011      	str	r1, [r2, #0]
 800a47a:	e7f5      	b.n	800a468 <_strtoul_l.constprop.0+0xb8>
 800a47c:	2430      	movs	r4, #48	; 0x30
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1b5      	bne.n	800a3ee <_strtoul_l.constprop.0+0x3e>
 800a482:	2308      	movs	r3, #8
 800a484:	e7b3      	b.n	800a3ee <_strtoul_l.constprop.0+0x3e>
 800a486:	2c30      	cmp	r4, #48	; 0x30
 800a488:	d0a9      	beq.n	800a3de <_strtoul_l.constprop.0+0x2e>
 800a48a:	230a      	movs	r3, #10
 800a48c:	e7af      	b.n	800a3ee <_strtoul_l.constprop.0+0x3e>
 800a48e:	bf00      	nop
 800a490:	0800cf09 	.word	0x0800cf09

0800a494 <strtoul>:
 800a494:	4613      	mov	r3, r2
 800a496:	460a      	mov	r2, r1
 800a498:	4601      	mov	r1, r0
 800a49a:	4802      	ldr	r0, [pc, #8]	; (800a4a4 <strtoul+0x10>)
 800a49c:	6800      	ldr	r0, [r0, #0]
 800a49e:	f7ff bf87 	b.w	800a3b0 <_strtoul_l.constprop.0>
 800a4a2:	bf00      	nop
 800a4a4:	20000010 	.word	0x20000010

0800a4a8 <__swbuf_r>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	460e      	mov	r6, r1
 800a4ac:	4614      	mov	r4, r2
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	b118      	cbz	r0, 800a4ba <__swbuf_r+0x12>
 800a4b2:	6983      	ldr	r3, [r0, #24]
 800a4b4:	b90b      	cbnz	r3, 800a4ba <__swbuf_r+0x12>
 800a4b6:	f001 f84b 	bl	800b550 <__sinit>
 800a4ba:	4b21      	ldr	r3, [pc, #132]	; (800a540 <__swbuf_r+0x98>)
 800a4bc:	429c      	cmp	r4, r3
 800a4be:	d12b      	bne.n	800a518 <__swbuf_r+0x70>
 800a4c0:	686c      	ldr	r4, [r5, #4]
 800a4c2:	69a3      	ldr	r3, [r4, #24]
 800a4c4:	60a3      	str	r3, [r4, #8]
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	071a      	lsls	r2, r3, #28
 800a4ca:	d52f      	bpl.n	800a52c <__swbuf_r+0x84>
 800a4cc:	6923      	ldr	r3, [r4, #16]
 800a4ce:	b36b      	cbz	r3, 800a52c <__swbuf_r+0x84>
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	6820      	ldr	r0, [r4, #0]
 800a4d4:	1ac0      	subs	r0, r0, r3
 800a4d6:	6963      	ldr	r3, [r4, #20]
 800a4d8:	b2f6      	uxtb	r6, r6
 800a4da:	4283      	cmp	r3, r0
 800a4dc:	4637      	mov	r7, r6
 800a4de:	dc04      	bgt.n	800a4ea <__swbuf_r+0x42>
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f000 ffa0 	bl	800b428 <_fflush_r>
 800a4e8:	bb30      	cbnz	r0, 800a538 <__swbuf_r+0x90>
 800a4ea:	68a3      	ldr	r3, [r4, #8]
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	60a3      	str	r3, [r4, #8]
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	6022      	str	r2, [r4, #0]
 800a4f6:	701e      	strb	r6, [r3, #0]
 800a4f8:	6963      	ldr	r3, [r4, #20]
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	4283      	cmp	r3, r0
 800a4fe:	d004      	beq.n	800a50a <__swbuf_r+0x62>
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	07db      	lsls	r3, r3, #31
 800a504:	d506      	bpl.n	800a514 <__swbuf_r+0x6c>
 800a506:	2e0a      	cmp	r6, #10
 800a508:	d104      	bne.n	800a514 <__swbuf_r+0x6c>
 800a50a:	4621      	mov	r1, r4
 800a50c:	4628      	mov	r0, r5
 800a50e:	f000 ff8b 	bl	800b428 <_fflush_r>
 800a512:	b988      	cbnz	r0, 800a538 <__swbuf_r+0x90>
 800a514:	4638      	mov	r0, r7
 800a516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a518:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <__swbuf_r+0x9c>)
 800a51a:	429c      	cmp	r4, r3
 800a51c:	d101      	bne.n	800a522 <__swbuf_r+0x7a>
 800a51e:	68ac      	ldr	r4, [r5, #8]
 800a520:	e7cf      	b.n	800a4c2 <__swbuf_r+0x1a>
 800a522:	4b09      	ldr	r3, [pc, #36]	; (800a548 <__swbuf_r+0xa0>)
 800a524:	429c      	cmp	r4, r3
 800a526:	bf08      	it	eq
 800a528:	68ec      	ldreq	r4, [r5, #12]
 800a52a:	e7ca      	b.n	800a4c2 <__swbuf_r+0x1a>
 800a52c:	4621      	mov	r1, r4
 800a52e:	4628      	mov	r0, r5
 800a530:	f000 f80c 	bl	800a54c <__swsetup_r>
 800a534:	2800      	cmp	r0, #0
 800a536:	d0cb      	beq.n	800a4d0 <__swbuf_r+0x28>
 800a538:	f04f 37ff 	mov.w	r7, #4294967295
 800a53c:	e7ea      	b.n	800a514 <__swbuf_r+0x6c>
 800a53e:	bf00      	nop
 800a540:	0800d0bc 	.word	0x0800d0bc
 800a544:	0800d0dc 	.word	0x0800d0dc
 800a548:	0800d09c 	.word	0x0800d09c

0800a54c <__swsetup_r>:
 800a54c:	4b32      	ldr	r3, [pc, #200]	; (800a618 <__swsetup_r+0xcc>)
 800a54e:	b570      	push	{r4, r5, r6, lr}
 800a550:	681d      	ldr	r5, [r3, #0]
 800a552:	4606      	mov	r6, r0
 800a554:	460c      	mov	r4, r1
 800a556:	b125      	cbz	r5, 800a562 <__swsetup_r+0x16>
 800a558:	69ab      	ldr	r3, [r5, #24]
 800a55a:	b913      	cbnz	r3, 800a562 <__swsetup_r+0x16>
 800a55c:	4628      	mov	r0, r5
 800a55e:	f000 fff7 	bl	800b550 <__sinit>
 800a562:	4b2e      	ldr	r3, [pc, #184]	; (800a61c <__swsetup_r+0xd0>)
 800a564:	429c      	cmp	r4, r3
 800a566:	d10f      	bne.n	800a588 <__swsetup_r+0x3c>
 800a568:	686c      	ldr	r4, [r5, #4]
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a570:	0719      	lsls	r1, r3, #28
 800a572:	d42c      	bmi.n	800a5ce <__swsetup_r+0x82>
 800a574:	06dd      	lsls	r5, r3, #27
 800a576:	d411      	bmi.n	800a59c <__swsetup_r+0x50>
 800a578:	2309      	movs	r3, #9
 800a57a:	6033      	str	r3, [r6, #0]
 800a57c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a580:	81a3      	strh	r3, [r4, #12]
 800a582:	f04f 30ff 	mov.w	r0, #4294967295
 800a586:	e03e      	b.n	800a606 <__swsetup_r+0xba>
 800a588:	4b25      	ldr	r3, [pc, #148]	; (800a620 <__swsetup_r+0xd4>)
 800a58a:	429c      	cmp	r4, r3
 800a58c:	d101      	bne.n	800a592 <__swsetup_r+0x46>
 800a58e:	68ac      	ldr	r4, [r5, #8]
 800a590:	e7eb      	b.n	800a56a <__swsetup_r+0x1e>
 800a592:	4b24      	ldr	r3, [pc, #144]	; (800a624 <__swsetup_r+0xd8>)
 800a594:	429c      	cmp	r4, r3
 800a596:	bf08      	it	eq
 800a598:	68ec      	ldreq	r4, [r5, #12]
 800a59a:	e7e6      	b.n	800a56a <__swsetup_r+0x1e>
 800a59c:	0758      	lsls	r0, r3, #29
 800a59e:	d512      	bpl.n	800a5c6 <__swsetup_r+0x7a>
 800a5a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5a2:	b141      	cbz	r1, 800a5b6 <__swsetup_r+0x6a>
 800a5a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5a8:	4299      	cmp	r1, r3
 800a5aa:	d002      	beq.n	800a5b2 <__swsetup_r+0x66>
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f7ff f85d 	bl	800966c <_free_r>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	6363      	str	r3, [r4, #52]	; 0x34
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5bc:	81a3      	strh	r3, [r4, #12]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	6063      	str	r3, [r4, #4]
 800a5c2:	6923      	ldr	r3, [r4, #16]
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	f043 0308 	orr.w	r3, r3, #8
 800a5cc:	81a3      	strh	r3, [r4, #12]
 800a5ce:	6923      	ldr	r3, [r4, #16]
 800a5d0:	b94b      	cbnz	r3, 800a5e6 <__swsetup_r+0x9a>
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5dc:	d003      	beq.n	800a5e6 <__swsetup_r+0x9a>
 800a5de:	4621      	mov	r1, r4
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f001 f87f 	bl	800b6e4 <__smakebuf_r>
 800a5e6:	89a0      	ldrh	r0, [r4, #12]
 800a5e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5ec:	f010 0301 	ands.w	r3, r0, #1
 800a5f0:	d00a      	beq.n	800a608 <__swsetup_r+0xbc>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	60a3      	str	r3, [r4, #8]
 800a5f6:	6963      	ldr	r3, [r4, #20]
 800a5f8:	425b      	negs	r3, r3
 800a5fa:	61a3      	str	r3, [r4, #24]
 800a5fc:	6923      	ldr	r3, [r4, #16]
 800a5fe:	b943      	cbnz	r3, 800a612 <__swsetup_r+0xc6>
 800a600:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a604:	d1ba      	bne.n	800a57c <__swsetup_r+0x30>
 800a606:	bd70      	pop	{r4, r5, r6, pc}
 800a608:	0781      	lsls	r1, r0, #30
 800a60a:	bf58      	it	pl
 800a60c:	6963      	ldrpl	r3, [r4, #20]
 800a60e:	60a3      	str	r3, [r4, #8]
 800a610:	e7f4      	b.n	800a5fc <__swsetup_r+0xb0>
 800a612:	2000      	movs	r0, #0
 800a614:	e7f7      	b.n	800a606 <__swsetup_r+0xba>
 800a616:	bf00      	nop
 800a618:	20000010 	.word	0x20000010
 800a61c:	0800d0bc 	.word	0x0800d0bc
 800a620:	0800d0dc 	.word	0x0800d0dc
 800a624:	0800d09c 	.word	0x0800d09c

0800a628 <quorem>:
 800a628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	6903      	ldr	r3, [r0, #16]
 800a62e:	690c      	ldr	r4, [r1, #16]
 800a630:	42a3      	cmp	r3, r4
 800a632:	4607      	mov	r7, r0
 800a634:	f2c0 8081 	blt.w	800a73a <quorem+0x112>
 800a638:	3c01      	subs	r4, #1
 800a63a:	f101 0814 	add.w	r8, r1, #20
 800a63e:	f100 0514 	add.w	r5, r0, #20
 800a642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a64c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a650:	3301      	adds	r3, #1
 800a652:	429a      	cmp	r2, r3
 800a654:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a658:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a65c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a660:	d331      	bcc.n	800a6c6 <quorem+0x9e>
 800a662:	f04f 0e00 	mov.w	lr, #0
 800a666:	4640      	mov	r0, r8
 800a668:	46ac      	mov	ip, r5
 800a66a:	46f2      	mov	sl, lr
 800a66c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a670:	b293      	uxth	r3, r2
 800a672:	fb06 e303 	mla	r3, r6, r3, lr
 800a676:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	ebaa 0303 	sub.w	r3, sl, r3
 800a680:	f8dc a000 	ldr.w	sl, [ip]
 800a684:	0c12      	lsrs	r2, r2, #16
 800a686:	fa13 f38a 	uxtah	r3, r3, sl
 800a68a:	fb06 e202 	mla	r2, r6, r2, lr
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	9b00      	ldr	r3, [sp, #0]
 800a692:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a696:	b292      	uxth	r2, r2
 800a698:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a69c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6a0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a6a4:	4581      	cmp	r9, r0
 800a6a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6aa:	f84c 3b04 	str.w	r3, [ip], #4
 800a6ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6b2:	d2db      	bcs.n	800a66c <quorem+0x44>
 800a6b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6b8:	b92b      	cbnz	r3, 800a6c6 <quorem+0x9e>
 800a6ba:	9b01      	ldr	r3, [sp, #4]
 800a6bc:	3b04      	subs	r3, #4
 800a6be:	429d      	cmp	r5, r3
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	d32e      	bcc.n	800a722 <quorem+0xfa>
 800a6c4:	613c      	str	r4, [r7, #16]
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	f001 fada 	bl	800bc80 <__mcmp>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	db24      	blt.n	800a71a <quorem+0xf2>
 800a6d0:	3601      	adds	r6, #1
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f04f 0c00 	mov.w	ip, #0
 800a6d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6dc:	f8d0 e000 	ldr.w	lr, [r0]
 800a6e0:	b293      	uxth	r3, r2
 800a6e2:	ebac 0303 	sub.w	r3, ip, r3
 800a6e6:	0c12      	lsrs	r2, r2, #16
 800a6e8:	fa13 f38e 	uxtah	r3, r3, lr
 800a6ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6fa:	45c1      	cmp	r9, r8
 800a6fc:	f840 3b04 	str.w	r3, [r0], #4
 800a700:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a704:	d2e8      	bcs.n	800a6d8 <quorem+0xb0>
 800a706:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a70a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a70e:	b922      	cbnz	r2, 800a71a <quorem+0xf2>
 800a710:	3b04      	subs	r3, #4
 800a712:	429d      	cmp	r5, r3
 800a714:	461a      	mov	r2, r3
 800a716:	d30a      	bcc.n	800a72e <quorem+0x106>
 800a718:	613c      	str	r4, [r7, #16]
 800a71a:	4630      	mov	r0, r6
 800a71c:	b003      	add	sp, #12
 800a71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a722:	6812      	ldr	r2, [r2, #0]
 800a724:	3b04      	subs	r3, #4
 800a726:	2a00      	cmp	r2, #0
 800a728:	d1cc      	bne.n	800a6c4 <quorem+0x9c>
 800a72a:	3c01      	subs	r4, #1
 800a72c:	e7c7      	b.n	800a6be <quorem+0x96>
 800a72e:	6812      	ldr	r2, [r2, #0]
 800a730:	3b04      	subs	r3, #4
 800a732:	2a00      	cmp	r2, #0
 800a734:	d1f0      	bne.n	800a718 <quorem+0xf0>
 800a736:	3c01      	subs	r4, #1
 800a738:	e7eb      	b.n	800a712 <quorem+0xea>
 800a73a:	2000      	movs	r0, #0
 800a73c:	e7ee      	b.n	800a71c <quorem+0xf4>
	...

0800a740 <_dtoa_r>:
 800a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	ed2d 8b04 	vpush	{d8-d9}
 800a748:	ec57 6b10 	vmov	r6, r7, d0
 800a74c:	b093      	sub	sp, #76	; 0x4c
 800a74e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a750:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a754:	9106      	str	r1, [sp, #24]
 800a756:	ee10 aa10 	vmov	sl, s0
 800a75a:	4604      	mov	r4, r0
 800a75c:	9209      	str	r2, [sp, #36]	; 0x24
 800a75e:	930c      	str	r3, [sp, #48]	; 0x30
 800a760:	46bb      	mov	fp, r7
 800a762:	b975      	cbnz	r5, 800a782 <_dtoa_r+0x42>
 800a764:	2010      	movs	r0, #16
 800a766:	f7fe ff63 	bl	8009630 <malloc>
 800a76a:	4602      	mov	r2, r0
 800a76c:	6260      	str	r0, [r4, #36]	; 0x24
 800a76e:	b920      	cbnz	r0, 800a77a <_dtoa_r+0x3a>
 800a770:	4ba7      	ldr	r3, [pc, #668]	; (800aa10 <_dtoa_r+0x2d0>)
 800a772:	21ea      	movs	r1, #234	; 0xea
 800a774:	48a7      	ldr	r0, [pc, #668]	; (800aa14 <_dtoa_r+0x2d4>)
 800a776:	f001 fea7 	bl	800c4c8 <__assert_func>
 800a77a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a77e:	6005      	str	r5, [r0, #0]
 800a780:	60c5      	str	r5, [r0, #12]
 800a782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a784:	6819      	ldr	r1, [r3, #0]
 800a786:	b151      	cbz	r1, 800a79e <_dtoa_r+0x5e>
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	604a      	str	r2, [r1, #4]
 800a78c:	2301      	movs	r3, #1
 800a78e:	4093      	lsls	r3, r2
 800a790:	608b      	str	r3, [r1, #8]
 800a792:	4620      	mov	r0, r4
 800a794:	f001 f832 	bl	800b7fc <_Bfree>
 800a798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a79a:	2200      	movs	r2, #0
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	1e3b      	subs	r3, r7, #0
 800a7a0:	bfaa      	itet	ge
 800a7a2:	2300      	movge	r3, #0
 800a7a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a7a8:	f8c8 3000 	strge.w	r3, [r8]
 800a7ac:	4b9a      	ldr	r3, [pc, #616]	; (800aa18 <_dtoa_r+0x2d8>)
 800a7ae:	bfbc      	itt	lt
 800a7b0:	2201      	movlt	r2, #1
 800a7b2:	f8c8 2000 	strlt.w	r2, [r8]
 800a7b6:	ea33 030b 	bics.w	r3, r3, fp
 800a7ba:	d11b      	bne.n	800a7f4 <_dtoa_r+0xb4>
 800a7bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7be:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7c8:	4333      	orrs	r3, r6
 800a7ca:	f000 8592 	beq.w	800b2f2 <_dtoa_r+0xbb2>
 800a7ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7d0:	b963      	cbnz	r3, 800a7ec <_dtoa_r+0xac>
 800a7d2:	4b92      	ldr	r3, [pc, #584]	; (800aa1c <_dtoa_r+0x2dc>)
 800a7d4:	e022      	b.n	800a81c <_dtoa_r+0xdc>
 800a7d6:	4b92      	ldr	r3, [pc, #584]	; (800aa20 <_dtoa_r+0x2e0>)
 800a7d8:	9301      	str	r3, [sp, #4]
 800a7da:	3308      	adds	r3, #8
 800a7dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	9801      	ldr	r0, [sp, #4]
 800a7e2:	b013      	add	sp, #76	; 0x4c
 800a7e4:	ecbd 8b04 	vpop	{d8-d9}
 800a7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ec:	4b8b      	ldr	r3, [pc, #556]	; (800aa1c <_dtoa_r+0x2dc>)
 800a7ee:	9301      	str	r3, [sp, #4]
 800a7f0:	3303      	adds	r3, #3
 800a7f2:	e7f3      	b.n	800a7dc <_dtoa_r+0x9c>
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	4650      	mov	r0, sl
 800a7fa:	4659      	mov	r1, fp
 800a7fc:	f7f6 f94c 	bl	8000a98 <__aeabi_dcmpeq>
 800a800:	ec4b ab19 	vmov	d9, sl, fp
 800a804:	4680      	mov	r8, r0
 800a806:	b158      	cbz	r0, 800a820 <_dtoa_r+0xe0>
 800a808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a80a:	2301      	movs	r3, #1
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 856b 	beq.w	800b2ec <_dtoa_r+0xbac>
 800a816:	4883      	ldr	r0, [pc, #524]	; (800aa24 <_dtoa_r+0x2e4>)
 800a818:	6018      	str	r0, [r3, #0]
 800a81a:	1e43      	subs	r3, r0, #1
 800a81c:	9301      	str	r3, [sp, #4]
 800a81e:	e7df      	b.n	800a7e0 <_dtoa_r+0xa0>
 800a820:	ec4b ab10 	vmov	d0, sl, fp
 800a824:	aa10      	add	r2, sp, #64	; 0x40
 800a826:	a911      	add	r1, sp, #68	; 0x44
 800a828:	4620      	mov	r0, r4
 800a82a:	f001 facf 	bl	800bdcc <__d2b>
 800a82e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a832:	ee08 0a10 	vmov	s16, r0
 800a836:	2d00      	cmp	r5, #0
 800a838:	f000 8084 	beq.w	800a944 <_dtoa_r+0x204>
 800a83c:	ee19 3a90 	vmov	r3, s19
 800a840:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a844:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a848:	4656      	mov	r6, sl
 800a84a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a84e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a852:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a856:	4b74      	ldr	r3, [pc, #464]	; (800aa28 <_dtoa_r+0x2e8>)
 800a858:	2200      	movs	r2, #0
 800a85a:	4630      	mov	r0, r6
 800a85c:	4639      	mov	r1, r7
 800a85e:	f7f5 fcfb 	bl	8000258 <__aeabi_dsub>
 800a862:	a365      	add	r3, pc, #404	; (adr r3, 800a9f8 <_dtoa_r+0x2b8>)
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f7f5 feae 	bl	80005c8 <__aeabi_dmul>
 800a86c:	a364      	add	r3, pc, #400	; (adr r3, 800aa00 <_dtoa_r+0x2c0>)
 800a86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a872:	f7f5 fcf3 	bl	800025c <__adddf3>
 800a876:	4606      	mov	r6, r0
 800a878:	4628      	mov	r0, r5
 800a87a:	460f      	mov	r7, r1
 800a87c:	f7f5 fe3a 	bl	80004f4 <__aeabi_i2d>
 800a880:	a361      	add	r3, pc, #388	; (adr r3, 800aa08 <_dtoa_r+0x2c8>)
 800a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a886:	f7f5 fe9f 	bl	80005c8 <__aeabi_dmul>
 800a88a:	4602      	mov	r2, r0
 800a88c:	460b      	mov	r3, r1
 800a88e:	4630      	mov	r0, r6
 800a890:	4639      	mov	r1, r7
 800a892:	f7f5 fce3 	bl	800025c <__adddf3>
 800a896:	4606      	mov	r6, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	f7f6 f945 	bl	8000b28 <__aeabi_d2iz>
 800a89e:	2200      	movs	r2, #0
 800a8a0:	9000      	str	r0, [sp, #0]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	f7f6 f900 	bl	8000aac <__aeabi_dcmplt>
 800a8ac:	b150      	cbz	r0, 800a8c4 <_dtoa_r+0x184>
 800a8ae:	9800      	ldr	r0, [sp, #0]
 800a8b0:	f7f5 fe20 	bl	80004f4 <__aeabi_i2d>
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	463b      	mov	r3, r7
 800a8b8:	f7f6 f8ee 	bl	8000a98 <__aeabi_dcmpeq>
 800a8bc:	b910      	cbnz	r0, 800a8c4 <_dtoa_r+0x184>
 800a8be:	9b00      	ldr	r3, [sp, #0]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	9b00      	ldr	r3, [sp, #0]
 800a8c6:	2b16      	cmp	r3, #22
 800a8c8:	d85a      	bhi.n	800a980 <_dtoa_r+0x240>
 800a8ca:	9a00      	ldr	r2, [sp, #0]
 800a8cc:	4b57      	ldr	r3, [pc, #348]	; (800aa2c <_dtoa_r+0x2ec>)
 800a8ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	ec51 0b19 	vmov	r0, r1, d9
 800a8da:	f7f6 f8e7 	bl	8000aac <__aeabi_dcmplt>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d050      	beq.n	800a984 <_dtoa_r+0x244>
 800a8e2:	9b00      	ldr	r3, [sp, #0]
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8ee:	1b5d      	subs	r5, r3, r5
 800a8f0:	1e6b      	subs	r3, r5, #1
 800a8f2:	9305      	str	r3, [sp, #20]
 800a8f4:	bf45      	ittet	mi
 800a8f6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a8fa:	9304      	strmi	r3, [sp, #16]
 800a8fc:	2300      	movpl	r3, #0
 800a8fe:	2300      	movmi	r3, #0
 800a900:	bf4c      	ite	mi
 800a902:	9305      	strmi	r3, [sp, #20]
 800a904:	9304      	strpl	r3, [sp, #16]
 800a906:	9b00      	ldr	r3, [sp, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	db3d      	blt.n	800a988 <_dtoa_r+0x248>
 800a90c:	9b05      	ldr	r3, [sp, #20]
 800a90e:	9a00      	ldr	r2, [sp, #0]
 800a910:	920a      	str	r2, [sp, #40]	; 0x28
 800a912:	4413      	add	r3, r2
 800a914:	9305      	str	r3, [sp, #20]
 800a916:	2300      	movs	r3, #0
 800a918:	9307      	str	r3, [sp, #28]
 800a91a:	9b06      	ldr	r3, [sp, #24]
 800a91c:	2b09      	cmp	r3, #9
 800a91e:	f200 8089 	bhi.w	800aa34 <_dtoa_r+0x2f4>
 800a922:	2b05      	cmp	r3, #5
 800a924:	bfc4      	itt	gt
 800a926:	3b04      	subgt	r3, #4
 800a928:	9306      	strgt	r3, [sp, #24]
 800a92a:	9b06      	ldr	r3, [sp, #24]
 800a92c:	f1a3 0302 	sub.w	r3, r3, #2
 800a930:	bfcc      	ite	gt
 800a932:	2500      	movgt	r5, #0
 800a934:	2501      	movle	r5, #1
 800a936:	2b03      	cmp	r3, #3
 800a938:	f200 8087 	bhi.w	800aa4a <_dtoa_r+0x30a>
 800a93c:	e8df f003 	tbb	[pc, r3]
 800a940:	59383a2d 	.word	0x59383a2d
 800a944:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a948:	441d      	add	r5, r3
 800a94a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a94e:	2b20      	cmp	r3, #32
 800a950:	bfc1      	itttt	gt
 800a952:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a956:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a95a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a95e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a962:	bfda      	itte	le
 800a964:	f1c3 0320 	rsble	r3, r3, #32
 800a968:	fa06 f003 	lslle.w	r0, r6, r3
 800a96c:	4318      	orrgt	r0, r3
 800a96e:	f7f5 fdb1 	bl	80004d4 <__aeabi_ui2d>
 800a972:	2301      	movs	r3, #1
 800a974:	4606      	mov	r6, r0
 800a976:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a97a:	3d01      	subs	r5, #1
 800a97c:	930e      	str	r3, [sp, #56]	; 0x38
 800a97e:	e76a      	b.n	800a856 <_dtoa_r+0x116>
 800a980:	2301      	movs	r3, #1
 800a982:	e7b2      	b.n	800a8ea <_dtoa_r+0x1aa>
 800a984:	900b      	str	r0, [sp, #44]	; 0x2c
 800a986:	e7b1      	b.n	800a8ec <_dtoa_r+0x1ac>
 800a988:	9b04      	ldr	r3, [sp, #16]
 800a98a:	9a00      	ldr	r2, [sp, #0]
 800a98c:	1a9b      	subs	r3, r3, r2
 800a98e:	9304      	str	r3, [sp, #16]
 800a990:	4253      	negs	r3, r2
 800a992:	9307      	str	r3, [sp, #28]
 800a994:	2300      	movs	r3, #0
 800a996:	930a      	str	r3, [sp, #40]	; 0x28
 800a998:	e7bf      	b.n	800a91a <_dtoa_r+0x1da>
 800a99a:	2300      	movs	r3, #0
 800a99c:	9308      	str	r3, [sp, #32]
 800a99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	dc55      	bgt.n	800aa50 <_dtoa_r+0x310>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a9ae:	e00c      	b.n	800a9ca <_dtoa_r+0x28a>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e7f3      	b.n	800a99c <_dtoa_r+0x25c>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9b8:	9308      	str	r3, [sp, #32]
 800a9ba:	9b00      	ldr	r3, [sp, #0]
 800a9bc:	4413      	add	r3, r2
 800a9be:	9302      	str	r3, [sp, #8]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	9303      	str	r3, [sp, #12]
 800a9c6:	bfb8      	it	lt
 800a9c8:	2301      	movlt	r3, #1
 800a9ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	6042      	str	r2, [r0, #4]
 800a9d0:	2204      	movs	r2, #4
 800a9d2:	f102 0614 	add.w	r6, r2, #20
 800a9d6:	429e      	cmp	r6, r3
 800a9d8:	6841      	ldr	r1, [r0, #4]
 800a9da:	d93d      	bls.n	800aa58 <_dtoa_r+0x318>
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f000 fecd 	bl	800b77c <_Balloc>
 800a9e2:	9001      	str	r0, [sp, #4]
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d13b      	bne.n	800aa60 <_dtoa_r+0x320>
 800a9e8:	4b11      	ldr	r3, [pc, #68]	; (800aa30 <_dtoa_r+0x2f0>)
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a9f0:	e6c0      	b.n	800a774 <_dtoa_r+0x34>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e7df      	b.n	800a9b6 <_dtoa_r+0x276>
 800a9f6:	bf00      	nop
 800a9f8:	636f4361 	.word	0x636f4361
 800a9fc:	3fd287a7 	.word	0x3fd287a7
 800aa00:	8b60c8b3 	.word	0x8b60c8b3
 800aa04:	3fc68a28 	.word	0x3fc68a28
 800aa08:	509f79fb 	.word	0x509f79fb
 800aa0c:	3fd34413 	.word	0x3fd34413
 800aa10:	0800d016 	.word	0x0800d016
 800aa14:	0800d02d 	.word	0x0800d02d
 800aa18:	7ff00000 	.word	0x7ff00000
 800aa1c:	0800d012 	.word	0x0800d012
 800aa20:	0800d009 	.word	0x0800d009
 800aa24:	0800cee5 	.word	0x0800cee5
 800aa28:	3ff80000 	.word	0x3ff80000
 800aa2c:	0800d180 	.word	0x0800d180
 800aa30:	0800d088 	.word	0x0800d088
 800aa34:	2501      	movs	r5, #1
 800aa36:	2300      	movs	r3, #0
 800aa38:	9306      	str	r3, [sp, #24]
 800aa3a:	9508      	str	r5, [sp, #32]
 800aa3c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa44:	2200      	movs	r2, #0
 800aa46:	2312      	movs	r3, #18
 800aa48:	e7b0      	b.n	800a9ac <_dtoa_r+0x26c>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	9308      	str	r3, [sp, #32]
 800aa4e:	e7f5      	b.n	800aa3c <_dtoa_r+0x2fc>
 800aa50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa56:	e7b8      	b.n	800a9ca <_dtoa_r+0x28a>
 800aa58:	3101      	adds	r1, #1
 800aa5a:	6041      	str	r1, [r0, #4]
 800aa5c:	0052      	lsls	r2, r2, #1
 800aa5e:	e7b8      	b.n	800a9d2 <_dtoa_r+0x292>
 800aa60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa62:	9a01      	ldr	r2, [sp, #4]
 800aa64:	601a      	str	r2, [r3, #0]
 800aa66:	9b03      	ldr	r3, [sp, #12]
 800aa68:	2b0e      	cmp	r3, #14
 800aa6a:	f200 809d 	bhi.w	800aba8 <_dtoa_r+0x468>
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	f000 809a 	beq.w	800aba8 <_dtoa_r+0x468>
 800aa74:	9b00      	ldr	r3, [sp, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	dd32      	ble.n	800aae0 <_dtoa_r+0x3a0>
 800aa7a:	4ab7      	ldr	r2, [pc, #732]	; (800ad58 <_dtoa_r+0x618>)
 800aa7c:	f003 030f 	and.w	r3, r3, #15
 800aa80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa88:	9b00      	ldr	r3, [sp, #0]
 800aa8a:	05d8      	lsls	r0, r3, #23
 800aa8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800aa90:	d516      	bpl.n	800aac0 <_dtoa_r+0x380>
 800aa92:	4bb2      	ldr	r3, [pc, #712]	; (800ad5c <_dtoa_r+0x61c>)
 800aa94:	ec51 0b19 	vmov	r0, r1, d9
 800aa98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa9c:	f7f5 febe 	bl	800081c <__aeabi_ddiv>
 800aaa0:	f007 070f 	and.w	r7, r7, #15
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	468b      	mov	fp, r1
 800aaa8:	2503      	movs	r5, #3
 800aaaa:	4eac      	ldr	r6, [pc, #688]	; (800ad5c <_dtoa_r+0x61c>)
 800aaac:	b957      	cbnz	r7, 800aac4 <_dtoa_r+0x384>
 800aaae:	4642      	mov	r2, r8
 800aab0:	464b      	mov	r3, r9
 800aab2:	4650      	mov	r0, sl
 800aab4:	4659      	mov	r1, fp
 800aab6:	f7f5 feb1 	bl	800081c <__aeabi_ddiv>
 800aaba:	4682      	mov	sl, r0
 800aabc:	468b      	mov	fp, r1
 800aabe:	e028      	b.n	800ab12 <_dtoa_r+0x3d2>
 800aac0:	2502      	movs	r5, #2
 800aac2:	e7f2      	b.n	800aaaa <_dtoa_r+0x36a>
 800aac4:	07f9      	lsls	r1, r7, #31
 800aac6:	d508      	bpl.n	800aada <_dtoa_r+0x39a>
 800aac8:	4640      	mov	r0, r8
 800aaca:	4649      	mov	r1, r9
 800aacc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aad0:	f7f5 fd7a 	bl	80005c8 <__aeabi_dmul>
 800aad4:	3501      	adds	r5, #1
 800aad6:	4680      	mov	r8, r0
 800aad8:	4689      	mov	r9, r1
 800aada:	107f      	asrs	r7, r7, #1
 800aadc:	3608      	adds	r6, #8
 800aade:	e7e5      	b.n	800aaac <_dtoa_r+0x36c>
 800aae0:	f000 809b 	beq.w	800ac1a <_dtoa_r+0x4da>
 800aae4:	9b00      	ldr	r3, [sp, #0]
 800aae6:	4f9d      	ldr	r7, [pc, #628]	; (800ad5c <_dtoa_r+0x61c>)
 800aae8:	425e      	negs	r6, r3
 800aaea:	4b9b      	ldr	r3, [pc, #620]	; (800ad58 <_dtoa_r+0x618>)
 800aaec:	f006 020f 	and.w	r2, r6, #15
 800aaf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	ec51 0b19 	vmov	r0, r1, d9
 800aafc:	f7f5 fd64 	bl	80005c8 <__aeabi_dmul>
 800ab00:	1136      	asrs	r6, r6, #4
 800ab02:	4682      	mov	sl, r0
 800ab04:	468b      	mov	fp, r1
 800ab06:	2300      	movs	r3, #0
 800ab08:	2502      	movs	r5, #2
 800ab0a:	2e00      	cmp	r6, #0
 800ab0c:	d17a      	bne.n	800ac04 <_dtoa_r+0x4c4>
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1d3      	bne.n	800aaba <_dtoa_r+0x37a>
 800ab12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f000 8082 	beq.w	800ac1e <_dtoa_r+0x4de>
 800ab1a:	4b91      	ldr	r3, [pc, #580]	; (800ad60 <_dtoa_r+0x620>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	4650      	mov	r0, sl
 800ab20:	4659      	mov	r1, fp
 800ab22:	f7f5 ffc3 	bl	8000aac <__aeabi_dcmplt>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d079      	beq.n	800ac1e <_dtoa_r+0x4de>
 800ab2a:	9b03      	ldr	r3, [sp, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d076      	beq.n	800ac1e <_dtoa_r+0x4de>
 800ab30:	9b02      	ldr	r3, [sp, #8]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	dd36      	ble.n	800aba4 <_dtoa_r+0x464>
 800ab36:	9b00      	ldr	r3, [sp, #0]
 800ab38:	4650      	mov	r0, sl
 800ab3a:	4659      	mov	r1, fp
 800ab3c:	1e5f      	subs	r7, r3, #1
 800ab3e:	2200      	movs	r2, #0
 800ab40:	4b88      	ldr	r3, [pc, #544]	; (800ad64 <_dtoa_r+0x624>)
 800ab42:	f7f5 fd41 	bl	80005c8 <__aeabi_dmul>
 800ab46:	9e02      	ldr	r6, [sp, #8]
 800ab48:	4682      	mov	sl, r0
 800ab4a:	468b      	mov	fp, r1
 800ab4c:	3501      	adds	r5, #1
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f7f5 fcd0 	bl	80004f4 <__aeabi_i2d>
 800ab54:	4652      	mov	r2, sl
 800ab56:	465b      	mov	r3, fp
 800ab58:	f7f5 fd36 	bl	80005c8 <__aeabi_dmul>
 800ab5c:	4b82      	ldr	r3, [pc, #520]	; (800ad68 <_dtoa_r+0x628>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f7f5 fb7c 	bl	800025c <__adddf3>
 800ab64:	46d0      	mov	r8, sl
 800ab66:	46d9      	mov	r9, fp
 800ab68:	4682      	mov	sl, r0
 800ab6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ab6e:	2e00      	cmp	r6, #0
 800ab70:	d158      	bne.n	800ac24 <_dtoa_r+0x4e4>
 800ab72:	4b7e      	ldr	r3, [pc, #504]	; (800ad6c <_dtoa_r+0x62c>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	4640      	mov	r0, r8
 800ab78:	4649      	mov	r1, r9
 800ab7a:	f7f5 fb6d 	bl	8000258 <__aeabi_dsub>
 800ab7e:	4652      	mov	r2, sl
 800ab80:	465b      	mov	r3, fp
 800ab82:	4680      	mov	r8, r0
 800ab84:	4689      	mov	r9, r1
 800ab86:	f7f5 ffaf 	bl	8000ae8 <__aeabi_dcmpgt>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	f040 8295 	bne.w	800b0ba <_dtoa_r+0x97a>
 800ab90:	4652      	mov	r2, sl
 800ab92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab96:	4640      	mov	r0, r8
 800ab98:	4649      	mov	r1, r9
 800ab9a:	f7f5 ff87 	bl	8000aac <__aeabi_dcmplt>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	f040 8289 	bne.w	800b0b6 <_dtoa_r+0x976>
 800aba4:	ec5b ab19 	vmov	sl, fp, d9
 800aba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f2c0 8148 	blt.w	800ae40 <_dtoa_r+0x700>
 800abb0:	9a00      	ldr	r2, [sp, #0]
 800abb2:	2a0e      	cmp	r2, #14
 800abb4:	f300 8144 	bgt.w	800ae40 <_dtoa_r+0x700>
 800abb8:	4b67      	ldr	r3, [pc, #412]	; (800ad58 <_dtoa_r+0x618>)
 800abba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f280 80d5 	bge.w	800ad74 <_dtoa_r+0x634>
 800abca:	9b03      	ldr	r3, [sp, #12]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f300 80d1 	bgt.w	800ad74 <_dtoa_r+0x634>
 800abd2:	f040 826f 	bne.w	800b0b4 <_dtoa_r+0x974>
 800abd6:	4b65      	ldr	r3, [pc, #404]	; (800ad6c <_dtoa_r+0x62c>)
 800abd8:	2200      	movs	r2, #0
 800abda:	4640      	mov	r0, r8
 800abdc:	4649      	mov	r1, r9
 800abde:	f7f5 fcf3 	bl	80005c8 <__aeabi_dmul>
 800abe2:	4652      	mov	r2, sl
 800abe4:	465b      	mov	r3, fp
 800abe6:	f7f5 ff75 	bl	8000ad4 <__aeabi_dcmpge>
 800abea:	9e03      	ldr	r6, [sp, #12]
 800abec:	4637      	mov	r7, r6
 800abee:	2800      	cmp	r0, #0
 800abf0:	f040 8245 	bne.w	800b07e <_dtoa_r+0x93e>
 800abf4:	9d01      	ldr	r5, [sp, #4]
 800abf6:	2331      	movs	r3, #49	; 0x31
 800abf8:	f805 3b01 	strb.w	r3, [r5], #1
 800abfc:	9b00      	ldr	r3, [sp, #0]
 800abfe:	3301      	adds	r3, #1
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	e240      	b.n	800b086 <_dtoa_r+0x946>
 800ac04:	07f2      	lsls	r2, r6, #31
 800ac06:	d505      	bpl.n	800ac14 <_dtoa_r+0x4d4>
 800ac08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac0c:	f7f5 fcdc 	bl	80005c8 <__aeabi_dmul>
 800ac10:	3501      	adds	r5, #1
 800ac12:	2301      	movs	r3, #1
 800ac14:	1076      	asrs	r6, r6, #1
 800ac16:	3708      	adds	r7, #8
 800ac18:	e777      	b.n	800ab0a <_dtoa_r+0x3ca>
 800ac1a:	2502      	movs	r5, #2
 800ac1c:	e779      	b.n	800ab12 <_dtoa_r+0x3d2>
 800ac1e:	9f00      	ldr	r7, [sp, #0]
 800ac20:	9e03      	ldr	r6, [sp, #12]
 800ac22:	e794      	b.n	800ab4e <_dtoa_r+0x40e>
 800ac24:	9901      	ldr	r1, [sp, #4]
 800ac26:	4b4c      	ldr	r3, [pc, #304]	; (800ad58 <_dtoa_r+0x618>)
 800ac28:	4431      	add	r1, r6
 800ac2a:	910d      	str	r1, [sp, #52]	; 0x34
 800ac2c:	9908      	ldr	r1, [sp, #32]
 800ac2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac36:	2900      	cmp	r1, #0
 800ac38:	d043      	beq.n	800acc2 <_dtoa_r+0x582>
 800ac3a:	494d      	ldr	r1, [pc, #308]	; (800ad70 <_dtoa_r+0x630>)
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	f7f5 fded 	bl	800081c <__aeabi_ddiv>
 800ac42:	4652      	mov	r2, sl
 800ac44:	465b      	mov	r3, fp
 800ac46:	f7f5 fb07 	bl	8000258 <__aeabi_dsub>
 800ac4a:	9d01      	ldr	r5, [sp, #4]
 800ac4c:	4682      	mov	sl, r0
 800ac4e:	468b      	mov	fp, r1
 800ac50:	4649      	mov	r1, r9
 800ac52:	4640      	mov	r0, r8
 800ac54:	f7f5 ff68 	bl	8000b28 <__aeabi_d2iz>
 800ac58:	4606      	mov	r6, r0
 800ac5a:	f7f5 fc4b 	bl	80004f4 <__aeabi_i2d>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	4640      	mov	r0, r8
 800ac64:	4649      	mov	r1, r9
 800ac66:	f7f5 faf7 	bl	8000258 <__aeabi_dsub>
 800ac6a:	3630      	adds	r6, #48	; 0x30
 800ac6c:	f805 6b01 	strb.w	r6, [r5], #1
 800ac70:	4652      	mov	r2, sl
 800ac72:	465b      	mov	r3, fp
 800ac74:	4680      	mov	r8, r0
 800ac76:	4689      	mov	r9, r1
 800ac78:	f7f5 ff18 	bl	8000aac <__aeabi_dcmplt>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d163      	bne.n	800ad48 <_dtoa_r+0x608>
 800ac80:	4642      	mov	r2, r8
 800ac82:	464b      	mov	r3, r9
 800ac84:	4936      	ldr	r1, [pc, #216]	; (800ad60 <_dtoa_r+0x620>)
 800ac86:	2000      	movs	r0, #0
 800ac88:	f7f5 fae6 	bl	8000258 <__aeabi_dsub>
 800ac8c:	4652      	mov	r2, sl
 800ac8e:	465b      	mov	r3, fp
 800ac90:	f7f5 ff0c 	bl	8000aac <__aeabi_dcmplt>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f040 80b5 	bne.w	800ae04 <_dtoa_r+0x6c4>
 800ac9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac9c:	429d      	cmp	r5, r3
 800ac9e:	d081      	beq.n	800aba4 <_dtoa_r+0x464>
 800aca0:	4b30      	ldr	r3, [pc, #192]	; (800ad64 <_dtoa_r+0x624>)
 800aca2:	2200      	movs	r2, #0
 800aca4:	4650      	mov	r0, sl
 800aca6:	4659      	mov	r1, fp
 800aca8:	f7f5 fc8e 	bl	80005c8 <__aeabi_dmul>
 800acac:	4b2d      	ldr	r3, [pc, #180]	; (800ad64 <_dtoa_r+0x624>)
 800acae:	4682      	mov	sl, r0
 800acb0:	468b      	mov	fp, r1
 800acb2:	4640      	mov	r0, r8
 800acb4:	4649      	mov	r1, r9
 800acb6:	2200      	movs	r2, #0
 800acb8:	f7f5 fc86 	bl	80005c8 <__aeabi_dmul>
 800acbc:	4680      	mov	r8, r0
 800acbe:	4689      	mov	r9, r1
 800acc0:	e7c6      	b.n	800ac50 <_dtoa_r+0x510>
 800acc2:	4650      	mov	r0, sl
 800acc4:	4659      	mov	r1, fp
 800acc6:	f7f5 fc7f 	bl	80005c8 <__aeabi_dmul>
 800acca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800accc:	9d01      	ldr	r5, [sp, #4]
 800acce:	930f      	str	r3, [sp, #60]	; 0x3c
 800acd0:	4682      	mov	sl, r0
 800acd2:	468b      	mov	fp, r1
 800acd4:	4649      	mov	r1, r9
 800acd6:	4640      	mov	r0, r8
 800acd8:	f7f5 ff26 	bl	8000b28 <__aeabi_d2iz>
 800acdc:	4606      	mov	r6, r0
 800acde:	f7f5 fc09 	bl	80004f4 <__aeabi_i2d>
 800ace2:	3630      	adds	r6, #48	; 0x30
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4640      	mov	r0, r8
 800acea:	4649      	mov	r1, r9
 800acec:	f7f5 fab4 	bl	8000258 <__aeabi_dsub>
 800acf0:	f805 6b01 	strb.w	r6, [r5], #1
 800acf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acf6:	429d      	cmp	r5, r3
 800acf8:	4680      	mov	r8, r0
 800acfa:	4689      	mov	r9, r1
 800acfc:	f04f 0200 	mov.w	r2, #0
 800ad00:	d124      	bne.n	800ad4c <_dtoa_r+0x60c>
 800ad02:	4b1b      	ldr	r3, [pc, #108]	; (800ad70 <_dtoa_r+0x630>)
 800ad04:	4650      	mov	r0, sl
 800ad06:	4659      	mov	r1, fp
 800ad08:	f7f5 faa8 	bl	800025c <__adddf3>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4640      	mov	r0, r8
 800ad12:	4649      	mov	r1, r9
 800ad14:	f7f5 fee8 	bl	8000ae8 <__aeabi_dcmpgt>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d173      	bne.n	800ae04 <_dtoa_r+0x6c4>
 800ad1c:	4652      	mov	r2, sl
 800ad1e:	465b      	mov	r3, fp
 800ad20:	4913      	ldr	r1, [pc, #76]	; (800ad70 <_dtoa_r+0x630>)
 800ad22:	2000      	movs	r0, #0
 800ad24:	f7f5 fa98 	bl	8000258 <__aeabi_dsub>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	4649      	mov	r1, r9
 800ad30:	f7f5 febc 	bl	8000aac <__aeabi_dcmplt>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	f43f af35 	beq.w	800aba4 <_dtoa_r+0x464>
 800ad3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad3c:	1e6b      	subs	r3, r5, #1
 800ad3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad44:	2b30      	cmp	r3, #48	; 0x30
 800ad46:	d0f8      	beq.n	800ad3a <_dtoa_r+0x5fa>
 800ad48:	9700      	str	r7, [sp, #0]
 800ad4a:	e049      	b.n	800ade0 <_dtoa_r+0x6a0>
 800ad4c:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <_dtoa_r+0x624>)
 800ad4e:	f7f5 fc3b 	bl	80005c8 <__aeabi_dmul>
 800ad52:	4680      	mov	r8, r0
 800ad54:	4689      	mov	r9, r1
 800ad56:	e7bd      	b.n	800acd4 <_dtoa_r+0x594>
 800ad58:	0800d180 	.word	0x0800d180
 800ad5c:	0800d158 	.word	0x0800d158
 800ad60:	3ff00000 	.word	0x3ff00000
 800ad64:	40240000 	.word	0x40240000
 800ad68:	401c0000 	.word	0x401c0000
 800ad6c:	40140000 	.word	0x40140000
 800ad70:	3fe00000 	.word	0x3fe00000
 800ad74:	9d01      	ldr	r5, [sp, #4]
 800ad76:	4656      	mov	r6, sl
 800ad78:	465f      	mov	r7, fp
 800ad7a:	4642      	mov	r2, r8
 800ad7c:	464b      	mov	r3, r9
 800ad7e:	4630      	mov	r0, r6
 800ad80:	4639      	mov	r1, r7
 800ad82:	f7f5 fd4b 	bl	800081c <__aeabi_ddiv>
 800ad86:	f7f5 fecf 	bl	8000b28 <__aeabi_d2iz>
 800ad8a:	4682      	mov	sl, r0
 800ad8c:	f7f5 fbb2 	bl	80004f4 <__aeabi_i2d>
 800ad90:	4642      	mov	r2, r8
 800ad92:	464b      	mov	r3, r9
 800ad94:	f7f5 fc18 	bl	80005c8 <__aeabi_dmul>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	4639      	mov	r1, r7
 800ada0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ada4:	f7f5 fa58 	bl	8000258 <__aeabi_dsub>
 800ada8:	f805 6b01 	strb.w	r6, [r5], #1
 800adac:	9e01      	ldr	r6, [sp, #4]
 800adae:	9f03      	ldr	r7, [sp, #12]
 800adb0:	1bae      	subs	r6, r5, r6
 800adb2:	42b7      	cmp	r7, r6
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	d135      	bne.n	800ae26 <_dtoa_r+0x6e6>
 800adba:	f7f5 fa4f 	bl	800025c <__adddf3>
 800adbe:	4642      	mov	r2, r8
 800adc0:	464b      	mov	r3, r9
 800adc2:	4606      	mov	r6, r0
 800adc4:	460f      	mov	r7, r1
 800adc6:	f7f5 fe8f 	bl	8000ae8 <__aeabi_dcmpgt>
 800adca:	b9d0      	cbnz	r0, 800ae02 <_dtoa_r+0x6c2>
 800adcc:	4642      	mov	r2, r8
 800adce:	464b      	mov	r3, r9
 800add0:	4630      	mov	r0, r6
 800add2:	4639      	mov	r1, r7
 800add4:	f7f5 fe60 	bl	8000a98 <__aeabi_dcmpeq>
 800add8:	b110      	cbz	r0, 800ade0 <_dtoa_r+0x6a0>
 800adda:	f01a 0f01 	tst.w	sl, #1
 800adde:	d110      	bne.n	800ae02 <_dtoa_r+0x6c2>
 800ade0:	4620      	mov	r0, r4
 800ade2:	ee18 1a10 	vmov	r1, s16
 800ade6:	f000 fd09 	bl	800b7fc <_Bfree>
 800adea:	2300      	movs	r3, #0
 800adec:	9800      	ldr	r0, [sp, #0]
 800adee:	702b      	strb	r3, [r5, #0]
 800adf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adf2:	3001      	adds	r0, #1
 800adf4:	6018      	str	r0, [r3, #0]
 800adf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f43f acf1 	beq.w	800a7e0 <_dtoa_r+0xa0>
 800adfe:	601d      	str	r5, [r3, #0]
 800ae00:	e4ee      	b.n	800a7e0 <_dtoa_r+0xa0>
 800ae02:	9f00      	ldr	r7, [sp, #0]
 800ae04:	462b      	mov	r3, r5
 800ae06:	461d      	mov	r5, r3
 800ae08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae0c:	2a39      	cmp	r2, #57	; 0x39
 800ae0e:	d106      	bne.n	800ae1e <_dtoa_r+0x6de>
 800ae10:	9a01      	ldr	r2, [sp, #4]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d1f7      	bne.n	800ae06 <_dtoa_r+0x6c6>
 800ae16:	9901      	ldr	r1, [sp, #4]
 800ae18:	2230      	movs	r2, #48	; 0x30
 800ae1a:	3701      	adds	r7, #1
 800ae1c:	700a      	strb	r2, [r1, #0]
 800ae1e:	781a      	ldrb	r2, [r3, #0]
 800ae20:	3201      	adds	r2, #1
 800ae22:	701a      	strb	r2, [r3, #0]
 800ae24:	e790      	b.n	800ad48 <_dtoa_r+0x608>
 800ae26:	4ba6      	ldr	r3, [pc, #664]	; (800b0c0 <_dtoa_r+0x980>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f7f5 fbcd 	bl	80005c8 <__aeabi_dmul>
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2300      	movs	r3, #0
 800ae32:	4606      	mov	r6, r0
 800ae34:	460f      	mov	r7, r1
 800ae36:	f7f5 fe2f 	bl	8000a98 <__aeabi_dcmpeq>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d09d      	beq.n	800ad7a <_dtoa_r+0x63a>
 800ae3e:	e7cf      	b.n	800ade0 <_dtoa_r+0x6a0>
 800ae40:	9a08      	ldr	r2, [sp, #32]
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	f000 80d7 	beq.w	800aff6 <_dtoa_r+0x8b6>
 800ae48:	9a06      	ldr	r2, [sp, #24]
 800ae4a:	2a01      	cmp	r2, #1
 800ae4c:	f300 80ba 	bgt.w	800afc4 <_dtoa_r+0x884>
 800ae50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae52:	2a00      	cmp	r2, #0
 800ae54:	f000 80b2 	beq.w	800afbc <_dtoa_r+0x87c>
 800ae58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae5c:	9e07      	ldr	r6, [sp, #28]
 800ae5e:	9d04      	ldr	r5, [sp, #16]
 800ae60:	9a04      	ldr	r2, [sp, #16]
 800ae62:	441a      	add	r2, r3
 800ae64:	9204      	str	r2, [sp, #16]
 800ae66:	9a05      	ldr	r2, [sp, #20]
 800ae68:	2101      	movs	r1, #1
 800ae6a:	441a      	add	r2, r3
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	9205      	str	r2, [sp, #20]
 800ae70:	f000 fd7c 	bl	800b96c <__i2b>
 800ae74:	4607      	mov	r7, r0
 800ae76:	2d00      	cmp	r5, #0
 800ae78:	dd0c      	ble.n	800ae94 <_dtoa_r+0x754>
 800ae7a:	9b05      	ldr	r3, [sp, #20]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dd09      	ble.n	800ae94 <_dtoa_r+0x754>
 800ae80:	42ab      	cmp	r3, r5
 800ae82:	9a04      	ldr	r2, [sp, #16]
 800ae84:	bfa8      	it	ge
 800ae86:	462b      	movge	r3, r5
 800ae88:	1ad2      	subs	r2, r2, r3
 800ae8a:	9204      	str	r2, [sp, #16]
 800ae8c:	9a05      	ldr	r2, [sp, #20]
 800ae8e:	1aed      	subs	r5, r5, r3
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	9305      	str	r3, [sp, #20]
 800ae94:	9b07      	ldr	r3, [sp, #28]
 800ae96:	b31b      	cbz	r3, 800aee0 <_dtoa_r+0x7a0>
 800ae98:	9b08      	ldr	r3, [sp, #32]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 80af 	beq.w	800affe <_dtoa_r+0x8be>
 800aea0:	2e00      	cmp	r6, #0
 800aea2:	dd13      	ble.n	800aecc <_dtoa_r+0x78c>
 800aea4:	4639      	mov	r1, r7
 800aea6:	4632      	mov	r2, r6
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 fe1f 	bl	800baec <__pow5mult>
 800aeae:	ee18 2a10 	vmov	r2, s16
 800aeb2:	4601      	mov	r1, r0
 800aeb4:	4607      	mov	r7, r0
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f000 fd6e 	bl	800b998 <__multiply>
 800aebc:	ee18 1a10 	vmov	r1, s16
 800aec0:	4680      	mov	r8, r0
 800aec2:	4620      	mov	r0, r4
 800aec4:	f000 fc9a 	bl	800b7fc <_Bfree>
 800aec8:	ee08 8a10 	vmov	s16, r8
 800aecc:	9b07      	ldr	r3, [sp, #28]
 800aece:	1b9a      	subs	r2, r3, r6
 800aed0:	d006      	beq.n	800aee0 <_dtoa_r+0x7a0>
 800aed2:	ee18 1a10 	vmov	r1, s16
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 fe08 	bl	800baec <__pow5mult>
 800aedc:	ee08 0a10 	vmov	s16, r0
 800aee0:	2101      	movs	r1, #1
 800aee2:	4620      	mov	r0, r4
 800aee4:	f000 fd42 	bl	800b96c <__i2b>
 800aee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	4606      	mov	r6, r0
 800aeee:	f340 8088 	ble.w	800b002 <_dtoa_r+0x8c2>
 800aef2:	461a      	mov	r2, r3
 800aef4:	4601      	mov	r1, r0
 800aef6:	4620      	mov	r0, r4
 800aef8:	f000 fdf8 	bl	800baec <__pow5mult>
 800aefc:	9b06      	ldr	r3, [sp, #24]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	4606      	mov	r6, r0
 800af02:	f340 8081 	ble.w	800b008 <_dtoa_r+0x8c8>
 800af06:	f04f 0800 	mov.w	r8, #0
 800af0a:	6933      	ldr	r3, [r6, #16]
 800af0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af10:	6918      	ldr	r0, [r3, #16]
 800af12:	f000 fcdb 	bl	800b8cc <__hi0bits>
 800af16:	f1c0 0020 	rsb	r0, r0, #32
 800af1a:	9b05      	ldr	r3, [sp, #20]
 800af1c:	4418      	add	r0, r3
 800af1e:	f010 001f 	ands.w	r0, r0, #31
 800af22:	f000 8092 	beq.w	800b04a <_dtoa_r+0x90a>
 800af26:	f1c0 0320 	rsb	r3, r0, #32
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	f340 808a 	ble.w	800b044 <_dtoa_r+0x904>
 800af30:	f1c0 001c 	rsb	r0, r0, #28
 800af34:	9b04      	ldr	r3, [sp, #16]
 800af36:	4403      	add	r3, r0
 800af38:	9304      	str	r3, [sp, #16]
 800af3a:	9b05      	ldr	r3, [sp, #20]
 800af3c:	4403      	add	r3, r0
 800af3e:	4405      	add	r5, r0
 800af40:	9305      	str	r3, [sp, #20]
 800af42:	9b04      	ldr	r3, [sp, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	dd07      	ble.n	800af58 <_dtoa_r+0x818>
 800af48:	ee18 1a10 	vmov	r1, s16
 800af4c:	461a      	mov	r2, r3
 800af4e:	4620      	mov	r0, r4
 800af50:	f000 fe26 	bl	800bba0 <__lshift>
 800af54:	ee08 0a10 	vmov	s16, r0
 800af58:	9b05      	ldr	r3, [sp, #20]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	dd05      	ble.n	800af6a <_dtoa_r+0x82a>
 800af5e:	4631      	mov	r1, r6
 800af60:	461a      	mov	r2, r3
 800af62:	4620      	mov	r0, r4
 800af64:	f000 fe1c 	bl	800bba0 <__lshift>
 800af68:	4606      	mov	r6, r0
 800af6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d06e      	beq.n	800b04e <_dtoa_r+0x90e>
 800af70:	ee18 0a10 	vmov	r0, s16
 800af74:	4631      	mov	r1, r6
 800af76:	f000 fe83 	bl	800bc80 <__mcmp>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	da67      	bge.n	800b04e <_dtoa_r+0x90e>
 800af7e:	9b00      	ldr	r3, [sp, #0]
 800af80:	3b01      	subs	r3, #1
 800af82:	ee18 1a10 	vmov	r1, s16
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	220a      	movs	r2, #10
 800af8a:	2300      	movs	r3, #0
 800af8c:	4620      	mov	r0, r4
 800af8e:	f000 fc57 	bl	800b840 <__multadd>
 800af92:	9b08      	ldr	r3, [sp, #32]
 800af94:	ee08 0a10 	vmov	s16, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 81b1 	beq.w	800b300 <_dtoa_r+0xbc0>
 800af9e:	2300      	movs	r3, #0
 800afa0:	4639      	mov	r1, r7
 800afa2:	220a      	movs	r2, #10
 800afa4:	4620      	mov	r0, r4
 800afa6:	f000 fc4b 	bl	800b840 <__multadd>
 800afaa:	9b02      	ldr	r3, [sp, #8]
 800afac:	2b00      	cmp	r3, #0
 800afae:	4607      	mov	r7, r0
 800afb0:	f300 808e 	bgt.w	800b0d0 <_dtoa_r+0x990>
 800afb4:	9b06      	ldr	r3, [sp, #24]
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	dc51      	bgt.n	800b05e <_dtoa_r+0x91e>
 800afba:	e089      	b.n	800b0d0 <_dtoa_r+0x990>
 800afbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afc2:	e74b      	b.n	800ae5c <_dtoa_r+0x71c>
 800afc4:	9b03      	ldr	r3, [sp, #12]
 800afc6:	1e5e      	subs	r6, r3, #1
 800afc8:	9b07      	ldr	r3, [sp, #28]
 800afca:	42b3      	cmp	r3, r6
 800afcc:	bfbf      	itttt	lt
 800afce:	9b07      	ldrlt	r3, [sp, #28]
 800afd0:	9607      	strlt	r6, [sp, #28]
 800afd2:	1af2      	sublt	r2, r6, r3
 800afd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800afd6:	bfb6      	itet	lt
 800afd8:	189b      	addlt	r3, r3, r2
 800afda:	1b9e      	subge	r6, r3, r6
 800afdc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800afde:	9b03      	ldr	r3, [sp, #12]
 800afe0:	bfb8      	it	lt
 800afe2:	2600      	movlt	r6, #0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	bfb7      	itett	lt
 800afe8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800afec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aff0:	1a9d      	sublt	r5, r3, r2
 800aff2:	2300      	movlt	r3, #0
 800aff4:	e734      	b.n	800ae60 <_dtoa_r+0x720>
 800aff6:	9e07      	ldr	r6, [sp, #28]
 800aff8:	9d04      	ldr	r5, [sp, #16]
 800affa:	9f08      	ldr	r7, [sp, #32]
 800affc:	e73b      	b.n	800ae76 <_dtoa_r+0x736>
 800affe:	9a07      	ldr	r2, [sp, #28]
 800b000:	e767      	b.n	800aed2 <_dtoa_r+0x792>
 800b002:	9b06      	ldr	r3, [sp, #24]
 800b004:	2b01      	cmp	r3, #1
 800b006:	dc18      	bgt.n	800b03a <_dtoa_r+0x8fa>
 800b008:	f1ba 0f00 	cmp.w	sl, #0
 800b00c:	d115      	bne.n	800b03a <_dtoa_r+0x8fa>
 800b00e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b012:	b993      	cbnz	r3, 800b03a <_dtoa_r+0x8fa>
 800b014:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b018:	0d1b      	lsrs	r3, r3, #20
 800b01a:	051b      	lsls	r3, r3, #20
 800b01c:	b183      	cbz	r3, 800b040 <_dtoa_r+0x900>
 800b01e:	9b04      	ldr	r3, [sp, #16]
 800b020:	3301      	adds	r3, #1
 800b022:	9304      	str	r3, [sp, #16]
 800b024:	9b05      	ldr	r3, [sp, #20]
 800b026:	3301      	adds	r3, #1
 800b028:	9305      	str	r3, [sp, #20]
 800b02a:	f04f 0801 	mov.w	r8, #1
 800b02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b030:	2b00      	cmp	r3, #0
 800b032:	f47f af6a 	bne.w	800af0a <_dtoa_r+0x7ca>
 800b036:	2001      	movs	r0, #1
 800b038:	e76f      	b.n	800af1a <_dtoa_r+0x7da>
 800b03a:	f04f 0800 	mov.w	r8, #0
 800b03e:	e7f6      	b.n	800b02e <_dtoa_r+0x8ee>
 800b040:	4698      	mov	r8, r3
 800b042:	e7f4      	b.n	800b02e <_dtoa_r+0x8ee>
 800b044:	f43f af7d 	beq.w	800af42 <_dtoa_r+0x802>
 800b048:	4618      	mov	r0, r3
 800b04a:	301c      	adds	r0, #28
 800b04c:	e772      	b.n	800af34 <_dtoa_r+0x7f4>
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	dc37      	bgt.n	800b0c4 <_dtoa_r+0x984>
 800b054:	9b06      	ldr	r3, [sp, #24]
 800b056:	2b02      	cmp	r3, #2
 800b058:	dd34      	ble.n	800b0c4 <_dtoa_r+0x984>
 800b05a:	9b03      	ldr	r3, [sp, #12]
 800b05c:	9302      	str	r3, [sp, #8]
 800b05e:	9b02      	ldr	r3, [sp, #8]
 800b060:	b96b      	cbnz	r3, 800b07e <_dtoa_r+0x93e>
 800b062:	4631      	mov	r1, r6
 800b064:	2205      	movs	r2, #5
 800b066:	4620      	mov	r0, r4
 800b068:	f000 fbea 	bl	800b840 <__multadd>
 800b06c:	4601      	mov	r1, r0
 800b06e:	4606      	mov	r6, r0
 800b070:	ee18 0a10 	vmov	r0, s16
 800b074:	f000 fe04 	bl	800bc80 <__mcmp>
 800b078:	2800      	cmp	r0, #0
 800b07a:	f73f adbb 	bgt.w	800abf4 <_dtoa_r+0x4b4>
 800b07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b080:	9d01      	ldr	r5, [sp, #4]
 800b082:	43db      	mvns	r3, r3
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	f04f 0800 	mov.w	r8, #0
 800b08a:	4631      	mov	r1, r6
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 fbb5 	bl	800b7fc <_Bfree>
 800b092:	2f00      	cmp	r7, #0
 800b094:	f43f aea4 	beq.w	800ade0 <_dtoa_r+0x6a0>
 800b098:	f1b8 0f00 	cmp.w	r8, #0
 800b09c:	d005      	beq.n	800b0aa <_dtoa_r+0x96a>
 800b09e:	45b8      	cmp	r8, r7
 800b0a0:	d003      	beq.n	800b0aa <_dtoa_r+0x96a>
 800b0a2:	4641      	mov	r1, r8
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f000 fba9 	bl	800b7fc <_Bfree>
 800b0aa:	4639      	mov	r1, r7
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f000 fba5 	bl	800b7fc <_Bfree>
 800b0b2:	e695      	b.n	800ade0 <_dtoa_r+0x6a0>
 800b0b4:	2600      	movs	r6, #0
 800b0b6:	4637      	mov	r7, r6
 800b0b8:	e7e1      	b.n	800b07e <_dtoa_r+0x93e>
 800b0ba:	9700      	str	r7, [sp, #0]
 800b0bc:	4637      	mov	r7, r6
 800b0be:	e599      	b.n	800abf4 <_dtoa_r+0x4b4>
 800b0c0:	40240000 	.word	0x40240000
 800b0c4:	9b08      	ldr	r3, [sp, #32]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f000 80ca 	beq.w	800b260 <_dtoa_r+0xb20>
 800b0cc:	9b03      	ldr	r3, [sp, #12]
 800b0ce:	9302      	str	r3, [sp, #8]
 800b0d0:	2d00      	cmp	r5, #0
 800b0d2:	dd05      	ble.n	800b0e0 <_dtoa_r+0x9a0>
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	462a      	mov	r2, r5
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 fd61 	bl	800bba0 <__lshift>
 800b0de:	4607      	mov	r7, r0
 800b0e0:	f1b8 0f00 	cmp.w	r8, #0
 800b0e4:	d05b      	beq.n	800b19e <_dtoa_r+0xa5e>
 800b0e6:	6879      	ldr	r1, [r7, #4]
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f000 fb47 	bl	800b77c <_Balloc>
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	b928      	cbnz	r0, 800b0fe <_dtoa_r+0x9be>
 800b0f2:	4b87      	ldr	r3, [pc, #540]	; (800b310 <_dtoa_r+0xbd0>)
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b0fa:	f7ff bb3b 	b.w	800a774 <_dtoa_r+0x34>
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	3202      	adds	r2, #2
 800b102:	0092      	lsls	r2, r2, #2
 800b104:	f107 010c 	add.w	r1, r7, #12
 800b108:	300c      	adds	r0, #12
 800b10a:	f7fe fa99 	bl	8009640 <memcpy>
 800b10e:	2201      	movs	r2, #1
 800b110:	4629      	mov	r1, r5
 800b112:	4620      	mov	r0, r4
 800b114:	f000 fd44 	bl	800bba0 <__lshift>
 800b118:	9b01      	ldr	r3, [sp, #4]
 800b11a:	f103 0901 	add.w	r9, r3, #1
 800b11e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b122:	4413      	add	r3, r2
 800b124:	9305      	str	r3, [sp, #20]
 800b126:	f00a 0301 	and.w	r3, sl, #1
 800b12a:	46b8      	mov	r8, r7
 800b12c:	9304      	str	r3, [sp, #16]
 800b12e:	4607      	mov	r7, r0
 800b130:	4631      	mov	r1, r6
 800b132:	ee18 0a10 	vmov	r0, s16
 800b136:	f7ff fa77 	bl	800a628 <quorem>
 800b13a:	4641      	mov	r1, r8
 800b13c:	9002      	str	r0, [sp, #8]
 800b13e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b142:	ee18 0a10 	vmov	r0, s16
 800b146:	f000 fd9b 	bl	800bc80 <__mcmp>
 800b14a:	463a      	mov	r2, r7
 800b14c:	9003      	str	r0, [sp, #12]
 800b14e:	4631      	mov	r1, r6
 800b150:	4620      	mov	r0, r4
 800b152:	f000 fdb1 	bl	800bcb8 <__mdiff>
 800b156:	68c2      	ldr	r2, [r0, #12]
 800b158:	f109 3bff 	add.w	fp, r9, #4294967295
 800b15c:	4605      	mov	r5, r0
 800b15e:	bb02      	cbnz	r2, 800b1a2 <_dtoa_r+0xa62>
 800b160:	4601      	mov	r1, r0
 800b162:	ee18 0a10 	vmov	r0, s16
 800b166:	f000 fd8b 	bl	800bc80 <__mcmp>
 800b16a:	4602      	mov	r2, r0
 800b16c:	4629      	mov	r1, r5
 800b16e:	4620      	mov	r0, r4
 800b170:	9207      	str	r2, [sp, #28]
 800b172:	f000 fb43 	bl	800b7fc <_Bfree>
 800b176:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b17a:	ea43 0102 	orr.w	r1, r3, r2
 800b17e:	9b04      	ldr	r3, [sp, #16]
 800b180:	430b      	orrs	r3, r1
 800b182:	464d      	mov	r5, r9
 800b184:	d10f      	bne.n	800b1a6 <_dtoa_r+0xa66>
 800b186:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b18a:	d02a      	beq.n	800b1e2 <_dtoa_r+0xaa2>
 800b18c:	9b03      	ldr	r3, [sp, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	dd02      	ble.n	800b198 <_dtoa_r+0xa58>
 800b192:	9b02      	ldr	r3, [sp, #8]
 800b194:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b198:	f88b a000 	strb.w	sl, [fp]
 800b19c:	e775      	b.n	800b08a <_dtoa_r+0x94a>
 800b19e:	4638      	mov	r0, r7
 800b1a0:	e7ba      	b.n	800b118 <_dtoa_r+0x9d8>
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	e7e2      	b.n	800b16c <_dtoa_r+0xa2c>
 800b1a6:	9b03      	ldr	r3, [sp, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	db04      	blt.n	800b1b6 <_dtoa_r+0xa76>
 800b1ac:	9906      	ldr	r1, [sp, #24]
 800b1ae:	430b      	orrs	r3, r1
 800b1b0:	9904      	ldr	r1, [sp, #16]
 800b1b2:	430b      	orrs	r3, r1
 800b1b4:	d122      	bne.n	800b1fc <_dtoa_r+0xabc>
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	ddee      	ble.n	800b198 <_dtoa_r+0xa58>
 800b1ba:	ee18 1a10 	vmov	r1, s16
 800b1be:	2201      	movs	r2, #1
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f000 fced 	bl	800bba0 <__lshift>
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	ee08 0a10 	vmov	s16, r0
 800b1cc:	f000 fd58 	bl	800bc80 <__mcmp>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	dc03      	bgt.n	800b1dc <_dtoa_r+0xa9c>
 800b1d4:	d1e0      	bne.n	800b198 <_dtoa_r+0xa58>
 800b1d6:	f01a 0f01 	tst.w	sl, #1
 800b1da:	d0dd      	beq.n	800b198 <_dtoa_r+0xa58>
 800b1dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b1e0:	d1d7      	bne.n	800b192 <_dtoa_r+0xa52>
 800b1e2:	2339      	movs	r3, #57	; 0x39
 800b1e4:	f88b 3000 	strb.w	r3, [fp]
 800b1e8:	462b      	mov	r3, r5
 800b1ea:	461d      	mov	r5, r3
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b1f2:	2a39      	cmp	r2, #57	; 0x39
 800b1f4:	d071      	beq.n	800b2da <_dtoa_r+0xb9a>
 800b1f6:	3201      	adds	r2, #1
 800b1f8:	701a      	strb	r2, [r3, #0]
 800b1fa:	e746      	b.n	800b08a <_dtoa_r+0x94a>
 800b1fc:	2a00      	cmp	r2, #0
 800b1fe:	dd07      	ble.n	800b210 <_dtoa_r+0xad0>
 800b200:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b204:	d0ed      	beq.n	800b1e2 <_dtoa_r+0xaa2>
 800b206:	f10a 0301 	add.w	r3, sl, #1
 800b20a:	f88b 3000 	strb.w	r3, [fp]
 800b20e:	e73c      	b.n	800b08a <_dtoa_r+0x94a>
 800b210:	9b05      	ldr	r3, [sp, #20]
 800b212:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b216:	4599      	cmp	r9, r3
 800b218:	d047      	beq.n	800b2aa <_dtoa_r+0xb6a>
 800b21a:	ee18 1a10 	vmov	r1, s16
 800b21e:	2300      	movs	r3, #0
 800b220:	220a      	movs	r2, #10
 800b222:	4620      	mov	r0, r4
 800b224:	f000 fb0c 	bl	800b840 <__multadd>
 800b228:	45b8      	cmp	r8, r7
 800b22a:	ee08 0a10 	vmov	s16, r0
 800b22e:	f04f 0300 	mov.w	r3, #0
 800b232:	f04f 020a 	mov.w	r2, #10
 800b236:	4641      	mov	r1, r8
 800b238:	4620      	mov	r0, r4
 800b23a:	d106      	bne.n	800b24a <_dtoa_r+0xb0a>
 800b23c:	f000 fb00 	bl	800b840 <__multadd>
 800b240:	4680      	mov	r8, r0
 800b242:	4607      	mov	r7, r0
 800b244:	f109 0901 	add.w	r9, r9, #1
 800b248:	e772      	b.n	800b130 <_dtoa_r+0x9f0>
 800b24a:	f000 faf9 	bl	800b840 <__multadd>
 800b24e:	4639      	mov	r1, r7
 800b250:	4680      	mov	r8, r0
 800b252:	2300      	movs	r3, #0
 800b254:	220a      	movs	r2, #10
 800b256:	4620      	mov	r0, r4
 800b258:	f000 faf2 	bl	800b840 <__multadd>
 800b25c:	4607      	mov	r7, r0
 800b25e:	e7f1      	b.n	800b244 <_dtoa_r+0xb04>
 800b260:	9b03      	ldr	r3, [sp, #12]
 800b262:	9302      	str	r3, [sp, #8]
 800b264:	9d01      	ldr	r5, [sp, #4]
 800b266:	ee18 0a10 	vmov	r0, s16
 800b26a:	4631      	mov	r1, r6
 800b26c:	f7ff f9dc 	bl	800a628 <quorem>
 800b270:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b274:	9b01      	ldr	r3, [sp, #4]
 800b276:	f805 ab01 	strb.w	sl, [r5], #1
 800b27a:	1aea      	subs	r2, r5, r3
 800b27c:	9b02      	ldr	r3, [sp, #8]
 800b27e:	4293      	cmp	r3, r2
 800b280:	dd09      	ble.n	800b296 <_dtoa_r+0xb56>
 800b282:	ee18 1a10 	vmov	r1, s16
 800b286:	2300      	movs	r3, #0
 800b288:	220a      	movs	r2, #10
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 fad8 	bl	800b840 <__multadd>
 800b290:	ee08 0a10 	vmov	s16, r0
 800b294:	e7e7      	b.n	800b266 <_dtoa_r+0xb26>
 800b296:	9b02      	ldr	r3, [sp, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	bfc8      	it	gt
 800b29c:	461d      	movgt	r5, r3
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	bfd8      	it	le
 800b2a2:	2501      	movle	r5, #1
 800b2a4:	441d      	add	r5, r3
 800b2a6:	f04f 0800 	mov.w	r8, #0
 800b2aa:	ee18 1a10 	vmov	r1, s16
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 fc75 	bl	800bba0 <__lshift>
 800b2b6:	4631      	mov	r1, r6
 800b2b8:	ee08 0a10 	vmov	s16, r0
 800b2bc:	f000 fce0 	bl	800bc80 <__mcmp>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	dc91      	bgt.n	800b1e8 <_dtoa_r+0xaa8>
 800b2c4:	d102      	bne.n	800b2cc <_dtoa_r+0xb8c>
 800b2c6:	f01a 0f01 	tst.w	sl, #1
 800b2ca:	d18d      	bne.n	800b1e8 <_dtoa_r+0xaa8>
 800b2cc:	462b      	mov	r3, r5
 800b2ce:	461d      	mov	r5, r3
 800b2d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2d4:	2a30      	cmp	r2, #48	; 0x30
 800b2d6:	d0fa      	beq.n	800b2ce <_dtoa_r+0xb8e>
 800b2d8:	e6d7      	b.n	800b08a <_dtoa_r+0x94a>
 800b2da:	9a01      	ldr	r2, [sp, #4]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d184      	bne.n	800b1ea <_dtoa_r+0xaaa>
 800b2e0:	9b00      	ldr	r3, [sp, #0]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	2331      	movs	r3, #49	; 0x31
 800b2e8:	7013      	strb	r3, [r2, #0]
 800b2ea:	e6ce      	b.n	800b08a <_dtoa_r+0x94a>
 800b2ec:	4b09      	ldr	r3, [pc, #36]	; (800b314 <_dtoa_r+0xbd4>)
 800b2ee:	f7ff ba95 	b.w	800a81c <_dtoa_r+0xdc>
 800b2f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f47f aa6e 	bne.w	800a7d6 <_dtoa_r+0x96>
 800b2fa:	4b07      	ldr	r3, [pc, #28]	; (800b318 <_dtoa_r+0xbd8>)
 800b2fc:	f7ff ba8e 	b.w	800a81c <_dtoa_r+0xdc>
 800b300:	9b02      	ldr	r3, [sp, #8]
 800b302:	2b00      	cmp	r3, #0
 800b304:	dcae      	bgt.n	800b264 <_dtoa_r+0xb24>
 800b306:	9b06      	ldr	r3, [sp, #24]
 800b308:	2b02      	cmp	r3, #2
 800b30a:	f73f aea8 	bgt.w	800b05e <_dtoa_r+0x91e>
 800b30e:	e7a9      	b.n	800b264 <_dtoa_r+0xb24>
 800b310:	0800d088 	.word	0x0800d088
 800b314:	0800cee4 	.word	0x0800cee4
 800b318:	0800d009 	.word	0x0800d009

0800b31c <__sflush_r>:
 800b31c:	898a      	ldrh	r2, [r1, #12]
 800b31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b322:	4605      	mov	r5, r0
 800b324:	0710      	lsls	r0, r2, #28
 800b326:	460c      	mov	r4, r1
 800b328:	d458      	bmi.n	800b3dc <__sflush_r+0xc0>
 800b32a:	684b      	ldr	r3, [r1, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	dc05      	bgt.n	800b33c <__sflush_r+0x20>
 800b330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b332:	2b00      	cmp	r3, #0
 800b334:	dc02      	bgt.n	800b33c <__sflush_r+0x20>
 800b336:	2000      	movs	r0, #0
 800b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b33e:	2e00      	cmp	r6, #0
 800b340:	d0f9      	beq.n	800b336 <__sflush_r+0x1a>
 800b342:	2300      	movs	r3, #0
 800b344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b348:	682f      	ldr	r7, [r5, #0]
 800b34a:	602b      	str	r3, [r5, #0]
 800b34c:	d032      	beq.n	800b3b4 <__sflush_r+0x98>
 800b34e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	075a      	lsls	r2, r3, #29
 800b354:	d505      	bpl.n	800b362 <__sflush_r+0x46>
 800b356:	6863      	ldr	r3, [r4, #4]
 800b358:	1ac0      	subs	r0, r0, r3
 800b35a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b35c:	b10b      	cbz	r3, 800b362 <__sflush_r+0x46>
 800b35e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b360:	1ac0      	subs	r0, r0, r3
 800b362:	2300      	movs	r3, #0
 800b364:	4602      	mov	r2, r0
 800b366:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b368:	6a21      	ldr	r1, [r4, #32]
 800b36a:	4628      	mov	r0, r5
 800b36c:	47b0      	blx	r6
 800b36e:	1c43      	adds	r3, r0, #1
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	d106      	bne.n	800b382 <__sflush_r+0x66>
 800b374:	6829      	ldr	r1, [r5, #0]
 800b376:	291d      	cmp	r1, #29
 800b378:	d82c      	bhi.n	800b3d4 <__sflush_r+0xb8>
 800b37a:	4a2a      	ldr	r2, [pc, #168]	; (800b424 <__sflush_r+0x108>)
 800b37c:	40ca      	lsrs	r2, r1
 800b37e:	07d6      	lsls	r6, r2, #31
 800b380:	d528      	bpl.n	800b3d4 <__sflush_r+0xb8>
 800b382:	2200      	movs	r2, #0
 800b384:	6062      	str	r2, [r4, #4]
 800b386:	04d9      	lsls	r1, r3, #19
 800b388:	6922      	ldr	r2, [r4, #16]
 800b38a:	6022      	str	r2, [r4, #0]
 800b38c:	d504      	bpl.n	800b398 <__sflush_r+0x7c>
 800b38e:	1c42      	adds	r2, r0, #1
 800b390:	d101      	bne.n	800b396 <__sflush_r+0x7a>
 800b392:	682b      	ldr	r3, [r5, #0]
 800b394:	b903      	cbnz	r3, 800b398 <__sflush_r+0x7c>
 800b396:	6560      	str	r0, [r4, #84]	; 0x54
 800b398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b39a:	602f      	str	r7, [r5, #0]
 800b39c:	2900      	cmp	r1, #0
 800b39e:	d0ca      	beq.n	800b336 <__sflush_r+0x1a>
 800b3a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3a4:	4299      	cmp	r1, r3
 800b3a6:	d002      	beq.n	800b3ae <__sflush_r+0x92>
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f7fe f95f 	bl	800966c <_free_r>
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	6360      	str	r0, [r4, #52]	; 0x34
 800b3b2:	e7c1      	b.n	800b338 <__sflush_r+0x1c>
 800b3b4:	6a21      	ldr	r1, [r4, #32]
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	47b0      	blx	r6
 800b3bc:	1c41      	adds	r1, r0, #1
 800b3be:	d1c7      	bne.n	800b350 <__sflush_r+0x34>
 800b3c0:	682b      	ldr	r3, [r5, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d0c4      	beq.n	800b350 <__sflush_r+0x34>
 800b3c6:	2b1d      	cmp	r3, #29
 800b3c8:	d001      	beq.n	800b3ce <__sflush_r+0xb2>
 800b3ca:	2b16      	cmp	r3, #22
 800b3cc:	d101      	bne.n	800b3d2 <__sflush_r+0xb6>
 800b3ce:	602f      	str	r7, [r5, #0]
 800b3d0:	e7b1      	b.n	800b336 <__sflush_r+0x1a>
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d8:	81a3      	strh	r3, [r4, #12]
 800b3da:	e7ad      	b.n	800b338 <__sflush_r+0x1c>
 800b3dc:	690f      	ldr	r7, [r1, #16]
 800b3de:	2f00      	cmp	r7, #0
 800b3e0:	d0a9      	beq.n	800b336 <__sflush_r+0x1a>
 800b3e2:	0793      	lsls	r3, r2, #30
 800b3e4:	680e      	ldr	r6, [r1, #0]
 800b3e6:	bf08      	it	eq
 800b3e8:	694b      	ldreq	r3, [r1, #20]
 800b3ea:	600f      	str	r7, [r1, #0]
 800b3ec:	bf18      	it	ne
 800b3ee:	2300      	movne	r3, #0
 800b3f0:	eba6 0807 	sub.w	r8, r6, r7
 800b3f4:	608b      	str	r3, [r1, #8]
 800b3f6:	f1b8 0f00 	cmp.w	r8, #0
 800b3fa:	dd9c      	ble.n	800b336 <__sflush_r+0x1a>
 800b3fc:	6a21      	ldr	r1, [r4, #32]
 800b3fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b400:	4643      	mov	r3, r8
 800b402:	463a      	mov	r2, r7
 800b404:	4628      	mov	r0, r5
 800b406:	47b0      	blx	r6
 800b408:	2800      	cmp	r0, #0
 800b40a:	dc06      	bgt.n	800b41a <__sflush_r+0xfe>
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b412:	81a3      	strh	r3, [r4, #12]
 800b414:	f04f 30ff 	mov.w	r0, #4294967295
 800b418:	e78e      	b.n	800b338 <__sflush_r+0x1c>
 800b41a:	4407      	add	r7, r0
 800b41c:	eba8 0800 	sub.w	r8, r8, r0
 800b420:	e7e9      	b.n	800b3f6 <__sflush_r+0xda>
 800b422:	bf00      	nop
 800b424:	20400001 	.word	0x20400001

0800b428 <_fflush_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	690b      	ldr	r3, [r1, #16]
 800b42c:	4605      	mov	r5, r0
 800b42e:	460c      	mov	r4, r1
 800b430:	b913      	cbnz	r3, 800b438 <_fflush_r+0x10>
 800b432:	2500      	movs	r5, #0
 800b434:	4628      	mov	r0, r5
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	b118      	cbz	r0, 800b442 <_fflush_r+0x1a>
 800b43a:	6983      	ldr	r3, [r0, #24]
 800b43c:	b90b      	cbnz	r3, 800b442 <_fflush_r+0x1a>
 800b43e:	f000 f887 	bl	800b550 <__sinit>
 800b442:	4b14      	ldr	r3, [pc, #80]	; (800b494 <_fflush_r+0x6c>)
 800b444:	429c      	cmp	r4, r3
 800b446:	d11b      	bne.n	800b480 <_fflush_r+0x58>
 800b448:	686c      	ldr	r4, [r5, #4]
 800b44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d0ef      	beq.n	800b432 <_fflush_r+0xa>
 800b452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b454:	07d0      	lsls	r0, r2, #31
 800b456:	d404      	bmi.n	800b462 <_fflush_r+0x3a>
 800b458:	0599      	lsls	r1, r3, #22
 800b45a:	d402      	bmi.n	800b462 <_fflush_r+0x3a>
 800b45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b45e:	f000 f91a 	bl	800b696 <__retarget_lock_acquire_recursive>
 800b462:	4628      	mov	r0, r5
 800b464:	4621      	mov	r1, r4
 800b466:	f7ff ff59 	bl	800b31c <__sflush_r>
 800b46a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b46c:	07da      	lsls	r2, r3, #31
 800b46e:	4605      	mov	r5, r0
 800b470:	d4e0      	bmi.n	800b434 <_fflush_r+0xc>
 800b472:	89a3      	ldrh	r3, [r4, #12]
 800b474:	059b      	lsls	r3, r3, #22
 800b476:	d4dd      	bmi.n	800b434 <_fflush_r+0xc>
 800b478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b47a:	f000 f90d 	bl	800b698 <__retarget_lock_release_recursive>
 800b47e:	e7d9      	b.n	800b434 <_fflush_r+0xc>
 800b480:	4b05      	ldr	r3, [pc, #20]	; (800b498 <_fflush_r+0x70>)
 800b482:	429c      	cmp	r4, r3
 800b484:	d101      	bne.n	800b48a <_fflush_r+0x62>
 800b486:	68ac      	ldr	r4, [r5, #8]
 800b488:	e7df      	b.n	800b44a <_fflush_r+0x22>
 800b48a:	4b04      	ldr	r3, [pc, #16]	; (800b49c <_fflush_r+0x74>)
 800b48c:	429c      	cmp	r4, r3
 800b48e:	bf08      	it	eq
 800b490:	68ec      	ldreq	r4, [r5, #12]
 800b492:	e7da      	b.n	800b44a <_fflush_r+0x22>
 800b494:	0800d0bc 	.word	0x0800d0bc
 800b498:	0800d0dc 	.word	0x0800d0dc
 800b49c:	0800d09c 	.word	0x0800d09c

0800b4a0 <std>:
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	b510      	push	{r4, lr}
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4ae:	6083      	str	r3, [r0, #8]
 800b4b0:	8181      	strh	r1, [r0, #12]
 800b4b2:	6643      	str	r3, [r0, #100]	; 0x64
 800b4b4:	81c2      	strh	r2, [r0, #14]
 800b4b6:	6183      	str	r3, [r0, #24]
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	2208      	movs	r2, #8
 800b4bc:	305c      	adds	r0, #92	; 0x5c
 800b4be:	f7fe f8cd 	bl	800965c <memset>
 800b4c2:	4b05      	ldr	r3, [pc, #20]	; (800b4d8 <std+0x38>)
 800b4c4:	6263      	str	r3, [r4, #36]	; 0x24
 800b4c6:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <std+0x3c>)
 800b4c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4ca:	4b05      	ldr	r3, [pc, #20]	; (800b4e0 <std+0x40>)
 800b4cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4ce:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <std+0x44>)
 800b4d0:	6224      	str	r4, [r4, #32]
 800b4d2:	6323      	str	r3, [r4, #48]	; 0x30
 800b4d4:	bd10      	pop	{r4, pc}
 800b4d6:	bf00      	nop
 800b4d8:	0800c41d 	.word	0x0800c41d
 800b4dc:	0800c43f 	.word	0x0800c43f
 800b4e0:	0800c477 	.word	0x0800c477
 800b4e4:	0800c49b 	.word	0x0800c49b

0800b4e8 <_cleanup_r>:
 800b4e8:	4901      	ldr	r1, [pc, #4]	; (800b4f0 <_cleanup_r+0x8>)
 800b4ea:	f000 b8af 	b.w	800b64c <_fwalk_reent>
 800b4ee:	bf00      	nop
 800b4f0:	0800b429 	.word	0x0800b429

0800b4f4 <__sfmoreglue>:
 800b4f4:	b570      	push	{r4, r5, r6, lr}
 800b4f6:	2268      	movs	r2, #104	; 0x68
 800b4f8:	1e4d      	subs	r5, r1, #1
 800b4fa:	4355      	muls	r5, r2
 800b4fc:	460e      	mov	r6, r1
 800b4fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b502:	f7fe f91f 	bl	8009744 <_malloc_r>
 800b506:	4604      	mov	r4, r0
 800b508:	b140      	cbz	r0, 800b51c <__sfmoreglue+0x28>
 800b50a:	2100      	movs	r1, #0
 800b50c:	e9c0 1600 	strd	r1, r6, [r0]
 800b510:	300c      	adds	r0, #12
 800b512:	60a0      	str	r0, [r4, #8]
 800b514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b518:	f7fe f8a0 	bl	800965c <memset>
 800b51c:	4620      	mov	r0, r4
 800b51e:	bd70      	pop	{r4, r5, r6, pc}

0800b520 <__sfp_lock_acquire>:
 800b520:	4801      	ldr	r0, [pc, #4]	; (800b528 <__sfp_lock_acquire+0x8>)
 800b522:	f000 b8b8 	b.w	800b696 <__retarget_lock_acquire_recursive>
 800b526:	bf00      	nop
 800b528:	2000055d 	.word	0x2000055d

0800b52c <__sfp_lock_release>:
 800b52c:	4801      	ldr	r0, [pc, #4]	; (800b534 <__sfp_lock_release+0x8>)
 800b52e:	f000 b8b3 	b.w	800b698 <__retarget_lock_release_recursive>
 800b532:	bf00      	nop
 800b534:	2000055d 	.word	0x2000055d

0800b538 <__sinit_lock_acquire>:
 800b538:	4801      	ldr	r0, [pc, #4]	; (800b540 <__sinit_lock_acquire+0x8>)
 800b53a:	f000 b8ac 	b.w	800b696 <__retarget_lock_acquire_recursive>
 800b53e:	bf00      	nop
 800b540:	2000055e 	.word	0x2000055e

0800b544 <__sinit_lock_release>:
 800b544:	4801      	ldr	r0, [pc, #4]	; (800b54c <__sinit_lock_release+0x8>)
 800b546:	f000 b8a7 	b.w	800b698 <__retarget_lock_release_recursive>
 800b54a:	bf00      	nop
 800b54c:	2000055e 	.word	0x2000055e

0800b550 <__sinit>:
 800b550:	b510      	push	{r4, lr}
 800b552:	4604      	mov	r4, r0
 800b554:	f7ff fff0 	bl	800b538 <__sinit_lock_acquire>
 800b558:	69a3      	ldr	r3, [r4, #24]
 800b55a:	b11b      	cbz	r3, 800b564 <__sinit+0x14>
 800b55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b560:	f7ff bff0 	b.w	800b544 <__sinit_lock_release>
 800b564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b568:	6523      	str	r3, [r4, #80]	; 0x50
 800b56a:	4b13      	ldr	r3, [pc, #76]	; (800b5b8 <__sinit+0x68>)
 800b56c:	4a13      	ldr	r2, [pc, #76]	; (800b5bc <__sinit+0x6c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	62a2      	str	r2, [r4, #40]	; 0x28
 800b572:	42a3      	cmp	r3, r4
 800b574:	bf04      	itt	eq
 800b576:	2301      	moveq	r3, #1
 800b578:	61a3      	streq	r3, [r4, #24]
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 f820 	bl	800b5c0 <__sfp>
 800b580:	6060      	str	r0, [r4, #4]
 800b582:	4620      	mov	r0, r4
 800b584:	f000 f81c 	bl	800b5c0 <__sfp>
 800b588:	60a0      	str	r0, [r4, #8]
 800b58a:	4620      	mov	r0, r4
 800b58c:	f000 f818 	bl	800b5c0 <__sfp>
 800b590:	2200      	movs	r2, #0
 800b592:	60e0      	str	r0, [r4, #12]
 800b594:	2104      	movs	r1, #4
 800b596:	6860      	ldr	r0, [r4, #4]
 800b598:	f7ff ff82 	bl	800b4a0 <std>
 800b59c:	68a0      	ldr	r0, [r4, #8]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	2109      	movs	r1, #9
 800b5a2:	f7ff ff7d 	bl	800b4a0 <std>
 800b5a6:	68e0      	ldr	r0, [r4, #12]
 800b5a8:	2202      	movs	r2, #2
 800b5aa:	2112      	movs	r1, #18
 800b5ac:	f7ff ff78 	bl	800b4a0 <std>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	61a3      	str	r3, [r4, #24]
 800b5b4:	e7d2      	b.n	800b55c <__sinit+0xc>
 800b5b6:	bf00      	nop
 800b5b8:	0800ced0 	.word	0x0800ced0
 800b5bc:	0800b4e9 	.word	0x0800b4e9

0800b5c0 <__sfp>:
 800b5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c2:	4607      	mov	r7, r0
 800b5c4:	f7ff ffac 	bl	800b520 <__sfp_lock_acquire>
 800b5c8:	4b1e      	ldr	r3, [pc, #120]	; (800b644 <__sfp+0x84>)
 800b5ca:	681e      	ldr	r6, [r3, #0]
 800b5cc:	69b3      	ldr	r3, [r6, #24]
 800b5ce:	b913      	cbnz	r3, 800b5d6 <__sfp+0x16>
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7ff ffbd 	bl	800b550 <__sinit>
 800b5d6:	3648      	adds	r6, #72	; 0x48
 800b5d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	d503      	bpl.n	800b5e8 <__sfp+0x28>
 800b5e0:	6833      	ldr	r3, [r6, #0]
 800b5e2:	b30b      	cbz	r3, 800b628 <__sfp+0x68>
 800b5e4:	6836      	ldr	r6, [r6, #0]
 800b5e6:	e7f7      	b.n	800b5d8 <__sfp+0x18>
 800b5e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5ec:	b9d5      	cbnz	r5, 800b624 <__sfp+0x64>
 800b5ee:	4b16      	ldr	r3, [pc, #88]	; (800b648 <__sfp+0x88>)
 800b5f0:	60e3      	str	r3, [r4, #12]
 800b5f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5f6:	6665      	str	r5, [r4, #100]	; 0x64
 800b5f8:	f000 f84c 	bl	800b694 <__retarget_lock_init_recursive>
 800b5fc:	f7ff ff96 	bl	800b52c <__sfp_lock_release>
 800b600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b608:	6025      	str	r5, [r4, #0]
 800b60a:	61a5      	str	r5, [r4, #24]
 800b60c:	2208      	movs	r2, #8
 800b60e:	4629      	mov	r1, r5
 800b610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b614:	f7fe f822 	bl	800965c <memset>
 800b618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b61c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b620:	4620      	mov	r0, r4
 800b622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b624:	3468      	adds	r4, #104	; 0x68
 800b626:	e7d9      	b.n	800b5dc <__sfp+0x1c>
 800b628:	2104      	movs	r1, #4
 800b62a:	4638      	mov	r0, r7
 800b62c:	f7ff ff62 	bl	800b4f4 <__sfmoreglue>
 800b630:	4604      	mov	r4, r0
 800b632:	6030      	str	r0, [r6, #0]
 800b634:	2800      	cmp	r0, #0
 800b636:	d1d5      	bne.n	800b5e4 <__sfp+0x24>
 800b638:	f7ff ff78 	bl	800b52c <__sfp_lock_release>
 800b63c:	230c      	movs	r3, #12
 800b63e:	603b      	str	r3, [r7, #0]
 800b640:	e7ee      	b.n	800b620 <__sfp+0x60>
 800b642:	bf00      	nop
 800b644:	0800ced0 	.word	0x0800ced0
 800b648:	ffff0001 	.word	0xffff0001

0800b64c <_fwalk_reent>:
 800b64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b650:	4606      	mov	r6, r0
 800b652:	4688      	mov	r8, r1
 800b654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b658:	2700      	movs	r7, #0
 800b65a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b65e:	f1b9 0901 	subs.w	r9, r9, #1
 800b662:	d505      	bpl.n	800b670 <_fwalk_reent+0x24>
 800b664:	6824      	ldr	r4, [r4, #0]
 800b666:	2c00      	cmp	r4, #0
 800b668:	d1f7      	bne.n	800b65a <_fwalk_reent+0xe>
 800b66a:	4638      	mov	r0, r7
 800b66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b670:	89ab      	ldrh	r3, [r5, #12]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d907      	bls.n	800b686 <_fwalk_reent+0x3a>
 800b676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b67a:	3301      	adds	r3, #1
 800b67c:	d003      	beq.n	800b686 <_fwalk_reent+0x3a>
 800b67e:	4629      	mov	r1, r5
 800b680:	4630      	mov	r0, r6
 800b682:	47c0      	blx	r8
 800b684:	4307      	orrs	r7, r0
 800b686:	3568      	adds	r5, #104	; 0x68
 800b688:	e7e9      	b.n	800b65e <_fwalk_reent+0x12>
	...

0800b68c <_localeconv_r>:
 800b68c:	4800      	ldr	r0, [pc, #0]	; (800b690 <_localeconv_r+0x4>)
 800b68e:	4770      	bx	lr
 800b690:	20000164 	.word	0x20000164

0800b694 <__retarget_lock_init_recursive>:
 800b694:	4770      	bx	lr

0800b696 <__retarget_lock_acquire_recursive>:
 800b696:	4770      	bx	lr

0800b698 <__retarget_lock_release_recursive>:
 800b698:	4770      	bx	lr

0800b69a <__swhatbuf_r>:
 800b69a:	b570      	push	{r4, r5, r6, lr}
 800b69c:	460e      	mov	r6, r1
 800b69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a2:	2900      	cmp	r1, #0
 800b6a4:	b096      	sub	sp, #88	; 0x58
 800b6a6:	4614      	mov	r4, r2
 800b6a8:	461d      	mov	r5, r3
 800b6aa:	da08      	bge.n	800b6be <__swhatbuf_r+0x24>
 800b6ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	602a      	str	r2, [r5, #0]
 800b6b4:	061a      	lsls	r2, r3, #24
 800b6b6:	d410      	bmi.n	800b6da <__swhatbuf_r+0x40>
 800b6b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6bc:	e00e      	b.n	800b6dc <__swhatbuf_r+0x42>
 800b6be:	466a      	mov	r2, sp
 800b6c0:	f000 ff42 	bl	800c548 <_fstat_r>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	dbf1      	blt.n	800b6ac <__swhatbuf_r+0x12>
 800b6c8:	9a01      	ldr	r2, [sp, #4]
 800b6ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6d2:	425a      	negs	r2, r3
 800b6d4:	415a      	adcs	r2, r3
 800b6d6:	602a      	str	r2, [r5, #0]
 800b6d8:	e7ee      	b.n	800b6b8 <__swhatbuf_r+0x1e>
 800b6da:	2340      	movs	r3, #64	; 0x40
 800b6dc:	2000      	movs	r0, #0
 800b6de:	6023      	str	r3, [r4, #0]
 800b6e0:	b016      	add	sp, #88	; 0x58
 800b6e2:	bd70      	pop	{r4, r5, r6, pc}

0800b6e4 <__smakebuf_r>:
 800b6e4:	898b      	ldrh	r3, [r1, #12]
 800b6e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6e8:	079d      	lsls	r5, r3, #30
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	460c      	mov	r4, r1
 800b6ee:	d507      	bpl.n	800b700 <__smakebuf_r+0x1c>
 800b6f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	6123      	str	r3, [r4, #16]
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	6163      	str	r3, [r4, #20]
 800b6fc:	b002      	add	sp, #8
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	ab01      	add	r3, sp, #4
 800b702:	466a      	mov	r2, sp
 800b704:	f7ff ffc9 	bl	800b69a <__swhatbuf_r>
 800b708:	9900      	ldr	r1, [sp, #0]
 800b70a:	4605      	mov	r5, r0
 800b70c:	4630      	mov	r0, r6
 800b70e:	f7fe f819 	bl	8009744 <_malloc_r>
 800b712:	b948      	cbnz	r0, 800b728 <__smakebuf_r+0x44>
 800b714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b718:	059a      	lsls	r2, r3, #22
 800b71a:	d4ef      	bmi.n	800b6fc <__smakebuf_r+0x18>
 800b71c:	f023 0303 	bic.w	r3, r3, #3
 800b720:	f043 0302 	orr.w	r3, r3, #2
 800b724:	81a3      	strh	r3, [r4, #12]
 800b726:	e7e3      	b.n	800b6f0 <__smakebuf_r+0xc>
 800b728:	4b0d      	ldr	r3, [pc, #52]	; (800b760 <__smakebuf_r+0x7c>)
 800b72a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b72c:	89a3      	ldrh	r3, [r4, #12]
 800b72e:	6020      	str	r0, [r4, #0]
 800b730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b734:	81a3      	strh	r3, [r4, #12]
 800b736:	9b00      	ldr	r3, [sp, #0]
 800b738:	6163      	str	r3, [r4, #20]
 800b73a:	9b01      	ldr	r3, [sp, #4]
 800b73c:	6120      	str	r0, [r4, #16]
 800b73e:	b15b      	cbz	r3, 800b758 <__smakebuf_r+0x74>
 800b740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b744:	4630      	mov	r0, r6
 800b746:	f000 ff11 	bl	800c56c <_isatty_r>
 800b74a:	b128      	cbz	r0, 800b758 <__smakebuf_r+0x74>
 800b74c:	89a3      	ldrh	r3, [r4, #12]
 800b74e:	f023 0303 	bic.w	r3, r3, #3
 800b752:	f043 0301 	orr.w	r3, r3, #1
 800b756:	81a3      	strh	r3, [r4, #12]
 800b758:	89a0      	ldrh	r0, [r4, #12]
 800b75a:	4305      	orrs	r5, r0
 800b75c:	81a5      	strh	r5, [r4, #12]
 800b75e:	e7cd      	b.n	800b6fc <__smakebuf_r+0x18>
 800b760:	0800b4e9 	.word	0x0800b4e9

0800b764 <__malloc_lock>:
 800b764:	4801      	ldr	r0, [pc, #4]	; (800b76c <__malloc_lock+0x8>)
 800b766:	f7ff bf96 	b.w	800b696 <__retarget_lock_acquire_recursive>
 800b76a:	bf00      	nop
 800b76c:	2000055c 	.word	0x2000055c

0800b770 <__malloc_unlock>:
 800b770:	4801      	ldr	r0, [pc, #4]	; (800b778 <__malloc_unlock+0x8>)
 800b772:	f7ff bf91 	b.w	800b698 <__retarget_lock_release_recursive>
 800b776:	bf00      	nop
 800b778:	2000055c 	.word	0x2000055c

0800b77c <_Balloc>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b780:	4604      	mov	r4, r0
 800b782:	460d      	mov	r5, r1
 800b784:	b976      	cbnz	r6, 800b7a4 <_Balloc+0x28>
 800b786:	2010      	movs	r0, #16
 800b788:	f7fd ff52 	bl	8009630 <malloc>
 800b78c:	4602      	mov	r2, r0
 800b78e:	6260      	str	r0, [r4, #36]	; 0x24
 800b790:	b920      	cbnz	r0, 800b79c <_Balloc+0x20>
 800b792:	4b18      	ldr	r3, [pc, #96]	; (800b7f4 <_Balloc+0x78>)
 800b794:	4818      	ldr	r0, [pc, #96]	; (800b7f8 <_Balloc+0x7c>)
 800b796:	2166      	movs	r1, #102	; 0x66
 800b798:	f000 fe96 	bl	800c4c8 <__assert_func>
 800b79c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7a0:	6006      	str	r6, [r0, #0]
 800b7a2:	60c6      	str	r6, [r0, #12]
 800b7a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b7a6:	68f3      	ldr	r3, [r6, #12]
 800b7a8:	b183      	cbz	r3, 800b7cc <_Balloc+0x50>
 800b7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7b2:	b9b8      	cbnz	r0, 800b7e4 <_Balloc+0x68>
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	fa01 f605 	lsl.w	r6, r1, r5
 800b7ba:	1d72      	adds	r2, r6, #5
 800b7bc:	0092      	lsls	r2, r2, #2
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f000 fb60 	bl	800be84 <_calloc_r>
 800b7c4:	b160      	cbz	r0, 800b7e0 <_Balloc+0x64>
 800b7c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7ca:	e00e      	b.n	800b7ea <_Balloc+0x6e>
 800b7cc:	2221      	movs	r2, #33	; 0x21
 800b7ce:	2104      	movs	r1, #4
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f000 fb57 	bl	800be84 <_calloc_r>
 800b7d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7d8:	60f0      	str	r0, [r6, #12]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1e4      	bne.n	800b7aa <_Balloc+0x2e>
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	6802      	ldr	r2, [r0, #0]
 800b7e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7f0:	e7f7      	b.n	800b7e2 <_Balloc+0x66>
 800b7f2:	bf00      	nop
 800b7f4:	0800d016 	.word	0x0800d016
 800b7f8:	0800d0fc 	.word	0x0800d0fc

0800b7fc <_Bfree>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b800:	4605      	mov	r5, r0
 800b802:	460c      	mov	r4, r1
 800b804:	b976      	cbnz	r6, 800b824 <_Bfree+0x28>
 800b806:	2010      	movs	r0, #16
 800b808:	f7fd ff12 	bl	8009630 <malloc>
 800b80c:	4602      	mov	r2, r0
 800b80e:	6268      	str	r0, [r5, #36]	; 0x24
 800b810:	b920      	cbnz	r0, 800b81c <_Bfree+0x20>
 800b812:	4b09      	ldr	r3, [pc, #36]	; (800b838 <_Bfree+0x3c>)
 800b814:	4809      	ldr	r0, [pc, #36]	; (800b83c <_Bfree+0x40>)
 800b816:	218a      	movs	r1, #138	; 0x8a
 800b818:	f000 fe56 	bl	800c4c8 <__assert_func>
 800b81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b820:	6006      	str	r6, [r0, #0]
 800b822:	60c6      	str	r6, [r0, #12]
 800b824:	b13c      	cbz	r4, 800b836 <_Bfree+0x3a>
 800b826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b828:	6862      	ldr	r2, [r4, #4]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b830:	6021      	str	r1, [r4, #0]
 800b832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b836:	bd70      	pop	{r4, r5, r6, pc}
 800b838:	0800d016 	.word	0x0800d016
 800b83c:	0800d0fc 	.word	0x0800d0fc

0800b840 <__multadd>:
 800b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b844:	690d      	ldr	r5, [r1, #16]
 800b846:	4607      	mov	r7, r0
 800b848:	460c      	mov	r4, r1
 800b84a:	461e      	mov	r6, r3
 800b84c:	f101 0c14 	add.w	ip, r1, #20
 800b850:	2000      	movs	r0, #0
 800b852:	f8dc 3000 	ldr.w	r3, [ip]
 800b856:	b299      	uxth	r1, r3
 800b858:	fb02 6101 	mla	r1, r2, r1, r6
 800b85c:	0c1e      	lsrs	r6, r3, #16
 800b85e:	0c0b      	lsrs	r3, r1, #16
 800b860:	fb02 3306 	mla	r3, r2, r6, r3
 800b864:	b289      	uxth	r1, r1
 800b866:	3001      	adds	r0, #1
 800b868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b86c:	4285      	cmp	r5, r0
 800b86e:	f84c 1b04 	str.w	r1, [ip], #4
 800b872:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b876:	dcec      	bgt.n	800b852 <__multadd+0x12>
 800b878:	b30e      	cbz	r6, 800b8be <__multadd+0x7e>
 800b87a:	68a3      	ldr	r3, [r4, #8]
 800b87c:	42ab      	cmp	r3, r5
 800b87e:	dc19      	bgt.n	800b8b4 <__multadd+0x74>
 800b880:	6861      	ldr	r1, [r4, #4]
 800b882:	4638      	mov	r0, r7
 800b884:	3101      	adds	r1, #1
 800b886:	f7ff ff79 	bl	800b77c <_Balloc>
 800b88a:	4680      	mov	r8, r0
 800b88c:	b928      	cbnz	r0, 800b89a <__multadd+0x5a>
 800b88e:	4602      	mov	r2, r0
 800b890:	4b0c      	ldr	r3, [pc, #48]	; (800b8c4 <__multadd+0x84>)
 800b892:	480d      	ldr	r0, [pc, #52]	; (800b8c8 <__multadd+0x88>)
 800b894:	21b5      	movs	r1, #181	; 0xb5
 800b896:	f000 fe17 	bl	800c4c8 <__assert_func>
 800b89a:	6922      	ldr	r2, [r4, #16]
 800b89c:	3202      	adds	r2, #2
 800b89e:	f104 010c 	add.w	r1, r4, #12
 800b8a2:	0092      	lsls	r2, r2, #2
 800b8a4:	300c      	adds	r0, #12
 800b8a6:	f7fd fecb 	bl	8009640 <memcpy>
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	f7ff ffa5 	bl	800b7fc <_Bfree>
 800b8b2:	4644      	mov	r4, r8
 800b8b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8b8:	3501      	adds	r5, #1
 800b8ba:	615e      	str	r6, [r3, #20]
 800b8bc:	6125      	str	r5, [r4, #16]
 800b8be:	4620      	mov	r0, r4
 800b8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c4:	0800d088 	.word	0x0800d088
 800b8c8:	0800d0fc 	.word	0x0800d0fc

0800b8cc <__hi0bits>:
 800b8cc:	0c03      	lsrs	r3, r0, #16
 800b8ce:	041b      	lsls	r3, r3, #16
 800b8d0:	b9d3      	cbnz	r3, 800b908 <__hi0bits+0x3c>
 800b8d2:	0400      	lsls	r0, r0, #16
 800b8d4:	2310      	movs	r3, #16
 800b8d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b8da:	bf04      	itt	eq
 800b8dc:	0200      	lsleq	r0, r0, #8
 800b8de:	3308      	addeq	r3, #8
 800b8e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b8e4:	bf04      	itt	eq
 800b8e6:	0100      	lsleq	r0, r0, #4
 800b8e8:	3304      	addeq	r3, #4
 800b8ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b8ee:	bf04      	itt	eq
 800b8f0:	0080      	lsleq	r0, r0, #2
 800b8f2:	3302      	addeq	r3, #2
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	db05      	blt.n	800b904 <__hi0bits+0x38>
 800b8f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b8fc:	f103 0301 	add.w	r3, r3, #1
 800b900:	bf08      	it	eq
 800b902:	2320      	moveq	r3, #32
 800b904:	4618      	mov	r0, r3
 800b906:	4770      	bx	lr
 800b908:	2300      	movs	r3, #0
 800b90a:	e7e4      	b.n	800b8d6 <__hi0bits+0xa>

0800b90c <__lo0bits>:
 800b90c:	6803      	ldr	r3, [r0, #0]
 800b90e:	f013 0207 	ands.w	r2, r3, #7
 800b912:	4601      	mov	r1, r0
 800b914:	d00b      	beq.n	800b92e <__lo0bits+0x22>
 800b916:	07da      	lsls	r2, r3, #31
 800b918:	d423      	bmi.n	800b962 <__lo0bits+0x56>
 800b91a:	0798      	lsls	r0, r3, #30
 800b91c:	bf49      	itett	mi
 800b91e:	085b      	lsrmi	r3, r3, #1
 800b920:	089b      	lsrpl	r3, r3, #2
 800b922:	2001      	movmi	r0, #1
 800b924:	600b      	strmi	r3, [r1, #0]
 800b926:	bf5c      	itt	pl
 800b928:	600b      	strpl	r3, [r1, #0]
 800b92a:	2002      	movpl	r0, #2
 800b92c:	4770      	bx	lr
 800b92e:	b298      	uxth	r0, r3
 800b930:	b9a8      	cbnz	r0, 800b95e <__lo0bits+0x52>
 800b932:	0c1b      	lsrs	r3, r3, #16
 800b934:	2010      	movs	r0, #16
 800b936:	b2da      	uxtb	r2, r3
 800b938:	b90a      	cbnz	r2, 800b93e <__lo0bits+0x32>
 800b93a:	3008      	adds	r0, #8
 800b93c:	0a1b      	lsrs	r3, r3, #8
 800b93e:	071a      	lsls	r2, r3, #28
 800b940:	bf04      	itt	eq
 800b942:	091b      	lsreq	r3, r3, #4
 800b944:	3004      	addeq	r0, #4
 800b946:	079a      	lsls	r2, r3, #30
 800b948:	bf04      	itt	eq
 800b94a:	089b      	lsreq	r3, r3, #2
 800b94c:	3002      	addeq	r0, #2
 800b94e:	07da      	lsls	r2, r3, #31
 800b950:	d403      	bmi.n	800b95a <__lo0bits+0x4e>
 800b952:	085b      	lsrs	r3, r3, #1
 800b954:	f100 0001 	add.w	r0, r0, #1
 800b958:	d005      	beq.n	800b966 <__lo0bits+0x5a>
 800b95a:	600b      	str	r3, [r1, #0]
 800b95c:	4770      	bx	lr
 800b95e:	4610      	mov	r0, r2
 800b960:	e7e9      	b.n	800b936 <__lo0bits+0x2a>
 800b962:	2000      	movs	r0, #0
 800b964:	4770      	bx	lr
 800b966:	2020      	movs	r0, #32
 800b968:	4770      	bx	lr
	...

0800b96c <__i2b>:
 800b96c:	b510      	push	{r4, lr}
 800b96e:	460c      	mov	r4, r1
 800b970:	2101      	movs	r1, #1
 800b972:	f7ff ff03 	bl	800b77c <_Balloc>
 800b976:	4602      	mov	r2, r0
 800b978:	b928      	cbnz	r0, 800b986 <__i2b+0x1a>
 800b97a:	4b05      	ldr	r3, [pc, #20]	; (800b990 <__i2b+0x24>)
 800b97c:	4805      	ldr	r0, [pc, #20]	; (800b994 <__i2b+0x28>)
 800b97e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b982:	f000 fda1 	bl	800c4c8 <__assert_func>
 800b986:	2301      	movs	r3, #1
 800b988:	6144      	str	r4, [r0, #20]
 800b98a:	6103      	str	r3, [r0, #16]
 800b98c:	bd10      	pop	{r4, pc}
 800b98e:	bf00      	nop
 800b990:	0800d088 	.word	0x0800d088
 800b994:	0800d0fc 	.word	0x0800d0fc

0800b998 <__multiply>:
 800b998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99c:	4691      	mov	r9, r2
 800b99e:	690a      	ldr	r2, [r1, #16]
 800b9a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	bfb8      	it	lt
 800b9a8:	460b      	movlt	r3, r1
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	bfbc      	itt	lt
 800b9ae:	464c      	movlt	r4, r9
 800b9b0:	4699      	movlt	r9, r3
 800b9b2:	6927      	ldr	r7, [r4, #16]
 800b9b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9b8:	68a3      	ldr	r3, [r4, #8]
 800b9ba:	6861      	ldr	r1, [r4, #4]
 800b9bc:	eb07 060a 	add.w	r6, r7, sl
 800b9c0:	42b3      	cmp	r3, r6
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	bfb8      	it	lt
 800b9c6:	3101      	addlt	r1, #1
 800b9c8:	f7ff fed8 	bl	800b77c <_Balloc>
 800b9cc:	b930      	cbnz	r0, 800b9dc <__multiply+0x44>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	4b44      	ldr	r3, [pc, #272]	; (800bae4 <__multiply+0x14c>)
 800b9d2:	4845      	ldr	r0, [pc, #276]	; (800bae8 <__multiply+0x150>)
 800b9d4:	f240 115d 	movw	r1, #349	; 0x15d
 800b9d8:	f000 fd76 	bl	800c4c8 <__assert_func>
 800b9dc:	f100 0514 	add.w	r5, r0, #20
 800b9e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9e4:	462b      	mov	r3, r5
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	4543      	cmp	r3, r8
 800b9ea:	d321      	bcc.n	800ba30 <__multiply+0x98>
 800b9ec:	f104 0314 	add.w	r3, r4, #20
 800b9f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b9f4:	f109 0314 	add.w	r3, r9, #20
 800b9f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b9fc:	9202      	str	r2, [sp, #8]
 800b9fe:	1b3a      	subs	r2, r7, r4
 800ba00:	3a15      	subs	r2, #21
 800ba02:	f022 0203 	bic.w	r2, r2, #3
 800ba06:	3204      	adds	r2, #4
 800ba08:	f104 0115 	add.w	r1, r4, #21
 800ba0c:	428f      	cmp	r7, r1
 800ba0e:	bf38      	it	cc
 800ba10:	2204      	movcc	r2, #4
 800ba12:	9201      	str	r2, [sp, #4]
 800ba14:	9a02      	ldr	r2, [sp, #8]
 800ba16:	9303      	str	r3, [sp, #12]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d80c      	bhi.n	800ba36 <__multiply+0x9e>
 800ba1c:	2e00      	cmp	r6, #0
 800ba1e:	dd03      	ble.n	800ba28 <__multiply+0x90>
 800ba20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d05a      	beq.n	800bade <__multiply+0x146>
 800ba28:	6106      	str	r6, [r0, #16]
 800ba2a:	b005      	add	sp, #20
 800ba2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba30:	f843 2b04 	str.w	r2, [r3], #4
 800ba34:	e7d8      	b.n	800b9e8 <__multiply+0x50>
 800ba36:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba3a:	f1ba 0f00 	cmp.w	sl, #0
 800ba3e:	d024      	beq.n	800ba8a <__multiply+0xf2>
 800ba40:	f104 0e14 	add.w	lr, r4, #20
 800ba44:	46a9      	mov	r9, r5
 800ba46:	f04f 0c00 	mov.w	ip, #0
 800ba4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba4e:	f8d9 1000 	ldr.w	r1, [r9]
 800ba52:	fa1f fb82 	uxth.w	fp, r2
 800ba56:	b289      	uxth	r1, r1
 800ba58:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba60:	f8d9 2000 	ldr.w	r2, [r9]
 800ba64:	4461      	add	r1, ip
 800ba66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba6a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba72:	b289      	uxth	r1, r1
 800ba74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba78:	4577      	cmp	r7, lr
 800ba7a:	f849 1b04 	str.w	r1, [r9], #4
 800ba7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba82:	d8e2      	bhi.n	800ba4a <__multiply+0xb2>
 800ba84:	9a01      	ldr	r2, [sp, #4]
 800ba86:	f845 c002 	str.w	ip, [r5, r2]
 800ba8a:	9a03      	ldr	r2, [sp, #12]
 800ba8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba90:	3304      	adds	r3, #4
 800ba92:	f1b9 0f00 	cmp.w	r9, #0
 800ba96:	d020      	beq.n	800bada <__multiply+0x142>
 800ba98:	6829      	ldr	r1, [r5, #0]
 800ba9a:	f104 0c14 	add.w	ip, r4, #20
 800ba9e:	46ae      	mov	lr, r5
 800baa0:	f04f 0a00 	mov.w	sl, #0
 800baa4:	f8bc b000 	ldrh.w	fp, [ip]
 800baa8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800baac:	fb09 220b 	mla	r2, r9, fp, r2
 800bab0:	4492      	add	sl, r2
 800bab2:	b289      	uxth	r1, r1
 800bab4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bab8:	f84e 1b04 	str.w	r1, [lr], #4
 800babc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bac0:	f8be 1000 	ldrh.w	r1, [lr]
 800bac4:	0c12      	lsrs	r2, r2, #16
 800bac6:	fb09 1102 	mla	r1, r9, r2, r1
 800baca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bace:	4567      	cmp	r7, ip
 800bad0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bad4:	d8e6      	bhi.n	800baa4 <__multiply+0x10c>
 800bad6:	9a01      	ldr	r2, [sp, #4]
 800bad8:	50a9      	str	r1, [r5, r2]
 800bada:	3504      	adds	r5, #4
 800badc:	e79a      	b.n	800ba14 <__multiply+0x7c>
 800bade:	3e01      	subs	r6, #1
 800bae0:	e79c      	b.n	800ba1c <__multiply+0x84>
 800bae2:	bf00      	nop
 800bae4:	0800d088 	.word	0x0800d088
 800bae8:	0800d0fc 	.word	0x0800d0fc

0800baec <__pow5mult>:
 800baec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baf0:	4615      	mov	r5, r2
 800baf2:	f012 0203 	ands.w	r2, r2, #3
 800baf6:	4606      	mov	r6, r0
 800baf8:	460f      	mov	r7, r1
 800bafa:	d007      	beq.n	800bb0c <__pow5mult+0x20>
 800bafc:	4c25      	ldr	r4, [pc, #148]	; (800bb94 <__pow5mult+0xa8>)
 800bafe:	3a01      	subs	r2, #1
 800bb00:	2300      	movs	r3, #0
 800bb02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb06:	f7ff fe9b 	bl	800b840 <__multadd>
 800bb0a:	4607      	mov	r7, r0
 800bb0c:	10ad      	asrs	r5, r5, #2
 800bb0e:	d03d      	beq.n	800bb8c <__pow5mult+0xa0>
 800bb10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb12:	b97c      	cbnz	r4, 800bb34 <__pow5mult+0x48>
 800bb14:	2010      	movs	r0, #16
 800bb16:	f7fd fd8b 	bl	8009630 <malloc>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	6270      	str	r0, [r6, #36]	; 0x24
 800bb1e:	b928      	cbnz	r0, 800bb2c <__pow5mult+0x40>
 800bb20:	4b1d      	ldr	r3, [pc, #116]	; (800bb98 <__pow5mult+0xac>)
 800bb22:	481e      	ldr	r0, [pc, #120]	; (800bb9c <__pow5mult+0xb0>)
 800bb24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb28:	f000 fcce 	bl	800c4c8 <__assert_func>
 800bb2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb30:	6004      	str	r4, [r0, #0]
 800bb32:	60c4      	str	r4, [r0, #12]
 800bb34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb3c:	b94c      	cbnz	r4, 800bb52 <__pow5mult+0x66>
 800bb3e:	f240 2171 	movw	r1, #625	; 0x271
 800bb42:	4630      	mov	r0, r6
 800bb44:	f7ff ff12 	bl	800b96c <__i2b>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb4e:	4604      	mov	r4, r0
 800bb50:	6003      	str	r3, [r0, #0]
 800bb52:	f04f 0900 	mov.w	r9, #0
 800bb56:	07eb      	lsls	r3, r5, #31
 800bb58:	d50a      	bpl.n	800bb70 <__pow5mult+0x84>
 800bb5a:	4639      	mov	r1, r7
 800bb5c:	4622      	mov	r2, r4
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f7ff ff1a 	bl	800b998 <__multiply>
 800bb64:	4639      	mov	r1, r7
 800bb66:	4680      	mov	r8, r0
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f7ff fe47 	bl	800b7fc <_Bfree>
 800bb6e:	4647      	mov	r7, r8
 800bb70:	106d      	asrs	r5, r5, #1
 800bb72:	d00b      	beq.n	800bb8c <__pow5mult+0xa0>
 800bb74:	6820      	ldr	r0, [r4, #0]
 800bb76:	b938      	cbnz	r0, 800bb88 <__pow5mult+0x9c>
 800bb78:	4622      	mov	r2, r4
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	f7ff ff0b 	bl	800b998 <__multiply>
 800bb82:	6020      	str	r0, [r4, #0]
 800bb84:	f8c0 9000 	str.w	r9, [r0]
 800bb88:	4604      	mov	r4, r0
 800bb8a:	e7e4      	b.n	800bb56 <__pow5mult+0x6a>
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb92:	bf00      	nop
 800bb94:	0800d248 	.word	0x0800d248
 800bb98:	0800d016 	.word	0x0800d016
 800bb9c:	0800d0fc 	.word	0x0800d0fc

0800bba0 <__lshift>:
 800bba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba4:	460c      	mov	r4, r1
 800bba6:	6849      	ldr	r1, [r1, #4]
 800bba8:	6923      	ldr	r3, [r4, #16]
 800bbaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbae:	68a3      	ldr	r3, [r4, #8]
 800bbb0:	4607      	mov	r7, r0
 800bbb2:	4691      	mov	r9, r2
 800bbb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbb8:	f108 0601 	add.w	r6, r8, #1
 800bbbc:	42b3      	cmp	r3, r6
 800bbbe:	db0b      	blt.n	800bbd8 <__lshift+0x38>
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f7ff fddb 	bl	800b77c <_Balloc>
 800bbc6:	4605      	mov	r5, r0
 800bbc8:	b948      	cbnz	r0, 800bbde <__lshift+0x3e>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	4b2a      	ldr	r3, [pc, #168]	; (800bc78 <__lshift+0xd8>)
 800bbce:	482b      	ldr	r0, [pc, #172]	; (800bc7c <__lshift+0xdc>)
 800bbd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bbd4:	f000 fc78 	bl	800c4c8 <__assert_func>
 800bbd8:	3101      	adds	r1, #1
 800bbda:	005b      	lsls	r3, r3, #1
 800bbdc:	e7ee      	b.n	800bbbc <__lshift+0x1c>
 800bbde:	2300      	movs	r3, #0
 800bbe0:	f100 0114 	add.w	r1, r0, #20
 800bbe4:	f100 0210 	add.w	r2, r0, #16
 800bbe8:	4618      	mov	r0, r3
 800bbea:	4553      	cmp	r3, sl
 800bbec:	db37      	blt.n	800bc5e <__lshift+0xbe>
 800bbee:	6920      	ldr	r0, [r4, #16]
 800bbf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbf4:	f104 0314 	add.w	r3, r4, #20
 800bbf8:	f019 091f 	ands.w	r9, r9, #31
 800bbfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bc04:	d02f      	beq.n	800bc66 <__lshift+0xc6>
 800bc06:	f1c9 0e20 	rsb	lr, r9, #32
 800bc0a:	468a      	mov	sl, r1
 800bc0c:	f04f 0c00 	mov.w	ip, #0
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	fa02 f209 	lsl.w	r2, r2, r9
 800bc16:	ea42 020c 	orr.w	r2, r2, ip
 800bc1a:	f84a 2b04 	str.w	r2, [sl], #4
 800bc1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc22:	4298      	cmp	r0, r3
 800bc24:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bc28:	d8f2      	bhi.n	800bc10 <__lshift+0x70>
 800bc2a:	1b03      	subs	r3, r0, r4
 800bc2c:	3b15      	subs	r3, #21
 800bc2e:	f023 0303 	bic.w	r3, r3, #3
 800bc32:	3304      	adds	r3, #4
 800bc34:	f104 0215 	add.w	r2, r4, #21
 800bc38:	4290      	cmp	r0, r2
 800bc3a:	bf38      	it	cc
 800bc3c:	2304      	movcc	r3, #4
 800bc3e:	f841 c003 	str.w	ip, [r1, r3]
 800bc42:	f1bc 0f00 	cmp.w	ip, #0
 800bc46:	d001      	beq.n	800bc4c <__lshift+0xac>
 800bc48:	f108 0602 	add.w	r6, r8, #2
 800bc4c:	3e01      	subs	r6, #1
 800bc4e:	4638      	mov	r0, r7
 800bc50:	612e      	str	r6, [r5, #16]
 800bc52:	4621      	mov	r1, r4
 800bc54:	f7ff fdd2 	bl	800b7fc <_Bfree>
 800bc58:	4628      	mov	r0, r5
 800bc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc62:	3301      	adds	r3, #1
 800bc64:	e7c1      	b.n	800bbea <__lshift+0x4a>
 800bc66:	3904      	subs	r1, #4
 800bc68:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc70:	4298      	cmp	r0, r3
 800bc72:	d8f9      	bhi.n	800bc68 <__lshift+0xc8>
 800bc74:	e7ea      	b.n	800bc4c <__lshift+0xac>
 800bc76:	bf00      	nop
 800bc78:	0800d088 	.word	0x0800d088
 800bc7c:	0800d0fc 	.word	0x0800d0fc

0800bc80 <__mcmp>:
 800bc80:	b530      	push	{r4, r5, lr}
 800bc82:	6902      	ldr	r2, [r0, #16]
 800bc84:	690c      	ldr	r4, [r1, #16]
 800bc86:	1b12      	subs	r2, r2, r4
 800bc88:	d10e      	bne.n	800bca8 <__mcmp+0x28>
 800bc8a:	f100 0314 	add.w	r3, r0, #20
 800bc8e:	3114      	adds	r1, #20
 800bc90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bca0:	42a5      	cmp	r5, r4
 800bca2:	d003      	beq.n	800bcac <__mcmp+0x2c>
 800bca4:	d305      	bcc.n	800bcb2 <__mcmp+0x32>
 800bca6:	2201      	movs	r2, #1
 800bca8:	4610      	mov	r0, r2
 800bcaa:	bd30      	pop	{r4, r5, pc}
 800bcac:	4283      	cmp	r3, r0
 800bcae:	d3f3      	bcc.n	800bc98 <__mcmp+0x18>
 800bcb0:	e7fa      	b.n	800bca8 <__mcmp+0x28>
 800bcb2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb6:	e7f7      	b.n	800bca8 <__mcmp+0x28>

0800bcb8 <__mdiff>:
 800bcb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbc:	460c      	mov	r4, r1
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	4690      	mov	r8, r2
 800bcc6:	f7ff ffdb 	bl	800bc80 <__mcmp>
 800bcca:	1e05      	subs	r5, r0, #0
 800bccc:	d110      	bne.n	800bcf0 <__mdiff+0x38>
 800bcce:	4629      	mov	r1, r5
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f7ff fd53 	bl	800b77c <_Balloc>
 800bcd6:	b930      	cbnz	r0, 800bce6 <__mdiff+0x2e>
 800bcd8:	4b3a      	ldr	r3, [pc, #232]	; (800bdc4 <__mdiff+0x10c>)
 800bcda:	4602      	mov	r2, r0
 800bcdc:	f240 2132 	movw	r1, #562	; 0x232
 800bce0:	4839      	ldr	r0, [pc, #228]	; (800bdc8 <__mdiff+0x110>)
 800bce2:	f000 fbf1 	bl	800c4c8 <__assert_func>
 800bce6:	2301      	movs	r3, #1
 800bce8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf0:	bfa4      	itt	ge
 800bcf2:	4643      	movge	r3, r8
 800bcf4:	46a0      	movge	r8, r4
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bcfc:	bfa6      	itte	ge
 800bcfe:	461c      	movge	r4, r3
 800bd00:	2500      	movge	r5, #0
 800bd02:	2501      	movlt	r5, #1
 800bd04:	f7ff fd3a 	bl	800b77c <_Balloc>
 800bd08:	b920      	cbnz	r0, 800bd14 <__mdiff+0x5c>
 800bd0a:	4b2e      	ldr	r3, [pc, #184]	; (800bdc4 <__mdiff+0x10c>)
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd12:	e7e5      	b.n	800bce0 <__mdiff+0x28>
 800bd14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd18:	6926      	ldr	r6, [r4, #16]
 800bd1a:	60c5      	str	r5, [r0, #12]
 800bd1c:	f104 0914 	add.w	r9, r4, #20
 800bd20:	f108 0514 	add.w	r5, r8, #20
 800bd24:	f100 0e14 	add.w	lr, r0, #20
 800bd28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd30:	f108 0210 	add.w	r2, r8, #16
 800bd34:	46f2      	mov	sl, lr
 800bd36:	2100      	movs	r1, #0
 800bd38:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd40:	fa1f f883 	uxth.w	r8, r3
 800bd44:	fa11 f18b 	uxtah	r1, r1, fp
 800bd48:	0c1b      	lsrs	r3, r3, #16
 800bd4a:	eba1 0808 	sub.w	r8, r1, r8
 800bd4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd56:	fa1f f888 	uxth.w	r8, r8
 800bd5a:	1419      	asrs	r1, r3, #16
 800bd5c:	454e      	cmp	r6, r9
 800bd5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd62:	f84a 3b04 	str.w	r3, [sl], #4
 800bd66:	d8e7      	bhi.n	800bd38 <__mdiff+0x80>
 800bd68:	1b33      	subs	r3, r6, r4
 800bd6a:	3b15      	subs	r3, #21
 800bd6c:	f023 0303 	bic.w	r3, r3, #3
 800bd70:	3304      	adds	r3, #4
 800bd72:	3415      	adds	r4, #21
 800bd74:	42a6      	cmp	r6, r4
 800bd76:	bf38      	it	cc
 800bd78:	2304      	movcc	r3, #4
 800bd7a:	441d      	add	r5, r3
 800bd7c:	4473      	add	r3, lr
 800bd7e:	469e      	mov	lr, r3
 800bd80:	462e      	mov	r6, r5
 800bd82:	4566      	cmp	r6, ip
 800bd84:	d30e      	bcc.n	800bda4 <__mdiff+0xec>
 800bd86:	f10c 0203 	add.w	r2, ip, #3
 800bd8a:	1b52      	subs	r2, r2, r5
 800bd8c:	f022 0203 	bic.w	r2, r2, #3
 800bd90:	3d03      	subs	r5, #3
 800bd92:	45ac      	cmp	ip, r5
 800bd94:	bf38      	it	cc
 800bd96:	2200      	movcc	r2, #0
 800bd98:	441a      	add	r2, r3
 800bd9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bd9e:	b17b      	cbz	r3, 800bdc0 <__mdiff+0x108>
 800bda0:	6107      	str	r7, [r0, #16]
 800bda2:	e7a3      	b.n	800bcec <__mdiff+0x34>
 800bda4:	f856 8b04 	ldr.w	r8, [r6], #4
 800bda8:	fa11 f288 	uxtah	r2, r1, r8
 800bdac:	1414      	asrs	r4, r2, #16
 800bdae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bdb2:	b292      	uxth	r2, r2
 800bdb4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bdb8:	f84e 2b04 	str.w	r2, [lr], #4
 800bdbc:	1421      	asrs	r1, r4, #16
 800bdbe:	e7e0      	b.n	800bd82 <__mdiff+0xca>
 800bdc0:	3f01      	subs	r7, #1
 800bdc2:	e7ea      	b.n	800bd9a <__mdiff+0xe2>
 800bdc4:	0800d088 	.word	0x0800d088
 800bdc8:	0800d0fc 	.word	0x0800d0fc

0800bdcc <__d2b>:
 800bdcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdd0:	4689      	mov	r9, r1
 800bdd2:	2101      	movs	r1, #1
 800bdd4:	ec57 6b10 	vmov	r6, r7, d0
 800bdd8:	4690      	mov	r8, r2
 800bdda:	f7ff fccf 	bl	800b77c <_Balloc>
 800bdde:	4604      	mov	r4, r0
 800bde0:	b930      	cbnz	r0, 800bdf0 <__d2b+0x24>
 800bde2:	4602      	mov	r2, r0
 800bde4:	4b25      	ldr	r3, [pc, #148]	; (800be7c <__d2b+0xb0>)
 800bde6:	4826      	ldr	r0, [pc, #152]	; (800be80 <__d2b+0xb4>)
 800bde8:	f240 310a 	movw	r1, #778	; 0x30a
 800bdec:	f000 fb6c 	bl	800c4c8 <__assert_func>
 800bdf0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bdf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bdf8:	bb35      	cbnz	r5, 800be48 <__d2b+0x7c>
 800bdfa:	2e00      	cmp	r6, #0
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	d028      	beq.n	800be52 <__d2b+0x86>
 800be00:	4668      	mov	r0, sp
 800be02:	9600      	str	r6, [sp, #0]
 800be04:	f7ff fd82 	bl	800b90c <__lo0bits>
 800be08:	9900      	ldr	r1, [sp, #0]
 800be0a:	b300      	cbz	r0, 800be4e <__d2b+0x82>
 800be0c:	9a01      	ldr	r2, [sp, #4]
 800be0e:	f1c0 0320 	rsb	r3, r0, #32
 800be12:	fa02 f303 	lsl.w	r3, r2, r3
 800be16:	430b      	orrs	r3, r1
 800be18:	40c2      	lsrs	r2, r0
 800be1a:	6163      	str	r3, [r4, #20]
 800be1c:	9201      	str	r2, [sp, #4]
 800be1e:	9b01      	ldr	r3, [sp, #4]
 800be20:	61a3      	str	r3, [r4, #24]
 800be22:	2b00      	cmp	r3, #0
 800be24:	bf14      	ite	ne
 800be26:	2202      	movne	r2, #2
 800be28:	2201      	moveq	r2, #1
 800be2a:	6122      	str	r2, [r4, #16]
 800be2c:	b1d5      	cbz	r5, 800be64 <__d2b+0x98>
 800be2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be32:	4405      	add	r5, r0
 800be34:	f8c9 5000 	str.w	r5, [r9]
 800be38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be3c:	f8c8 0000 	str.w	r0, [r8]
 800be40:	4620      	mov	r0, r4
 800be42:	b003      	add	sp, #12
 800be44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be4c:	e7d5      	b.n	800bdfa <__d2b+0x2e>
 800be4e:	6161      	str	r1, [r4, #20]
 800be50:	e7e5      	b.n	800be1e <__d2b+0x52>
 800be52:	a801      	add	r0, sp, #4
 800be54:	f7ff fd5a 	bl	800b90c <__lo0bits>
 800be58:	9b01      	ldr	r3, [sp, #4]
 800be5a:	6163      	str	r3, [r4, #20]
 800be5c:	2201      	movs	r2, #1
 800be5e:	6122      	str	r2, [r4, #16]
 800be60:	3020      	adds	r0, #32
 800be62:	e7e3      	b.n	800be2c <__d2b+0x60>
 800be64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be6c:	f8c9 0000 	str.w	r0, [r9]
 800be70:	6918      	ldr	r0, [r3, #16]
 800be72:	f7ff fd2b 	bl	800b8cc <__hi0bits>
 800be76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be7a:	e7df      	b.n	800be3c <__d2b+0x70>
 800be7c:	0800d088 	.word	0x0800d088
 800be80:	0800d0fc 	.word	0x0800d0fc

0800be84 <_calloc_r>:
 800be84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be86:	fba1 2402 	umull	r2, r4, r1, r2
 800be8a:	b94c      	cbnz	r4, 800bea0 <_calloc_r+0x1c>
 800be8c:	4611      	mov	r1, r2
 800be8e:	9201      	str	r2, [sp, #4]
 800be90:	f7fd fc58 	bl	8009744 <_malloc_r>
 800be94:	9a01      	ldr	r2, [sp, #4]
 800be96:	4605      	mov	r5, r0
 800be98:	b930      	cbnz	r0, 800bea8 <_calloc_r+0x24>
 800be9a:	4628      	mov	r0, r5
 800be9c:	b003      	add	sp, #12
 800be9e:	bd30      	pop	{r4, r5, pc}
 800bea0:	220c      	movs	r2, #12
 800bea2:	6002      	str	r2, [r0, #0]
 800bea4:	2500      	movs	r5, #0
 800bea6:	e7f8      	b.n	800be9a <_calloc_r+0x16>
 800bea8:	4621      	mov	r1, r4
 800beaa:	f7fd fbd7 	bl	800965c <memset>
 800beae:	e7f4      	b.n	800be9a <_calloc_r+0x16>

0800beb0 <__ssputs_r>:
 800beb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beb4:	688e      	ldr	r6, [r1, #8]
 800beb6:	429e      	cmp	r6, r3
 800beb8:	4682      	mov	sl, r0
 800beba:	460c      	mov	r4, r1
 800bebc:	4690      	mov	r8, r2
 800bebe:	461f      	mov	r7, r3
 800bec0:	d838      	bhi.n	800bf34 <__ssputs_r+0x84>
 800bec2:	898a      	ldrh	r2, [r1, #12]
 800bec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bec8:	d032      	beq.n	800bf30 <__ssputs_r+0x80>
 800beca:	6825      	ldr	r5, [r4, #0]
 800becc:	6909      	ldr	r1, [r1, #16]
 800bece:	eba5 0901 	sub.w	r9, r5, r1
 800bed2:	6965      	ldr	r5, [r4, #20]
 800bed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bed8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bedc:	3301      	adds	r3, #1
 800bede:	444b      	add	r3, r9
 800bee0:	106d      	asrs	r5, r5, #1
 800bee2:	429d      	cmp	r5, r3
 800bee4:	bf38      	it	cc
 800bee6:	461d      	movcc	r5, r3
 800bee8:	0553      	lsls	r3, r2, #21
 800beea:	d531      	bpl.n	800bf50 <__ssputs_r+0xa0>
 800beec:	4629      	mov	r1, r5
 800beee:	f7fd fc29 	bl	8009744 <_malloc_r>
 800bef2:	4606      	mov	r6, r0
 800bef4:	b950      	cbnz	r0, 800bf0c <__ssputs_r+0x5c>
 800bef6:	230c      	movs	r3, #12
 800bef8:	f8ca 3000 	str.w	r3, [sl]
 800befc:	89a3      	ldrh	r3, [r4, #12]
 800befe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf02:	81a3      	strh	r3, [r4, #12]
 800bf04:	f04f 30ff 	mov.w	r0, #4294967295
 800bf08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0c:	6921      	ldr	r1, [r4, #16]
 800bf0e:	464a      	mov	r2, r9
 800bf10:	f7fd fb96 	bl	8009640 <memcpy>
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf1e:	81a3      	strh	r3, [r4, #12]
 800bf20:	6126      	str	r6, [r4, #16]
 800bf22:	6165      	str	r5, [r4, #20]
 800bf24:	444e      	add	r6, r9
 800bf26:	eba5 0509 	sub.w	r5, r5, r9
 800bf2a:	6026      	str	r6, [r4, #0]
 800bf2c:	60a5      	str	r5, [r4, #8]
 800bf2e:	463e      	mov	r6, r7
 800bf30:	42be      	cmp	r6, r7
 800bf32:	d900      	bls.n	800bf36 <__ssputs_r+0x86>
 800bf34:	463e      	mov	r6, r7
 800bf36:	6820      	ldr	r0, [r4, #0]
 800bf38:	4632      	mov	r2, r6
 800bf3a:	4641      	mov	r1, r8
 800bf3c:	f000 fb4a 	bl	800c5d4 <memmove>
 800bf40:	68a3      	ldr	r3, [r4, #8]
 800bf42:	1b9b      	subs	r3, r3, r6
 800bf44:	60a3      	str	r3, [r4, #8]
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	4433      	add	r3, r6
 800bf4a:	6023      	str	r3, [r4, #0]
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	e7db      	b.n	800bf08 <__ssputs_r+0x58>
 800bf50:	462a      	mov	r2, r5
 800bf52:	f000 fb59 	bl	800c608 <_realloc_r>
 800bf56:	4606      	mov	r6, r0
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d1e1      	bne.n	800bf20 <__ssputs_r+0x70>
 800bf5c:	6921      	ldr	r1, [r4, #16]
 800bf5e:	4650      	mov	r0, sl
 800bf60:	f7fd fb84 	bl	800966c <_free_r>
 800bf64:	e7c7      	b.n	800bef6 <__ssputs_r+0x46>
	...

0800bf68 <_svfiprintf_r>:
 800bf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6c:	4698      	mov	r8, r3
 800bf6e:	898b      	ldrh	r3, [r1, #12]
 800bf70:	061b      	lsls	r3, r3, #24
 800bf72:	b09d      	sub	sp, #116	; 0x74
 800bf74:	4607      	mov	r7, r0
 800bf76:	460d      	mov	r5, r1
 800bf78:	4614      	mov	r4, r2
 800bf7a:	d50e      	bpl.n	800bf9a <_svfiprintf_r+0x32>
 800bf7c:	690b      	ldr	r3, [r1, #16]
 800bf7e:	b963      	cbnz	r3, 800bf9a <_svfiprintf_r+0x32>
 800bf80:	2140      	movs	r1, #64	; 0x40
 800bf82:	f7fd fbdf 	bl	8009744 <_malloc_r>
 800bf86:	6028      	str	r0, [r5, #0]
 800bf88:	6128      	str	r0, [r5, #16]
 800bf8a:	b920      	cbnz	r0, 800bf96 <_svfiprintf_r+0x2e>
 800bf8c:	230c      	movs	r3, #12
 800bf8e:	603b      	str	r3, [r7, #0]
 800bf90:	f04f 30ff 	mov.w	r0, #4294967295
 800bf94:	e0d1      	b.n	800c13a <_svfiprintf_r+0x1d2>
 800bf96:	2340      	movs	r3, #64	; 0x40
 800bf98:	616b      	str	r3, [r5, #20]
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf9e:	2320      	movs	r3, #32
 800bfa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfa8:	2330      	movs	r3, #48	; 0x30
 800bfaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c154 <_svfiprintf_r+0x1ec>
 800bfae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfb2:	f04f 0901 	mov.w	r9, #1
 800bfb6:	4623      	mov	r3, r4
 800bfb8:	469a      	mov	sl, r3
 800bfba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfbe:	b10a      	cbz	r2, 800bfc4 <_svfiprintf_r+0x5c>
 800bfc0:	2a25      	cmp	r2, #37	; 0x25
 800bfc2:	d1f9      	bne.n	800bfb8 <_svfiprintf_r+0x50>
 800bfc4:	ebba 0b04 	subs.w	fp, sl, r4
 800bfc8:	d00b      	beq.n	800bfe2 <_svfiprintf_r+0x7a>
 800bfca:	465b      	mov	r3, fp
 800bfcc:	4622      	mov	r2, r4
 800bfce:	4629      	mov	r1, r5
 800bfd0:	4638      	mov	r0, r7
 800bfd2:	f7ff ff6d 	bl	800beb0 <__ssputs_r>
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	f000 80aa 	beq.w	800c130 <_svfiprintf_r+0x1c8>
 800bfdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfde:	445a      	add	r2, fp
 800bfe0:	9209      	str	r2, [sp, #36]	; 0x24
 800bfe2:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f000 80a2 	beq.w	800c130 <_svfiprintf_r+0x1c8>
 800bfec:	2300      	movs	r3, #0
 800bfee:	f04f 32ff 	mov.w	r2, #4294967295
 800bff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bff6:	f10a 0a01 	add.w	sl, sl, #1
 800bffa:	9304      	str	r3, [sp, #16]
 800bffc:	9307      	str	r3, [sp, #28]
 800bffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c002:	931a      	str	r3, [sp, #104]	; 0x68
 800c004:	4654      	mov	r4, sl
 800c006:	2205      	movs	r2, #5
 800c008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c00c:	4851      	ldr	r0, [pc, #324]	; (800c154 <_svfiprintf_r+0x1ec>)
 800c00e:	f7f4 f8cf 	bl	80001b0 <memchr>
 800c012:	9a04      	ldr	r2, [sp, #16]
 800c014:	b9d8      	cbnz	r0, 800c04e <_svfiprintf_r+0xe6>
 800c016:	06d0      	lsls	r0, r2, #27
 800c018:	bf44      	itt	mi
 800c01a:	2320      	movmi	r3, #32
 800c01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c020:	0711      	lsls	r1, r2, #28
 800c022:	bf44      	itt	mi
 800c024:	232b      	movmi	r3, #43	; 0x2b
 800c026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c02a:	f89a 3000 	ldrb.w	r3, [sl]
 800c02e:	2b2a      	cmp	r3, #42	; 0x2a
 800c030:	d015      	beq.n	800c05e <_svfiprintf_r+0xf6>
 800c032:	9a07      	ldr	r2, [sp, #28]
 800c034:	4654      	mov	r4, sl
 800c036:	2000      	movs	r0, #0
 800c038:	f04f 0c0a 	mov.w	ip, #10
 800c03c:	4621      	mov	r1, r4
 800c03e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c042:	3b30      	subs	r3, #48	; 0x30
 800c044:	2b09      	cmp	r3, #9
 800c046:	d94e      	bls.n	800c0e6 <_svfiprintf_r+0x17e>
 800c048:	b1b0      	cbz	r0, 800c078 <_svfiprintf_r+0x110>
 800c04a:	9207      	str	r2, [sp, #28]
 800c04c:	e014      	b.n	800c078 <_svfiprintf_r+0x110>
 800c04e:	eba0 0308 	sub.w	r3, r0, r8
 800c052:	fa09 f303 	lsl.w	r3, r9, r3
 800c056:	4313      	orrs	r3, r2
 800c058:	9304      	str	r3, [sp, #16]
 800c05a:	46a2      	mov	sl, r4
 800c05c:	e7d2      	b.n	800c004 <_svfiprintf_r+0x9c>
 800c05e:	9b03      	ldr	r3, [sp, #12]
 800c060:	1d19      	adds	r1, r3, #4
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	9103      	str	r1, [sp, #12]
 800c066:	2b00      	cmp	r3, #0
 800c068:	bfbb      	ittet	lt
 800c06a:	425b      	neglt	r3, r3
 800c06c:	f042 0202 	orrlt.w	r2, r2, #2
 800c070:	9307      	strge	r3, [sp, #28]
 800c072:	9307      	strlt	r3, [sp, #28]
 800c074:	bfb8      	it	lt
 800c076:	9204      	strlt	r2, [sp, #16]
 800c078:	7823      	ldrb	r3, [r4, #0]
 800c07a:	2b2e      	cmp	r3, #46	; 0x2e
 800c07c:	d10c      	bne.n	800c098 <_svfiprintf_r+0x130>
 800c07e:	7863      	ldrb	r3, [r4, #1]
 800c080:	2b2a      	cmp	r3, #42	; 0x2a
 800c082:	d135      	bne.n	800c0f0 <_svfiprintf_r+0x188>
 800c084:	9b03      	ldr	r3, [sp, #12]
 800c086:	1d1a      	adds	r2, r3, #4
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	9203      	str	r2, [sp, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	bfb8      	it	lt
 800c090:	f04f 33ff 	movlt.w	r3, #4294967295
 800c094:	3402      	adds	r4, #2
 800c096:	9305      	str	r3, [sp, #20]
 800c098:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c164 <_svfiprintf_r+0x1fc>
 800c09c:	7821      	ldrb	r1, [r4, #0]
 800c09e:	2203      	movs	r2, #3
 800c0a0:	4650      	mov	r0, sl
 800c0a2:	f7f4 f885 	bl	80001b0 <memchr>
 800c0a6:	b140      	cbz	r0, 800c0ba <_svfiprintf_r+0x152>
 800c0a8:	2340      	movs	r3, #64	; 0x40
 800c0aa:	eba0 000a 	sub.w	r0, r0, sl
 800c0ae:	fa03 f000 	lsl.w	r0, r3, r0
 800c0b2:	9b04      	ldr	r3, [sp, #16]
 800c0b4:	4303      	orrs	r3, r0
 800c0b6:	3401      	adds	r4, #1
 800c0b8:	9304      	str	r3, [sp, #16]
 800c0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0be:	4826      	ldr	r0, [pc, #152]	; (800c158 <_svfiprintf_r+0x1f0>)
 800c0c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0c4:	2206      	movs	r2, #6
 800c0c6:	f7f4 f873 	bl	80001b0 <memchr>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	d038      	beq.n	800c140 <_svfiprintf_r+0x1d8>
 800c0ce:	4b23      	ldr	r3, [pc, #140]	; (800c15c <_svfiprintf_r+0x1f4>)
 800c0d0:	bb1b      	cbnz	r3, 800c11a <_svfiprintf_r+0x1b2>
 800c0d2:	9b03      	ldr	r3, [sp, #12]
 800c0d4:	3307      	adds	r3, #7
 800c0d6:	f023 0307 	bic.w	r3, r3, #7
 800c0da:	3308      	adds	r3, #8
 800c0dc:	9303      	str	r3, [sp, #12]
 800c0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e0:	4433      	add	r3, r6
 800c0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c0e4:	e767      	b.n	800bfb6 <_svfiprintf_r+0x4e>
 800c0e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0ea:	460c      	mov	r4, r1
 800c0ec:	2001      	movs	r0, #1
 800c0ee:	e7a5      	b.n	800c03c <_svfiprintf_r+0xd4>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	3401      	adds	r4, #1
 800c0f4:	9305      	str	r3, [sp, #20]
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	f04f 0c0a 	mov.w	ip, #10
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c102:	3a30      	subs	r2, #48	; 0x30
 800c104:	2a09      	cmp	r2, #9
 800c106:	d903      	bls.n	800c110 <_svfiprintf_r+0x1a8>
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d0c5      	beq.n	800c098 <_svfiprintf_r+0x130>
 800c10c:	9105      	str	r1, [sp, #20]
 800c10e:	e7c3      	b.n	800c098 <_svfiprintf_r+0x130>
 800c110:	fb0c 2101 	mla	r1, ip, r1, r2
 800c114:	4604      	mov	r4, r0
 800c116:	2301      	movs	r3, #1
 800c118:	e7f0      	b.n	800c0fc <_svfiprintf_r+0x194>
 800c11a:	ab03      	add	r3, sp, #12
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	462a      	mov	r2, r5
 800c120:	4b0f      	ldr	r3, [pc, #60]	; (800c160 <_svfiprintf_r+0x1f8>)
 800c122:	a904      	add	r1, sp, #16
 800c124:	4638      	mov	r0, r7
 800c126:	f7fd fc21 	bl	800996c <_printf_float>
 800c12a:	1c42      	adds	r2, r0, #1
 800c12c:	4606      	mov	r6, r0
 800c12e:	d1d6      	bne.n	800c0de <_svfiprintf_r+0x176>
 800c130:	89ab      	ldrh	r3, [r5, #12]
 800c132:	065b      	lsls	r3, r3, #25
 800c134:	f53f af2c 	bmi.w	800bf90 <_svfiprintf_r+0x28>
 800c138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c13a:	b01d      	add	sp, #116	; 0x74
 800c13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c140:	ab03      	add	r3, sp, #12
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	462a      	mov	r2, r5
 800c146:	4b06      	ldr	r3, [pc, #24]	; (800c160 <_svfiprintf_r+0x1f8>)
 800c148:	a904      	add	r1, sp, #16
 800c14a:	4638      	mov	r0, r7
 800c14c:	f7fd feb2 	bl	8009eb4 <_printf_i>
 800c150:	e7eb      	b.n	800c12a <_svfiprintf_r+0x1c2>
 800c152:	bf00      	nop
 800c154:	0800d254 	.word	0x0800d254
 800c158:	0800d25e 	.word	0x0800d25e
 800c15c:	0800996d 	.word	0x0800996d
 800c160:	0800beb1 	.word	0x0800beb1
 800c164:	0800d25a 	.word	0x0800d25a

0800c168 <__sfputc_r>:
 800c168:	6893      	ldr	r3, [r2, #8]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	b410      	push	{r4}
 800c170:	6093      	str	r3, [r2, #8]
 800c172:	da08      	bge.n	800c186 <__sfputc_r+0x1e>
 800c174:	6994      	ldr	r4, [r2, #24]
 800c176:	42a3      	cmp	r3, r4
 800c178:	db01      	blt.n	800c17e <__sfputc_r+0x16>
 800c17a:	290a      	cmp	r1, #10
 800c17c:	d103      	bne.n	800c186 <__sfputc_r+0x1e>
 800c17e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c182:	f7fe b991 	b.w	800a4a8 <__swbuf_r>
 800c186:	6813      	ldr	r3, [r2, #0]
 800c188:	1c58      	adds	r0, r3, #1
 800c18a:	6010      	str	r0, [r2, #0]
 800c18c:	7019      	strb	r1, [r3, #0]
 800c18e:	4608      	mov	r0, r1
 800c190:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <__sfputs_r>:
 800c196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c198:	4606      	mov	r6, r0
 800c19a:	460f      	mov	r7, r1
 800c19c:	4614      	mov	r4, r2
 800c19e:	18d5      	adds	r5, r2, r3
 800c1a0:	42ac      	cmp	r4, r5
 800c1a2:	d101      	bne.n	800c1a8 <__sfputs_r+0x12>
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	e007      	b.n	800c1b8 <__sfputs_r+0x22>
 800c1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ac:	463a      	mov	r2, r7
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	f7ff ffda 	bl	800c168 <__sfputc_r>
 800c1b4:	1c43      	adds	r3, r0, #1
 800c1b6:	d1f3      	bne.n	800c1a0 <__sfputs_r+0xa>
 800c1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1bc <_vfiprintf_r>:
 800c1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c0:	460d      	mov	r5, r1
 800c1c2:	b09d      	sub	sp, #116	; 0x74
 800c1c4:	4614      	mov	r4, r2
 800c1c6:	4698      	mov	r8, r3
 800c1c8:	4606      	mov	r6, r0
 800c1ca:	b118      	cbz	r0, 800c1d4 <_vfiprintf_r+0x18>
 800c1cc:	6983      	ldr	r3, [r0, #24]
 800c1ce:	b90b      	cbnz	r3, 800c1d4 <_vfiprintf_r+0x18>
 800c1d0:	f7ff f9be 	bl	800b550 <__sinit>
 800c1d4:	4b89      	ldr	r3, [pc, #548]	; (800c3fc <_vfiprintf_r+0x240>)
 800c1d6:	429d      	cmp	r5, r3
 800c1d8:	d11b      	bne.n	800c212 <_vfiprintf_r+0x56>
 800c1da:	6875      	ldr	r5, [r6, #4]
 800c1dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1de:	07d9      	lsls	r1, r3, #31
 800c1e0:	d405      	bmi.n	800c1ee <_vfiprintf_r+0x32>
 800c1e2:	89ab      	ldrh	r3, [r5, #12]
 800c1e4:	059a      	lsls	r2, r3, #22
 800c1e6:	d402      	bmi.n	800c1ee <_vfiprintf_r+0x32>
 800c1e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1ea:	f7ff fa54 	bl	800b696 <__retarget_lock_acquire_recursive>
 800c1ee:	89ab      	ldrh	r3, [r5, #12]
 800c1f0:	071b      	lsls	r3, r3, #28
 800c1f2:	d501      	bpl.n	800c1f8 <_vfiprintf_r+0x3c>
 800c1f4:	692b      	ldr	r3, [r5, #16]
 800c1f6:	b9eb      	cbnz	r3, 800c234 <_vfiprintf_r+0x78>
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f7fe f9a6 	bl	800a54c <__swsetup_r>
 800c200:	b1c0      	cbz	r0, 800c234 <_vfiprintf_r+0x78>
 800c202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c204:	07dc      	lsls	r4, r3, #31
 800c206:	d50e      	bpl.n	800c226 <_vfiprintf_r+0x6a>
 800c208:	f04f 30ff 	mov.w	r0, #4294967295
 800c20c:	b01d      	add	sp, #116	; 0x74
 800c20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c212:	4b7b      	ldr	r3, [pc, #492]	; (800c400 <_vfiprintf_r+0x244>)
 800c214:	429d      	cmp	r5, r3
 800c216:	d101      	bne.n	800c21c <_vfiprintf_r+0x60>
 800c218:	68b5      	ldr	r5, [r6, #8]
 800c21a:	e7df      	b.n	800c1dc <_vfiprintf_r+0x20>
 800c21c:	4b79      	ldr	r3, [pc, #484]	; (800c404 <_vfiprintf_r+0x248>)
 800c21e:	429d      	cmp	r5, r3
 800c220:	bf08      	it	eq
 800c222:	68f5      	ldreq	r5, [r6, #12]
 800c224:	e7da      	b.n	800c1dc <_vfiprintf_r+0x20>
 800c226:	89ab      	ldrh	r3, [r5, #12]
 800c228:	0598      	lsls	r0, r3, #22
 800c22a:	d4ed      	bmi.n	800c208 <_vfiprintf_r+0x4c>
 800c22c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c22e:	f7ff fa33 	bl	800b698 <__retarget_lock_release_recursive>
 800c232:	e7e9      	b.n	800c208 <_vfiprintf_r+0x4c>
 800c234:	2300      	movs	r3, #0
 800c236:	9309      	str	r3, [sp, #36]	; 0x24
 800c238:	2320      	movs	r3, #32
 800c23a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c23e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c242:	2330      	movs	r3, #48	; 0x30
 800c244:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c408 <_vfiprintf_r+0x24c>
 800c248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c24c:	f04f 0901 	mov.w	r9, #1
 800c250:	4623      	mov	r3, r4
 800c252:	469a      	mov	sl, r3
 800c254:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c258:	b10a      	cbz	r2, 800c25e <_vfiprintf_r+0xa2>
 800c25a:	2a25      	cmp	r2, #37	; 0x25
 800c25c:	d1f9      	bne.n	800c252 <_vfiprintf_r+0x96>
 800c25e:	ebba 0b04 	subs.w	fp, sl, r4
 800c262:	d00b      	beq.n	800c27c <_vfiprintf_r+0xc0>
 800c264:	465b      	mov	r3, fp
 800c266:	4622      	mov	r2, r4
 800c268:	4629      	mov	r1, r5
 800c26a:	4630      	mov	r0, r6
 800c26c:	f7ff ff93 	bl	800c196 <__sfputs_r>
 800c270:	3001      	adds	r0, #1
 800c272:	f000 80aa 	beq.w	800c3ca <_vfiprintf_r+0x20e>
 800c276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c278:	445a      	add	r2, fp
 800c27a:	9209      	str	r2, [sp, #36]	; 0x24
 800c27c:	f89a 3000 	ldrb.w	r3, [sl]
 800c280:	2b00      	cmp	r3, #0
 800c282:	f000 80a2 	beq.w	800c3ca <_vfiprintf_r+0x20e>
 800c286:	2300      	movs	r3, #0
 800c288:	f04f 32ff 	mov.w	r2, #4294967295
 800c28c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c290:	f10a 0a01 	add.w	sl, sl, #1
 800c294:	9304      	str	r3, [sp, #16]
 800c296:	9307      	str	r3, [sp, #28]
 800c298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c29c:	931a      	str	r3, [sp, #104]	; 0x68
 800c29e:	4654      	mov	r4, sl
 800c2a0:	2205      	movs	r2, #5
 800c2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2a6:	4858      	ldr	r0, [pc, #352]	; (800c408 <_vfiprintf_r+0x24c>)
 800c2a8:	f7f3 ff82 	bl	80001b0 <memchr>
 800c2ac:	9a04      	ldr	r2, [sp, #16]
 800c2ae:	b9d8      	cbnz	r0, 800c2e8 <_vfiprintf_r+0x12c>
 800c2b0:	06d1      	lsls	r1, r2, #27
 800c2b2:	bf44      	itt	mi
 800c2b4:	2320      	movmi	r3, #32
 800c2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ba:	0713      	lsls	r3, r2, #28
 800c2bc:	bf44      	itt	mi
 800c2be:	232b      	movmi	r3, #43	; 0x2b
 800c2c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ca:	d015      	beq.n	800c2f8 <_vfiprintf_r+0x13c>
 800c2cc:	9a07      	ldr	r2, [sp, #28]
 800c2ce:	4654      	mov	r4, sl
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	f04f 0c0a 	mov.w	ip, #10
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2dc:	3b30      	subs	r3, #48	; 0x30
 800c2de:	2b09      	cmp	r3, #9
 800c2e0:	d94e      	bls.n	800c380 <_vfiprintf_r+0x1c4>
 800c2e2:	b1b0      	cbz	r0, 800c312 <_vfiprintf_r+0x156>
 800c2e4:	9207      	str	r2, [sp, #28]
 800c2e6:	e014      	b.n	800c312 <_vfiprintf_r+0x156>
 800c2e8:	eba0 0308 	sub.w	r3, r0, r8
 800c2ec:	fa09 f303 	lsl.w	r3, r9, r3
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	9304      	str	r3, [sp, #16]
 800c2f4:	46a2      	mov	sl, r4
 800c2f6:	e7d2      	b.n	800c29e <_vfiprintf_r+0xe2>
 800c2f8:	9b03      	ldr	r3, [sp, #12]
 800c2fa:	1d19      	adds	r1, r3, #4
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	9103      	str	r1, [sp, #12]
 800c300:	2b00      	cmp	r3, #0
 800c302:	bfbb      	ittet	lt
 800c304:	425b      	neglt	r3, r3
 800c306:	f042 0202 	orrlt.w	r2, r2, #2
 800c30a:	9307      	strge	r3, [sp, #28]
 800c30c:	9307      	strlt	r3, [sp, #28]
 800c30e:	bfb8      	it	lt
 800c310:	9204      	strlt	r2, [sp, #16]
 800c312:	7823      	ldrb	r3, [r4, #0]
 800c314:	2b2e      	cmp	r3, #46	; 0x2e
 800c316:	d10c      	bne.n	800c332 <_vfiprintf_r+0x176>
 800c318:	7863      	ldrb	r3, [r4, #1]
 800c31a:	2b2a      	cmp	r3, #42	; 0x2a
 800c31c:	d135      	bne.n	800c38a <_vfiprintf_r+0x1ce>
 800c31e:	9b03      	ldr	r3, [sp, #12]
 800c320:	1d1a      	adds	r2, r3, #4
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	9203      	str	r2, [sp, #12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	bfb8      	it	lt
 800c32a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c32e:	3402      	adds	r4, #2
 800c330:	9305      	str	r3, [sp, #20]
 800c332:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c418 <_vfiprintf_r+0x25c>
 800c336:	7821      	ldrb	r1, [r4, #0]
 800c338:	2203      	movs	r2, #3
 800c33a:	4650      	mov	r0, sl
 800c33c:	f7f3 ff38 	bl	80001b0 <memchr>
 800c340:	b140      	cbz	r0, 800c354 <_vfiprintf_r+0x198>
 800c342:	2340      	movs	r3, #64	; 0x40
 800c344:	eba0 000a 	sub.w	r0, r0, sl
 800c348:	fa03 f000 	lsl.w	r0, r3, r0
 800c34c:	9b04      	ldr	r3, [sp, #16]
 800c34e:	4303      	orrs	r3, r0
 800c350:	3401      	adds	r4, #1
 800c352:	9304      	str	r3, [sp, #16]
 800c354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c358:	482c      	ldr	r0, [pc, #176]	; (800c40c <_vfiprintf_r+0x250>)
 800c35a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c35e:	2206      	movs	r2, #6
 800c360:	f7f3 ff26 	bl	80001b0 <memchr>
 800c364:	2800      	cmp	r0, #0
 800c366:	d03f      	beq.n	800c3e8 <_vfiprintf_r+0x22c>
 800c368:	4b29      	ldr	r3, [pc, #164]	; (800c410 <_vfiprintf_r+0x254>)
 800c36a:	bb1b      	cbnz	r3, 800c3b4 <_vfiprintf_r+0x1f8>
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	3307      	adds	r3, #7
 800c370:	f023 0307 	bic.w	r3, r3, #7
 800c374:	3308      	adds	r3, #8
 800c376:	9303      	str	r3, [sp, #12]
 800c378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c37a:	443b      	add	r3, r7
 800c37c:	9309      	str	r3, [sp, #36]	; 0x24
 800c37e:	e767      	b.n	800c250 <_vfiprintf_r+0x94>
 800c380:	fb0c 3202 	mla	r2, ip, r2, r3
 800c384:	460c      	mov	r4, r1
 800c386:	2001      	movs	r0, #1
 800c388:	e7a5      	b.n	800c2d6 <_vfiprintf_r+0x11a>
 800c38a:	2300      	movs	r3, #0
 800c38c:	3401      	adds	r4, #1
 800c38e:	9305      	str	r3, [sp, #20]
 800c390:	4619      	mov	r1, r3
 800c392:	f04f 0c0a 	mov.w	ip, #10
 800c396:	4620      	mov	r0, r4
 800c398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c39c:	3a30      	subs	r2, #48	; 0x30
 800c39e:	2a09      	cmp	r2, #9
 800c3a0:	d903      	bls.n	800c3aa <_vfiprintf_r+0x1ee>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0c5      	beq.n	800c332 <_vfiprintf_r+0x176>
 800c3a6:	9105      	str	r1, [sp, #20]
 800c3a8:	e7c3      	b.n	800c332 <_vfiprintf_r+0x176>
 800c3aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e7f0      	b.n	800c396 <_vfiprintf_r+0x1da>
 800c3b4:	ab03      	add	r3, sp, #12
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	462a      	mov	r2, r5
 800c3ba:	4b16      	ldr	r3, [pc, #88]	; (800c414 <_vfiprintf_r+0x258>)
 800c3bc:	a904      	add	r1, sp, #16
 800c3be:	4630      	mov	r0, r6
 800c3c0:	f7fd fad4 	bl	800996c <_printf_float>
 800c3c4:	4607      	mov	r7, r0
 800c3c6:	1c78      	adds	r0, r7, #1
 800c3c8:	d1d6      	bne.n	800c378 <_vfiprintf_r+0x1bc>
 800c3ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3cc:	07d9      	lsls	r1, r3, #31
 800c3ce:	d405      	bmi.n	800c3dc <_vfiprintf_r+0x220>
 800c3d0:	89ab      	ldrh	r3, [r5, #12]
 800c3d2:	059a      	lsls	r2, r3, #22
 800c3d4:	d402      	bmi.n	800c3dc <_vfiprintf_r+0x220>
 800c3d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3d8:	f7ff f95e 	bl	800b698 <__retarget_lock_release_recursive>
 800c3dc:	89ab      	ldrh	r3, [r5, #12]
 800c3de:	065b      	lsls	r3, r3, #25
 800c3e0:	f53f af12 	bmi.w	800c208 <_vfiprintf_r+0x4c>
 800c3e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3e6:	e711      	b.n	800c20c <_vfiprintf_r+0x50>
 800c3e8:	ab03      	add	r3, sp, #12
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	462a      	mov	r2, r5
 800c3ee:	4b09      	ldr	r3, [pc, #36]	; (800c414 <_vfiprintf_r+0x258>)
 800c3f0:	a904      	add	r1, sp, #16
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	f7fd fd5e 	bl	8009eb4 <_printf_i>
 800c3f8:	e7e4      	b.n	800c3c4 <_vfiprintf_r+0x208>
 800c3fa:	bf00      	nop
 800c3fc:	0800d0bc 	.word	0x0800d0bc
 800c400:	0800d0dc 	.word	0x0800d0dc
 800c404:	0800d09c 	.word	0x0800d09c
 800c408:	0800d254 	.word	0x0800d254
 800c40c:	0800d25e 	.word	0x0800d25e
 800c410:	0800996d 	.word	0x0800996d
 800c414:	0800c197 	.word	0x0800c197
 800c418:	0800d25a 	.word	0x0800d25a

0800c41c <__sread>:
 800c41c:	b510      	push	{r4, lr}
 800c41e:	460c      	mov	r4, r1
 800c420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c424:	f000 f920 	bl	800c668 <_read_r>
 800c428:	2800      	cmp	r0, #0
 800c42a:	bfab      	itete	ge
 800c42c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c42e:	89a3      	ldrhlt	r3, [r4, #12]
 800c430:	181b      	addge	r3, r3, r0
 800c432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c436:	bfac      	ite	ge
 800c438:	6563      	strge	r3, [r4, #84]	; 0x54
 800c43a:	81a3      	strhlt	r3, [r4, #12]
 800c43c:	bd10      	pop	{r4, pc}

0800c43e <__swrite>:
 800c43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c442:	461f      	mov	r7, r3
 800c444:	898b      	ldrh	r3, [r1, #12]
 800c446:	05db      	lsls	r3, r3, #23
 800c448:	4605      	mov	r5, r0
 800c44a:	460c      	mov	r4, r1
 800c44c:	4616      	mov	r6, r2
 800c44e:	d505      	bpl.n	800c45c <__swrite+0x1e>
 800c450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c454:	2302      	movs	r3, #2
 800c456:	2200      	movs	r2, #0
 800c458:	f000 f898 	bl	800c58c <_lseek_r>
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c466:	81a3      	strh	r3, [r4, #12]
 800c468:	4632      	mov	r2, r6
 800c46a:	463b      	mov	r3, r7
 800c46c:	4628      	mov	r0, r5
 800c46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c472:	f000 b817 	b.w	800c4a4 <_write_r>

0800c476 <__sseek>:
 800c476:	b510      	push	{r4, lr}
 800c478:	460c      	mov	r4, r1
 800c47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c47e:	f000 f885 	bl	800c58c <_lseek_r>
 800c482:	1c43      	adds	r3, r0, #1
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	bf15      	itete	ne
 800c488:	6560      	strne	r0, [r4, #84]	; 0x54
 800c48a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c48e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c492:	81a3      	strheq	r3, [r4, #12]
 800c494:	bf18      	it	ne
 800c496:	81a3      	strhne	r3, [r4, #12]
 800c498:	bd10      	pop	{r4, pc}

0800c49a <__sclose>:
 800c49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c49e:	f000 b831 	b.w	800c504 <_close_r>
	...

0800c4a4 <_write_r>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	4d07      	ldr	r5, [pc, #28]	; (800c4c4 <_write_r+0x20>)
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	4608      	mov	r0, r1
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	602a      	str	r2, [r5, #0]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	f7f5 f861 	bl	800157a <_write>
 800c4b8:	1c43      	adds	r3, r0, #1
 800c4ba:	d102      	bne.n	800c4c2 <_write_r+0x1e>
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	b103      	cbz	r3, 800c4c2 <_write_r+0x1e>
 800c4c0:	6023      	str	r3, [r4, #0]
 800c4c2:	bd38      	pop	{r3, r4, r5, pc}
 800c4c4:	20000560 	.word	0x20000560

0800c4c8 <__assert_func>:
 800c4c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4ca:	4614      	mov	r4, r2
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	4b09      	ldr	r3, [pc, #36]	; (800c4f4 <__assert_func+0x2c>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4605      	mov	r5, r0
 800c4d4:	68d8      	ldr	r0, [r3, #12]
 800c4d6:	b14c      	cbz	r4, 800c4ec <__assert_func+0x24>
 800c4d8:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <__assert_func+0x30>)
 800c4da:	9100      	str	r1, [sp, #0]
 800c4dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4e0:	4906      	ldr	r1, [pc, #24]	; (800c4fc <__assert_func+0x34>)
 800c4e2:	462b      	mov	r3, r5
 800c4e4:	f000 f81e 	bl	800c524 <fiprintf>
 800c4e8:	f000 f8dd 	bl	800c6a6 <abort>
 800c4ec:	4b04      	ldr	r3, [pc, #16]	; (800c500 <__assert_func+0x38>)
 800c4ee:	461c      	mov	r4, r3
 800c4f0:	e7f3      	b.n	800c4da <__assert_func+0x12>
 800c4f2:	bf00      	nop
 800c4f4:	20000010 	.word	0x20000010
 800c4f8:	0800d265 	.word	0x0800d265
 800c4fc:	0800d272 	.word	0x0800d272
 800c500:	0800d2a0 	.word	0x0800d2a0

0800c504 <_close_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4d06      	ldr	r5, [pc, #24]	; (800c520 <_close_r+0x1c>)
 800c508:	2300      	movs	r3, #0
 800c50a:	4604      	mov	r4, r0
 800c50c:	4608      	mov	r0, r1
 800c50e:	602b      	str	r3, [r5, #0]
 800c510:	f7f6 f917 	bl	8002742 <_close>
 800c514:	1c43      	adds	r3, r0, #1
 800c516:	d102      	bne.n	800c51e <_close_r+0x1a>
 800c518:	682b      	ldr	r3, [r5, #0]
 800c51a:	b103      	cbz	r3, 800c51e <_close_r+0x1a>
 800c51c:	6023      	str	r3, [r4, #0]
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	20000560 	.word	0x20000560

0800c524 <fiprintf>:
 800c524:	b40e      	push	{r1, r2, r3}
 800c526:	b503      	push	{r0, r1, lr}
 800c528:	4601      	mov	r1, r0
 800c52a:	ab03      	add	r3, sp, #12
 800c52c:	4805      	ldr	r0, [pc, #20]	; (800c544 <fiprintf+0x20>)
 800c52e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c532:	6800      	ldr	r0, [r0, #0]
 800c534:	9301      	str	r3, [sp, #4]
 800c536:	f7ff fe41 	bl	800c1bc <_vfiprintf_r>
 800c53a:	b002      	add	sp, #8
 800c53c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c540:	b003      	add	sp, #12
 800c542:	4770      	bx	lr
 800c544:	20000010 	.word	0x20000010

0800c548 <_fstat_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	4d07      	ldr	r5, [pc, #28]	; (800c568 <_fstat_r+0x20>)
 800c54c:	2300      	movs	r3, #0
 800c54e:	4604      	mov	r4, r0
 800c550:	4608      	mov	r0, r1
 800c552:	4611      	mov	r1, r2
 800c554:	602b      	str	r3, [r5, #0]
 800c556:	f7f6 f900 	bl	800275a <_fstat>
 800c55a:	1c43      	adds	r3, r0, #1
 800c55c:	d102      	bne.n	800c564 <_fstat_r+0x1c>
 800c55e:	682b      	ldr	r3, [r5, #0]
 800c560:	b103      	cbz	r3, 800c564 <_fstat_r+0x1c>
 800c562:	6023      	str	r3, [r4, #0]
 800c564:	bd38      	pop	{r3, r4, r5, pc}
 800c566:	bf00      	nop
 800c568:	20000560 	.word	0x20000560

0800c56c <_isatty_r>:
 800c56c:	b538      	push	{r3, r4, r5, lr}
 800c56e:	4d06      	ldr	r5, [pc, #24]	; (800c588 <_isatty_r+0x1c>)
 800c570:	2300      	movs	r3, #0
 800c572:	4604      	mov	r4, r0
 800c574:	4608      	mov	r0, r1
 800c576:	602b      	str	r3, [r5, #0]
 800c578:	f7f6 f8ff 	bl	800277a <_isatty>
 800c57c:	1c43      	adds	r3, r0, #1
 800c57e:	d102      	bne.n	800c586 <_isatty_r+0x1a>
 800c580:	682b      	ldr	r3, [r5, #0]
 800c582:	b103      	cbz	r3, 800c586 <_isatty_r+0x1a>
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	bd38      	pop	{r3, r4, r5, pc}
 800c588:	20000560 	.word	0x20000560

0800c58c <_lseek_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	4d07      	ldr	r5, [pc, #28]	; (800c5ac <_lseek_r+0x20>)
 800c590:	4604      	mov	r4, r0
 800c592:	4608      	mov	r0, r1
 800c594:	4611      	mov	r1, r2
 800c596:	2200      	movs	r2, #0
 800c598:	602a      	str	r2, [r5, #0]
 800c59a:	461a      	mov	r2, r3
 800c59c:	f7f6 f8f8 	bl	8002790 <_lseek>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d102      	bne.n	800c5aa <_lseek_r+0x1e>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	b103      	cbz	r3, 800c5aa <_lseek_r+0x1e>
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	20000560 	.word	0x20000560

0800c5b0 <__ascii_mbtowc>:
 800c5b0:	b082      	sub	sp, #8
 800c5b2:	b901      	cbnz	r1, 800c5b6 <__ascii_mbtowc+0x6>
 800c5b4:	a901      	add	r1, sp, #4
 800c5b6:	b142      	cbz	r2, 800c5ca <__ascii_mbtowc+0x1a>
 800c5b8:	b14b      	cbz	r3, 800c5ce <__ascii_mbtowc+0x1e>
 800c5ba:	7813      	ldrb	r3, [r2, #0]
 800c5bc:	600b      	str	r3, [r1, #0]
 800c5be:	7812      	ldrb	r2, [r2, #0]
 800c5c0:	1e10      	subs	r0, r2, #0
 800c5c2:	bf18      	it	ne
 800c5c4:	2001      	movne	r0, #1
 800c5c6:	b002      	add	sp, #8
 800c5c8:	4770      	bx	lr
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	e7fb      	b.n	800c5c6 <__ascii_mbtowc+0x16>
 800c5ce:	f06f 0001 	mvn.w	r0, #1
 800c5d2:	e7f8      	b.n	800c5c6 <__ascii_mbtowc+0x16>

0800c5d4 <memmove>:
 800c5d4:	4288      	cmp	r0, r1
 800c5d6:	b510      	push	{r4, lr}
 800c5d8:	eb01 0402 	add.w	r4, r1, r2
 800c5dc:	d902      	bls.n	800c5e4 <memmove+0x10>
 800c5de:	4284      	cmp	r4, r0
 800c5e0:	4623      	mov	r3, r4
 800c5e2:	d807      	bhi.n	800c5f4 <memmove+0x20>
 800c5e4:	1e43      	subs	r3, r0, #1
 800c5e6:	42a1      	cmp	r1, r4
 800c5e8:	d008      	beq.n	800c5fc <memmove+0x28>
 800c5ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5f2:	e7f8      	b.n	800c5e6 <memmove+0x12>
 800c5f4:	4402      	add	r2, r0
 800c5f6:	4601      	mov	r1, r0
 800c5f8:	428a      	cmp	r2, r1
 800c5fa:	d100      	bne.n	800c5fe <memmove+0x2a>
 800c5fc:	bd10      	pop	{r4, pc}
 800c5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c606:	e7f7      	b.n	800c5f8 <memmove+0x24>

0800c608 <_realloc_r>:
 800c608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c60c:	4680      	mov	r8, r0
 800c60e:	4614      	mov	r4, r2
 800c610:	460e      	mov	r6, r1
 800c612:	b921      	cbnz	r1, 800c61e <_realloc_r+0x16>
 800c614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c618:	4611      	mov	r1, r2
 800c61a:	f7fd b893 	b.w	8009744 <_malloc_r>
 800c61e:	b92a      	cbnz	r2, 800c62c <_realloc_r+0x24>
 800c620:	f7fd f824 	bl	800966c <_free_r>
 800c624:	4625      	mov	r5, r4
 800c626:	4628      	mov	r0, r5
 800c628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c62c:	f000 f842 	bl	800c6b4 <_malloc_usable_size_r>
 800c630:	4284      	cmp	r4, r0
 800c632:	4607      	mov	r7, r0
 800c634:	d802      	bhi.n	800c63c <_realloc_r+0x34>
 800c636:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c63a:	d812      	bhi.n	800c662 <_realloc_r+0x5a>
 800c63c:	4621      	mov	r1, r4
 800c63e:	4640      	mov	r0, r8
 800c640:	f7fd f880 	bl	8009744 <_malloc_r>
 800c644:	4605      	mov	r5, r0
 800c646:	2800      	cmp	r0, #0
 800c648:	d0ed      	beq.n	800c626 <_realloc_r+0x1e>
 800c64a:	42bc      	cmp	r4, r7
 800c64c:	4622      	mov	r2, r4
 800c64e:	4631      	mov	r1, r6
 800c650:	bf28      	it	cs
 800c652:	463a      	movcs	r2, r7
 800c654:	f7fc fff4 	bl	8009640 <memcpy>
 800c658:	4631      	mov	r1, r6
 800c65a:	4640      	mov	r0, r8
 800c65c:	f7fd f806 	bl	800966c <_free_r>
 800c660:	e7e1      	b.n	800c626 <_realloc_r+0x1e>
 800c662:	4635      	mov	r5, r6
 800c664:	e7df      	b.n	800c626 <_realloc_r+0x1e>
	...

0800c668 <_read_r>:
 800c668:	b538      	push	{r3, r4, r5, lr}
 800c66a:	4d07      	ldr	r5, [pc, #28]	; (800c688 <_read_r+0x20>)
 800c66c:	4604      	mov	r4, r0
 800c66e:	4608      	mov	r0, r1
 800c670:	4611      	mov	r1, r2
 800c672:	2200      	movs	r2, #0
 800c674:	602a      	str	r2, [r5, #0]
 800c676:	461a      	mov	r2, r3
 800c678:	f7f6 f846 	bl	8002708 <_read>
 800c67c:	1c43      	adds	r3, r0, #1
 800c67e:	d102      	bne.n	800c686 <_read_r+0x1e>
 800c680:	682b      	ldr	r3, [r5, #0]
 800c682:	b103      	cbz	r3, 800c686 <_read_r+0x1e>
 800c684:	6023      	str	r3, [r4, #0]
 800c686:	bd38      	pop	{r3, r4, r5, pc}
 800c688:	20000560 	.word	0x20000560

0800c68c <__ascii_wctomb>:
 800c68c:	b149      	cbz	r1, 800c6a2 <__ascii_wctomb+0x16>
 800c68e:	2aff      	cmp	r2, #255	; 0xff
 800c690:	bf85      	ittet	hi
 800c692:	238a      	movhi	r3, #138	; 0x8a
 800c694:	6003      	strhi	r3, [r0, #0]
 800c696:	700a      	strbls	r2, [r1, #0]
 800c698:	f04f 30ff 	movhi.w	r0, #4294967295
 800c69c:	bf98      	it	ls
 800c69e:	2001      	movls	r0, #1
 800c6a0:	4770      	bx	lr
 800c6a2:	4608      	mov	r0, r1
 800c6a4:	4770      	bx	lr

0800c6a6 <abort>:
 800c6a6:	b508      	push	{r3, lr}
 800c6a8:	2006      	movs	r0, #6
 800c6aa:	f000 f833 	bl	800c714 <raise>
 800c6ae:	2001      	movs	r0, #1
 800c6b0:	f7f6 f820 	bl	80026f4 <_exit>

0800c6b4 <_malloc_usable_size_r>:
 800c6b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6b8:	1f18      	subs	r0, r3, #4
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	bfbc      	itt	lt
 800c6be:	580b      	ldrlt	r3, [r1, r0]
 800c6c0:	18c0      	addlt	r0, r0, r3
 800c6c2:	4770      	bx	lr

0800c6c4 <_raise_r>:
 800c6c4:	291f      	cmp	r1, #31
 800c6c6:	b538      	push	{r3, r4, r5, lr}
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	460d      	mov	r5, r1
 800c6cc:	d904      	bls.n	800c6d8 <_raise_r+0x14>
 800c6ce:	2316      	movs	r3, #22
 800c6d0:	6003      	str	r3, [r0, #0]
 800c6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d6:	bd38      	pop	{r3, r4, r5, pc}
 800c6d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c6da:	b112      	cbz	r2, 800c6e2 <_raise_r+0x1e>
 800c6dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6e0:	b94b      	cbnz	r3, 800c6f6 <_raise_r+0x32>
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f000 f830 	bl	800c748 <_getpid_r>
 800c6e8:	462a      	mov	r2, r5
 800c6ea:	4601      	mov	r1, r0
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6f2:	f000 b817 	b.w	800c724 <_kill_r>
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d00a      	beq.n	800c710 <_raise_r+0x4c>
 800c6fa:	1c59      	adds	r1, r3, #1
 800c6fc:	d103      	bne.n	800c706 <_raise_r+0x42>
 800c6fe:	2316      	movs	r3, #22
 800c700:	6003      	str	r3, [r0, #0]
 800c702:	2001      	movs	r0, #1
 800c704:	e7e7      	b.n	800c6d6 <_raise_r+0x12>
 800c706:	2400      	movs	r4, #0
 800c708:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c70c:	4628      	mov	r0, r5
 800c70e:	4798      	blx	r3
 800c710:	2000      	movs	r0, #0
 800c712:	e7e0      	b.n	800c6d6 <_raise_r+0x12>

0800c714 <raise>:
 800c714:	4b02      	ldr	r3, [pc, #8]	; (800c720 <raise+0xc>)
 800c716:	4601      	mov	r1, r0
 800c718:	6818      	ldr	r0, [r3, #0]
 800c71a:	f7ff bfd3 	b.w	800c6c4 <_raise_r>
 800c71e:	bf00      	nop
 800c720:	20000010 	.word	0x20000010

0800c724 <_kill_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	4d07      	ldr	r5, [pc, #28]	; (800c744 <_kill_r+0x20>)
 800c728:	2300      	movs	r3, #0
 800c72a:	4604      	mov	r4, r0
 800c72c:	4608      	mov	r0, r1
 800c72e:	4611      	mov	r1, r2
 800c730:	602b      	str	r3, [r5, #0]
 800c732:	f7f5 ffcf 	bl	80026d4 <_kill>
 800c736:	1c43      	adds	r3, r0, #1
 800c738:	d102      	bne.n	800c740 <_kill_r+0x1c>
 800c73a:	682b      	ldr	r3, [r5, #0]
 800c73c:	b103      	cbz	r3, 800c740 <_kill_r+0x1c>
 800c73e:	6023      	str	r3, [r4, #0]
 800c740:	bd38      	pop	{r3, r4, r5, pc}
 800c742:	bf00      	nop
 800c744:	20000560 	.word	0x20000560

0800c748 <_getpid_r>:
 800c748:	f7f5 bfbc 	b.w	80026c4 <_getpid>
 800c74c:	0000      	movs	r0, r0
	...

0800c750 <log>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	ed2d 8b02 	vpush	{d8}
 800c756:	ec55 4b10 	vmov	r4, r5, d0
 800c75a:	f000 f839 	bl	800c7d0 <__ieee754_log>
 800c75e:	4622      	mov	r2, r4
 800c760:	462b      	mov	r3, r5
 800c762:	4620      	mov	r0, r4
 800c764:	4629      	mov	r1, r5
 800c766:	eeb0 8a40 	vmov.f32	s16, s0
 800c76a:	eef0 8a60 	vmov.f32	s17, s1
 800c76e:	f7f4 f9c5 	bl	8000afc <__aeabi_dcmpun>
 800c772:	b998      	cbnz	r0, 800c79c <log+0x4c>
 800c774:	2200      	movs	r2, #0
 800c776:	2300      	movs	r3, #0
 800c778:	4620      	mov	r0, r4
 800c77a:	4629      	mov	r1, r5
 800c77c:	f7f4 f9b4 	bl	8000ae8 <__aeabi_dcmpgt>
 800c780:	b960      	cbnz	r0, 800c79c <log+0x4c>
 800c782:	2200      	movs	r2, #0
 800c784:	2300      	movs	r3, #0
 800c786:	4620      	mov	r0, r4
 800c788:	4629      	mov	r1, r5
 800c78a:	f7f4 f985 	bl	8000a98 <__aeabi_dcmpeq>
 800c78e:	b160      	cbz	r0, 800c7aa <log+0x5a>
 800c790:	f7fc ff24 	bl	80095dc <__errno>
 800c794:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800c7c0 <log+0x70>
 800c798:	2322      	movs	r3, #34	; 0x22
 800c79a:	6003      	str	r3, [r0, #0]
 800c79c:	eeb0 0a48 	vmov.f32	s0, s16
 800c7a0:	eef0 0a68 	vmov.f32	s1, s17
 800c7a4:	ecbd 8b02 	vpop	{d8}
 800c7a8:	bd38      	pop	{r3, r4, r5, pc}
 800c7aa:	f7fc ff17 	bl	80095dc <__errno>
 800c7ae:	ecbd 8b02 	vpop	{d8}
 800c7b2:	2321      	movs	r3, #33	; 0x21
 800c7b4:	6003      	str	r3, [r0, #0]
 800c7b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7ba:	4803      	ldr	r0, [pc, #12]	; (800c7c8 <log+0x78>)
 800c7bc:	f000 b9c4 	b.w	800cb48 <nan>
 800c7c0:	00000000 	.word	0x00000000
 800c7c4:	fff00000 	.word	0xfff00000
 800c7c8:	0800d2a0 	.word	0x0800d2a0
 800c7cc:	00000000 	.word	0x00000000

0800c7d0 <__ieee754_log>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	ec51 0b10 	vmov	r0, r1, d0
 800c7d8:	ed2d 8b04 	vpush	{d8-d9}
 800c7dc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c7e0:	b083      	sub	sp, #12
 800c7e2:	460d      	mov	r5, r1
 800c7e4:	da29      	bge.n	800c83a <__ieee754_log+0x6a>
 800c7e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7ea:	4303      	orrs	r3, r0
 800c7ec:	ee10 2a10 	vmov	r2, s0
 800c7f0:	d10c      	bne.n	800c80c <__ieee754_log+0x3c>
 800c7f2:	49cf      	ldr	r1, [pc, #828]	; (800cb30 <__ieee754_log+0x360>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	f7f4 f80f 	bl	800081c <__aeabi_ddiv>
 800c7fe:	ec41 0b10 	vmov	d0, r0, r1
 800c802:	b003      	add	sp, #12
 800c804:	ecbd 8b04 	vpop	{d8-d9}
 800c808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80c:	2900      	cmp	r1, #0
 800c80e:	da05      	bge.n	800c81c <__ieee754_log+0x4c>
 800c810:	460b      	mov	r3, r1
 800c812:	f7f3 fd21 	bl	8000258 <__aeabi_dsub>
 800c816:	2200      	movs	r2, #0
 800c818:	2300      	movs	r3, #0
 800c81a:	e7ee      	b.n	800c7fa <__ieee754_log+0x2a>
 800c81c:	4bc5      	ldr	r3, [pc, #788]	; (800cb34 <__ieee754_log+0x364>)
 800c81e:	2200      	movs	r2, #0
 800c820:	f7f3 fed2 	bl	80005c8 <__aeabi_dmul>
 800c824:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c828:	460d      	mov	r5, r1
 800c82a:	4ac3      	ldr	r2, [pc, #780]	; (800cb38 <__ieee754_log+0x368>)
 800c82c:	4295      	cmp	r5, r2
 800c82e:	dd06      	ble.n	800c83e <__ieee754_log+0x6e>
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	f7f3 fd12 	bl	800025c <__adddf3>
 800c838:	e7e1      	b.n	800c7fe <__ieee754_log+0x2e>
 800c83a:	2300      	movs	r3, #0
 800c83c:	e7f5      	b.n	800c82a <__ieee754_log+0x5a>
 800c83e:	152c      	asrs	r4, r5, #20
 800c840:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c844:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c848:	441c      	add	r4, r3
 800c84a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c84e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c856:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c85a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c85e:	ea42 0105 	orr.w	r1, r2, r5
 800c862:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c866:	2200      	movs	r2, #0
 800c868:	4bb4      	ldr	r3, [pc, #720]	; (800cb3c <__ieee754_log+0x36c>)
 800c86a:	f7f3 fcf5 	bl	8000258 <__aeabi_dsub>
 800c86e:	1cab      	adds	r3, r5, #2
 800c870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c874:	2b02      	cmp	r3, #2
 800c876:	4682      	mov	sl, r0
 800c878:	468b      	mov	fp, r1
 800c87a:	f04f 0200 	mov.w	r2, #0
 800c87e:	dc53      	bgt.n	800c928 <__ieee754_log+0x158>
 800c880:	2300      	movs	r3, #0
 800c882:	f7f4 f909 	bl	8000a98 <__aeabi_dcmpeq>
 800c886:	b1d0      	cbz	r0, 800c8be <__ieee754_log+0xee>
 800c888:	2c00      	cmp	r4, #0
 800c88a:	f000 8122 	beq.w	800cad2 <__ieee754_log+0x302>
 800c88e:	4620      	mov	r0, r4
 800c890:	f7f3 fe30 	bl	80004f4 <__aeabi_i2d>
 800c894:	a390      	add	r3, pc, #576	; (adr r3, 800cad8 <__ieee754_log+0x308>)
 800c896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89a:	4606      	mov	r6, r0
 800c89c:	460f      	mov	r7, r1
 800c89e:	f7f3 fe93 	bl	80005c8 <__aeabi_dmul>
 800c8a2:	a38f      	add	r3, pc, #572	; (adr r3, 800cae0 <__ieee754_log+0x310>)
 800c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	460d      	mov	r5, r1
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	f7f3 fe8a 	bl	80005c8 <__aeabi_dmul>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	e7ba      	b.n	800c834 <__ieee754_log+0x64>
 800c8be:	a38a      	add	r3, pc, #552	; (adr r3, 800cae8 <__ieee754_log+0x318>)
 800c8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c4:	4650      	mov	r0, sl
 800c8c6:	4659      	mov	r1, fp
 800c8c8:	f7f3 fe7e 	bl	80005c8 <__aeabi_dmul>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	499b      	ldr	r1, [pc, #620]	; (800cb40 <__ieee754_log+0x370>)
 800c8d4:	f7f3 fcc0 	bl	8000258 <__aeabi_dsub>
 800c8d8:	4652      	mov	r2, sl
 800c8da:	4606      	mov	r6, r0
 800c8dc:	460f      	mov	r7, r1
 800c8de:	465b      	mov	r3, fp
 800c8e0:	4650      	mov	r0, sl
 800c8e2:	4659      	mov	r1, fp
 800c8e4:	f7f3 fe70 	bl	80005c8 <__aeabi_dmul>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	4639      	mov	r1, r7
 800c8f0:	f7f3 fe6a 	bl	80005c8 <__aeabi_dmul>
 800c8f4:	4606      	mov	r6, r0
 800c8f6:	460f      	mov	r7, r1
 800c8f8:	b914      	cbnz	r4, 800c900 <__ieee754_log+0x130>
 800c8fa:	4632      	mov	r2, r6
 800c8fc:	463b      	mov	r3, r7
 800c8fe:	e0a2      	b.n	800ca46 <__ieee754_log+0x276>
 800c900:	4620      	mov	r0, r4
 800c902:	f7f3 fdf7 	bl	80004f4 <__aeabi_i2d>
 800c906:	a374      	add	r3, pc, #464	; (adr r3, 800cad8 <__ieee754_log+0x308>)
 800c908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90c:	4680      	mov	r8, r0
 800c90e:	4689      	mov	r9, r1
 800c910:	f7f3 fe5a 	bl	80005c8 <__aeabi_dmul>
 800c914:	a372      	add	r3, pc, #456	; (adr r3, 800cae0 <__ieee754_log+0x310>)
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	4604      	mov	r4, r0
 800c91c:	460d      	mov	r5, r1
 800c91e:	4640      	mov	r0, r8
 800c920:	4649      	mov	r1, r9
 800c922:	f7f3 fe51 	bl	80005c8 <__aeabi_dmul>
 800c926:	e0a7      	b.n	800ca78 <__ieee754_log+0x2a8>
 800c928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c92c:	f7f3 fc96 	bl	800025c <__adddf3>
 800c930:	4602      	mov	r2, r0
 800c932:	460b      	mov	r3, r1
 800c934:	4650      	mov	r0, sl
 800c936:	4659      	mov	r1, fp
 800c938:	f7f3 ff70 	bl	800081c <__aeabi_ddiv>
 800c93c:	ec41 0b18 	vmov	d8, r0, r1
 800c940:	4620      	mov	r0, r4
 800c942:	f7f3 fdd7 	bl	80004f4 <__aeabi_i2d>
 800c946:	ec53 2b18 	vmov	r2, r3, d8
 800c94a:	ec41 0b19 	vmov	d9, r0, r1
 800c94e:	ec51 0b18 	vmov	r0, r1, d8
 800c952:	f7f3 fe39 	bl	80005c8 <__aeabi_dmul>
 800c956:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c95a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c95e:	9301      	str	r3, [sp, #4]
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	4680      	mov	r8, r0
 800c966:	4689      	mov	r9, r1
 800c968:	f7f3 fe2e 	bl	80005c8 <__aeabi_dmul>
 800c96c:	a360      	add	r3, pc, #384	; (adr r3, 800caf0 <__ieee754_log+0x320>)
 800c96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c972:	4606      	mov	r6, r0
 800c974:	460f      	mov	r7, r1
 800c976:	f7f3 fe27 	bl	80005c8 <__aeabi_dmul>
 800c97a:	a35f      	add	r3, pc, #380	; (adr r3, 800caf8 <__ieee754_log+0x328>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	f7f3 fc6c 	bl	800025c <__adddf3>
 800c984:	4632      	mov	r2, r6
 800c986:	463b      	mov	r3, r7
 800c988:	f7f3 fe1e 	bl	80005c8 <__aeabi_dmul>
 800c98c:	a35c      	add	r3, pc, #368	; (adr r3, 800cb00 <__ieee754_log+0x330>)
 800c98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c992:	f7f3 fc63 	bl	800025c <__adddf3>
 800c996:	4632      	mov	r2, r6
 800c998:	463b      	mov	r3, r7
 800c99a:	f7f3 fe15 	bl	80005c8 <__aeabi_dmul>
 800c99e:	a35a      	add	r3, pc, #360	; (adr r3, 800cb08 <__ieee754_log+0x338>)
 800c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a4:	f7f3 fc5a 	bl	800025c <__adddf3>
 800c9a8:	4642      	mov	r2, r8
 800c9aa:	464b      	mov	r3, r9
 800c9ac:	f7f3 fe0c 	bl	80005c8 <__aeabi_dmul>
 800c9b0:	a357      	add	r3, pc, #348	; (adr r3, 800cb10 <__ieee754_log+0x340>)
 800c9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b6:	4680      	mov	r8, r0
 800c9b8:	4689      	mov	r9, r1
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	4639      	mov	r1, r7
 800c9be:	f7f3 fe03 	bl	80005c8 <__aeabi_dmul>
 800c9c2:	a355      	add	r3, pc, #340	; (adr r3, 800cb18 <__ieee754_log+0x348>)
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	f7f3 fc48 	bl	800025c <__adddf3>
 800c9cc:	4632      	mov	r2, r6
 800c9ce:	463b      	mov	r3, r7
 800c9d0:	f7f3 fdfa 	bl	80005c8 <__aeabi_dmul>
 800c9d4:	a352      	add	r3, pc, #328	; (adr r3, 800cb20 <__ieee754_log+0x350>)
 800c9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9da:	f7f3 fc3f 	bl	800025c <__adddf3>
 800c9de:	4632      	mov	r2, r6
 800c9e0:	463b      	mov	r3, r7
 800c9e2:	f7f3 fdf1 	bl	80005c8 <__aeabi_dmul>
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	f7f3 fc35 	bl	800025c <__adddf3>
 800c9f2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c9f6:	9b01      	ldr	r3, [sp, #4]
 800c9f8:	3551      	adds	r5, #81	; 0x51
 800c9fa:	431d      	orrs	r5, r3
 800c9fc:	2d00      	cmp	r5, #0
 800c9fe:	4680      	mov	r8, r0
 800ca00:	4689      	mov	r9, r1
 800ca02:	dd48      	ble.n	800ca96 <__ieee754_log+0x2c6>
 800ca04:	4b4e      	ldr	r3, [pc, #312]	; (800cb40 <__ieee754_log+0x370>)
 800ca06:	2200      	movs	r2, #0
 800ca08:	4650      	mov	r0, sl
 800ca0a:	4659      	mov	r1, fp
 800ca0c:	f7f3 fddc 	bl	80005c8 <__aeabi_dmul>
 800ca10:	4652      	mov	r2, sl
 800ca12:	465b      	mov	r3, fp
 800ca14:	f7f3 fdd8 	bl	80005c8 <__aeabi_dmul>
 800ca18:	4602      	mov	r2, r0
 800ca1a:	460b      	mov	r3, r1
 800ca1c:	4606      	mov	r6, r0
 800ca1e:	460f      	mov	r7, r1
 800ca20:	4640      	mov	r0, r8
 800ca22:	4649      	mov	r1, r9
 800ca24:	f7f3 fc1a 	bl	800025c <__adddf3>
 800ca28:	ec53 2b18 	vmov	r2, r3, d8
 800ca2c:	f7f3 fdcc 	bl	80005c8 <__aeabi_dmul>
 800ca30:	4680      	mov	r8, r0
 800ca32:	4689      	mov	r9, r1
 800ca34:	b964      	cbnz	r4, 800ca50 <__ieee754_log+0x280>
 800ca36:	4602      	mov	r2, r0
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	f7f3 fc0b 	bl	8000258 <__aeabi_dsub>
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	4650      	mov	r0, sl
 800ca48:	4659      	mov	r1, fp
 800ca4a:	f7f3 fc05 	bl	8000258 <__aeabi_dsub>
 800ca4e:	e6d6      	b.n	800c7fe <__ieee754_log+0x2e>
 800ca50:	a321      	add	r3, pc, #132	; (adr r3, 800cad8 <__ieee754_log+0x308>)
 800ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca56:	ec51 0b19 	vmov	r0, r1, d9
 800ca5a:	f7f3 fdb5 	bl	80005c8 <__aeabi_dmul>
 800ca5e:	a320      	add	r3, pc, #128	; (adr r3, 800cae0 <__ieee754_log+0x310>)
 800ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca64:	4604      	mov	r4, r0
 800ca66:	460d      	mov	r5, r1
 800ca68:	ec51 0b19 	vmov	r0, r1, d9
 800ca6c:	f7f3 fdac 	bl	80005c8 <__aeabi_dmul>
 800ca70:	4642      	mov	r2, r8
 800ca72:	464b      	mov	r3, r9
 800ca74:	f7f3 fbf2 	bl	800025c <__adddf3>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	4639      	mov	r1, r7
 800ca80:	f7f3 fbea 	bl	8000258 <__aeabi_dsub>
 800ca84:	4652      	mov	r2, sl
 800ca86:	465b      	mov	r3, fp
 800ca88:	f7f3 fbe6 	bl	8000258 <__aeabi_dsub>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	4620      	mov	r0, r4
 800ca92:	4629      	mov	r1, r5
 800ca94:	e7d9      	b.n	800ca4a <__ieee754_log+0x27a>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	4650      	mov	r0, sl
 800ca9c:	4659      	mov	r1, fp
 800ca9e:	f7f3 fbdb 	bl	8000258 <__aeabi_dsub>
 800caa2:	ec53 2b18 	vmov	r2, r3, d8
 800caa6:	f7f3 fd8f 	bl	80005c8 <__aeabi_dmul>
 800caaa:	4606      	mov	r6, r0
 800caac:	460f      	mov	r7, r1
 800caae:	2c00      	cmp	r4, #0
 800cab0:	f43f af23 	beq.w	800c8fa <__ieee754_log+0x12a>
 800cab4:	a308      	add	r3, pc, #32	; (adr r3, 800cad8 <__ieee754_log+0x308>)
 800cab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caba:	ec51 0b19 	vmov	r0, r1, d9
 800cabe:	f7f3 fd83 	bl	80005c8 <__aeabi_dmul>
 800cac2:	a307      	add	r3, pc, #28	; (adr r3, 800cae0 <__ieee754_log+0x310>)
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	4604      	mov	r4, r0
 800caca:	460d      	mov	r5, r1
 800cacc:	ec51 0b19 	vmov	r0, r1, d9
 800cad0:	e727      	b.n	800c922 <__ieee754_log+0x152>
 800cad2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800cb28 <__ieee754_log+0x358>
 800cad6:	e694      	b.n	800c802 <__ieee754_log+0x32>
 800cad8:	fee00000 	.word	0xfee00000
 800cadc:	3fe62e42 	.word	0x3fe62e42
 800cae0:	35793c76 	.word	0x35793c76
 800cae4:	3dea39ef 	.word	0x3dea39ef
 800cae8:	55555555 	.word	0x55555555
 800caec:	3fd55555 	.word	0x3fd55555
 800caf0:	df3e5244 	.word	0xdf3e5244
 800caf4:	3fc2f112 	.word	0x3fc2f112
 800caf8:	96cb03de 	.word	0x96cb03de
 800cafc:	3fc74664 	.word	0x3fc74664
 800cb00:	94229359 	.word	0x94229359
 800cb04:	3fd24924 	.word	0x3fd24924
 800cb08:	55555593 	.word	0x55555593
 800cb0c:	3fe55555 	.word	0x3fe55555
 800cb10:	d078c69f 	.word	0xd078c69f
 800cb14:	3fc39a09 	.word	0x3fc39a09
 800cb18:	1d8e78af 	.word	0x1d8e78af
 800cb1c:	3fcc71c5 	.word	0x3fcc71c5
 800cb20:	9997fa04 	.word	0x9997fa04
 800cb24:	3fd99999 	.word	0x3fd99999
	...
 800cb30:	c3500000 	.word	0xc3500000
 800cb34:	43500000 	.word	0x43500000
 800cb38:	7fefffff 	.word	0x7fefffff
 800cb3c:	3ff00000 	.word	0x3ff00000
 800cb40:	3fe00000 	.word	0x3fe00000
 800cb44:	00000000 	.word	0x00000000

0800cb48 <nan>:
 800cb48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb50 <nan+0x8>
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	00000000 	.word	0x00000000
 800cb54:	7ff80000 	.word	0x7ff80000

0800cb58 <_init>:
 800cb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5a:	bf00      	nop
 800cb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb5e:	bc08      	pop	{r3}
 800cb60:	469e      	mov	lr, r3
 800cb62:	4770      	bx	lr

0800cb64 <_fini>:
 800cb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb66:	bf00      	nop
 800cb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb6a:	bc08      	pop	{r3}
 800cb6c:	469e      	mov	lr, r3
 800cb6e:	4770      	bx	lr

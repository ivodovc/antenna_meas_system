
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2a0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800c3e0  0800c3e0  0001c3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ca14  0800ca14  0001ca14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ca18  0800ca18  0001ca18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000004  0800ca1c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000360  200001e0  0800cbf8  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000540  0800cbf8  00020540  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e75b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004239  00000000  00000000  0003e96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001b78  00000000  00000000  00042ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001a20  00000000  00000000  00044720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00021fb6  00000000  00000000  00046140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f1dc  00000000  00000000  000680f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cfbd3  00000000  00000000  000872d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00156ea5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008650  00000000  00000000  00156ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c3c8 	.word	0x0800c3c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800c3c8 	.word	0x0800c3c8

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c64:	4a2f      	ldr	r2, [pc, #188]	; (8000d24 <MX_ADC1_Init+0xd8>)
 8000c66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c82:	2204      	movs	r2, #4
 8000c84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cc4:	221c      	movs	r2, #28
 8000cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cda:	4811      	ldr	r0, [pc, #68]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cdc:	f001 fee2 	bl	8002aa4 <HAL_ADC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000ce6:	f000 fdab 	bl	8001840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_ADC1_Init+0xdc>)
 8000cec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf6:	237f      	movs	r3, #127	; 0x7f
 8000cf8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000d08:	f002 f93a 	bl	8002f80 <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000d12:	f000 fd95 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200001fc 	.word	0x200001fc
 8000d24:	50040000 	.word	0x50040000
 8000d28:	14f00020 	.word	0x14f00020

08000d2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	2224      	movs	r2, #36	; 0x24
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f008 f939 	bl	8008fc4 <memset>
  if(adcHandle->Instance==ADC1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <HAL_ADC_MspInit+0x80>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d123      	bne.n	8000da4 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d60:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d62:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000d66:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f004 fecb 	bl	8005b08 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d78:	f000 fd62 	bl	8001840 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d80:	f7ff ff4a 	bl	8000c18 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff ff47 	bl	8000c18 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f003 f9a6 	bl	80040f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000da4:	bf00      	nop
 8000da6:	3740      	adds	r7, #64	; 0x40
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	50040000 	.word	0x50040000

08000db0 <read_raw>:
	 voltage =raw*VDDA/4095;
	 //printf("voltage in adc_control %.5f\n", voltage);
	 return voltage;
}

uint16_t read_raw(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
		 HAL_ADC_Start(&hadc1);
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <read_raw+0x30>)
 8000db8:	f001 ffc0 	bl	8002d3c <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <read_raw+0x30>)
 8000dc2:	f002 f842 	bl	8002e4a <HAL_ADC_PollForConversion>
		 uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <read_raw+0x30>)
 8000dc8:	f002 f8cc 	bl	8002f64 <HAL_ADC_GetValue>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	80fb      	strh	r3, [r7, #6]
		 HAL_ADC_Stop(&hadc1);
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <read_raw+0x30>)
 8000dd2:	f002 f807 	bl	8002de4 <HAL_ADC_Stop>
		 //printf("voltage in adc_control %.5f\n", voltage);
		 return raw;
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200001fc 	.word	0x200001fc

08000de4 <process_arguments>:
#include <string.h>
#include "main.h"
#include "command_processor.h"


void process_arguments(char* args, uint32_t* global_args){
 8000de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000de8:	b08b      	sub	sp, #44	; 0x2c
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
	uint32_t size = strlen(args);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff f9cf 	bl	8000194 <strlen>
 8000df6:	61b8      	str	r0, [r7, #24]
	uint32_t global_i = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
	// '()' is minimum string, if not return
	if (size<2){
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d978      	bls.n	8000ef4 <process_arguments+0x110>
		return;
	}
	// if first char is not (, something is wrong
	if (args[0] != '('){
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b28      	cmp	r3, #40	; 0x28
 8000e08:	d176      	bne.n	8000ef8 <process_arguments+0x114>
		return;
	}
	// last separation symbol
	uint32_t last_symbol_i = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
	// main loop, go char by char and add to args
	for (uint32_t i=1; i<size; i++){
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	e06a      	b.n	8000eea <process_arguments+0x106>
		// if closing parenthessis ) is found, return
		uint8_t c = args[i];
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	75fb      	strb	r3, [r7, #23]

		// parse int
		if (c == ',' || c == ')'){
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	2b2c      	cmp	r3, #44	; 0x2c
 8000e22:	d002      	beq.n	8000e2a <process_arguments+0x46>
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b29      	cmp	r3, #41	; 0x29
 8000e28:	d159      	bne.n	8000ede <process_arguments+0xfa>
 8000e2a:	466b      	mov	r3, sp
 8000e2c:	461e      	mov	r6, r3
			// if not long enough string is found, e.g. (,,)
			if (i-last_symbol_i-1 <= 0){
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d103      	bne.n	8000e40 <process_arguments+0x5c>
				last_symbol_i = i;
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	46b5      	mov	sp, r6
 8000e3e:	e051      	b.n	8000ee4 <process_arguments+0x100>
				continue;
			}
			char arg_as_str[i - last_symbol_i];
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	1ad1      	subs	r1, r2, r3
 8000e46:	460b      	mov	r3, r1
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	461d      	mov	r5, r3
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	00eb      	lsls	r3, r5, #3
 8000e5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e60:	00e2      	lsls	r2, r4, #3
 8000e62:	2300      	movs	r3, #0
 8000e64:	4688      	mov	r8, r1
 8000e66:	4699      	mov	r9, r3
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e7c:	1dcb      	adds	r3, r1, #7
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	ebad 0d03 	sub.w	sp, sp, r3
 8000e86:	466b      	mov	r3, sp
 8000e88:	3300      	adds	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
			// add delimiting symbol
			arg_as_str[i - last_symbol_i-1] = '\0';
 8000e8c:	69fa      	ldr	r2, [r7, #28]
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	3b01      	subs	r3, #1
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	2100      	movs	r1, #0
 8000e98:	54d1      	strb	r1, [r2, r3]
			memcpy(arg_as_str, args+last_symbol_i+1, i - last_symbol_i-1);
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	18d1      	adds	r1, r2, r3
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f008 f87b 	bl	8008fa8 <memcpy>
			last_symbol_i = i;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	623b      	str	r3, [r7, #32]
			// add to global_args
			uint32_t parsed_int = atoi(arg_as_str);
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f008 f840 	bl	8008f3c <atoi>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60bb      	str	r3, [r7, #8]
			global_args[global_i] = parsed_int;
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	601a      	str	r2, [r3, #0]
			global_i++;
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	3301      	adds	r3, #1
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
			if (global_i > MAX_ARG_LEN){
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	2b0a      	cmp	r3, #10
 8000ed6:	d901      	bls.n	8000edc <process_arguments+0xf8>
 8000ed8:	46b5      	mov	sp, r6
 8000eda:	e010      	b.n	8000efe <process_arguments+0x11a>
 8000edc:	46b5      	mov	sp, r6
				return;
			}
		}
		if (c == ')'){
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
 8000ee0:	2b29      	cmp	r3, #41	; 0x29
 8000ee2:	d00b      	beq.n	8000efc <process_arguments+0x118>
	for (uint32_t i=1; i<size; i++){
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d390      	bcc.n	8000e14 <process_arguments+0x30>
 8000ef2:	e004      	b.n	8000efe <process_arguments+0x11a>
		return;
 8000ef4:	bf00      	nop
 8000ef6:	e002      	b.n	8000efe <process_arguments+0x11a>
		return;
 8000ef8:	bf00      	nop
 8000efa:	e000      	b.n	8000efe <process_arguments+0x11a>
					return;
 8000efc:	bf00      	nop
		}
	}
}
 8000efe:	372c      	adds	r7, #44	; 0x2c
 8000f00:	46bd      	mov	sp, r7
 8000f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000f08 <process_command_string>:

// Process string commands
void process_command_string(char* string, command_t* global_command, uint32_t* global_args){
 8000f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f0c:	b08f      	sub	sp, #60	; 0x3c
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6178      	str	r0, [r7, #20]
 8000f12:	6139      	str	r1, [r7, #16]
 8000f14:	60fa      	str	r2, [r7, #12]
 8000f16:	466b      	mov	r3, sp
 8000f18:	461e      	mov	r6, r3
	char AMS_substr[4];
	AMS_substr[3] = '\0';
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	77fb      	strb	r3, [r7, #31]
	memcpy(AMS_substr, &string[0], 3);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	2203      	movs	r2, #3
 8000f24:	6979      	ldr	r1, [r7, #20]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f008 f83e 	bl	8008fa8 <memcpy>
	// If command doesnt begin with AMS set global_command to NONE and return
	if (strcmp(AMS_substr, "AMS") != 0){
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	498b      	ldr	r1, [pc, #556]	; (8001160 <process_command_string+0x258>)
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f924 	bl	8000180 <strcmp>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <process_command_string+0x40>
		*global_command = AMS_NONE;
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	46b5      	mov	sp, r6
 8000f46:	e107      	b.n	8001158 <process_command_string+0x250>
		return;
	}
	// find string between _ and (
	uint8_t start_index = strchr(string, '_') - string;
 8000f48:	215f      	movs	r1, #95	; 0x5f
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f008 fe4a 	bl	8009be4 <strchr>
 8000f50:	4602      	mov	r2, r0
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t end_index = strchr(string, '(') - string;
 8000f5a:	2128      	movs	r1, #40	; 0x28
 8000f5c:	6978      	ldr	r0, [r7, #20]
 8000f5e:	f008 fe41 	bl	8009be4 <strchr>
 8000f62:	4602      	mov	r2, r0
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	char command[end_index - start_index];
 8000f6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000f70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f74:	1ad1      	subs	r1, r2, r3
 8000f76:	1e4b      	subs	r3, r1, #1
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
 8000f7a:	460a      	mov	r2, r1
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	603a      	str	r2, [r7, #0]
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	00c3      	lsls	r3, r0, #3
 8000f8e:	6838      	ldr	r0, [r7, #0]
 8000f90:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f94:	6838      	ldr	r0, [r7, #0]
 8000f96:	00c2      	lsls	r2, r0, #3
 8000f98:	460a      	mov	r2, r1
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	4692      	mov	sl, r2
 8000f9e:	469b      	mov	fp, r3
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	3307      	adds	r3, #7
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	ebad 0d03 	sub.w	sp, sp, r3
 8000fc0:	466b      	mov	r3, sp
 8000fc2:	3300      	adds	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	command[end_index - start_index - 1] = '\0';
 8000fc6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000fca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	54d1      	strb	r1, [r2, r3]
	memcpy(command, &string[start_index+1], end_index-start_index-1);
 8000fd8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fdc:	3301      	adds	r3, #1
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	18d1      	adds	r1, r2, r3
 8000fe2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000fe6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	3b01      	subs	r3, #1
 8000fee:	461a      	mov	r2, r3
 8000ff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ff2:	f007 ffd9 	bl	8008fa8 <memcpy>
	// set command based on string

	if (strcmp(command, "VERSION") == 0){
 8000ff6:	495b      	ldr	r1, [pc, #364]	; (8001164 <process_command_string+0x25c>)
 8000ff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ffa:	f7ff f8c1 	bl	8000180 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d103      	bne.n	800100c <process_command_string+0x104>
		*global_command = AMS_VERSION;
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2203      	movs	r2, #3
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e047      	b.n	800109c <process_command_string+0x194>
	}else if (strcmp(command, "SWEEP") == 0){
 800100c:	4956      	ldr	r1, [pc, #344]	; (8001168 <process_command_string+0x260>)
 800100e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001010:	f7ff f8b6 	bl	8000180 <strcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <process_command_string+0x120>
		*global_command = AMS_SWEEP;
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
		printf("SETTING\n");
 8001020:	4852      	ldr	r0, [pc, #328]	; (800116c <process_command_string+0x264>)
 8001022:	f008 fda7 	bl	8009b74 <puts>
 8001026:	e039      	b.n	800109c <process_command_string+0x194>
	}else if (strcmp(command, "REGISTER")== 0){
 8001028:	4951      	ldr	r1, [pc, #324]	; (8001170 <process_command_string+0x268>)
 800102a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800102c:	f7ff f8a8 	bl	8000180 <strcmp>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d103      	bne.n	800103e <process_command_string+0x136>
		*global_command = AMS_REGISTER;
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2202      	movs	r2, #2
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e02e      	b.n	800109c <process_command_string+0x194>
	}else if (strcmp(command, "SINGLE")== 0){
 800103e:	494d      	ldr	r1, [pc, #308]	; (8001174 <process_command_string+0x26c>)
 8001040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001042:	f7ff f89d 	bl	8000180 <strcmp>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d103      	bne.n	8001054 <process_command_string+0x14c>
		*global_command = AMS_SINGLE;
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	2204      	movs	r2, #4
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	e023      	b.n	800109c <process_command_string+0x194>
	}else if (strcmp(command, "HOWAREYOU")== 0){
 8001054:	4948      	ldr	r1, [pc, #288]	; (8001178 <process_command_string+0x270>)
 8001056:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001058:	f7ff f892 	bl	8000180 <strcmp>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <process_command_string+0x162>
		*global_command = AMS_HOWAREYOU;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2205      	movs	r2, #5
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e018      	b.n	800109c <process_command_string+0x194>
	}else if (strcmp(command, "STOP")== 0){
 800106a:	4944      	ldr	r1, [pc, #272]	; (800117c <process_command_string+0x274>)
 800106c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800106e:	f7ff f887 	bl	8000180 <strcmp>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <process_command_string+0x178>
		*global_command = AMS_STOP;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	2206      	movs	r2, #6
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e00d      	b.n	800109c <process_command_string+0x194>
	}else if (strcmp(command, "CHECK")== 0){
 8001080:	493f      	ldr	r1, [pc, #252]	; (8001180 <process_command_string+0x278>)
 8001082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001084:	f7ff f87c 	bl	8000180 <strcmp>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d103      	bne.n	8001096 <process_command_string+0x18e>
		*global_command = AMS_CHECK;
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	2207      	movs	r2, #7
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	e002      	b.n	800109c <process_command_string+0x194>
	}else{
		*global_command = AMS_NONE;
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
	}
	// process arguments (max length is 10)
	memcpy(command, &string[start_index], end_index-start_index+1);
 800109c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	18d1      	adds	r1, r2, r3
 80010a4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80010a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	3301      	adds	r3, #1
 80010b0:	461a      	mov	r2, r3
 80010b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010b4:	f007 ff78 	bl	8008fa8 <memcpy>
	uint8_t total_end_index = strchr(string, ')') - string;
 80010b8:	2129      	movs	r1, #41	; 0x29
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f008 fd92 	bl	8009be4 <strchr>
 80010c0:	4602      	mov	r2, r0
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	char args[total_end_index - end_index + 2];
 80010ca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	1c99      	adds	r1, r3, #2
 80010d6:	1e4b      	subs	r3, r1, #1
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
 80010da:	460a      	mov	r2, r1
 80010dc:	2300      	movs	r3, #0
 80010de:	4690      	mov	r8, r2
 80010e0:	4699      	mov	r9, r3
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010f6:	460a      	mov	r2, r1
 80010f8:	2300      	movs	r3, #0
 80010fa:	4614      	mov	r4, r2
 80010fc:	461d      	mov	r5, r3
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	00eb      	lsls	r3, r5, #3
 8001108:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800110c:	00e2      	lsls	r2, r4, #3
 800110e:	460b      	mov	r3, r1
 8001110:	3307      	adds	r3, #7
 8001112:	08db      	lsrs	r3, r3, #3
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	ebad 0d03 	sub.w	sp, sp, r3
 800111a:	466b      	mov	r3, sp
 800111c:	3300      	adds	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
	args[total_end_index - end_index + 1] = '\0';
 8001120:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001124:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	3301      	adds	r3, #1
 800112c:	6a3a      	ldr	r2, [r7, #32]
 800112e:	2100      	movs	r1, #0
 8001130:	54d1      	strb	r1, [r2, r3]
	memcpy(args, &string[end_index], total_end_index-end_index+1);
 8001132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	18d1      	adds	r1, r2, r3
 800113a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800113e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	3301      	adds	r3, #1
 8001146:	461a      	mov	r2, r3
 8001148:	6a38      	ldr	r0, [r7, #32]
 800114a:	f007 ff2d 	bl	8008fa8 <memcpy>

	process_arguments(args, global_args);
 800114e:	68f9      	ldr	r1, [r7, #12]
 8001150:	6a38      	ldr	r0, [r7, #32]
 8001152:	f7ff fe47 	bl	8000de4 <process_arguments>
 8001156:	46b5      	mov	sp, r6
}
 8001158:	373c      	adds	r7, #60	; 0x3c
 800115a:	46bd      	mov	sp, r7
 800115c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001160:	0800c3e0 	.word	0x0800c3e0
 8001164:	0800c3e4 	.word	0x0800c3e4
 8001168:	0800c3ec 	.word	0x0800c3ec
 800116c:	0800c3f4 	.word	0x0800c3f4
 8001170:	0800c3fc 	.word	0x0800c3fc
 8001174:	0800c408 	.word	0x0800c408
 8001178:	0800c410 	.word	0x0800c410
 800117c:	0800c41c 	.word	0x0800c41c
 8001180:	0800c424 	.word	0x0800c424

08001184 <LL_AHB1_GRP1_EnableClock>:
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800118c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011a8:	68fb      	ldr	r3, [r7, #12]
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011ba:	2004      	movs	r0, #4
 80011bc:	f7ff ffe2 	bl	8001184 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff ffdf 	bl	8001184 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	200b      	movs	r0, #11
 80011cc:	f002 fd0f 	bl	8003bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011d0:	200b      	movs	r0, #11
 80011d2:	f002 fd26 	bl	8003c22 <HAL_NVIC_EnableIRQ>

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}

080011da <LL_AHB2_GRP1_EnableClock>:
{
 80011da:	b480      	push	{r7}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4013      	ands	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff ffda 	bl	80011da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2002      	movs	r0, #2
 8001228:	f7ff ffd7 	bl	80011da <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|LED_RED_Pin
 800122c:	2200      	movs	r2, #0
 800122e:	f641 011c 	movw	r1, #6172	; 0x181c
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f003 f8c3 	bl	80043c0 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2102      	movs	r1, #2
 800123e:	4825      	ldr	r0, [pc, #148]	; (80012d4 <MX_GPIO_Init+0xc8>)
 8001240:	f003 f8be 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2130      	movs	r1, #48	; 0x30
 8001248:	4822      	ldr	r0, [pc, #136]	; (80012d4 <MX_GPIO_Init+0xc8>)
 800124a:	f003 f8b9 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PAPin
                           PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|LED_RED_Pin
 800124e:	f641 031c 	movw	r3, #6172	; 0x181c
 8001252:	607b      	str	r3, [r7, #4]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f002 ff42 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800126c:	2340      	movs	r3, #64	; 0x40
 800126e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f002 ff36 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001284:	2304      	movs	r3, #4
 8001286:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	480f      	ldr	r0, [pc, #60]	; (80012d4 <MX_GPIO_Init+0xc8>)
 8001296:	f002 ff2b 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800129a:	2301      	movs	r3, #1
 800129c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	480a      	ldr	r0, [pc, #40]	; (80012d4 <MX_GPIO_Init+0xc8>)
 80012ac:	f002 ff20 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012b0:	2332      	movs	r3, #50	; 0x32
 80012b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4803      	ldr	r0, [pc, #12]	; (80012d4 <MX_GPIO_Init+0xc8>)
 80012c6:	f002 ff13 	bl	80040f0 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	48000400 	.word	0x48000400

080012d8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_IPCC_Init+0x20>)
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <MX_IPCC_Init+0x24>)
 8001314:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_IPCC_Init+0x20>)
 8001318:	f003 f884 	bl	8004424 <HAL_IPCC_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001322:	f000 fa8d 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000260 	.word	0x20000260
 8001330:	58000c00 	.word	0x58000c00

08001334 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <HAL_IPCC_MspInit+0x44>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d113      	bne.n	800136e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001346:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800134a:	f7ff ffc5 	bl	80012d8 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	202c      	movs	r0, #44	; 0x2c
 8001354:	f002 fc4b 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001358:	202c      	movs	r0, #44	; 0x2c
 800135a:	f002 fc62 	bl	8003c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	202d      	movs	r0, #45	; 0x2d
 8001364:	f002 fc43 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001368:	202d      	movs	r0, #45	; 0x2d
 800136a:	f002 fc5a 	bl	8003c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	58000c00 	.word	0x58000c00

0800137c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001384:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001388:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d013      	beq.n	80013bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001394:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001398:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800139c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00b      	beq.n	80013bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013a4:	e000      	b.n	80013a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80013a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f9      	beq.n	80013a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_write>:
char RxBuffer[RX_BFR_SIZE];
command_t global_command = AMS_NONE;
uint32_t global_args[MAX_ARG_LEN];


int _write(int file, char *ptr, int len) {
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e009      	b.n	80013f0 <_write+0x26>
    ITM_SendChar(*ptr++);
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	60ba      	str	r2, [r7, #8]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ffc9 	bl	800137c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf1      	blt.n	80013dc <_write+0x12>
  }
  return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001414:	d113      	bne.n	800143e <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		if (global_command==AMS_NONE){
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d108      	bne.n	8001430 <HAL_TIM_PeriodElapsedCallback+0x2c>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800141e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f002 ffe3 	bl	80043f0 <HAL_GPIO_TogglePin>
			DisableRFOutput();//safeguard in case something bad happened in the code
 800142a:	f000 fa22 	bl	8001872 <DisableRFOutput>
		}else{
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
		}
	}
}
 800142e:	e006      	b.n	800143e <HAL_TIM_PeriodElapsedCallback+0x3a>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143a:	f002 ffc1 	bl	80043c0 <HAL_GPIO_WritePin>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200002dc 	.word	0x200002dc

0800144c <do_commands>:
void HAL_Uart_RxCpltCallback(UART_HandleTypeDef *huart);



char strbuf[100];
void do_commands(){
 800144c:	b5b0      	push	{r4, r5, r7, lr}
 800144e:	b08c      	sub	sp, #48	; 0x30
 8001450:	af00      	add	r7, sp, #0
	// check if there is command and if is, then process it
	if (global_command == AMS_SWEEP){
 8001452:	4b83      	ldr	r3, [pc, #524]	; (8001660 <do_commands+0x214>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d166      	bne.n	8001528 <do_commands+0xdc>
		uint32_t from = global_args[0];
 800145a:	4b82      	ldr	r3, [pc, #520]	; (8001664 <do_commands+0x218>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	617b      	str	r3, [r7, #20]
		uint32_t to = global_args[1];
 8001460:	4b80      	ldr	r3, [pc, #512]	; (8001664 <do_commands+0x218>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	613b      	str	r3, [r7, #16]
		uint32_t step = global_args[2];
 8001466:	4b7f      	ldr	r3, [pc, #508]	; (8001664 <do_commands+0x218>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	60fb      	str	r3, [r7, #12]
		uint32_t pwr = global_args[3];
 800146c:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <do_commands+0x218>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
		EnableRFOutput();
 8001472:	f000 f9f4 	bl	800185e <EnableRFOutput>
		setRFA_PWR(pwr-1); // -1 because pwr is defined as 1,2,3,4 but MAX2870 expects 0,1,2,3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3b01      	subs	r3, #1
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fa96 	bl	80019ac <setRFA_PWR>
		uint32_t i;
		for (i=from; i<=to; i+=step){
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001484:	e022      	b.n	80014cc <do_commands+0x80>
			  //printf("setting %d MHz\n", i);
			  if (global_command==AMS_STOP)
 8001486:	4b76      	ldr	r3, [pc, #472]	; (8001660 <do_commands+0x214>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b06      	cmp	r3, #6
 800148c:	f000 80e3 	beq.w	8001656 <do_commands+0x20a>
				  return;
			  set_requested_frequency(i);
 8001490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001492:	f000 fafd 	bl	8001a90 <set_requested_frequency>
			  HAL_Delay(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f001 f8ca 	bl	8002630 <HAL_Delay>
			  uint16_t raw = read_raw();
 800149c:	f7ff fc88 	bl	8000db0 <read_raw>
 80014a0:	4603      	mov	r3, r0
 80014a2:	80bb      	strh	r3, [r7, #4]
			  sprintf(strbuf, "{%lu, %u}", i, raw);
 80014a4:	88bb      	ldrh	r3, [r7, #4]
 80014a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014a8:	496f      	ldr	r1, [pc, #444]	; (8001668 <do_commands+0x21c>)
 80014aa:	4870      	ldr	r0, [pc, #448]	; (800166c <do_commands+0x220>)
 80014ac:	f008 fb7a 	bl	8009ba4 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)&strbuf, strlen(strbuf), UART_TIMEOUT);
 80014b0:	486e      	ldr	r0, [pc, #440]	; (800166c <do_commands+0x220>)
 80014b2:	f7fe fe6f 	bl	8000194 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	2364      	movs	r3, #100	; 0x64
 80014bc:	496b      	ldr	r1, [pc, #428]	; (800166c <do_commands+0x220>)
 80014be:	486c      	ldr	r0, [pc, #432]	; (8001670 <do_commands+0x224>)
 80014c0:	f005 fc06 	bl	8006cd0 <HAL_UART_Transmit>
		for (i=from; i<=to; i+=step){
 80014c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d9d8      	bls.n	8001486 <do_commands+0x3a>
		 }
		// send last frequency
		if (i!=to){
 80014d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d016      	beq.n	800150a <do_commands+0xbe>
			set_requested_frequency(to);
 80014dc:	6938      	ldr	r0, [r7, #16]
 80014de:	f000 fad7 	bl	8001a90 <set_requested_frequency>
			//HAL_Delay(1);
			uint16_t raw = read_raw();
 80014e2:	f7ff fc65 	bl	8000db0 <read_raw>
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
			sprintf(strbuf, "{%lu, %u}", to, raw);
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	495e      	ldr	r1, [pc, #376]	; (8001668 <do_commands+0x21c>)
 80014f0:	485e      	ldr	r0, [pc, #376]	; (800166c <do_commands+0x220>)
 80014f2:	f008 fb57 	bl	8009ba4 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)&strbuf, strlen(strbuf), UART_TIMEOUT);
 80014f6:	485d      	ldr	r0, [pc, #372]	; (800166c <do_commands+0x220>)
 80014f8:	f7fe fe4c 	bl	8000194 <strlen>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	2364      	movs	r3, #100	; 0x64
 8001502:	495a      	ldr	r1, [pc, #360]	; (800166c <do_commands+0x220>)
 8001504:	485a      	ldr	r0, [pc, #360]	; (8001670 <do_commands+0x224>)
 8001506:	f005 fbe3 	bl	8006cd0 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)";", 2, UART_TIMEOUT);
 800150a:	2364      	movs	r3, #100	; 0x64
 800150c:	2202      	movs	r2, #2
 800150e:	4959      	ldr	r1, [pc, #356]	; (8001674 <do_commands+0x228>)
 8001510:	4857      	ldr	r0, [pc, #348]	; (8001670 <do_commands+0x224>)
 8001512:	f005 fbdd 	bl	8006cd0 <HAL_UART_Transmit>
		printf("Done\n");
 8001516:	4858      	ldr	r0, [pc, #352]	; (8001678 <do_commands+0x22c>)
 8001518:	f008 fb2c 	bl	8009b74 <puts>
		global_command = AMS_NONE;
 800151c:	4b50      	ldr	r3, [pc, #320]	; (8001660 <do_commands+0x214>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
		DisableRFOutput();
 8001522:	f000 f9a6 	bl	8001872 <DisableRFOutput>
 8001526:	e097      	b.n	8001658 <do_commands+0x20c>

	}else if (global_command == AMS_SINGLE){
 8001528:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <do_commands+0x214>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d142      	bne.n	80015b6 <do_commands+0x16a>
		EnableRFOutput();
 8001530:	f000 f995 	bl	800185e <EnableRFOutput>
		uint32_t f = global_args[0];
 8001534:	4b4b      	ldr	r3, [pc, #300]	; (8001664 <do_commands+0x218>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t span = global_args[1];
 800153a:	4b4a      	ldr	r3, [pc, #296]	; (8001664 <do_commands+0x218>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	623b      	str	r3, [r7, #32]
		uint32_t halfspan = span/2;
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	085b      	lsrs	r3, r3, #1
 8001544:	61fb      	str	r3, [r7, #28]
		while (global_command == AMS_SINGLE){
 8001546:	e02c      	b.n	80015a2 <do_commands+0x156>
			for (int i=f-halfspan; i<=f+halfspan; i++){
 8001548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001550:	e021      	b.n	8001596 <do_commands+0x14a>
				if (global_command==AMS_STOP)
 8001552:	4b43      	ldr	r3, [pc, #268]	; (8001660 <do_commands+0x214>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b06      	cmp	r3, #6
 8001558:	d100      	bne.n	800155c <do_commands+0x110>
					break;
 800155a:	e022      	b.n	80015a2 <do_commands+0x156>
				set_requested_frequency(i);
 800155c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800155e:	f000 fa97 	bl	8001a90 <set_requested_frequency>
				HAL_Delay(1);
 8001562:	2001      	movs	r0, #1
 8001564:	f001 f864 	bl	8002630 <HAL_Delay>
				uint16_t raw = read_raw();
 8001568:	f7ff fc22 	bl	8000db0 <read_raw>
 800156c:	4603      	mov	r3, r0
 800156e:	837b      	strh	r3, [r7, #26]
				sprintf(strbuf, "{%lu, %u}", i, raw);
 8001570:	8b7b      	ldrh	r3, [r7, #26]
 8001572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001574:	493c      	ldr	r1, [pc, #240]	; (8001668 <do_commands+0x21c>)
 8001576:	483d      	ldr	r0, [pc, #244]	; (800166c <do_commands+0x220>)
 8001578:	f008 fb14 	bl	8009ba4 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 800157c:	483b      	ldr	r0, [pc, #236]	; (800166c <do_commands+0x220>)
 800157e:	f7fe fe09 	bl	8000194 <strlen>
 8001582:	4603      	mov	r3, r0
 8001584:	b29b      	uxth	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	4938      	ldr	r1, [pc, #224]	; (800166c <do_commands+0x220>)
 800158a:	4839      	ldr	r0, [pc, #228]	; (8001670 <do_commands+0x224>)
 800158c:	f005 fc2e 	bl	8006dec <HAL_UART_Transmit_IT>
			for (int i=f-halfspan; i<=f+halfspan; i++){
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	3301      	adds	r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
 8001596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	441a      	add	r2, r3
 800159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159e:	429a      	cmp	r2, r3
 80015a0:	d2d7      	bcs.n	8001552 <do_commands+0x106>
		while (global_command == AMS_SINGLE){
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <do_commands+0x214>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d0ce      	beq.n	8001548 <do_commands+0xfc>
			}
		}
		DisableRFOutput();
 80015aa:	f000 f962 	bl	8001872 <DisableRFOutput>
		global_command = AMS_NONE;
 80015ae:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <do_commands+0x214>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	e050      	b.n	8001658 <do_commands+0x20c>
	}else if (global_command == AMS_VERSION){
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <do_commands+0x214>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d119      	bne.n	80015f2 <do_commands+0x1a6>
		strcpy(strbuf, "AMS_MSG(Antenna Measurement System Version 0.1);");
 80015be:	4a2b      	ldr	r2, [pc, #172]	; (800166c <do_commands+0x220>)
 80015c0:	4b2e      	ldr	r3, [pc, #184]	; (800167c <do_commands+0x230>)
 80015c2:	4614      	mov	r4, r2
 80015c4:	461d      	mov	r5, r3
 80015c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d2:	682b      	ldr	r3, [r5, #0]
 80015d4:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 80015d6:	4825      	ldr	r0, [pc, #148]	; (800166c <do_commands+0x220>)
 80015d8:	f7fe fddc 	bl	8000194 <strlen>
 80015dc:	4603      	mov	r3, r0
 80015de:	b29b      	uxth	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	4922      	ldr	r1, [pc, #136]	; (800166c <do_commands+0x220>)
 80015e4:	4822      	ldr	r0, [pc, #136]	; (8001670 <do_commands+0x224>)
 80015e6:	f005 fc01 	bl	8006dec <HAL_UART_Transmit_IT>
		global_command = AMS_NONE;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <do_commands+0x214>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	e032      	b.n	8001658 <do_commands+0x20c>

	}else if (global_command == AMS_HOWAREYOU){
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <do_commands+0x214>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d115      	bne.n	8001626 <do_commands+0x1da>
		strcpy(strbuf, "AMS_MSG(I am fine and working. So far so good.\n I feel bit exhausted, but ya know, that's life.);");
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <do_commands+0x220>)
 80015fc:	4b20      	ldr	r3, [pc, #128]	; (8001680 <do_commands+0x234>)
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	2362      	movs	r3, #98	; 0x62
 8001604:	461a      	mov	r2, r3
 8001606:	f007 fccf 	bl	8008fa8 <memcpy>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 800160a:	4818      	ldr	r0, [pc, #96]	; (800166c <do_commands+0x220>)
 800160c:	f7fe fdc2 	bl	8000194 <strlen>
 8001610:	4603      	mov	r3, r0
 8001612:	b29b      	uxth	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	4915      	ldr	r1, [pc, #84]	; (800166c <do_commands+0x220>)
 8001618:	4815      	ldr	r0, [pc, #84]	; (8001670 <do_commands+0x224>)
 800161a:	f005 fbe7 	bl	8006dec <HAL_UART_Transmit_IT>
		global_command = AMS_NONE;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <do_commands+0x214>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	e018      	b.n	8001658 <do_commands+0x20c>

	}else if (global_command == AMS_CHECK){
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <do_commands+0x214>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b07      	cmp	r3, #7
 800162c:	d114      	bne.n	8001658 <do_commands+0x20c>
		strcpy(strbuf, "AMS_OK;");
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <do_commands+0x220>)
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <do_commands+0x238>)
 8001632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001636:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 800163a:	480c      	ldr	r0, [pc, #48]	; (800166c <do_commands+0x220>)
 800163c:	f7fe fdaa 	bl	8000194 <strlen>
 8001640:	4603      	mov	r3, r0
 8001642:	b29b      	uxth	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	4909      	ldr	r1, [pc, #36]	; (800166c <do_commands+0x220>)
 8001648:	4809      	ldr	r0, [pc, #36]	; (8001670 <do_commands+0x224>)
 800164a:	f005 fbcf 	bl	8006dec <HAL_UART_Transmit_IT>
		global_command = AMS_NONE;
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <do_commands+0x214>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e000      	b.n	8001658 <do_commands+0x20c>
				  return;
 8001656:	bf00      	nop
	}
}
 8001658:	3730      	adds	r7, #48	; 0x30
 800165a:	46bd      	mov	sp, r7
 800165c:	bdb0      	pop	{r4, r5, r7, pc}
 800165e:	bf00      	nop
 8001660:	200002dc 	.word	0x200002dc
 8001664:	200002e0 	.word	0x200002e0
 8001668:	0800c42c 	.word	0x0800c42c
 800166c:	20000308 	.word	0x20000308
 8001670:	20000498 	.word	0x20000498
 8001674:	0800c438 	.word	0x0800c438
 8001678:	0800c43c 	.word	0x0800c43c
 800167c:	0800c444 	.word	0x0800c444
 8001680:	0800c478 	.word	0x0800c478
 8001684:	0800c4dc 	.word	0x0800c4dc

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168e:	f000 ff49 	bl	8002524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001692:	f000 f84f 	bl	8001734 <SystemClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001696:	f7ff fe39 	bl	800130c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169a:	f7ff fdb7 	bl	800120c <MX_GPIO_Init>
  MX_DMA_Init();
 800169e:	f7ff fd8a 	bl	80011b6 <MX_DMA_Init>
  MX_SPI1_Init();
 80016a2:	f000 fbc3 	bl	8001e2c <MX_SPI1_Init>
  MX_ADC1_Init();
 80016a6:	f7ff fad1 	bl	8000c4c <MX_ADC1_Init>
  MX_TIM2_Init();
 80016aa:	f000 fd83 	bl	80021b4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80016ae:	f000 fe19 	bl	80022e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80016b2:	4819      	ldr	r0, [pc, #100]	; (8001718 <main+0x90>)
 80016b4:	f004 fed0 	bl	8006458 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *) RxBuffer, RX_BFR_SIZE);
 80016b8:	2240      	movs	r2, #64	; 0x40
 80016ba:	4918      	ldr	r1, [pc, #96]	; (800171c <main+0x94>)
 80016bc:	4818      	ldr	r0, [pc, #96]	; (8001720 <main+0x98>)
 80016be:	f007 fb9a 	bl	8008df6 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting STM32\n");
 80016c2:	4818      	ldr	r0, [pc, #96]	; (8001724 <main+0x9c>)
 80016c4:	f008 fa56 	bl	8009b74 <puts>
  printf("Starting MAX\n");
 80016c8:	4817      	ldr	r0, [pc, #92]	; (8001728 <main+0xa0>)
 80016ca:	f008 fa53 	bl	8009b74 <puts>
  EnableChip();
 80016ce:	f000 f8bc 	bl	800184a <EnableChip>
  // just to be sure PLL RF output is turned off
  DisableRFOutput();
 80016d2:	f000 f8ce 	bl	8001872 <DisableRFOutput>
  // PLL Must be initialized on PowerUp
  init_PLL();
 80016d6:	f000 fa49 	bl	8001b6c <init_PLL>

  // PLL must be set to default configuration specified in write_regs_SOFT
  write_regs_SOFT();
 80016da:	f000 fa93 	bl	8001c04 <write_regs_SOFT>
  setIntegerMode();
 80016de:	f000 f9c7 	bl	8001a70 <setIntegerMode>

  //calibrate();
  for (int i=0; i<4; i++){
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	e00b      	b.n	8001700 <main+0x78>
	  printf("RFA PWR: %d\n", i);
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4810      	ldr	r0, [pc, #64]	; (800172c <main+0xa4>)
 80016ec:	f008 f9bc 	bl	8009a68 <iprintf>
	  setRFA_PWR(i);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f95b 	bl	80019ac <setRFA_PWR>
	  program_PLL();
 80016f6:	f000 fb0d 	bl	8001d14 <program_PLL>
  for (int i=0; i<4; i++){
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3301      	adds	r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b03      	cmp	r3, #3
 8001704:	ddf0      	ble.n	80016e8 <main+0x60>
	  //HAL_Delay(1);
  }
  //print_registers();
  printf("Setting test frequency to 65MHz\n");
 8001706:	480a      	ldr	r0, [pc, #40]	; (8001730 <main+0xa8>)
 8001708:	f008 fa34 	bl	8009b74 <puts>
  set_requested_frequency(65);
 800170c:	2041      	movs	r0, #65	; 0x41
 800170e:	f000 f9bf 	bl	8001a90 <set_requested_frequency>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  do_commands();
 8001712:	f7ff fe9b 	bl	800144c <do_commands>
 8001716:	e7fc      	b.n	8001712 <main+0x8a>
 8001718:	2000044c 	.word	0x2000044c
 800171c:	2000029c 	.word	0x2000029c
 8001720:	20000498 	.word	0x20000498
 8001724:	0800c4e4 	.word	0x0800c4e4
 8001728:	0800c4f4 	.word	0x0800c4f4
 800172c:	0800c504 	.word	0x0800c504
 8001730:	0800c514 	.word	0x0800c514

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b09a      	sub	sp, #104	; 0x68
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	2248      	movs	r2, #72	; 0x48
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f007 fc3e 	bl	8008fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	615a      	str	r2, [r3, #20]
 8001758:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800175a:	2323      	movs	r3, #35	; 0x23
 800175c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800175e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800176a:	2301      	movs	r3, #1
 800176c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176e:	2340      	movs	r3, #64	; 0x40
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001772:	2300      	movs	r3, #0
 8001774:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001776:	2360      	movs	r3, #96	; 0x60
 8001778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2302      	movs	r3, #2
 800177c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800177e:	2301      	movs	r3, #1
 8001780:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001786:	2340      	movs	r3, #64	; 0x40
 8001788:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800178a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800178e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8001790:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001794:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001796:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800179a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179c:	f107 0320 	add.w	r3, r7, #32
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fad9 	bl	8004d58 <HAL_RCC_OscConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80017ac:	f000 f848 	bl	8001840 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80017b0:	236f      	movs	r3, #111	; 0x6f
 80017b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b4:	2303      	movs	r3, #3
 80017b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2101      	movs	r1, #1
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 fe2b 	bl	800542c <HAL_RCC_ClockConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80017dc:	f000 f830 	bl	8001840 <Error_Handler>
  }
}
 80017e0:	bf00      	nop
 80017e2:	3768      	adds	r7, #104	; 0x68
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]

		/* start the DMA again */
		printf("Size %d\n", Size);
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	4619      	mov	r1, r3
 80017f8:	480b      	ldr	r0, [pc, #44]	; (8001828 <HAL_UARTEx_RxEventCallback+0x40>)
 80017fa:	f008 f935 	bl	8009a68 <iprintf>
		printf(RxBuffer);
 80017fe:	480b      	ldr	r0, [pc, #44]	; (800182c <HAL_UARTEx_RxEventCallback+0x44>)
 8001800:	f008 f932 	bl	8009a68 <iprintf>
		printf("Received\n");
 8001804:	480a      	ldr	r0, [pc, #40]	; (8001830 <HAL_UARTEx_RxEventCallback+0x48>)
 8001806:	f008 f9b5 	bl	8009b74 <puts>
		process_command_string(RxBuffer, &global_command, global_args);
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_UARTEx_RxEventCallback+0x4c>)
 800180c:	490a      	ldr	r1, [pc, #40]	; (8001838 <HAL_UARTEx_RxEventCallback+0x50>)
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <HAL_UARTEx_RxEventCallback+0x44>)
 8001810:	f7ff fb7a 	bl	8000f08 <process_command_string>
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *) RxBuffer, RX_BFR_SIZE);
 8001814:	2240      	movs	r2, #64	; 0x40
 8001816:	4905      	ldr	r1, [pc, #20]	; (800182c <HAL_UARTEx_RxEventCallback+0x44>)
 8001818:	4808      	ldr	r0, [pc, #32]	; (800183c <HAL_UARTEx_RxEventCallback+0x54>)
 800181a:	f007 faec 	bl	8008df6 <HAL_UARTEx_ReceiveToIdle_IT>
		//__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	0800c534 	.word	0x0800c534
 800182c:	2000029c 	.word	0x2000029c
 8001830:	0800c540 	.word	0x0800c540
 8001834:	200002e0 	.word	0x200002e0
 8001838:	200002dc 	.word	0x200002dc
 800183c:	20000498 	.word	0x20000498

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	e7fe      	b.n	8001848 <Error_Handler+0x8>

0800184a <EnableChip>:
/**
  * @brief Turn MAX2870 PLL on
  * By setting CE pin high
  * @retval
  */
void EnableChip(){
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2104      	movs	r1, #4
 8001852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001856:	f002 fdb3 	bl	80043c0 <HAL_GPIO_WritePin>
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <EnableRFOutput>:

void DisableChip(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
}

void EnableRFOutput(){
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001862:	2201      	movs	r2, #1
 8001864:	2108      	movs	r1, #8
 8001866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186a:	f002 fda9 	bl	80043c0 <HAL_GPIO_WritePin>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}

08001872 <DisableRFOutput>:

void DisableRFOutput(){
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	2108      	movs	r1, #8
 800187a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187e:	f002 fd9f 	bl	80043c0 <HAL_GPIO_WritePin>
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <setDIVA>:
	uint32_t SHDN_BIT = 1 << 5;
	write_reg(reg2 & ~(SHDN_BIT));
}

// permitted n values: 1, 2, 4, 8, 16, 32, 64, 128
void setDIVA(uint8_t n){
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
	uint32_t diva_value = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
	//sets DIVA to 111
	switch (n){
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b80      	cmp	r3, #128	; 0x80
 800189a:	d04e      	beq.n	800193a <setDIVA+0xb2>
 800189c:	2b80      	cmp	r3, #128	; 0x80
 800189e:	dc7e      	bgt.n	800199e <setDIVA+0x116>
 80018a0:	2b20      	cmp	r3, #32
 80018a2:	dc47      	bgt.n	8001934 <setDIVA+0xac>
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	dd7a      	ble.n	800199e <setDIVA+0x116>
 80018a8:	3b01      	subs	r3, #1
 80018aa:	2b1f      	cmp	r3, #31
 80018ac:	d877      	bhi.n	800199e <setDIVA+0x116>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <setDIVA+0x2c>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	08001973 	.word	0x08001973
 80018b8:	0800196b 	.word	0x0800196b
 80018bc:	0800199f 	.word	0x0800199f
 80018c0:	08001963 	.word	0x08001963
 80018c4:	0800199f 	.word	0x0800199f
 80018c8:	0800199f 	.word	0x0800199f
 80018cc:	0800199f 	.word	0x0800199f
 80018d0:	0800195b 	.word	0x0800195b
 80018d4:	0800199f 	.word	0x0800199f
 80018d8:	0800199f 	.word	0x0800199f
 80018dc:	0800199f 	.word	0x0800199f
 80018e0:	0800199f 	.word	0x0800199f
 80018e4:	0800199f 	.word	0x0800199f
 80018e8:	0800199f 	.word	0x0800199f
 80018ec:	0800199f 	.word	0x0800199f
 80018f0:	08001953 	.word	0x08001953
 80018f4:	0800199f 	.word	0x0800199f
 80018f8:	0800199f 	.word	0x0800199f
 80018fc:	0800199f 	.word	0x0800199f
 8001900:	0800199f 	.word	0x0800199f
 8001904:	0800199f 	.word	0x0800199f
 8001908:	0800199f 	.word	0x0800199f
 800190c:	0800199f 	.word	0x0800199f
 8001910:	0800199f 	.word	0x0800199f
 8001914:	0800199f 	.word	0x0800199f
 8001918:	0800199f 	.word	0x0800199f
 800191c:	0800199f 	.word	0x0800199f
 8001920:	0800199f 	.word	0x0800199f
 8001924:	0800199f 	.word	0x0800199f
 8001928:	0800199f 	.word	0x0800199f
 800192c:	0800199f 	.word	0x0800199f
 8001930:	0800194b 	.word	0x0800194b
 8001934:	2b40      	cmp	r3, #64	; 0x40
 8001936:	d004      	beq.n	8001942 <setDIVA+0xba>
		case 1:
			diva_value = 0b000 << 20;
			break;
		default:
			// do not set diva mask
			return;
 8001938:	e031      	b.n	800199e <setDIVA+0x116>
			diva_value = 0b111 << 20;
 800193a:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 800193e:	617b      	str	r3, [r7, #20]
			break;
 8001940:	e01a      	b.n	8001978 <setDIVA+0xf0>
			diva_value = 0b110 << 20;
 8001942:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
 8001946:	617b      	str	r3, [r7, #20]
			break;
 8001948:	e016      	b.n	8001978 <setDIVA+0xf0>
			diva_value = 0b101 << 20;
 800194a:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
 800194e:	617b      	str	r3, [r7, #20]
			break;
 8001950:	e012      	b.n	8001978 <setDIVA+0xf0>
			diva_value = 0b100 << 20;
 8001952:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001956:	617b      	str	r3, [r7, #20]
			break;
 8001958:	e00e      	b.n	8001978 <setDIVA+0xf0>
			diva_value = 0b011 << 20;
 800195a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800195e:	617b      	str	r3, [r7, #20]
			break;
 8001960:	e00a      	b.n	8001978 <setDIVA+0xf0>
			diva_value = 0b010 << 20;
 8001962:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001966:	617b      	str	r3, [r7, #20]
			break;
 8001968:	e006      	b.n	8001978 <setDIVA+0xf0>
			diva_value = 0b001 << 20;
 800196a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800196e:	617b      	str	r3, [r7, #20]
			break;
 8001970:	e002      	b.n	8001978 <setDIVA+0xf0>
			diva_value = 0b000 << 20;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
			break;
 8001976:	bf00      	nop
			break;
	}
	uint32_t DIVA_MASK = 0b111 << 20;
 8001978:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 800197c:	613b      	str	r3, [r7, #16]
	uint32_t new_reg4 = reg4 & ~(DIVA_MASK);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43da      	mvns	r2, r3
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <setDIVA+0x120>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4013      	ands	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
	uint32_t newnewreg4 = new_reg4 | ((diva_value)&DIVA_MASK);
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60bb      	str	r3, [r7, #8]
	write_reg(newnewreg4);
 8001996:	68b8      	ldr	r0, [r7, #8]
 8001998:	f000 f976 	bl	8001c88 <write_reg>
 800199c:	e000      	b.n	80019a0 <setDIVA+0x118>
			return;
 800199e:	bf00      	nop
}
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000037c 	.word	0x2000037c

080019ac <setRFA_PWR>:

//00, 01, 02, 03
void setRFA_PWR(uint8_t rfa_pwr){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
	if (rfa_pwr > 4 || rfa_pwr < 0){
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d813      	bhi.n	80019e4 <setRFA_PWR+0x38>
		return;//invalid value
	}
	// bits 4 and 3
	uint32_t RFA_PWR_MASK = 0b11 << 3;
 80019bc:	2318      	movs	r3, #24
 80019be:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg4 = reg4 & ~(RFA_PWR_MASK);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	43da      	mvns	r2, r3
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <setRFA_PWR+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
	uint32_t newnewreg4 = newreg4 | ((rfa_pwr << 3)&RFA_PWR_MASK);
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	461a      	mov	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4013      	ands	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg4);
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 f953 	bl	8001c88 <write_reg>
 80019e2:	e000      	b.n	80019e6 <setRFA_PWR+0x3a>
		return;//invalid value
 80019e4:	bf00      	nop
}
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000037c 	.word	0x2000037c

080019f0 <setN>:

void setN(uint16_t N){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
	// set mask
	uint32_t N_MASK = 0xFFFF << 15;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <setN+0x38>)
 80019fc:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg0 = reg0 & ~(N_MASK);
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	43da      	mvns	r2, r3
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <setN+0x3c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
	// set bits that are supposed to one to one
	uint32_t newnewreg0 = newreg0 | ((N << 15)&N_MASK);
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	03db      	lsls	r3, r3, #15
 8001a0e:	461a      	mov	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	4013      	ands	r3, r2
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg0);
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f934 	bl	8001c88 <write_reg>
}
 8001a20:	bf00      	nop
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	7fff8000 	.word	0x7fff8000
 8001a2c:	2000036c 	.word	0x2000036c

08001a30 <setR>:

void setR(uint16_t R){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
	// bits 4 and 3
	uint32_t R_MASK = 0xFFC << 12;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <setR+0x38>)
 8001a3c:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg2 = reg2 & ~(R_MASK);
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	43da      	mvns	r2, r3
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <setR+0x3c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
	uint32_t newnewreg2 = newreg2 | ((R << 14)&R_MASK);
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	039b      	lsls	r3, r3, #14
 8001a4e:	461a      	mov	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	4013      	ands	r3, r2
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg2);
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 f914 	bl	8001c88 <write_reg>
}
 8001a60:	bf00      	nop
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	00ffc000 	.word	0x00ffc000
 8001a6c:	20000374 	.word	0x20000374

08001a70 <setIntegerMode>:

void enableRFA(){
	write_reg(reg4 | (1<<5));
}

void setIntegerMode(){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	write_reg(reg0 | (1<<31));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <setIntegerMode+0x18>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f903 	bl	8001c88 <write_reg>
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000036c 	.word	0x2000036c
 8001a8c:	00000000 	.word	0x00000000

08001a90 <set_requested_frequency>:

// freq is in MHz
void set_requested_frequency(uint32_t freq){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	// first determine required DIVA value
	float divided_by_235 = freq/23.5;
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7fe fd1b 	bl	80004d4 <__aeabi_ui2d>
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <set_requested_frequency+0xd8>)
 8001aa4:	f7fe feba 	bl	800081c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff f862 	bl	8000b78 <__aeabi_d2f>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	61fb      	str	r3, [r7, #28]
	float band = log2(divided_by_235);
 8001ab8:	69f8      	ldr	r0, [r7, #28]
 8001aba:	f7fe fd2d 	bl	8000518 <__aeabi_f2d>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	ec43 2b10 	vmov	d0, r2, r3
 8001ac6:	f00a fa7b 	bl	800bfc0 <log>
 8001aca:	ec51 0b10 	vmov	r0, r1, d0
 8001ace:	a324      	add	r3, pc, #144	; (adr r3, 8001b60 <set_requested_frequency+0xd0>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f7fe fea2 	bl	800081c <__aeabi_ddiv>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff f84a 	bl	8000b78 <__aeabi_d2f>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	61bb      	str	r3, [r7, #24]
	uint32_t band_i = band;
 8001ae8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af0:	ee17 3a90 	vmov	r3, s15
 8001af4:	617b      	str	r3, [r7, #20]
	uint32_t DIVA_caluclated = 128>>band_i;
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa42 f303 	asr.w	r3, r2, r3
 8001afe:	613b      	str	r3, [r7, #16]

	uint32_t R_value = 1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t N_1MHZ_step = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	623b      	str	r3, [r7, #32]
	if (DIVA_caluclated<32){
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	2b1f      	cmp	r3, #31
 8001b0c:	d804      	bhi.n	8001b18 <set_requested_frequency+0x88>
		R_value = 32/DIVA_caluclated;
 8001b0e:	2220      	movs	r2, #32
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (DIVA_caluclated>32){
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	2b20      	cmp	r3, #32
 8001b1c:	d902      	bls.n	8001b24 <set_requested_frequency+0x94>
		N_1MHZ_step = DIVA_caluclated/32;
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	623b      	str	r3, [r7, #32]
	}
	uint32_t N_value = N_1MHZ_step * freq;
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	60fb      	str	r3, [r7, #12]
	//printf("%d\n", DIVA_caluclated);
	//printf("R: %d\n", R_value);
	//printf("N: %d\n", N_value);
	setN(N_value);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ff5c 	bl	80019f0 <setN>
	setDIVA(DIVA_caluclated);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fea3 	bl	8001888 <setDIVA>
	setR(R_value);
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff72 	bl	8001a30 <setR>
	program_PLL();
 8001b4c:	f000 f8e2 	bl	8001d14 <program_PLL>
	// give time to allow PLL to lock into frequency
	HAL_Delay(1);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f000 fd6d 	bl	8002630 <HAL_Delay>
}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	fefa39ef 	.word	0xfefa39ef
 8001b64:	3fe62e42 	.word	0x3fe62e42
 8001b68:	40378000 	.word	0x40378000

08001b6c <init_PLL>:
/**
  * @brief Initialize chip as specified in datasheet
  * @retval GPIO_PinState Lock Detect
  */
void init_PLL(){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	// Zapis registrov default hodnotami
	write_reg(default_reg5);
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <init_PLL+0x8c>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f888 	bl	8001c88 <write_reg>
	// disable RF outputs
	write_reg(default_reg4 & ~((1 << 5) | (1<<8)));
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <init_PLL+0x90>)
 8001b7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f882 	bl	8001c88 <write_reg>
	write_reg(default_reg3);
 8001b84:	230b      	movs	r3, #11
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f87e 	bl	8001c88 <write_reg>
	write_reg(default_reg2);
 8001b8c:	f244 0342 	movw	r3, #16450	; 0x4042
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f879 	bl	8001c88 <write_reg>
	write_reg(default_reg1);
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <init_PLL+0x94>)
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f875 	bl	8001c88 <write_reg>
	write_reg(default_reg0);
 8001b9e:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f870 	bl	8001c88 <write_reg>
	program_PLL();
 8001ba8:	f000 f8b4 	bl	8001d14 <program_PLL>
	// 20 ms between writes as specified in datasheet
	HAL_Delay(20);
 8001bac:	2014      	movs	r0, #20
 8001bae:	f000 fd3f 	bl	8002630 <HAL_Delay>
	write_reg(default_reg5);
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <init_PLL+0x8c>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f867 	bl	8001c88 <write_reg>
	write_reg(default_reg4 & ~((1 << 5) | (1<<8)));
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <init_PLL+0x90>)
 8001bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f861 	bl	8001c88 <write_reg>
	write_reg(default_reg3);
 8001bc6:	230b      	movs	r3, #11
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f85d 	bl	8001c88 <write_reg>
	write_reg(default_reg2);
 8001bce:	f244 0342 	movw	r3, #16450	; 0x4042
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f858 	bl	8001c88 <write_reg>
	write_reg(default_reg1);
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <init_PLL+0x94>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f854 	bl	8001c88 <write_reg>
	write_reg(default_reg0);
 8001be0:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f84f 	bl	8001c88 <write_reg>
	program_PLL();
 8001bea:	f000 f893 	bl	8001d14 <program_PLL>
	HAL_Delay(20);
 8001bee:	2014      	movs	r0, #20
 8001bf0:	f000 fd1e 	bl	8002630 <HAL_Delay>
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	00400005 	.word	0x00400005
 8001bfc:	6180b23c 	.word	0x6180b23c
 8001c00:	2000fff9 	.word	0x2000fff9

08001c04 <write_regs_SOFT>:

void write_regs_SOFT(){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
	//write to registers
	uint32_t reg0 = 0x80320000;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <write_regs_SOFT+0x50>)
 8001c0c:	617b      	str	r3, [r7, #20]
	uint32_t reg1 = 0x80033E81;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <write_regs_SOFT+0x54>)
 8001c10:	613b      	str	r3, [r7, #16]
	uint32_t reg2 = 0x0C004042;
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <write_regs_SOFT+0x58>)
 8001c14:	60fb      	str	r3, [r7, #12]
	uint32_t reg3 = 0x00000133;
 8001c16:	f240 1333 	movw	r3, #307	; 0x133
 8001c1a:	60bb      	str	r3, [r7, #8]
	uint32_t reg4 = 0x629802FC;
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <write_regs_SOFT+0x5c>)
 8001c1e:	607b      	str	r3, [r7, #4]
	uint32_t reg5 = 0x00400005;
 8001c20:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <write_regs_SOFT+0x60>)
 8001c22:	603b      	str	r3, [r7, #0]
	write_reg(reg5);
 8001c24:	6838      	ldr	r0, [r7, #0]
 8001c26:	f000 f82f 	bl	8001c88 <write_reg>
	write_reg(reg4);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f82c 	bl	8001c88 <write_reg>
	write_reg(reg3);
 8001c30:	68b8      	ldr	r0, [r7, #8]
 8001c32:	f000 f829 	bl	8001c88 <write_reg>
	write_reg(reg2);
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f826 	bl	8001c88 <write_reg>
	write_reg(reg1);
 8001c3c:	6938      	ldr	r0, [r7, #16]
 8001c3e:	f000 f823 	bl	8001c88 <write_reg>
	write_reg(reg0);
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f000 f820 	bl	8001c88 <write_reg>
	program_PLL();
 8001c48:	f000 f864 	bl	8001d14 <program_PLL>
}
 8001c4c:	bf00      	nop
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	80320000 	.word	0x80320000
 8001c58:	80033e81 	.word	0x80033e81
 8001c5c:	0c004042 	.word	0x0c004042
 8001c60:	629802fc 	.word	0x629802fc
 8001c64:	00400005 	.word	0x00400005

08001c68 <swap_words>:

// big endian to little endian for 32bits
uint32_t swap_words(uint32_t rozumne){
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	uint32_t swapped = (rozumne >> 16) | (rozumne << 16);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001c76:	60fb      	str	r3, [r7, #12]
	return swapped;
 8001c78:	68fb      	ldr	r3, [r7, #12]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <write_reg>:

// preforms write to register
void write_reg(uint32_t data){
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	// determine register address
	uint32_t reg_addr = data & 0b111;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

	switch (reg_addr){
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d826      	bhi.n	8001cec <write_reg+0x64>
 8001c9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <write_reg+0x1c>)
 8001ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca4:	08001cbd 	.word	0x08001cbd
 8001ca8:	08001cc5 	.word	0x08001cc5
 8001cac:	08001ccd 	.word	0x08001ccd
 8001cb0:	08001cd5 	.word	0x08001cd5
 8001cb4:	08001cdd 	.word	0x08001cdd
 8001cb8:	08001ce5 	.word	0x08001ce5
			case 0:
				reg0 = data;
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <write_reg+0x74>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
				break;
 8001cc2:	e014      	b.n	8001cee <write_reg+0x66>
			case 1:
				reg1 = data;
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <write_reg+0x78>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
				break;
 8001cca:	e010      	b.n	8001cee <write_reg+0x66>
			case 2:
				reg2 = data;
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <write_reg+0x7c>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
				break;
 8001cd2:	e00c      	b.n	8001cee <write_reg+0x66>
			case 3:
				reg3 = data;
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <write_reg+0x80>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
				break;
 8001cda:	e008      	b.n	8001cee <write_reg+0x66>
			case 4:
				reg4 = data;
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <write_reg+0x84>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
				break;
 8001ce2:	e004      	b.n	8001cee <write_reg+0x66>
			case 5:
				reg5 = data;
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <write_reg+0x88>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
				break;
 8001cea:	e000      	b.n	8001cee <write_reg+0x66>
			default:
				// invalid addressLED_GPIO_Port
				break;
 8001cec:	bf00      	nop
	}
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	2000036c 	.word	0x2000036c
 8001d00:	20000370 	.word	0x20000370
 8001d04:	20000374 	.word	0x20000374
 8001d08:	20000378 	.word	0x20000378
 8001d0c:	2000037c 	.word	0x2000037c
 8001d10:	20000380 	.word	0x20000380

08001d14 <program_PLL>:

// sends all registers to PLL
void program_PLL(){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	write_to_PLL(reg5);
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <program_PLL+0x44>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 f827 	bl	8001d70 <write_to_PLL>
	write_to_PLL(reg4);
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <program_PLL+0x48>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f822 	bl	8001d70 <write_to_PLL>
	write_to_PLL(reg3);
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <program_PLL+0x4c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 f81d 	bl	8001d70 <write_to_PLL>
	write_to_PLL(reg2);
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <program_PLL+0x50>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f818 	bl	8001d70 <write_to_PLL>
	write_to_PLL(reg1);
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <program_PLL+0x54>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f813 	bl	8001d70 <write_to_PLL>
	write_to_PLL(reg0);
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <program_PLL+0x58>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f80e 	bl	8001d70 <write_to_PLL>
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000380 	.word	0x20000380
 8001d5c:	2000037c 	.word	0x2000037c
 8001d60:	20000378 	.word	0x20000378
 8001d64:	20000374 	.word	0x20000374
 8001d68:	20000370 	.word	0x20000370
 8001d6c:	2000036c 	.word	0x2000036c

08001d70 <write_to_PLL>:

uint8_t write_to_PLL(uint32_t data){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	// endianness swap
	uint32_t swapped_data = swap_words(data);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff75 	bl	8001c68 <swap_words>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	60bb      	str	r3, [r7, #8]
	uint16_t* pData = (uint16_t*)&swapped_data;
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2110      	movs	r1, #16
 8001d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d90:	f002 fb16 	bl	80043c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d94:	2001      	movs	r0, #1
 8001d96:	f000 fc4b 	bl	8002630 <HAL_Delay>
	//HAL_StatusTypeDef result =  HAL_SPI_Transmit(&hspi1, (uint8_t*)pData, 2, 1000);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)pData, 2, 100);
 8001d9a:	2364      	movs	r3, #100	; 0x64
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	68f9      	ldr	r1, [r7, #12]
 8001da0:	4808      	ldr	r0, [pc, #32]	; (8001dc4 <write_to_PLL+0x54>)
 8001da2:	f004 f82f 	bl	8005e04 <HAL_SPI_Transmit>
	//printf("SPI Transmit result: %x\n", result);
	HAL_Delay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 fc42 	bl	8002630 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001dac:	2201      	movs	r2, #1
 8001dae:	2110      	movs	r1, #16
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db4:	f002 fb04 	bl	80043c0 <HAL_GPIO_WritePin>

	return 0;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000384 	.word	0x20000384

08001dc8 <LL_AHB2_GRP1_EnableClock>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dec:	68fb      	ldr	r3, [r7, #12]
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e32:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <MX_SPI1_Init+0x78>)
 8001e34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e44:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e48:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001e4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e64:	2238      	movs	r2, #56	; 0x38
 8001e66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e68:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e88:	2208      	movs	r2, #8
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e8c:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <MX_SPI1_Init+0x74>)
 8001e8e:	f003 ff16 	bl	8005cbe <HAL_SPI_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001e98:	f7ff fcd2 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000384 	.word	0x20000384
 8001ea4:	40013000 	.word	0x40013000

08001ea8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <HAL_SPI_MspInit+0xb0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d142      	bne.n	8001f50 <HAL_SPI_MspInit+0xa8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ece:	f7ff ff94 	bl	8001dfa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f7ff ff78 	bl	8001dc8 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ed8:	23a0      	movs	r3, #160	; 0xa0
 8001eda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ee8:	2305      	movs	r3, #5
 8001eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef6:	f002 f8fb 	bl	80040f0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_SPI_MspInit+0xb4>)
 8001efc:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <HAL_SPI_MspInit+0xb8>)
 8001efe:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <HAL_SPI_MspInit+0xb4>)
 8001f02:	2207      	movs	r2, #7
 8001f04:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_SPI_MspInit+0xb4>)
 8001f08:	2210      	movs	r2, #16
 8001f0a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_SPI_MspInit+0xb4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_SPI_MspInit+0xb4>)
 8001f14:	2280      	movs	r2, #128	; 0x80
 8001f16:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f18:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <HAL_SPI_MspInit+0xb4>)
 8001f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f1e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_SPI_MspInit+0xb4>)
 8001f22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f26:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_SPI_MspInit+0xb4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_SPI_MspInit+0xb4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001f34:	4809      	ldr	r0, [pc, #36]	; (8001f5c <HAL_SPI_MspInit+0xb4>)
 8001f36:	f001 fe8f 	bl	8003c58 <HAL_DMA_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_SPI_MspInit+0x9c>
    {
      Error_Handler();
 8001f40:	f7ff fc7e 	bl	8001840 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <HAL_SPI_MspInit+0xb4>)
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_SPI_MspInit+0xb4>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f50:	bf00      	nop
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40013000 	.word	0x40013000
 8001f5c:	200003e8 	.word	0x200003e8
 8001f60:	40020008 	.word	0x40020008

08001f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <NMI_Handler+0x4>

08001f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <HardFault_Handler+0x4>

08001f7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <MemManage_Handler+0x4>

08001f84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <BusFault_Handler+0x4>

08001f8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <UsageFault_Handler+0x4>

08001f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbe:	f000 fb0b 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <DMA1_Channel1_IRQHandler+0x10>)
 8001fce:	f001 ff8d 	bl	8003eec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200003e8 	.word	0x200003e8

08001fdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <TIM2_IRQHandler+0x10>)
 8001fe2:	f004 fa87 	bl	80064f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000044c 	.word	0x2000044c

08001ff0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <USART1_IRQHandler+0x10>)
 8001ff6:	f004 ff8d 	bl	8006f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000498 	.word	0x20000498

08002004 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <IPCC_C1_RX_IRQHandler+0x10>)
 800200a:	f002 fa8b 	bl	8004524 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000260 	.word	0x20000260

08002018 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <IPCC_C1_TX_IRQHandler+0x10>)
 800201e:	f002 fa33 	bl	8004488 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000260 	.word	0x20000260

0800202c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return 1;
 8002030:	2301      	movs	r3, #1
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_kill>:

int _kill(int pid, int sig)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002046:	f006 ff7d 	bl	8008f44 <__errno>
 800204a:	4603      	mov	r3, r0
 800204c:	2216      	movs	r2, #22
 800204e:	601a      	str	r2, [r3, #0]
  return -1;
 8002050:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_exit>:

void _exit (int status)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ffe7 	bl	800203c <_kill>
  while (1) {}    /* Make sure we hang here */
 800206e:	e7fe      	b.n	800206e <_exit+0x12>

08002070 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e00a      	b.n	8002098 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002082:	f3af 8000 	nop.w
 8002086:	4601      	mov	r1, r0
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	60ba      	str	r2, [r7, #8]
 800208e:	b2ca      	uxtb	r2, r1
 8002090:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	dbf0      	blt.n	8002082 <_read+0x12>
  }

  return len;
 80020a0:	687b      	ldr	r3, [r7, #4]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_close>:
  }
  return len;
}

int _close(int file)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d2:	605a      	str	r2, [r3, #4]
  return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_isatty>:

int _isatty(int file)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <_sbrk+0x5c>)
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <_sbrk+0x60>)
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <_sbrk+0x64>)
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <_sbrk+0x68>)
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d207      	bcs.n	8002154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002144:	f006 fefe 	bl	8008f44 <__errno>
 8002148:	4603      	mov	r3, r0
 800214a:	220c      	movs	r2, #12
 800214c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	e009      	b.n	8002168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <_sbrk+0x64>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <_sbrk+0x64>)
 8002164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002166:	68fb      	ldr	r3, [r7, #12]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20010000 	.word	0x20010000
 8002174:	00000400 	.word	0x00000400
 8002178:	20000448 	.word	0x20000448
 800217c:	20000540 	.word	0x20000540

08002180 <LL_APB1_GRP1_EnableClock>:
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800218e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4313      	orrs	r3, r2
 8002196:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021a4:	68fb      	ldr	r3, [r7, #12]
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ba:	f107 0310 	add.w	r3, r7, #16
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <MX_TIM2_Init+0x98>)
 80021d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <MX_TIM2_Init+0x98>)
 80021dc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80021e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <MX_TIM2_Init+0x98>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80021e8:	4b18      	ldr	r3, [pc, #96]	; (800224c <MX_TIM2_Init+0x98>)
 80021ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <MX_TIM2_Init+0x98>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <MX_TIM2_Init+0x98>)
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021fc:	4813      	ldr	r0, [pc, #76]	; (800224c <MX_TIM2_Init+0x98>)
 80021fe:	f004 f8d3 	bl	80063a8 <HAL_TIM_Base_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002208:	f7ff fb1a 	bl	8001840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800220c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002210:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002212:	f107 0310 	add.w	r3, r7, #16
 8002216:	4619      	mov	r1, r3
 8002218:	480c      	ldr	r0, [pc, #48]	; (800224c <MX_TIM2_Init+0x98>)
 800221a:	f004 fa8a 	bl	8006732 <HAL_TIM_ConfigClockSource>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002224:	f7ff fb0c 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002228:	2300      	movs	r3, #0
 800222a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	4619      	mov	r1, r3
 8002234:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_TIM2_Init+0x98>)
 8002236:	f004 fc6d 	bl	8006b14 <HAL_TIMEx_MasterConfigSynchronization>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002240:	f7ff fafe 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002244:	bf00      	nop
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	2000044c 	.word	0x2000044c

08002250 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002260:	d10a      	bne.n	8002278 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002262:	2001      	movs	r0, #1
 8002264:	f7ff ff8c 	bl	8002180 <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002268:	2200      	movs	r2, #0
 800226a:	2100      	movs	r1, #0
 800226c:	201c      	movs	r0, #28
 800226e:	f001 fcbe 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002272:	201c      	movs	r0, #28
 8002274:	f001 fcd5 	bl	8003c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <LL_AHB2_GRP1_EnableClock>:
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800228e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4313      	orrs	r3, r2
 8002296:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022a4:	68fb      	ldr	r3, [r7, #12]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_APB2_GRP1_EnableClock>:
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4013      	ands	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <MX_USART1_UART_Init+0x90>)
 80022ea:	4a23      	ldr	r2, [pc, #140]	; (8002378 <MX_USART1_UART_Init+0x94>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <MX_USART1_UART_Init+0x90>)
 80022f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <MX_USART1_UART_Init+0x90>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <MX_USART1_UART_Init+0x90>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002302:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <MX_USART1_UART_Init+0x90>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <MX_USART1_UART_Init+0x90>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <MX_USART1_UART_Init+0x90>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <MX_USART1_UART_Init+0x90>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231a:	4b16      	ldr	r3, [pc, #88]	; (8002374 <MX_USART1_UART_Init+0x90>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MX_USART1_UART_Init+0x90>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <MX_USART1_UART_Init+0x90>)
 8002328:	2200      	movs	r2, #0
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800232c:	4811      	ldr	r0, [pc, #68]	; (8002374 <MX_USART1_UART_Init+0x90>)
 800232e:	f004 fc7f 	bl	8006c30 <HAL_UART_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002338:	f7ff fa82 	bl	8001840 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800233c:	2100      	movs	r1, #0
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <MX_USART1_UART_Init+0x90>)
 8002340:	f006 fcdd 	bl	8008cfe <HAL_UARTEx_SetTxFifoThreshold>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800234a:	f7ff fa79 	bl	8001840 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800234e:	2100      	movs	r1, #0
 8002350:	4808      	ldr	r0, [pc, #32]	; (8002374 <MX_USART1_UART_Init+0x90>)
 8002352:	f006 fd12 	bl	8008d7a <HAL_UARTEx_SetRxFifoThreshold>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800235c:	f7ff fa70 	bl	8001840 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002360:	4804      	ldr	r0, [pc, #16]	; (8002374 <MX_USART1_UART_Init+0x90>)
 8002362:	f006 fc93 	bl	8008c8c <HAL_UARTEx_DisableFifoMode>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800236c:	f7ff fa68 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000498 	.word	0x20000498
 8002378:	40013800 	.word	0x40013800

0800237c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b090      	sub	sp, #64	; 0x40
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002394:	f107 0308 	add.w	r3, r7, #8
 8002398:	2224      	movs	r2, #36	; 0x24
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f006 fe11 	bl	8008fc4 <memset>
  if(uartHandle->Instance==USART1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <HAL_UART_MspInit+0x94>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d12c      	bne.n	8002406 <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023ac:	2301      	movs	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	4618      	mov	r0, r3
 80023ba:	f003 fba5 	bl	8005b08 <HAL_RCCEx_PeriphCLKConfig>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023c4:	f7ff fa3c 	bl	8001840 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023cc:	f7ff ff71 	bl	80022b2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d0:	2002      	movs	r0, #2
 80023d2:	f7ff ff55 	bl	8002280 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023e6:	2307      	movs	r3, #7
 80023e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ee:	4619      	mov	r1, r3
 80023f0:	4808      	ldr	r0, [pc, #32]	; (8002414 <HAL_UART_MspInit+0x98>)
 80023f2:	f001 fe7d 	bl	80040f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	2024      	movs	r0, #36	; 0x24
 80023fc:	f001 fbf7 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002400:	2024      	movs	r0, #36	; 0x24
 8002402:	f001 fc0e 	bl	8003c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002406:	bf00      	nop
 8002408:	3740      	adds	r7, #64	; 0x40
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40013800 	.word	0x40013800
 8002414:	48000400 	.word	0x48000400

08002418 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002418:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800241a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241c:	3304      	adds	r3, #4

0800241e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800241e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002420:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002422:	d3f9      	bcc.n	8002418 <CopyDataInit>
  bx lr
 8002424:	4770      	bx	lr

08002426 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002426:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002428:	3004      	adds	r0, #4

0800242a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800242a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800242c:	d3fb      	bcc.n	8002426 <FillZerobss>
  bx lr
 800242e:	4770      	bx	lr

08002430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8002430:	480c      	ldr	r0, [pc, #48]	; (8002464 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002434:	f000 f828 	bl	8002488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002438:	480b      	ldr	r0, [pc, #44]	; (8002468 <LoopForever+0x8>)
 800243a:	490c      	ldr	r1, [pc, #48]	; (800246c <LoopForever+0xc>)
 800243c:	4a0c      	ldr	r2, [pc, #48]	; (8002470 <LoopForever+0x10>)
 800243e:	2300      	movs	r3, #0
 8002440:	f7ff ffed 	bl	800241e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002444:	480b      	ldr	r0, [pc, #44]	; (8002474 <LoopForever+0x14>)
 8002446:	490c      	ldr	r1, [pc, #48]	; (8002478 <LoopForever+0x18>)
 8002448:	2300      	movs	r3, #0
 800244a:	f7ff ffee 	bl	800242a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800244e:	480b      	ldr	r0, [pc, #44]	; (800247c <LoopForever+0x1c>)
 8002450:	490b      	ldr	r1, [pc, #44]	; (8002480 <LoopForever+0x20>)
 8002452:	2300      	movs	r3, #0
 8002454:	f7ff ffe9 	bl	800242a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002458:	f006 fd7a 	bl	8008f50 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800245c:	f7ff f914 	bl	8001688 <main>

08002460 <LoopForever>:

LoopForever:
  b LoopForever
 8002460:	e7fe      	b.n	8002460 <LoopForever>
 8002462:	0000      	.short	0x0000
   ldr   r0, =_estack
 8002464:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 8002468:	20000004 	.word	0x20000004
 800246c:	200001e0 	.word	0x200001e0
 8002470:	0800ca1c 	.word	0x0800ca1c
  INIT_BSS _sbss, _ebss
 8002474:	200001e0 	.word	0x200001e0
 8002478:	20000540 	.word	0x20000540
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800247c:	20030000 	.word	0x20030000
 8002480:	20030000 	.word	0x20030000

08002484 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC1_IRQHandler>
	...

08002488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <SystemInit+0x90>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	4a21      	ldr	r2, [pc, #132]	; (8002518 <SystemInit+0x90>)
 8002494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80024ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80024b4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <SystemInit+0x94>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80024c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d2:	f023 0305 	bic.w	r3, r3, #5
 80024d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <SystemInit+0x98>)
 80024f4:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00
 800251c:	faf6fefb 	.word	0xfaf6fefb
 8002520:	22041000 	.word	0x22041000

08002524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_Init+0x3c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <HAL_Init+0x3c>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253a:	2003      	movs	r0, #3
 800253c:	f001 fb4c 	bl	8003bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002540:	2000      	movs	r0, #0
 8002542:	f000 f80f 	bl	8002564 <HAL_InitTick>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	71fb      	strb	r3, [r7, #7]
 8002550:	e001      	b.n	8002556 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002552:	f7ff fd07 	bl	8001f64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002556:	79fb      	ldrb	r3, [r7, #7]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	58004000 	.word	0x58004000

08002564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_InitTick+0x6c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d024      	beq.n	80025c2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002578:	f003 f904 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_InitTick+0x6c>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	4619      	mov	r1, r3
 8002584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002588:	fbb3 f3f1 	udiv	r3, r3, r1
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	4618      	mov	r0, r3
 8002592:	f001 fb54 	bl	8003c3e <HAL_SYSTICK_Config>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10f      	bne.n	80025bc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	d809      	bhi.n	80025b6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a2:	2200      	movs	r2, #0
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	f04f 30ff 	mov.w	r0, #4294967295
 80025aa:	f001 fb20 	bl	8003bee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025ae:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_InitTick+0x70>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e007      	b.n	80025c6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e004      	b.n	80025c6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	e001      	b.n	80025c6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000000c 	.word	0x2000000c
 80025d4:	20000008 	.word	0x20000008

080025d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_IncTick+0x20>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x24>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <HAL_IncTick+0x24>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000000c 	.word	0x2000000c
 80025fc:	2000052c 	.word	0x2000052c

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	2000052c 	.word	0x2000052c

08002618 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <HAL_GetTickPrio+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000008 	.word	0x20000008

08002630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff ffe2 	bl	8002600 <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d005      	beq.n	8002656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_Delay+0x44>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002656:	bf00      	nop
 8002658:	f7ff ffd2 	bl	8002600 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	429a      	cmp	r2, r3
 8002666:	d8f7      	bhi.n	8002658 <HAL_Delay+0x28>
  {
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000000c 	.word	0x2000000c

08002678 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	609a      	str	r2, [r3, #8]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3360      	adds	r3, #96	; 0x60
 80026f2:	461a      	mov	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <LL_ADC_SetOffset+0x44>)
 8002702:	4013      	ands	r3, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	4313      	orrs	r3, r2
 8002710:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	03fff000 	.word	0x03fff000

08002728 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3360      	adds	r3, #96	; 0x60
 8002736:	461a      	mov	r2, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3360      	adds	r3, #96	; 0x60
 8002764:	461a      	mov	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	431a      	orrs	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027a2:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3330      	adds	r3, #48	; 0x30
 80027c0:	461a      	mov	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	4413      	add	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	211f      	movs	r1, #31
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	401a      	ands	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	f003 011f 	and.w	r1, r3, #31
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	431a      	orrs	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3314      	adds	r3, #20
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	0e5b      	lsrs	r3, r3, #25
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	4413      	add	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	0d1b      	lsrs	r3, r3, #20
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	2107      	movs	r1, #7
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	401a      	ands	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	0d1b      	lsrs	r3, r3, #20
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	431a      	orrs	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002878:	43db      	mvns	r3, r3
 800287a:	401a      	ands	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0318 	and.w	r3, r3, #24
 8002882:	4908      	ldr	r1, [pc, #32]	; (80028a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002884:	40d9      	lsrs	r1, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	400b      	ands	r3, r1
 800288a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288e:	431a      	orrs	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	0007ffff 	.word	0x0007ffff

080028a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6093      	str	r3, [r2, #8]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028e0:	d101      	bne.n	80028e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002904:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002908:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002930:	d101      	bne.n	8002936 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002954:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002958:	f043 0201 	orr.w	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800297c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002980:	f043 0202 	orr.w	r2, r3, #2
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <LL_ADC_IsEnabled+0x18>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <LL_ADC_IsEnabled+0x1a>
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d101      	bne.n	80029d2 <LL_ADC_IsDisableOngoing+0x18>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <LL_ADC_IsDisableOngoing+0x1a>
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029f4:	f043 0204 	orr.w	r2, r3, #4
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a1c:	f043 0210 	orr.w	r2, r3, #16
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d101      	bne.n	8002a48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d101      	bne.n	8002a96 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e12e      	b.n	8002d20 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7fe f92b 	bl	8000d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff feef 	bl	80028cc <LL_ADC_IsDeepPowerDownEnabled>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d004      	beq.n	8002afe <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fed5 	bl	80028a8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff0a 	bl	800291c <LL_ADC_IsInternalRegulatorEnabled>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d115      	bne.n	8002b3a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff feee 	bl	80028f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b18:	4b83      	ldr	r3, [pc, #524]	; (8002d28 <HAL_ADC_Init+0x284>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	4a83      	ldr	r2, [pc, #524]	; (8002d2c <HAL_ADC_Init+0x288>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	3301      	adds	r3, #1
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b2c:	e002      	b.n	8002b34 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f9      	bne.n	8002b2e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff feec 	bl	800291c <LL_ADC_IsInternalRegulatorEnabled>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10d      	bne.n	8002b66 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	f043 0210 	orr.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff ff60 	bl	8002a30 <LL_ADC_REG_IsConversionOngoing>
 8002b70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 80c7 	bne.w	8002d0e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 80c3 	bne.w	8002d0e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b90:	f043 0202 	orr.w	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fef9 	bl	8002994 <LL_ADC_IsEnabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ba8:	4861      	ldr	r0, [pc, #388]	; (8002d30 <HAL_ADC_Init+0x28c>)
 8002baa:	f7ff fef3 	bl	8002994 <LL_ADC_IsEnabled>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	485e      	ldr	r0, [pc, #376]	; (8002d34 <HAL_ADC_Init+0x290>)
 8002bbc:	f7ff fd5c 	bl	8002678 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7e5b      	ldrb	r3, [r3, #25]
 8002bc4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002bd0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002bd6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bde:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002be0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d106      	bne.n	8002c00 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	045b      	lsls	r3, r3, #17
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	4b45      	ldr	r3, [pc, #276]	; (8002d38 <HAL_ADC_Init+0x294>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	69b9      	ldr	r1, [r7, #24]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fefb 	bl	8002a30 <LL_ADC_REG_IsConversionOngoing>
 8002c3a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff1c 	bl	8002a7e <LL_ADC_INJ_IsConversionOngoing>
 8002c46:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d13d      	bne.n	8002cca <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d13a      	bne.n	8002cca <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c58:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c60:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c70:	f023 0302 	bic.w	r3, r3, #2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	69b9      	ldr	r1, [r7, #24]
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d118      	bne.n	8002cba <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c92:	f023 0304 	bic.w	r3, r3, #4
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ca4:	4311      	orrs	r1, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002caa:	430a      	orrs	r2, r1
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	611a      	str	r2, [r3, #16]
 8002cb8:	e007      	b.n	8002cca <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0201 	bic.w	r2, r2, #1
 8002cc8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d10c      	bne.n	8002cec <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f023 010f 	bic.w	r1, r3, #15
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cea:	e007      	b.n	8002cfc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 020f 	bic.w	r2, r2, #15
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f023 0303 	bic.w	r3, r3, #3
 8002d04:	f043 0201 	orr.w	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
 8002d0c:	e007      	b.n	8002d1e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f043 0210 	orr.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000004 	.word	0x20000004
 8002d2c:	053e2d63 	.word	0x053e2d63
 8002d30:	50040000 	.word	0x50040000
 8002d34:	50040300 	.word	0x50040300
 8002d38:	fff0c007 	.word	0xfff0c007

08002d3c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fe71 	bl	8002a30 <LL_ADC_REG_IsConversionOngoing>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d140      	bne.n	8002dd6 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_Start+0x26>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e03c      	b.n	8002ddc <HAL_ADC_Start+0xa0>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fd8a 	bl	8003884 <ADC_Enable>
 8002d70:	4603      	mov	r3, r0
 8002d72:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d128      	bne.n	8002dcc <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9a:	d106      	bne.n	8002daa <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da0:	f023 0206 	bic.w	r2, r3, #6
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	659a      	str	r2, [r3, #88]	; 0x58
 8002da8:	e002      	b.n	8002db0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	221c      	movs	r2, #28
 8002db6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fe0b 	bl	80029e0 <LL_ADC_REG_StartConversion>
 8002dca:	e006      	b.n	8002dda <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002dd4:	e001      	b.n	8002dda <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_Stop+0x16>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e023      	b.n	8002e42 <HAL_ADC_Stop+0x5e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e02:	2103      	movs	r1, #3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fc81 	bl	800370c <ADC_ConversionStop>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d111      	bne.n	8002e38 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fdaf 	bl	8003978 <ADC_Disable>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d102      	bne.n	8002e62 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e010      	b.n	8002e84 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e06d      	b.n	8002f5c <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002e80:	2304      	movs	r3, #4
 8002e82:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e84:	f7ff fbbc 	bl	8002600 <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e8a:	e021      	b.n	8002ed0 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e92:	d01d      	beq.n	8002ed0 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e94:	f7ff fbb4 	bl	8002600 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d302      	bcc.n	8002eaa <HAL_ADC_PollForConversion+0x60>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d112      	bne.n	8002ed0 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	f043 0204 	orr.w	r2, r3, #4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e045      	b.n	8002f5c <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0d6      	beq.n	8002e8c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fc4b 	bl	800278a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01c      	beq.n	8002f34 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7e5b      	ldrb	r3, [r3, #25]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d118      	bne.n	8002f34 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d111      	bne.n	8002f34 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d104      	bne.n	8002f44 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2208      	movs	r2, #8
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e00a      	b.n	8002f5a <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d103      	bne.n	8002f5a <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	220c      	movs	r2, #12
 8002f58:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b0b6      	sub	sp, #216	; 0xd8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x22>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e39f      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x762>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fd3e 	bl	8002a30 <LL_ADC_REG_IsConversionOngoing>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f040 8384 	bne.w	80036c4 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f7ff fbf1 	bl	80027b0 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fd2c 	bl	8002a30 <LL_ADC_REG_IsConversionOngoing>
 8002fd8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fd4c 	bl	8002a7e <LL_ADC_INJ_IsConversionOngoing>
 8002fe6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 81a6 	bne.w	8003340 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ff4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f040 81a1 	bne.w	8003340 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6819      	ldr	r1, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	461a      	mov	r2, r3
 800300c:	f7ff fbfc 	bl	8002808 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	08db      	lsrs	r3, r3, #3
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b04      	cmp	r3, #4
 8003030:	d00a      	beq.n	8003048 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6919      	ldr	r1, [r3, #16]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003042:	f7ff fb4d 	bl	80026e0 <LL_ADC_SetOffset>
 8003046:	e17b      	b.n	8003340 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2100      	movs	r1, #0
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fb6a 	bl	8002728 <LL_ADC_GetOffsetChannel>
 8003054:	4603      	mov	r3, r0
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10a      	bne.n	8003074 <HAL_ADC_ConfigChannel+0xf4>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fb5f 	bl	8002728 <LL_ADC_GetOffsetChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	0e9b      	lsrs	r3, r3, #26
 800306e:	f003 021f 	and.w	r2, r3, #31
 8003072:	e01e      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x132>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fb54 	bl	8002728 <LL_ADC_GetOffsetChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003096:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800309a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80030a2:	2320      	movs	r3, #32
 80030a4:	e004      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80030a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d105      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x14a>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	0e9b      	lsrs	r3, r3, #26
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	e018      	b.n	80030fc <HAL_ADC_ConfigChannel+0x17c>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80030de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80030e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80030ee:	2320      	movs	r3, #32
 80030f0:	e004      	b.n	80030fc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80030f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d106      	bne.n	800310e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2200      	movs	r2, #0
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fb23 	bl	8002754 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2101      	movs	r1, #1
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fb07 	bl	8002728 <LL_ADC_GetOffsetChannel>
 800311a:	4603      	mov	r3, r0
 800311c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <HAL_ADC_ConfigChannel+0x1ba>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2101      	movs	r1, #1
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fafc 	bl	8002728 <LL_ADC_GetOffsetChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	0e9b      	lsrs	r3, r3, #26
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	e01e      	b.n	8003178 <HAL_ADC_ConfigChannel+0x1f8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2101      	movs	r1, #1
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff faf1 	bl	8002728 <LL_ADC_GetOffsetChannel>
 8003146:	4603      	mov	r3, r0
 8003148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003158:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800315c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	e004      	b.n	8003176 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800316c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x210>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	0e9b      	lsrs	r3, r3, #26
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	e018      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x242>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80031a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80031ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80031b4:	2320      	movs	r3, #32
 80031b6:	e004      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80031b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d106      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2200      	movs	r2, #0
 80031cc:	2101      	movs	r1, #1
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fac0 	bl	8002754 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2102      	movs	r1, #2
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff faa4 	bl	8002728 <LL_ADC_GetOffsetChannel>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x280>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2102      	movs	r1, #2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fa99 	bl	8002728 <LL_ADC_GetOffsetChannel>
 80031f6:	4603      	mov	r3, r0
 80031f8:	0e9b      	lsrs	r3, r3, #26
 80031fa:	f003 021f 	and.w	r2, r3, #31
 80031fe:	e01e      	b.n	800323e <HAL_ADC_ConfigChannel+0x2be>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2102      	movs	r1, #2
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fa8e 	bl	8002728 <LL_ADC_GetOffsetChannel>
 800320c:	4603      	mov	r3, r0
 800320e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800321e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003226:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800322e:	2320      	movs	r3, #32
 8003230:	e004      	b.n	800323c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003232:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x2d6>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	0e9b      	lsrs	r3, r3, #26
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	e016      	b.n	8003284 <HAL_ADC_ConfigChannel+0x304>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800326a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800326e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003276:	2320      	movs	r3, #32
 8003278:	e004      	b.n	8003284 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800327a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	429a      	cmp	r2, r3
 8003286:	d106      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2200      	movs	r2, #0
 800328e:	2102      	movs	r1, #2
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fa5f 	bl	8002754 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2103      	movs	r1, #3
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fa43 	bl	8002728 <LL_ADC_GetOffsetChannel>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x342>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2103      	movs	r1, #3
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fa38 	bl	8002728 <LL_ADC_GetOffsetChannel>
 80032b8:	4603      	mov	r3, r0
 80032ba:	0e9b      	lsrs	r3, r3, #26
 80032bc:	f003 021f 	and.w	r2, r3, #31
 80032c0:	e017      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x372>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2103      	movs	r1, #3
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fa2d 	bl	8002728 <LL_ADC_GetOffsetChannel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80032da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032dc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80032de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e003      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80032e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_ADC_ConfigChannel+0x38a>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	0e9b      	lsrs	r3, r3, #26
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	e011      	b.n	800332e <HAL_ADC_ConfigChannel+0x3ae>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800331a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800331c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e003      	b.n	800332e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	429a      	cmp	r2, r3
 8003330:	d106      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2200      	movs	r2, #0
 8003338:	2103      	movs	r1, #3
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fa0a 	bl	8002754 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fb25 	bl	8002994 <LL_ADC_IsEnabled>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	f040 81c2 	bne.w	80036d6 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6819      	ldr	r1, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	461a      	mov	r2, r3
 8003360:	f7ff fa7e 	bl	8002860 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a8e      	ldr	r2, [pc, #568]	; (80035a4 <HAL_ADC_ConfigChannel+0x624>)
 800336a:	4293      	cmp	r3, r2
 800336c:	f040 8130 	bne.w	80035d0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x418>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0e9b      	lsrs	r3, r3, #26
 8003386:	3301      	adds	r3, #1
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	2b09      	cmp	r3, #9
 800338e:	bf94      	ite	ls
 8003390:	2301      	movls	r3, #1
 8003392:	2300      	movhi	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e019      	b.n	80033cc <HAL_ADC_ConfigChannel+0x44c>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80033a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80033aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80033b0:	2320      	movs	r3, #32
 80033b2:	e003      	b.n	80033bc <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80033b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2b09      	cmp	r3, #9
 80033c4:	bf94      	ite	ls
 80033c6:	2301      	movls	r3, #1
 80033c8:	2300      	movhi	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d079      	beq.n	80034c4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d107      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x46c>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	0e9b      	lsrs	r3, r3, #26
 80033e2:	3301      	adds	r3, #1
 80033e4:	069b      	lsls	r3, r3, #26
 80033e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ea:	e015      	b.n	8003418 <HAL_ADC_ConfigChannel+0x498>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80033fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003404:	2320      	movs	r3, #32
 8003406:	e003      	b.n	8003410 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3301      	adds	r3, #1
 8003412:	069b      	lsls	r3, r3, #26
 8003414:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x4b8>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0e9b      	lsrs	r3, r3, #26
 800342a:	3301      	adds	r3, #1
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	e017      	b.n	8003468 <HAL_ADC_ConfigChannel+0x4e8>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003448:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800344a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003450:	2320      	movs	r3, #32
 8003452:	e003      	b.n	800345c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	3301      	adds	r3, #1
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	ea42 0103 	orr.w	r1, r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10a      	bne.n	800348e <HAL_ADC_ConfigChannel+0x50e>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	0e9b      	lsrs	r3, r3, #26
 800347e:	3301      	adds	r3, #1
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	051b      	lsls	r3, r3, #20
 800348c:	e018      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x540>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003496:	fa93 f3a3 	rbit	r3, r3
 800349a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800349c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80034a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80034a6:	2320      	movs	r3, #32
 80034a8:	e003      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80034aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	f003 021f 	and.w	r2, r3, #31
 80034b8:	4613      	mov	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4413      	add	r3, r2
 80034be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c0:	430b      	orrs	r3, r1
 80034c2:	e080      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d107      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x560>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	0e9b      	lsrs	r3, r3, #26
 80034d6:	3301      	adds	r3, #1
 80034d8:	069b      	lsls	r3, r3, #26
 80034da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034de:	e015      	b.n	800350c <HAL_ADC_ConfigChannel+0x58c>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80034f8:	2320      	movs	r3, #32
 80034fa:	e003      	b.n	8003504 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	3301      	adds	r3, #1
 8003506:	069b      	lsls	r3, r3, #26
 8003508:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <HAL_ADC_ConfigChannel+0x5ac>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	3301      	adds	r3, #1
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	2101      	movs	r1, #1
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	e017      	b.n	800355c <HAL_ADC_ConfigChannel+0x5dc>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	61fb      	str	r3, [r7, #28]
  return result;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003544:	2320      	movs	r3, #32
 8003546:	e003      	b.n	8003550 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	3301      	adds	r3, #1
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	2101      	movs	r1, #1
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	ea42 0103 	orr.w	r1, r2, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10d      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x608>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0e9b      	lsrs	r3, r3, #26
 8003572:	3301      	adds	r3, #1
 8003574:	f003 021f 	and.w	r2, r3, #31
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	3b1e      	subs	r3, #30
 8003580:	051b      	lsls	r3, r3, #20
 8003582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003586:	e01d      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x644>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	613b      	str	r3, [r7, #16]
  return result;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80035a0:	2320      	movs	r3, #32
 80035a2:	e005      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x630>
 80035a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	3301      	adds	r3, #1
 80035b2:	f003 021f 	and.w	r2, r3, #31
 80035b6:	4613      	mov	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	3b1e      	subs	r3, #30
 80035be:	051b      	lsls	r3, r3, #20
 80035c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035c4:	430b      	orrs	r3, r1
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	6892      	ldr	r2, [r2, #8]
 80035ca:	4619      	mov	r1, r3
 80035cc:	f7ff f91c 	bl	8002808 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b45      	ldr	r3, [pc, #276]	; (80036ec <HAL_ADC_ConfigChannel+0x76c>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d07c      	beq.n	80036d6 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035dc:	4844      	ldr	r0, [pc, #272]	; (80036f0 <HAL_ADC_ConfigChannel+0x770>)
 80035de:	f7ff f871 	bl	80026c4 <LL_ADC_GetCommonPathInternalCh>
 80035e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035e6:	4843      	ldr	r0, [pc, #268]	; (80036f4 <HAL_ADC_ConfigChannel+0x774>)
 80035e8:	f7ff f9d4 	bl	8002994 <LL_ADC_IsEnabled>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d15e      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a40      	ldr	r2, [pc, #256]	; (80036f8 <HAL_ADC_ConfigChannel+0x778>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d127      	bne.n	800364c <HAL_ADC_ConfigChannel+0x6cc>
 80035fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d121      	bne.n	800364c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a39      	ldr	r2, [pc, #228]	; (80036f4 <HAL_ADC_ConfigChannel+0x774>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d161      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003612:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003616:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800361a:	4619      	mov	r1, r3
 800361c:	4834      	ldr	r0, [pc, #208]	; (80036f0 <HAL_ADC_ConfigChannel+0x770>)
 800361e:	f7ff f83e 	bl	800269e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003622:	4b36      	ldr	r3, [pc, #216]	; (80036fc <HAL_ADC_ConfigChannel+0x77c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	099b      	lsrs	r3, r3, #6
 8003628:	4a35      	ldr	r2, [pc, #212]	; (8003700 <HAL_ADC_ConfigChannel+0x780>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	099b      	lsrs	r3, r3, #6
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	4613      	mov	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800363c:	e002      	b.n	8003644 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3b01      	subs	r3, #1
 8003642:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f9      	bne.n	800363e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800364a:	e044      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a2c      	ldr	r2, [pc, #176]	; (8003704 <HAL_ADC_ConfigChannel+0x784>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d113      	bne.n	800367e <HAL_ADC_ConfigChannel+0x6fe>
 8003656:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800365a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10d      	bne.n	800367e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <HAL_ADC_ConfigChannel+0x774>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d134      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800366c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003674:	4619      	mov	r1, r3
 8003676:	481e      	ldr	r0, [pc, #120]	; (80036f0 <HAL_ADC_ConfigChannel+0x770>)
 8003678:	f7ff f811 	bl	800269e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800367c:	e02b      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a21      	ldr	r2, [pc, #132]	; (8003708 <HAL_ADC_ConfigChannel+0x788>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d126      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x756>
 8003688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800368c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d120      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <HAL_ADC_ConfigChannel+0x774>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d11b      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800369e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036a6:	4619      	mov	r1, r3
 80036a8:	4811      	ldr	r0, [pc, #68]	; (80036f0 <HAL_ADC_ConfigChannel+0x770>)
 80036aa:	f7fe fff8 	bl	800269e <LL_ADC_SetCommonPathInternalCh>
 80036ae:	e012      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80036c2:	e008      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80036de:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	37d8      	adds	r7, #216	; 0xd8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	80080000 	.word	0x80080000
 80036f0:	50040300 	.word	0x50040300
 80036f4:	50040000 	.word	0x50040000
 80036f8:	c7520000 	.word	0xc7520000
 80036fc:	20000004 	.word	0x20000004
 8003700:	053e2d63 	.word	0x053e2d63
 8003704:	cb840000 	.word	0xcb840000
 8003708:	80000001 	.word	0x80000001

0800370c <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff f984 	bl	8002a30 <LL_ADC_REG_IsConversionOngoing>
 8003728:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff f9a5 	bl	8002a7e <LL_ADC_INJ_IsConversionOngoing>
 8003734:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d103      	bne.n	8003744 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8098 	beq.w	8003874 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02a      	beq.n	80037a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	7e5b      	ldrb	r3, [r3, #25]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d126      	bne.n	80037a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7e1b      	ldrb	r3, [r3, #24]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d122      	bne.n	80037a8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003762:	2301      	movs	r3, #1
 8003764:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003766:	e014      	b.n	8003792 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4a45      	ldr	r2, [pc, #276]	; (8003880 <ADC_ConversionStop+0x174>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d90d      	bls.n	800378c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	f043 0210 	orr.w	r2, r3, #16
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003780:	f043 0201 	orr.w	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e074      	b.n	8003876 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	3301      	adds	r3, #1
 8003790:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d1e3      	bne.n	8003768 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2240      	movs	r2, #64	; 0x40
 80037a6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d014      	beq.n	80037d8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff f93c 	bl	8002a30 <LL_ADC_REG_IsConversionOngoing>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00c      	beq.n	80037d8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff f8f9 	bl	80029ba <LL_ADC_IsDisableOngoing>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d104      	bne.n	80037d8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff f918 	bl	8002a08 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d014      	beq.n	8003808 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff f94b 	bl	8002a7e <LL_ADC_INJ_IsConversionOngoing>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f8e1 	bl	80029ba <LL_ADC_IsDisableOngoing>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff f927 	bl	8002a56 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d005      	beq.n	800381a <ADC_ConversionStop+0x10e>
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d105      	bne.n	8003820 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003814:	230c      	movs	r3, #12
 8003816:	617b      	str	r3, [r7, #20]
        break;
 8003818:	e005      	b.n	8003826 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800381a:	2308      	movs	r3, #8
 800381c:	617b      	str	r3, [r7, #20]
        break;
 800381e:	e002      	b.n	8003826 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003820:	2304      	movs	r3, #4
 8003822:	617b      	str	r3, [r7, #20]
        break;
 8003824:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003826:	f7fe feeb 	bl	8002600 <HAL_GetTick>
 800382a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800382c:	e01b      	b.n	8003866 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800382e:	f7fe fee7 	bl	8002600 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b05      	cmp	r3, #5
 800383a:	d914      	bls.n	8003866 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00d      	beq.n	8003866 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f043 0210 	orr.w	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	f043 0201 	orr.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e007      	b.n	8003876 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1dc      	bne.n	800382e <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	a33fffff 	.word	0xa33fffff

08003884 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff f87d 	bl	8002994 <LL_ADC_IsEnabled>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d15e      	bne.n	800395e <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	4b30      	ldr	r3, [pc, #192]	; (8003968 <ADC_Enable+0xe4>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00d      	beq.n	80038ca <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	f043 0210 	orr.w	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e04a      	b.n	8003960 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff f838 	bl	8002944 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038d4:	4825      	ldr	r0, [pc, #148]	; (800396c <ADC_Enable+0xe8>)
 80038d6:	f7fe fef5 	bl	80026c4 <LL_ADC_GetCommonPathInternalCh>
 80038da:	4603      	mov	r3, r0
 80038dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00f      	beq.n	8003904 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <ADC_Enable+0xec>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	099b      	lsrs	r3, r3, #6
 80038ea:	4a22      	ldr	r2, [pc, #136]	; (8003974 <ADC_Enable+0xf0>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	099b      	lsrs	r3, r3, #6
 80038f2:	3301      	adds	r3, #1
 80038f4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80038f6:	e002      	b.n	80038fe <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f9      	bne.n	80038f8 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003904:	f7fe fe7c 	bl	8002600 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800390a:	e021      	b.n	8003950 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff f83f 	bl	8002994 <LL_ADC_IsEnabled>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff f80f 	bl	8002944 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003926:	f7fe fe6b 	bl	8002600 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d90d      	bls.n	8003950 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	f043 0210 	orr.w	r2, r3, #16
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	f043 0201 	orr.w	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e007      	b.n	8003960 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d1d6      	bne.n	800390c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	8000003f 	.word	0x8000003f
 800396c:	50040300 	.word	0x50040300
 8003970:	20000004 	.word	0x20000004
 8003974:	053e2d63 	.word	0x053e2d63

08003978 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff f818 	bl	80029ba <LL_ADC_IsDisableOngoing>
 800398a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe ffff 	bl	8002994 <LL_ADC_IsEnabled>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d047      	beq.n	8003a2c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d144      	bne.n	8003a2c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 030d 	and.w	r3, r3, #13
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d10c      	bne.n	80039ca <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe ffd9 	bl	800296c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2203      	movs	r2, #3
 80039c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039c2:	f7fe fe1d 	bl	8002600 <HAL_GetTick>
 80039c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039c8:	e029      	b.n	8003a1e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	f043 0210 	orr.w	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	f043 0201 	orr.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e023      	b.n	8003a2e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039e6:	f7fe fe0b 	bl	8002600 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d914      	bls.n	8003a1e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00d      	beq.n	8003a1e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	f043 0210 	orr.w	r2, r3, #16
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e007      	b.n	8003a2e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1dc      	bne.n	80039e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <__NVIC_SetPriorityGrouping>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <__NVIC_SetPriorityGrouping+0x44>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a54:	4013      	ands	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a6a:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <__NVIC_SetPriorityGrouping+0x44>)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	60d3      	str	r3, [r2, #12]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <__NVIC_GetPriorityGrouping>:
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <__NVIC_GetPriorityGrouping+0x18>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	f003 0307 	and.w	r3, r3, #7
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <__NVIC_EnableIRQ>:
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	db0b      	blt.n	8003ac6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	f003 021f 	and.w	r2, r3, #31
 8003ab4:	4907      	ldr	r1, [pc, #28]	; (8003ad4 <__NVIC_EnableIRQ+0x38>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2001      	movs	r0, #1
 8003abe:	fa00 f202 	lsl.w	r2, r0, r2
 8003ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	e000e100 	.word	0xe000e100

08003ad8 <__NVIC_SetPriority>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	6039      	str	r1, [r7, #0]
 8003ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	db0a      	blt.n	8003b02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	490c      	ldr	r1, [pc, #48]	; (8003b24 <__NVIC_SetPriority+0x4c>)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	0112      	lsls	r2, r2, #4
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	440b      	add	r3, r1
 8003afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b00:	e00a      	b.n	8003b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4908      	ldr	r1, [pc, #32]	; (8003b28 <__NVIC_SetPriority+0x50>)
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	3b04      	subs	r3, #4
 8003b10:	0112      	lsls	r2, r2, #4
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	440b      	add	r3, r1
 8003b16:	761a      	strb	r2, [r3, #24]
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000e100 	.word	0xe000e100
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <NVIC_EncodePriority>:
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f1c3 0307 	rsb	r3, r3, #7
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	bf28      	it	cs
 8003b4a:	2304      	movcs	r3, #4
 8003b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3304      	adds	r3, #4
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d902      	bls.n	8003b5c <NVIC_EncodePriority+0x30>
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3b03      	subs	r3, #3
 8003b5a:	e000      	b.n	8003b5e <NVIC_EncodePriority+0x32>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	401a      	ands	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b74:	f04f 31ff 	mov.w	r1, #4294967295
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	43d9      	mvns	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b84:	4313      	orrs	r3, r2
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3724      	adds	r7, #36	; 0x24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <SysTick_Config>:
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba4:	d301      	bcc.n	8003baa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e00f      	b.n	8003bca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003baa:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <SysTick_Config+0x40>)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bb2:	210f      	movs	r1, #15
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	f7ff ff8e 	bl	8003ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <SysTick_Config+0x40>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bc2:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <SysTick_Config+0x40>)
 8003bc4:	2207      	movs	r2, #7
 8003bc6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	e000e010 	.word	0xe000e010

08003bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff29 	bl	8003a38 <__NVIC_SetPriorityGrouping>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b086      	sub	sp, #24
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bfc:	f7ff ff40 	bl	8003a80 <__NVIC_GetPriorityGrouping>
 8003c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	6978      	ldr	r0, [r7, #20]
 8003c08:	f7ff ff90 	bl	8003b2c <NVIC_EncodePriority>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff5f 	bl	8003ad8 <__NVIC_SetPriority>
}
 8003c1a:	bf00      	nop
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	4603      	mov	r3, r0
 8003c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff33 	bl	8003a9c <__NVIC_EnableIRQ>
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff ffa4 	bl	8003b94 <SysTick_Config>
 8003c4c:	4603      	mov	r3, r0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e078      	b.n	8003d5c <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	4b3c      	ldr	r3, [pc, #240]	; (8003d64 <HAL_DMA_Init+0x10c>)
 8003c72:	4413      	add	r3, r2
 8003c74:	4a3c      	ldr	r2, [pc, #240]	; (8003d68 <HAL_DMA_Init+0x110>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	009a      	lsls	r2, r3, #2
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <HAL_DMA_Init+0x114>)
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f9b6 	bl	800404c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ce8:	d102      	bne.n	8003cf0 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d06:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d010      	beq.n	8003d32 <HAL_DMA_Init+0xda>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d80c      	bhi.n	8003d32 <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f9c3 	bl	80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	e008      	b.n	8003d44 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	bffdfff8 	.word	0xbffdfff8
 8003d68:	cccccccd 	.word	0xcccccccd
 8003d6c:	40020000 	.word	0x40020000

08003d70 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e04f      	b.n	8003e22 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d008      	beq.n	8003da0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2204      	movs	r2, #4
 8003d92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e040      	b.n	8003e22 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 020e 	bic.w	r2, r2, #14
 8003dae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	f003 021c 	and.w	r2, r3, #28
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	2101      	movs	r1, #1
 8003dde:	fa01 f202 	lsl.w	r2, r1, r2
 8003de2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00c      	beq.n	8003e10 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e04:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e0e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d005      	beq.n	8003e52 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
 8003e50:	e047      	b.n	8003ee2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 020e 	bic.w	r2, r2, #14
 8003e60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f003 021c 	and.w	r2, r3, #28
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2101      	movs	r1, #1
 8003e90:	fa01 f202 	lsl.w	r2, r1, r2
 8003e94:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e9e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00c      	beq.n	8003ec2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ec0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
    }
  }
  return status;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	f003 031c 	and.w	r3, r3, #28
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d026      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x7a>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d021      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d107      	bne.n	8003f40 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0204 	bic.w	r2, r2, #4
 8003f3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f44:	f003 021c 	and.w	r2, r3, #28
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	2104      	movs	r1, #4
 8003f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f52:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d071      	beq.n	8004040 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f64:	e06c      	b.n	8004040 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	f003 031c 	and.w	r3, r3, #28
 8003f6e:	2202      	movs	r2, #2
 8003f70:	409a      	lsls	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d02e      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0xec>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d029      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10b      	bne.n	8003faa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 020a 	bic.w	r2, r2, #10
 8003fa0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f003 021c 	and.w	r2, r3, #28
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fbc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d038      	beq.n	8004040 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fd6:	e033      	b.n	8004040 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	f003 031c 	and.w	r3, r3, #28
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d02a      	beq.n	8004042 <HAL_DMA_IRQHandler+0x156>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d025      	beq.n	8004042 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 020e 	bic.w	r2, r2, #14
 8004004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	f003 021c 	and.w	r2, r3, #28
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2101      	movs	r1, #1
 8004014:	fa01 f202 	lsl.w	r2, r1, r2
 8004018:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004034:	2b00      	cmp	r3, #0
 8004036:	d004      	beq.n	8004042 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004040:	bf00      	nop
 8004042:	bf00      	nop
}
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	089b      	lsrs	r3, r3, #2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004060:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	3b08      	subs	r3, #8
 8004070:	4a0a      	ldr	r2, [pc, #40]	; (800409c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800407e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	2201      	movs	r2, #1
 8004088:	409a      	lsls	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	cccccccd 	.word	0xcccccccd
 80040a0:	40020880 	.word	0x40020880

080040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	461a      	mov	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a09      	ldr	r2, [pc, #36]	; (80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80040c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2201      	movs	r2, #1
 80040d4:	409a      	lsls	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	1000823f 	.word	0x1000823f
 80040ec:	40020940 	.word	0x40020940

080040f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040fe:	e146      	b.n	800438e <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	2101      	movs	r1, #1
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	fa01 f303 	lsl.w	r3, r1, r3
 800410c:	4013      	ands	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8138 	beq.w	8004388 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d005      	beq.n	8004130 <HAL_GPIO_Init+0x40>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d130      	bne.n	8004192 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	2203      	movs	r2, #3
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004166:	2201      	movs	r2, #1
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	f003 0201 	and.w	r2, r3, #1
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b03      	cmp	r3, #3
 800419c:	d017      	beq.n	80041ce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2203      	movs	r2, #3
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d123      	bne.n	8004222 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	08da      	lsrs	r2, r3, #3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3208      	adds	r2, #8
 80041e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	220f      	movs	r2, #15
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	08da      	lsrs	r2, r3, #3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3208      	adds	r2, #8
 800421c:	6939      	ldr	r1, [r7, #16]
 800421e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	2203      	movs	r2, #3
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4013      	ands	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 0203 	and.w	r2, r3, #3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 8092 	beq.w	8004388 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004264:	4a51      	ldr	r2, [pc, #324]	; (80043ac <HAL_GPIO_Init+0x2bc>)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	3302      	adds	r3, #2
 800426c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	220f      	movs	r2, #15
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4013      	ands	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800428e:	d013      	beq.n	80042b8 <HAL_GPIO_Init+0x1c8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a47      	ldr	r2, [pc, #284]	; (80043b0 <HAL_GPIO_Init+0x2c0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00d      	beq.n	80042b4 <HAL_GPIO_Init+0x1c4>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a46      	ldr	r2, [pc, #280]	; (80043b4 <HAL_GPIO_Init+0x2c4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d007      	beq.n	80042b0 <HAL_GPIO_Init+0x1c0>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a45      	ldr	r2, [pc, #276]	; (80043b8 <HAL_GPIO_Init+0x2c8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d101      	bne.n	80042ac <HAL_GPIO_Init+0x1bc>
 80042a8:	2304      	movs	r3, #4
 80042aa:	e006      	b.n	80042ba <HAL_GPIO_Init+0x1ca>
 80042ac:	2307      	movs	r3, #7
 80042ae:	e004      	b.n	80042ba <HAL_GPIO_Init+0x1ca>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e002      	b.n	80042ba <HAL_GPIO_Init+0x1ca>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <HAL_GPIO_Init+0x1ca>
 80042b8:	2300      	movs	r3, #0
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	f002 0203 	and.w	r2, r2, #3
 80042c0:	0092      	lsls	r2, r2, #2
 80042c2:	4093      	lsls	r3, r2
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042ca:	4938      	ldr	r1, [pc, #224]	; (80043ac <HAL_GPIO_Init+0x2bc>)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	089b      	lsrs	r3, r3, #2
 80042d0:	3302      	adds	r3, #2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042d8:	4b38      	ldr	r3, [pc, #224]	; (80043bc <HAL_GPIO_Init+0x2cc>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042fc:	4a2f      	ldr	r2, [pc, #188]	; (80043bc <HAL_GPIO_Init+0x2cc>)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004302:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <HAL_GPIO_Init+0x2cc>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	43db      	mvns	r3, r3
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4013      	ands	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004326:	4a25      	ldr	r2, [pc, #148]	; (80043bc <HAL_GPIO_Init+0x2cc>)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800432c:	4b23      	ldr	r3, [pc, #140]	; (80043bc <HAL_GPIO_Init+0x2cc>)
 800432e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	43db      	mvns	r3, r3
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4013      	ands	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004352:	4a1a      	ldr	r2, [pc, #104]	; (80043bc <HAL_GPIO_Init+0x2cc>)
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800435a:	4b18      	ldr	r3, [pc, #96]	; (80043bc <HAL_GPIO_Init+0x2cc>)
 800435c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	43db      	mvns	r3, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004380:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <HAL_GPIO_Init+0x2cc>)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3301      	adds	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	f47f aeb1 	bne.w	8004100 <HAL_GPIO_Init+0x10>
  }
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40010000 	.word	0x40010000
 80043b0:	48000400 	.word	0x48000400
 80043b4:	48000800 	.word	0x48000800
 80043b8:	48001000 	.word	0x48001000
 80043bc:	58000800 	.word	0x58000800

080043c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
 80043cc:	4613      	mov	r3, r2
 80043ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043d0:	787b      	ldrb	r3, [r7, #1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043dc:	e002      	b.n	80043e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4013      	ands	r3, r2
 8004408:	041a      	lsls	r2, r3, #16
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	43d9      	mvns	r1, r3
 800440e:	887b      	ldrh	r3, [r7, #2]
 8004410:	400b      	ands	r3, r1
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	619a      	str	r2, [r3, #24]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01e      	beq.n	8004474 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004436:	4b13      	ldr	r3, [pc, #76]	; (8004484 <HAL_IPCC_Init+0x60>)
 8004438:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc ff74 	bl	8001334 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800444c:	68b8      	ldr	r0, [r7, #8]
 800444e:	f000 f8f5 	bl	800463c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f8c6 	bl	80045f0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004472:	e001      	b.n	8004478 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004478:	7bfb      	ldrb	r3, [r7, #15]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	58000c00 	.word	0x58000c00

08004488 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004494:	4b22      	ldr	r3, [pc, #136]	; (8004520 <HAL_IPCC_TX_IRQHandler+0x98>)
 8004496:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	43db      	mvns	r3, r3
 800449e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80044a2:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	43db      	mvns	r3, r3
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4013      	ands	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80044b2:	e02c      	b.n	800450e <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	3310      	adds	r3, #16
 80044bc:	2201      	movs	r2, #1
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01c      	beq.n	8004508 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	3306      	adds	r3, #6
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	3306      	adds	r3, #6
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	6939      	ldr	r1, [r7, #16]
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	43db      	mvns	r3, r3
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4013      	ands	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3301      	adds	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1cf      	bne.n	80044b4 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	58000c00 	.word	0x58000c00

08004524 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004530:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_IPCC_RX_IRQHandler+0x90>)
 8004532:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 8004534:	4b20      	ldr	r3, [pc, #128]	; (80045b8 <HAL_IPCC_RX_IRQHandler+0x94>)
 8004536:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	43db      	mvns	r3, r3
 800453e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004542:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	4013      	ands	r3, r2
 800454c:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800454e:	e029      	b.n	80045a4 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	2201      	movs	r2, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4013      	ands	r3, r2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01a      	beq.n	800459e <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	431a      	orrs	r2, r3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	69b9      	ldr	r1, [r7, #24]
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	43db      	mvns	r3, r3
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	4013      	ands	r3, r2
 800459c:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3301      	adds	r3, #1
 80045a2:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1d2      	bne.n	8004550 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	3720      	adds	r7, #32
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	58000c00 	.word	0x58000c00
 80045b8:	58000c10 	.word	0x58000c10

080045bc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	4613      	mov	r3, r2
 80045e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e00f      	b.n	800461e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	4a0b      	ldr	r2, [pc, #44]	; (8004634 <IPCC_SetDefaultCallbacks+0x44>)
 8004608:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3306      	adds	r3, #6
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	4a08      	ldr	r2, [pc, #32]	; (8004638 <IPCC_SetDefaultCallbacks+0x48>)
 8004616:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3301      	adds	r3, #1
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b05      	cmp	r3, #5
 8004622:	d9ec      	bls.n	80045fe <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	080045bd 	.word	0x080045bd
 8004638:	080045d7 	.word	0x080045d7

0800463c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004650:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	223f      	movs	r2, #63	; 0x3f
 8004656:	609a      	str	r2, [r3, #8]
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a04      	ldr	r2, [pc, #16]	; (8004680 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800466e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004672:	6013      	str	r3, [r2, #0]
}
 8004674:	bf00      	nop
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	58000400 	.word	0x58000400

08004684 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004696:	d101      	bne.n	800469c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80046ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ba:	6013      	str	r3, [r2, #0]
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80046c6:	b480      	push	{r7}
 80046c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80046ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d8:	6013      	str	r3, [r2, #0]
}
 80046da:	bf00      	nop
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80046e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046f6:	d101      	bne.n	80046fc <LL_RCC_HSE_IsReady+0x18>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <LL_RCC_HSE_IsReady+0x1a>
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800470c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471a:	6013      	str	r3, [r2, #0]
}
 800471c:	bf00      	nop
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004726:	b480      	push	{r7}
 8004728:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004738:	6013      	str	r3, [r2, #0]
}
 800473a:	bf00      	nop
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004756:	d101      	bne.n	800475c <LL_RCC_HSI_IsReady+0x18>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <LL_RCC_HSI_IsReady+0x1a>
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	061b      	lsls	r3, r3, #24
 800477e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004782:	4313      	orrs	r3, r2
 8004784:	604b      	str	r3, [r1, #4]
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8004792:	b480      	push	{r7}
 8004794:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800479e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80047aa:	bf00      	nop
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80047b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80047d6:	b480      	push	{r7}
 80047d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80047da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d101      	bne.n	80047ee <LL_RCC_HSI48_IsReady+0x18>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <LL_RCC_HSI48_IsReady+0x1a>
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80047fa:	b480      	push	{r7}
 80047fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004812:	bf00      	nop
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004828:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004834:	bf00      	nop
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800483e:	b480      	push	{r7}
 8004840:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800484e:	f043 0304 	orr.w	r3, r3, #4
 8004852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004856:	bf00      	nop
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004882:	b480      	push	{r7}
 8004884:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d101      	bne.n	800489a <LL_RCC_LSE_IsReady+0x18>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <LL_RCC_LSE_IsReady+0x1a>
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80048a6:	b480      	push	{r7}
 80048a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80048aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80048be:	bf00      	nop
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80048cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80048ea:	b480      	push	{r7}
 80048ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d101      	bne.n	8004902 <LL_RCC_LSI1_IsReady+0x18>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <LL_RCC_LSI1_IsReady+0x1a>
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800490e:	b480      	push	{r7}
 8004910:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800491e:	f043 0304 	orr.w	r3, r3, #4
 8004922:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004926:	bf00      	nop
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004940:	f023 0304 	bic.w	r3, r3, #4
 8004944:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004952:	b480      	push	{r7}
 8004954:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b08      	cmp	r3, #8
 8004964:	d101      	bne.n	800496a <LL_RCC_LSI2_IsReady+0x18>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <LL_RCC_LSI2_IsReady+0x1a>
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800497e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004986:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	6013      	str	r3, [r2, #0]
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80049c2:	b480      	push	{r7}
 80049c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80049c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	6013      	str	r3, [r2, #0]
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80049e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d101      	bne.n	80049f6 <LL_RCC_MSI_IsReady+0x16>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <LL_RCC_MSI_IsReady+0x18>
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a3a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2bb0      	cmp	r3, #176	; 0xb0
 8004a40:	d901      	bls.n	8004a46 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004a42:	23b0      	movs	r3, #176	; 0xb0
 8004a44:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004a46:	687b      	ldr	r3, [r7, #4]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	604b      	str	r3, [r1, #4]
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f023 0203 	bic.w	r2, r3, #3
 8004a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 030c 	and.w	r3, r3, #12
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004af6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b22:	f023 020f 	bic.w	r2, r3, #15
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	608b      	str	r3, [r1, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	608b      	str	r3, [r1, #8]
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bee:	6013      	str	r3, [r2, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c0c:	6013      	str	r3, [r2, #0]
}
 8004c0e:	bf00      	nop
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c2a:	d101      	bne.n	8004c30 <LL_RCC_PLL_IsReady+0x18>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <LL_RCC_PLL_IsReady+0x1a>
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004c56:	b480      	push	{r7}
 8004c58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004c86:	b480      	push	{r7}
 8004c88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0303 	and.w	r3, r3, #3
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb0:	d101      	bne.n	8004cb6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cd6:	d101      	bne.n	8004cdc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfc:	d101      	bne.n	8004d02 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d20:	d101      	bne.n	8004d26 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d44:	d101      	bne.n	8004d4a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b08d      	sub	sp, #52	; 0x34
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e35c      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 808d 	beq.w	8004e92 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d78:	f7ff fe95 	bl	8004aa6 <LL_RCC_GetSysClkSource>
 8004d7c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d7e:	f7ff ff82 	bl	8004c86 <LL_RCC_PLL_GetMainSource>
 8004d82:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <HAL_RCC_OscConfig+0x3e>
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	2b0c      	cmp	r3, #12
 8004d8e:	d147      	bne.n	8004e20 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d144      	bne.n	8004e20 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e340      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004da6:	f7ff fe40 	bl	8004a2a <LL_RCC_MSI_GetRange>
 8004daa:	4603      	mov	r3, r0
 8004dac:	429c      	cmp	r4, r3
 8004dae:	d914      	bls.n	8004dda <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fd0f 	bl	80057d8 <RCC_SetFlashLatencyFromMSIRange>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e32f      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff fe1a 	bl	8004a02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fe3e 	bl	8004a54 <LL_RCC_MSI_SetCalibTrimming>
 8004dd8:	e013      	b.n	8004e02 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fe0f 	bl	8004a02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fe33 	bl	8004a54 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fcf0 	bl	80057d8 <RCC_SetFlashLatencyFromMSIRange>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e310      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e02:	f000 fcbf 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 8004e06:	4603      	mov	r3, r0
 8004e08:	4aa4      	ldr	r2, [pc, #656]	; (800509c <HAL_RCC_OscConfig+0x344>)
 8004e0a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e0c:	4ba4      	ldr	r3, [pc, #656]	; (80050a0 <HAL_RCC_OscConfig+0x348>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fd fba7 	bl	8002564 <HAL_InitTick>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d039      	beq.n	8004e90 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e301      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01e      	beq.n	8004e66 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e28:	f7ff fdbc 	bl	80049a4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e2c:	f7fd fbe8 	bl	8002600 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e34:	f7fd fbe4 	bl	8002600 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e2ee      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004e46:	f7ff fdcb 	bl	80049e0 <LL_RCC_MSI_IsReady>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f1      	beq.n	8004e34 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fdd4 	bl	8004a02 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fdf8 	bl	8004a54 <LL_RCC_MSI_SetCalibTrimming>
 8004e64:	e015      	b.n	8004e92 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e66:	f7ff fdac 	bl	80049c2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e6a:	f7fd fbc9 	bl	8002600 <HAL_GetTick>
 8004e6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e72:	f7fd fbc5 	bl	8002600 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e2cf      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004e84:	f7ff fdac 	bl	80049e0 <LL_RCC_MSI_IsReady>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f1      	bne.n	8004e72 <HAL_RCC_OscConfig+0x11a>
 8004e8e:	e000      	b.n	8004e92 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004e90:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d047      	beq.n	8004f2e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e9e:	f7ff fe02 	bl	8004aa6 <LL_RCC_GetSysClkSource>
 8004ea2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ea4:	f7ff feef 	bl	8004c86 <LL_RCC_PLL_GetMainSource>
 8004ea8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d005      	beq.n	8004ebc <HAL_RCC_OscConfig+0x164>
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	2b0c      	cmp	r3, #12
 8004eb4:	d108      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d105      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d134      	bne.n	8004f2e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e2ad      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed0:	d102      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x180>
 8004ed2:	f7ff fbe9 	bl	80046a8 <LL_RCC_HSE_Enable>
 8004ed6:	e001      	b.n	8004edc <HAL_RCC_OscConfig+0x184>
 8004ed8:	f7ff fbf5 	bl	80046c6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d012      	beq.n	8004f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7fd fb8c 	bl	8002600 <HAL_GetTick>
 8004ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eec:	f7fd fb88 	bl	8002600 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b64      	cmp	r3, #100	; 0x64
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e292      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004efe:	f7ff fbf1 	bl	80046e4 <LL_RCC_HSE_IsReady>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f1      	beq.n	8004eec <HAL_RCC_OscConfig+0x194>
 8004f08:	e011      	b.n	8004f2e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0a:	f7fd fb79 	bl	8002600 <HAL_GetTick>
 8004f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f12:	f7fd fb75 	bl	8002600 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b64      	cmp	r3, #100	; 0x64
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e27f      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004f24:	f7ff fbde 	bl	80046e4 <LL_RCC_HSE_IsReady>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f1      	bne.n	8004f12 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d04c      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3a:	f7ff fdb4 	bl	8004aa6 <LL_RCC_GetSysClkSource>
 8004f3e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f40:	f7ff fea1 	bl	8004c86 <LL_RCC_PLL_GetMainSource>
 8004f44:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d005      	beq.n	8004f58 <HAL_RCC_OscConfig+0x200>
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b0c      	cmp	r3, #12
 8004f50:	d10e      	bne.n	8004f70 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d10b      	bne.n	8004f70 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e25f      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fbfd 	bl	8004768 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f6e:	e031      	b.n	8004fd4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d019      	beq.n	8004fac <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f78:	f7ff fbc6 	bl	8004708 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7fd fb40 	bl	8002600 <HAL_GetTick>
 8004f80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f84:	f7fd fb3c 	bl	8002600 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e246      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f96:	f7ff fbd5 	bl	8004744 <LL_RCC_HSI_IsReady>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f1      	beq.n	8004f84 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fbdf 	bl	8004768 <LL_RCC_HSI_SetCalibTrimming>
 8004faa:	e013      	b.n	8004fd4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fac:	f7ff fbbb 	bl	8004726 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fd fb26 	bl	8002600 <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fb8:	f7fd fb22 	bl	8002600 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e22c      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004fca:	f7ff fbbb 	bl	8004744 <LL_RCC_HSI_IsReady>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f1      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d106      	bne.n	8004fee <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80a3 	beq.w	8005134 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d076      	beq.n	80050e4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d046      	beq.n	8005090 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005002:	f7ff fc72 	bl	80048ea <LL_RCC_LSI1_IsReady>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d113      	bne.n	8005034 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800500c:	f7ff fc4b 	bl	80048a6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005010:	f7fd faf6 	bl	8002600 <HAL_GetTick>
 8005014:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005018:	f7fd faf2 	bl	8002600 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e1fc      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800502a:	f7ff fc5e 	bl	80048ea <LL_RCC_LSI1_IsReady>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f1      	beq.n	8005018 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005034:	f7ff fc6b 	bl	800490e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005038:	f7fd fae2 	bl	8002600 <HAL_GetTick>
 800503c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005040:	f7fd fade 	bl	8002600 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b03      	cmp	r3, #3
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e1e8      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005052:	f7ff fc7e 	bl	8004952 <LL_RCC_LSI2_IsReady>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f1      	beq.n	8005040 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff fc88 	bl	8004976 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005066:	f7ff fc2f 	bl	80048c8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506a:	f7fd fac9 	bl	8002600 <HAL_GetTick>
 800506e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005072:	f7fd fac5 	bl	8002600 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e1cf      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005084:	f7ff fc31 	bl	80048ea <LL_RCC_LSI1_IsReady>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f1      	bne.n	8005072 <HAL_RCC_OscConfig+0x31a>
 800508e:	e051      	b.n	8005134 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005090:	f7ff fc09 	bl	80048a6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fd fab4 	bl	8002600 <HAL_GetTick>
 8005098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800509a:	e00c      	b.n	80050b6 <HAL_RCC_OscConfig+0x35e>
 800509c:	20000004 	.word	0x20000004
 80050a0:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80050a4:	f7fd faac 	bl	8002600 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e1b6      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80050b6:	f7ff fc18 	bl	80048ea <LL_RCC_LSI1_IsReady>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f1      	beq.n	80050a4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80050c0:	f7ff fc36 	bl	8004930 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80050c6:	f7fd fa9b 	bl	8002600 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e1a5      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80050d8:	f7ff fc3b 	bl	8004952 <LL_RCC_LSI2_IsReady>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f1      	bne.n	80050c6 <HAL_RCC_OscConfig+0x36e>
 80050e2:	e027      	b.n	8005134 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80050e4:	f7ff fc24 	bl	8004930 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e8:	f7fd fa8a 	bl	8002600 <HAL_GetTick>
 80050ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80050f0:	f7fd fa86 	bl	8002600 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e190      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005102:	f7ff fc26 	bl	8004952 <LL_RCC_LSI2_IsReady>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f1      	bne.n	80050f0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800510c:	f7ff fbdc 	bl	80048c8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005110:	f7fd fa76 	bl	8002600 <HAL_GetTick>
 8005114:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005118:	f7fd fa72 	bl	8002600 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e17c      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800512a:	f7ff fbde 	bl	80048ea <LL_RCC_LSI1_IsReady>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f1      	bne.n	8005118 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d05b      	beq.n	80051f8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005140:	4ba7      	ldr	r3, [pc, #668]	; (80053e0 <HAL_RCC_OscConfig+0x688>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d114      	bne.n	8005176 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800514c:	f7ff fa8a 	bl	8004664 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005150:	f7fd fa56 	bl	8002600 <HAL_GetTick>
 8005154:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005158:	f7fd fa52 	bl	8002600 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e15c      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800516a:	4b9d      	ldr	r3, [pc, #628]	; (80053e0 <HAL_RCC_OscConfig+0x688>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d102      	bne.n	8005184 <HAL_RCC_OscConfig+0x42c>
 800517e:	f7ff fb3c 	bl	80047fa <LL_RCC_LSE_Enable>
 8005182:	e00c      	b.n	800519e <HAL_RCC_OscConfig+0x446>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b05      	cmp	r3, #5
 800518a:	d104      	bne.n	8005196 <HAL_RCC_OscConfig+0x43e>
 800518c:	f7ff fb57 	bl	800483e <LL_RCC_LSE_EnableBypass>
 8005190:	f7ff fb33 	bl	80047fa <LL_RCC_LSE_Enable>
 8005194:	e003      	b.n	800519e <HAL_RCC_OscConfig+0x446>
 8005196:	f7ff fb41 	bl	800481c <LL_RCC_LSE_Disable>
 800519a:	f7ff fb61 	bl	8004860 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d014      	beq.n	80051d0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a6:	f7fd fa2b 	bl	8002600 <HAL_GetTick>
 80051aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80051ac:	e00a      	b.n	80051c4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ae:	f7fd fa27 	bl	8002600 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051bc:	4293      	cmp	r3, r2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e12f      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() == 0U)
 80051c4:	f7ff fb5d 	bl	8004882 <LL_RCC_LSE_IsReady>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0ef      	beq.n	80051ae <HAL_RCC_OscConfig+0x456>
 80051ce:	e013      	b.n	80051f8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d0:	f7fd fa16 	bl	8002600 <HAL_GetTick>
 80051d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d8:	f7fd fa12 	bl	8002600 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e11a      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() != 0U)
 80051ee:	f7ff fb48 	bl	8004882 <LL_RCC_LSE_IsReady>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1ef      	bne.n	80051d8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d02c      	beq.n	800525e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d014      	beq.n	8005236 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800520c:	f7ff fac1 	bl	8004792 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005210:	f7fd f9f6 	bl	8002600 <HAL_GetTick>
 8005214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005218:	f7fd f9f2 	bl	8002600 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e0fc      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800522a:	f7ff fad4 	bl	80047d6 <LL_RCC_HSI48_IsReady>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f1      	beq.n	8005218 <HAL_RCC_OscConfig+0x4c0>
 8005234:	e013      	b.n	800525e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005236:	f7ff fabd 	bl	80047b4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523a:	f7fd f9e1 	bl	8002600 <HAL_GetTick>
 800523e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005242:	f7fd f9dd 	bl	8002600 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e0e7      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005254:	f7ff fabf 	bl	80047d6 <LL_RCC_HSI48_IsReady>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f1      	bne.n	8005242 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80dd 	beq.w	8005422 <HAL_RCC_OscConfig+0x6ca>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005268:	f7ff fc1d 	bl	8004aa6 <LL_RCC_GetSysClkSource>
 800526c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	2b02      	cmp	r3, #2
 800527c:	f040 80a6 	bne.w	80053cc <HAL_RCC_OscConfig+0x674>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0203 	and.w	r2, r3, #3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	429a      	cmp	r2, r3
 800528c:	d123      	bne.n	80052d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005298:	429a      	cmp	r2, r3
 800529a:	d11c      	bne.n	80052d6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d114      	bne.n	80052d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d10d      	bne.n	80052d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d106      	bne.n	80052d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d054      	beq.n	8005380 <HAL_RCC_OscConfig+0x628>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b0c      	cmp	r3, #12
 80052da:	d04f      	beq.n	800537c <HAL_RCC_OscConfig+0x624>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052dc:	f7ff fc8d 	bl	8004bfa <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052e0:	f7fd f98e 	bl	8002600 <HAL_GetTick>
 80052e4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x5a2>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fd f98a 	bl	8002600 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x5a2>
              {
                return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e094      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1ef      	bne.n	80052e8 <HAL_RCC_OscConfig+0x590>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	4b35      	ldr	r3, [pc, #212]	; (80053e4 <HAL_RCC_OscConfig+0x68c>)
 8005310:	4013      	ands	r3, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800531a:	4311      	orrs	r1, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005320:	0212      	lsls	r2, r2, #8
 8005322:	4311      	orrs	r1, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005328:	4311      	orrs	r1, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800532e:	4311      	orrs	r1, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005334:	430a      	orrs	r2, r1
 8005336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800533a:	4313      	orrs	r3, r2
 800533c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800533e:	f7ff fc4d 	bl	8004bdc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800534c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005350:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005352:	f7fd f955 	bl	8002600 <HAL_GetTick>
 8005356:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x614>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800535a:	f7fd f951 	bl	8002600 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x614>
              {
                return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e05b      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0ef      	beq.n	800535a <HAL_RCC_OscConfig+0x602>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800537a:	e052      	b.n	8005422 <HAL_RCC_OscConfig+0x6ca>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e051      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d149      	bne.n	8005422 <HAL_RCC_OscConfig+0x6ca>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800538e:	f7ff fc25 	bl	8004bdc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053a2:	f7fd f92d 	bl	8002600 <HAL_GetTick>
 80053a6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x664>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053aa:	f7fd f929 	bl	8002600 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x664>
            {
              return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e033      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0ef      	beq.n	80053aa <HAL_RCC_OscConfig+0x652>
 80053ca:	e02a      	b.n	8005422 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b0c      	cmp	r3, #12
 80053d0:	d025      	beq.n	800541e <HAL_RCC_OscConfig+0x6c6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d2:	f7ff fc12 	bl	8004bfa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d6:	f7fd f913 	bl	8002600 <HAL_GetTick>
 80053da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053dc:	e00d      	b.n	80053fa <HAL_RCC_OscConfig+0x6a2>
 80053de:	bf00      	nop
 80053e0:	58000400 	.word	0x58000400
 80053e4:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e8:	f7fd f90a 	bl	8002600 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x6a2>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e014      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1ef      	bne.n	80053e8 <HAL_RCC_OscConfig+0x690>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8005408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	60d3      	str	r3, [r2, #12]
 800541c:	e001      	b.n	8005422 <HAL_RCC_OscConfig+0x6ca>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <HAL_RCC_OscConfig+0x6cc>
      }
    }
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3734      	adds	r7, #52	; 0x34
 8005428:	46bd      	mov	sp, r7
 800542a:	bd90      	pop	{r4, r7, pc}

0800542c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e12d      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005440:	4b98      	ldr	r3, [pc, #608]	; (80056a4 <HAL_RCC_ClockConfig+0x278>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d91b      	bls.n	8005486 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b95      	ldr	r3, [pc, #596]	; (80056a4 <HAL_RCC_ClockConfig+0x278>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 0207 	bic.w	r2, r3, #7
 8005456:	4993      	ldr	r1, [pc, #588]	; (80056a4 <HAL_RCC_ClockConfig+0x278>)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	4313      	orrs	r3, r2
 800545c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800545e:	f7fd f8cf 	bl	8002600 <HAL_GetTick>
 8005462:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005464:	e008      	b.n	8005478 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005466:	f7fd f8cb 	bl	8002600 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e111      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005478:	4b8a      	ldr	r3, [pc, #552]	; (80056a4 <HAL_RCC_ClockConfig+0x278>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d1ef      	bne.n	8005466 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d016      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff fb11 	bl	8004abe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800549c:	f7fd f8b0 	bl	8002600 <HAL_GetTick>
 80054a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054a4:	f7fd f8ac 	bl	8002600 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e0f2      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80054b6:	f7ff fbf2 	bl	8004c9e <LL_RCC_IsActiveFlag_HPRE>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f1      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d016      	beq.n	80054fa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fb08 	bl	8004ae6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054d6:	f7fd f893 	bl	8002600 <HAL_GetTick>
 80054da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054de:	f7fd f88f 	bl	8002600 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e0d5      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80054f0:	f7ff fbe7 	bl	8004cc2 <LL_RCC_IsActiveFlag_C2HPRE>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0f1      	beq.n	80054de <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d016      	beq.n	8005534 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff fb01 	bl	8004b12 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005510:	f7fd f876 	bl	8002600 <HAL_GetTick>
 8005514:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005518:	f7fd f872 	bl	8002600 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e0b8      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800552a:	f7ff fbdd 	bl	8004ce8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f1      	beq.n	8005518 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d016      	beq.n	800556e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fafb 	bl	8004b40 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800554a:	f7fd f859 	bl	8002600 <HAL_GetTick>
 800554e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005550:	e008      	b.n	8005564 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005552:	f7fd f855 	bl	8002600 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e09b      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005564:	f7ff fbd3 	bl	8004d0e <LL_RCC_IsActiveFlag_PPRE1>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f1      	beq.n	8005552 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d017      	beq.n	80055aa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff faf1 	bl	8004b68 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005586:	f7fd f83b 	bl	8002600 <HAL_GetTick>
 800558a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800558e:	f7fd f837 	bl	8002600 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e07d      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80055a0:	f7ff fbc7 	bl	8004d32 <LL_RCC_IsActiveFlag_PPRE2>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f1      	beq.n	800558e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d043      	beq.n	800563e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d106      	bne.n	80055cc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80055be:	f7ff f891 	bl	80046e4 <LL_RCC_HSE_IsReady>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d11e      	bne.n	8005606 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e067      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d106      	bne.n	80055e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80055d4:	f7ff fb20 	bl	8004c18 <LL_RCC_PLL_IsReady>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d113      	bne.n	8005606 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e05c      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80055ea:	f7ff f9f9 	bl	80049e0 <LL_RCC_MSI_IsReady>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d108      	bne.n	8005606 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e051      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80055f8:	f7ff f8a4 	bl	8004744 <LL_RCC_HSI_IsReady>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e04a      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff fa37 	bl	8004a7e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005610:	f7fc fff6 	bl	8002600 <HAL_GetTick>
 8005614:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	e00a      	b.n	800562e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005618:	f7fc fff2 	bl	8002600 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f241 3288 	movw	r2, #5000	; 0x1388
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e036      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562e:	f7ff fa3a 	bl	8004aa6 <LL_RCC_GetSysClkSource>
 8005632:	4602      	mov	r2, r0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	429a      	cmp	r2, r3
 800563c:	d1ec      	bne.n	8005618 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800563e:	4b19      	ldr	r3, [pc, #100]	; (80056a4 <HAL_RCC_ClockConfig+0x278>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d21b      	bcs.n	8005684 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564c:	4b15      	ldr	r3, [pc, #84]	; (80056a4 <HAL_RCC_ClockConfig+0x278>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f023 0207 	bic.w	r2, r3, #7
 8005654:	4913      	ldr	r1, [pc, #76]	; (80056a4 <HAL_RCC_ClockConfig+0x278>)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	4313      	orrs	r3, r2
 800565a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800565c:	f7fc ffd0 	bl	8002600 <HAL_GetTick>
 8005660:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005662:	e008      	b.n	8005676 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005664:	f7fc ffcc 	bl	8002600 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e012      	b.n	800569c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005676:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_RCC_ClockConfig+0x278>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d1ef      	bne.n	8005664 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005684:	f000 f87e 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 8005688:	4603      	mov	r3, r0
 800568a:	4a07      	ldr	r2, [pc, #28]	; (80056a8 <HAL_RCC_ClockConfig+0x27c>)
 800568c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800568e:	f7fc ffc3 	bl	8002618 <HAL_GetTickPrio>
 8005692:	4603      	mov	r3, r0
 8005694:	4618      	mov	r0, r3
 8005696:	f7fc ff65 	bl	8002564 <HAL_InitTick>
 800569a:	4603      	mov	r3, r0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	58004000 	.word	0x58004000
 80056a8:	20000004 	.word	0x20000004

080056ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056ac:	b590      	push	{r4, r7, lr}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056b2:	f7ff f9f8 	bl	8004aa6 <LL_RCC_GetSysClkSource>
 80056b6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80056be:	f7ff f9b4 	bl	8004a2a <LL_RCC_MSI_GetRange>
 80056c2:	4603      	mov	r3, r0
 80056c4:	091b      	lsrs	r3, r3, #4
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	4a2b      	ldr	r2, [pc, #172]	; (8005778 <HAL_RCC_GetSysClockFreq+0xcc>)
 80056cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e04b      	b.n	800576c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d102      	bne.n	80056e0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056da:	4b28      	ldr	r3, [pc, #160]	; (800577c <HAL_RCC_GetSysClockFreq+0xd0>)
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	e045      	b.n	800576c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d10a      	bne.n	80056fc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80056e6:	f7fe ffcd 	bl	8004684 <LL_RCC_HSE_IsEnabledDiv2>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d102      	bne.n	80056f6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80056f0:	4b22      	ldr	r3, [pc, #136]	; (800577c <HAL_RCC_GetSysClockFreq+0xd0>)
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e03a      	b.n	800576c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80056f6:	4b22      	ldr	r3, [pc, #136]	; (8005780 <HAL_RCC_GetSysClockFreq+0xd4>)
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	e037      	b.n	800576c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80056fc:	f7ff fac3 	bl	8004c86 <LL_RCC_PLL_GetMainSource>
 8005700:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b02      	cmp	r3, #2
 8005706:	d003      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x64>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b03      	cmp	r3, #3
 800570c:	d003      	beq.n	8005716 <HAL_RCC_GetSysClockFreq+0x6a>
 800570e:	e00d      	b.n	800572c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005710:	4b1a      	ldr	r3, [pc, #104]	; (800577c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005712:	60bb      	str	r3, [r7, #8]
        break;
 8005714:	e015      	b.n	8005742 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005716:	f7fe ffb5 	bl	8004684 <LL_RCC_HSE_IsEnabledDiv2>
 800571a:	4603      	mov	r3, r0
 800571c:	2b01      	cmp	r3, #1
 800571e:	d102      	bne.n	8005726 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005720:	4b16      	ldr	r3, [pc, #88]	; (800577c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005722:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005724:	e00d      	b.n	8005742 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005726:	4b16      	ldr	r3, [pc, #88]	; (8005780 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005728:	60bb      	str	r3, [r7, #8]
        break;
 800572a:	e00a      	b.n	8005742 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800572c:	f7ff f97d 	bl	8004a2a <LL_RCC_MSI_GetRange>
 8005730:	4603      	mov	r3, r0
 8005732:	091b      	lsrs	r3, r3, #4
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	4a0f      	ldr	r2, [pc, #60]	; (8005778 <HAL_RCC_GetSysClockFreq+0xcc>)
 800573a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573e:	60bb      	str	r3, [r7, #8]
        break;
 8005740:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005742:	f7ff fa7b 	bl	8004c3c <LL_RCC_PLL_GetN>
 8005746:	4602      	mov	r2, r0
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	fb03 f402 	mul.w	r4, r3, r2
 800574e:	f7ff fa8e 	bl	8004c6e <LL_RCC_PLL_GetDivider>
 8005752:	4603      	mov	r3, r0
 8005754:	091b      	lsrs	r3, r3, #4
 8005756:	3301      	adds	r3, #1
 8005758:	fbb4 f4f3 	udiv	r4, r4, r3
 800575c:	f7ff fa7b 	bl	8004c56 <LL_RCC_PLL_GetR>
 8005760:	4603      	mov	r3, r0
 8005762:	0f5b      	lsrs	r3, r3, #29
 8005764:	3301      	adds	r3, #1
 8005766:	fbb4 f3f3 	udiv	r3, r4, r3
 800576a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800576c:	68fb      	ldr	r3, [r7, #12]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bd90      	pop	{r4, r7, pc}
 8005776:	bf00      	nop
 8005778:	0800c5cc 	.word	0x0800c5cc
 800577c:	00f42400 	.word	0x00f42400
 8005780:	01e84800 	.word	0x01e84800

08005784 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005784:	b598      	push	{r3, r4, r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005788:	f7ff ff90 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 800578c:	4604      	mov	r4, r0
 800578e:	f7ff f9ff 	bl	8004b90 <LL_RCC_GetAHBPrescaler>
 8005792:	4603      	mov	r3, r0
 8005794:	091b      	lsrs	r3, r3, #4
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	4a03      	ldr	r2, [pc, #12]	; (80057a8 <HAL_RCC_GetHCLKFreq+0x24>)
 800579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	bd98      	pop	{r3, r4, r7, pc}
 80057a8:	0800c56c 	.word	0x0800c56c

080057ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057ac:	b598      	push	{r3, r4, r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80057b0:	f7ff ffe8 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 80057b4:	4604      	mov	r4, r0
 80057b6:	f7ff fa05 	bl	8004bc4 <LL_RCC_GetAPB2Prescaler>
 80057ba:	4603      	mov	r3, r0
 80057bc:	0adb      	lsrs	r3, r3, #11
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	4a04      	ldr	r2, [pc, #16]	; (80057d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	bd98      	pop	{r3, r4, r7, pc}
 80057d4:	0800c5ac 	.word	0x0800c5ac

080057d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2bb0      	cmp	r3, #176	; 0xb0
 80057e4:	d903      	bls.n	80057ee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80057e6:	4b14      	ldr	r3, [pc, #80]	; (8005838 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	e007      	b.n	80057fe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	4a10      	ldr	r2, [pc, #64]	; (8005838 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80057f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057fc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80057fe:	f7ff f9d3 	bl	8004ba8 <LL_RCC_GetAHB4Prescaler>
 8005802:	4603      	mov	r3, r0
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	4a0c      	ldr	r2, [pc, #48]	; (800583c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800580c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	fbb2 f3f3 	udiv	r3, r2, r3
 8005816:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4a09      	ldr	r2, [pc, #36]	; (8005840 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	0c9b      	lsrs	r3, r3, #18
 8005822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005826:	4618      	mov	r0, r3
 8005828:	f000 f80c 	bl	8005844 <RCC_SetFlashLatency>
 800582c:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	0800c5cc 	.word	0x0800c5cc
 800583c:	0800c56c 	.word	0x0800c56c
 8005840:	431bde83 	.word	0x431bde83

08005844 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005844:	b590      	push	{r4, r7, lr}
 8005846:	b08f      	sub	sp, #60	; 0x3c
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800584e:	4b24      	ldr	r3, [pc, #144]	; (80058e0 <RCC_SetFlashLatency+0x9c>)
 8005850:	f107 041c 	add.w	r4, r7, #28
 8005854:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005856:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800585a:	4b22      	ldr	r3, [pc, #136]	; (80058e4 <RCC_SetFlashLatency+0xa0>)
 800585c:	f107 040c 	add.w	r4, r7, #12
 8005860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005862:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005866:	2300      	movs	r3, #0
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800586a:	2300      	movs	r3, #0
 800586c:	633b      	str	r3, [r7, #48]	; 0x30
 800586e:	e013      	b.n	8005898 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	3338      	adds	r3, #56	; 0x38
 8005876:	443b      	add	r3, r7
 8005878:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	429a      	cmp	r2, r3
 8005880:	d807      	bhi.n	8005892 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	3338      	adds	r3, #56	; 0x38
 8005888:	443b      	add	r3, r7
 800588a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800588e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005890:	e005      	b.n	800589e <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	3301      	adds	r3, #1
 8005896:	633b      	str	r3, [r7, #48]	; 0x30
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	2b03      	cmp	r3, #3
 800589c:	d9e8      	bls.n	8005870 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800589e:	4b12      	ldr	r3, [pc, #72]	; (80058e8 <RCC_SetFlashLatency+0xa4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 0207 	bic.w	r2, r3, #7
 80058a6:	4910      	ldr	r1, [pc, #64]	; (80058e8 <RCC_SetFlashLatency+0xa4>)
 80058a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058aa:	4313      	orrs	r3, r2
 80058ac:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058ae:	f7fc fea7 	bl	8002600 <HAL_GetTick>
 80058b2:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80058b4:	e008      	b.n	80058c8 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80058b6:	f7fc fea3 	bl	8002600 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e007      	b.n	80058d8 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80058c8:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <RCC_SetFlashLatency+0xa4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d1ef      	bne.n	80058b6 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	373c      	adds	r7, #60	; 0x3c
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd90      	pop	{r4, r7, pc}
 80058e0:	0800c54c 	.word	0x0800c54c
 80058e4:	0800c55c 	.word	0x0800c55c
 80058e8:	58004000 	.word	0x58004000

080058ec <LL_RCC_LSE_IsEnabled>:
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80058f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <LL_RCC_LSE_IsEnabled+0x18>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <LL_RCC_LSE_IsEnabled+0x1a>
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <LL_RCC_LSE_IsReady>:
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b02      	cmp	r3, #2
 8005922:	d101      	bne.n	8005928 <LL_RCC_LSE_IsReady+0x18>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <LL_RCC_LSE_IsReady+0x1a>
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <LL_RCC_SetRFWKPClockSource>:
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800593c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005944:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005948:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <LL_RCC_SetUSARTClockSource>:
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005970:	f023 0203 	bic.w	r2, r3, #3
 8005974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <LL_RCC_SetI2CClockSource>:
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005998:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80059a4:	43db      	mvns	r3, r3
 80059a6:	401a      	ands	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80059b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <LL_RCC_SetLPTIMClockSource>:
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80059ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	0c1b      	lsrs	r3, r3, #16
 80059da:	041b      	lsls	r3, r3, #16
 80059dc:	43db      	mvns	r3, r3
 80059de:	401a      	ands	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <LL_RCC_SetRNGClockSource>:
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <LL_RCC_SetCLK48ClockSource>:
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <LL_RCC_SetADCClockSource>:
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <LL_RCC_SetRTCClockSource>:
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <LL_RCC_GetRTCClockSource>:
{
 8005aaa:	b480      	push	{r7}
 8005aac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <LL_RCC_ForceBackupDomainReset>:
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005adc:	bf00      	nop
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005afe:	bf00      	nop
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005b10:	2300      	movs	r3, #0
 8005b12:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005b14:	2300      	movs	r3, #0
 8005b16:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d046      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005b24:	f7ff ffc1 	bl	8005aaa <LL_RCC_GetRTCClockSource>
 8005b28:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d03c      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005b34:	f7fe fd96 	bl	8004664 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d105      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff ff9b 	bl	8005a7e <LL_RCC_SetRTCClockSource>
 8005b48:	e02e      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b52:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005b54:	f7ff ffb6 	bl	8005ac4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005b58:	f7ff ffc5 	bl	8005ae6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005b74:	f7ff feba 	bl	80058ec <LL_RCC_LSE_IsEnabled>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d114      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b7e:	f7fc fd3f 	bl	8002600 <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005b84:	e00b      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b86:	f7fc fd3b 	bl	8002600 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d902      	bls.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	77fb      	strb	r3, [r7, #31]
              break;
 8005b9c:	e004      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005b9e:	f7ff feb7 	bl	8005910 <LL_RCC_LSE_IsReady>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d1ee      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005ba8:	7ffb      	ldrb	r3, [r7, #31]
 8005baa:	77bb      	strb	r3, [r7, #30]
 8005bac:	e001      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bae:	7ffb      	ldrb	r3, [r7, #31]
 8005bb0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff fecc 	bl	8005960 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff fef4 	bl	80059c6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff fee9 	bl	80059c6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff fec1 	bl	800598c <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d02b      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1e:	d008      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c28:	d003      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff fedf 	bl	80059fa <LL_RCC_SetRNGClockSource>
 8005c3c:	e00a      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	2000      	movs	r0, #0
 8005c4a:	f7ff fed6 	bl	80059fa <LL_RCC_SetRNGClockSource>
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff fee9 	bl	8005a26 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c6c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d011      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fee7 	bl	8005a52 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9c:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff fe40 	bl	8005934 <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005cb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e095      	b.n	8005dfc <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d108      	bne.n	8005cea <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ce0:	d009      	beq.n	8005cf6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	61da      	str	r2, [r3, #28]
 8005ce8:	e005      	b.n	8005cf6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d106      	bne.n	8005d16 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fc f8c9 	bl	8001ea8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d36:	d902      	bls.n	8005d3e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e002      	b.n	8005d44 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d42:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d4c:	d007      	beq.n	8005d5e <HAL_SPI_Init+0xa0>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d56:	d002      	beq.n	8005d5e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da0:	ea42 0103 	orr.w	r1, r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	0c1b      	lsrs	r3, r3, #16
 8005dba:	f003 0204 	and.w	r2, r3, #4
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	f003 0310 	and.w	r3, r3, #16
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005dda:	ea42 0103 	orr.w	r1, r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	4613      	mov	r3, r2
 8005e12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <HAL_SPI_Transmit+0x22>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e158      	b.n	80060d8 <HAL_SPI_Transmit+0x2d4>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e2e:	f7fc fbe7 	bl	8002600 <HAL_GetTick>
 8005e32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d002      	beq.n	8005e4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e44:	2302      	movs	r3, #2
 8005e46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e48:	e13d      	b.n	80060c6 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <HAL_SPI_Transmit+0x52>
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d102      	bne.n	8005e5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e5a:	e134      	b.n	80060c6 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2203      	movs	r2, #3
 8005e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	88fa      	ldrh	r2, [r7, #6]
 8005e7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea6:	d10f      	bne.n	8005ec8 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ec6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b40      	cmp	r3, #64	; 0x40
 8005ed4:	d007      	beq.n	8005ee6 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eee:	d94b      	bls.n	8005f88 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <HAL_SPI_Transmit+0xfa>
 8005ef8:	8afb      	ldrh	r3, [r7, #22]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d13e      	bne.n	8005f7c <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	881a      	ldrh	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	1c9a      	adds	r2, r3, #2
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f22:	e02b      	b.n	8005f7c <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d112      	bne.n	8005f58 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	881a      	ldrh	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	1c9a      	adds	r2, r3, #2
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f56:	e011      	b.n	8005f7c <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f58:	f7fc fb52 	bl	8002600 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d803      	bhi.n	8005f70 <HAL_SPI_Transmit+0x16c>
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d102      	bne.n	8005f76 <HAL_SPI_Transmit+0x172>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f7a:	e0a4      	b.n	80060c6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1ce      	bne.n	8005f24 <HAL_SPI_Transmit+0x120>
 8005f86:	e07c      	b.n	8006082 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <HAL_SPI_Transmit+0x192>
 8005f90:	8afb      	ldrh	r3, [r7, #22]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d170      	bne.n	8006078 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d912      	bls.n	8005fc6 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	881a      	ldrh	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	1c9a      	adds	r2, r3, #2
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b02      	subs	r3, #2
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fc4:	e058      	b.n	8006078 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	7812      	ldrb	r2, [r2, #0]
 8005fd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005fec:	e044      	b.n	8006078 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d12b      	bne.n	8006054 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d912      	bls.n	800602c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	881a      	ldrh	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	1c9a      	adds	r2, r3, #2
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b02      	subs	r3, #2
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	87da      	strh	r2, [r3, #62]	; 0x3e
 800602a:	e025      	b.n	8006078 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	7812      	ldrb	r2, [r2, #0]
 8006038:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006052:	e011      	b.n	8006078 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006054:	f7fc fad4 	bl	8002600 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d803      	bhi.n	800606c <HAL_SPI_Transmit+0x268>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d102      	bne.n	8006072 <HAL_SPI_Transmit+0x26e>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006076:	e026      	b.n	80060c6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1b5      	bne.n	8005fee <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f948 	bl	800631c <SPI_EndRxTxTransaction>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	77fb      	strb	r3, [r7, #31]
 80060c2:	e000      	b.n	80060c6 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80060c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3720      	adds	r7, #32
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	4613      	mov	r3, r2
 80060ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060f0:	f7fc fa86 	bl	8002600 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	1a9b      	subs	r3, r3, r2
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	4413      	add	r3, r2
 80060fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006100:	f7fc fa7e 	bl	8002600 <HAL_GetTick>
 8006104:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006106:	4b39      	ldr	r3, [pc, #228]	; (80061ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	015b      	lsls	r3, r3, #5
 800610c:	0d1b      	lsrs	r3, r3, #20
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	fb02 f303 	mul.w	r3, r2, r3
 8006114:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006116:	e054      	b.n	80061c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611e:	d050      	beq.n	80061c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006120:	f7fc fa6e 	bl	8002600 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	429a      	cmp	r2, r3
 800612e:	d902      	bls.n	8006136 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d13d      	bne.n	80061b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006144:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800614e:	d111      	bne.n	8006174 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006158:	d004      	beq.n	8006164 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006162:	d107      	bne.n	8006174 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006172:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800617c:	d10f      	bne.n	800619e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800619c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e017      	b.n	80061e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	3b01      	subs	r3, #1
 80061c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4013      	ands	r3, r2
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	bf0c      	ite	eq
 80061d2:	2301      	moveq	r3, #1
 80061d4:	2300      	movne	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d19b      	bne.n	8006118 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20000004 	.word	0x20000004

080061f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08a      	sub	sp, #40	; 0x28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006202:	f7fc f9fd 	bl	8002600 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	1a9b      	subs	r3, r3, r2
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	4413      	add	r3, r2
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006212:	f7fc f9f5 	bl	8002600 <HAL_GetTick>
 8006216:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006220:	4b3d      	ldr	r3, [pc, #244]	; (8006318 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	00da      	lsls	r2, r3, #3
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	0d1b      	lsrs	r3, r3, #20
 8006230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006238:	e060      	b.n	80062fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006240:	d107      	bne.n	8006252 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d104      	bne.n	8006252 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006250:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d050      	beq.n	80062fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800625a:	f7fc f9d1 	bl	8002600 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006266:	429a      	cmp	r2, r3
 8006268:	d902      	bls.n	8006270 <SPI_WaitFifoStateUntilTimeout+0x80>
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	2b00      	cmp	r3, #0
 800626e:	d13d      	bne.n	80062ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800627e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006288:	d111      	bne.n	80062ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006292:	d004      	beq.n	800629e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629c:	d107      	bne.n	80062ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b6:	d10f      	bne.n	80062d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e010      	b.n	800630e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4013      	ands	r3, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	429a      	cmp	r2, r3
 800630a:	d196      	bne.n	800623a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3728      	adds	r7, #40	; 0x28
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20000004 	.word	0x20000004

0800631c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2200      	movs	r2, #0
 8006330:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f7ff ff5b 	bl	80061f0 <SPI_WaitFifoStateUntilTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006344:	f043 0220 	orr.w	r2, r3, #32
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e027      	b.n	80063a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2200      	movs	r2, #0
 8006358:	2180      	movs	r1, #128	; 0x80
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f7ff fec0 	bl	80060e0 <SPI_WaitFlagStateUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d007      	beq.n	8006376 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800636a:	f043 0220 	orr.w	r2, r3, #32
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e014      	b.n	80063a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2200      	movs	r2, #0
 800637e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff ff34 	bl	80061f0 <SPI_WaitFifoStateUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d007      	beq.n	800639e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006392:	f043 0220 	orr.w	r2, r3, #32
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e000      	b.n	80063a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e049      	b.n	800644e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fb ff3e 	bl	8002250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f000 fa94 	bl	8006914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	d001      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e036      	b.n	80064de <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a17      	ldr	r2, [pc, #92]	; (80064ec <HAL_TIM_Base_Start_IT+0x94>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d004      	beq.n	800649c <HAL_TIM_Base_Start_IT+0x44>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649a:	d115      	bne.n	80064c8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <HAL_TIM_Base_Start_IT+0x98>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b06      	cmp	r3, #6
 80064ac:	d015      	beq.n	80064da <HAL_TIM_Base_Start_IT+0x82>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b4:	d011      	beq.n	80064da <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0201 	orr.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c6:	e008      	b.n	80064da <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	e000      	b.n	80064dc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	00010007 	.word	0x00010007

080064f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b02      	cmp	r3, #2
 8006508:	d122      	bne.n	8006550 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b02      	cmp	r3, #2
 8006516:	d11b      	bne.n	8006550 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f06f 0202 	mvn.w	r2, #2
 8006520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f9ce 	bl	80068d8 <HAL_TIM_IC_CaptureCallback>
 800653c:	e005      	b.n	800654a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f9c0 	bl	80068c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f9d1 	bl	80068ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b04      	cmp	r3, #4
 800655c:	d122      	bne.n	80065a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b04      	cmp	r3, #4
 800656a:	d11b      	bne.n	80065a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0204 	mvn.w	r2, #4
 8006574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2202      	movs	r2, #2
 800657a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f9a4 	bl	80068d8 <HAL_TIM_IC_CaptureCallback>
 8006590:	e005      	b.n	800659e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f996 	bl	80068c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f9a7 	bl	80068ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d122      	bne.n	80065f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d11b      	bne.n	80065f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0208 	mvn.w	r2, #8
 80065c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2204      	movs	r2, #4
 80065ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f97a 	bl	80068d8 <HAL_TIM_IC_CaptureCallback>
 80065e4:	e005      	b.n	80065f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f96c 	bl	80068c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f97d 	bl	80068ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 0310 	and.w	r3, r3, #16
 8006602:	2b10      	cmp	r3, #16
 8006604:	d122      	bne.n	800664c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b10      	cmp	r3, #16
 8006612:	d11b      	bne.n	800664c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0210 	mvn.w	r2, #16
 800661c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2208      	movs	r2, #8
 8006622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f950 	bl	80068d8 <HAL_TIM_IC_CaptureCallback>
 8006638:	e005      	b.n	8006646 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f942 	bl	80068c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f953 	bl	80068ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b01      	cmp	r3, #1
 8006658:	d10e      	bne.n	8006678 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b01      	cmp	r3, #1
 8006666:	d107      	bne.n	8006678 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0201 	mvn.w	r2, #1
 8006670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fa fec6 	bl	8001404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006682:	2b80      	cmp	r3, #128	; 0x80
 8006684:	d10e      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006690:	2b80      	cmp	r3, #128	; 0x80
 8006692:	d107      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800669c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 faa2 	bl	8006be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b2:	d10e      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066be:	2b80      	cmp	r3, #128	; 0x80
 80066c0:	d107      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fa95 	bl	8006bfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066dc:	2b40      	cmp	r3, #64	; 0x40
 80066de:	d10e      	bne.n	80066fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b40      	cmp	r3, #64	; 0x40
 80066ec:	d107      	bne.n	80066fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f901 	bl	8006900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b20      	cmp	r3, #32
 800670a:	d10e      	bne.n	800672a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	2b20      	cmp	r3, #32
 8006718:	d107      	bne.n	800672a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f06f 0220 	mvn.w	r2, #32
 8006722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fa55 	bl	8006bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800672a:	bf00      	nop
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_TIM_ConfigClockSource+0x1c>
 800674a:	2302      	movs	r3, #2
 800674c:	e0b6      	b.n	80068bc <HAL_TIM_ConfigClockSource+0x18a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800676c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006770:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006778:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678a:	d03e      	beq.n	800680a <HAL_TIM_ConfigClockSource+0xd8>
 800678c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006790:	f200 8087 	bhi.w	80068a2 <HAL_TIM_ConfigClockSource+0x170>
 8006794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006798:	f000 8086 	beq.w	80068a8 <HAL_TIM_ConfigClockSource+0x176>
 800679c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a0:	d87f      	bhi.n	80068a2 <HAL_TIM_ConfigClockSource+0x170>
 80067a2:	2b70      	cmp	r3, #112	; 0x70
 80067a4:	d01a      	beq.n	80067dc <HAL_TIM_ConfigClockSource+0xaa>
 80067a6:	2b70      	cmp	r3, #112	; 0x70
 80067a8:	d87b      	bhi.n	80068a2 <HAL_TIM_ConfigClockSource+0x170>
 80067aa:	2b60      	cmp	r3, #96	; 0x60
 80067ac:	d050      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x11e>
 80067ae:	2b60      	cmp	r3, #96	; 0x60
 80067b0:	d877      	bhi.n	80068a2 <HAL_TIM_ConfigClockSource+0x170>
 80067b2:	2b50      	cmp	r3, #80	; 0x50
 80067b4:	d03c      	beq.n	8006830 <HAL_TIM_ConfigClockSource+0xfe>
 80067b6:	2b50      	cmp	r3, #80	; 0x50
 80067b8:	d873      	bhi.n	80068a2 <HAL_TIM_ConfigClockSource+0x170>
 80067ba:	2b40      	cmp	r3, #64	; 0x40
 80067bc:	d058      	beq.n	8006870 <HAL_TIM_ConfigClockSource+0x13e>
 80067be:	2b40      	cmp	r3, #64	; 0x40
 80067c0:	d86f      	bhi.n	80068a2 <HAL_TIM_ConfigClockSource+0x170>
 80067c2:	2b30      	cmp	r3, #48	; 0x30
 80067c4:	d064      	beq.n	8006890 <HAL_TIM_ConfigClockSource+0x15e>
 80067c6:	2b30      	cmp	r3, #48	; 0x30
 80067c8:	d86b      	bhi.n	80068a2 <HAL_TIM_ConfigClockSource+0x170>
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d060      	beq.n	8006890 <HAL_TIM_ConfigClockSource+0x15e>
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d867      	bhi.n	80068a2 <HAL_TIM_ConfigClockSource+0x170>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d05c      	beq.n	8006890 <HAL_TIM_ConfigClockSource+0x15e>
 80067d6:	2b10      	cmp	r3, #16
 80067d8:	d05a      	beq.n	8006890 <HAL_TIM_ConfigClockSource+0x15e>
 80067da:	e062      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	6899      	ldr	r1, [r3, #8]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f000 f972 	bl	8006ad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	609a      	str	r2, [r3, #8]
      break;
 8006808:	e04f      	b.n	80068aa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6899      	ldr	r1, [r3, #8]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f000 f95b 	bl	8006ad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800682c:	609a      	str	r2, [r3, #8]
      break;
 800682e:	e03c      	b.n	80068aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	6859      	ldr	r1, [r3, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	461a      	mov	r2, r3
 800683e:	f000 f8cd 	bl	80069dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2150      	movs	r1, #80	; 0x50
 8006848:	4618      	mov	r0, r3
 800684a:	f000 f926 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 800684e:	e02c      	b.n	80068aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	6859      	ldr	r1, [r3, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	461a      	mov	r2, r3
 800685e:	f000 f8ec 	bl	8006a3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2160      	movs	r1, #96	; 0x60
 8006868:	4618      	mov	r0, r3
 800686a:	f000 f916 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 800686e:	e01c      	b.n	80068aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	6859      	ldr	r1, [r3, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	461a      	mov	r2, r3
 800687e:	f000 f8ad 	bl	80069dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2140      	movs	r1, #64	; 0x40
 8006888:	4618      	mov	r0, r3
 800688a:	f000 f906 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 800688e:	e00c      	b.n	80068aa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4619      	mov	r1, r3
 800689a:	4610      	mov	r0, r2
 800689c:	f000 f8fd 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 80068a0:	e003      	b.n	80068aa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	73fb      	strb	r3, [r7, #15]
      break;
 80068a6:	e000      	b.n	80068aa <HAL_TIM_ConfigClockSource+0x178>
      break;
 80068a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a2a      	ldr	r2, [pc, #168]	; (80069d0 <TIM_Base_SetConfig+0xbc>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d003      	beq.n	8006934 <TIM_Base_SetConfig+0x20>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006932:	d108      	bne.n	8006946 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a21      	ldr	r2, [pc, #132]	; (80069d0 <TIM_Base_SetConfig+0xbc>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00b      	beq.n	8006966 <TIM_Base_SetConfig+0x52>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006954:	d007      	beq.n	8006966 <TIM_Base_SetConfig+0x52>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a1e      	ldr	r2, [pc, #120]	; (80069d4 <TIM_Base_SetConfig+0xc0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d003      	beq.n	8006966 <TIM_Base_SetConfig+0x52>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a1d      	ldr	r2, [pc, #116]	; (80069d8 <TIM_Base_SetConfig+0xc4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d108      	bne.n	8006978 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a0c      	ldr	r2, [pc, #48]	; (80069d0 <TIM_Base_SetConfig+0xbc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d007      	beq.n	80069b4 <TIM_Base_SetConfig+0xa0>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a0b      	ldr	r2, [pc, #44]	; (80069d4 <TIM_Base_SetConfig+0xc0>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d003      	beq.n	80069b4 <TIM_Base_SetConfig+0xa0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a0a      	ldr	r2, [pc, #40]	; (80069d8 <TIM_Base_SetConfig+0xc4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d103      	bne.n	80069bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	615a      	str	r2, [r3, #20]
}
 80069c2:	bf00      	nop
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	40012c00 	.word	0x40012c00
 80069d4:	40014400 	.word	0x40014400
 80069d8:	40014800 	.word	0x40014800

080069dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f023 0201 	bic.w	r2, r3, #1
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f023 030a 	bic.w	r3, r3, #10
 8006a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	621a      	str	r2, [r3, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b087      	sub	sp, #28
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f023 0210 	bic.w	r2, r3, #16
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	031b      	lsls	r3, r3, #12
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	621a      	str	r2, [r3, #32]
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f043 0307 	orr.w	r3, r3, #7
 8006ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	609a      	str	r2, [r3, #8]
}
 8006ac8:	bf00      	nop
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	021a      	lsls	r2, r3, #8
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	609a      	str	r2, [r3, #8]
}
 8006b08:	bf00      	nop
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e04a      	b.n	8006bc2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1f      	ldr	r2, [pc, #124]	; (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d108      	bne.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a12      	ldr	r2, [pc, #72]	; (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b94:	d10c      	bne.n	8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40012c00 	.word	0x40012c00

08006bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <LL_RCC_GetUSARTClockSource>:
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4013      	ands	r3, r2
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e042      	b.n	8006cc8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d106      	bne.n	8006c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fb fb91 	bl	800237c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2224      	movs	r2, #36	; 0x24
 8006c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fc90 	bl	8007598 <UART_SetConfig>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e022      	b.n	8006cc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fdc0 	bl	8007810 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fe47 	bl	8007954 <UART_CheckIdleState>
 8006cc6:	4603      	mov	r3, r0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	; 0x28
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d17b      	bne.n	8006de2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <HAL_UART_Transmit+0x26>
 8006cf0:	88fb      	ldrh	r3, [r7, #6]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e074      	b.n	8006de4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2221      	movs	r2, #33	; 0x21
 8006d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d0a:	f7fb fc79 	bl	8002600 <HAL_GetTick>
 8006d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	88fa      	ldrh	r2, [r7, #6]
 8006d14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	88fa      	ldrh	r2, [r7, #6]
 8006d1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d28:	d108      	bne.n	8006d3c <HAL_UART_Transmit+0x6c>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d104      	bne.n	8006d3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	e003      	b.n	8006d44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d44:	e030      	b.n	8006da8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2180      	movs	r1, #128	; 0x80
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fea9 	bl	8007aa8 <UART_WaitOnFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e03d      	b.n	8006de4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	3302      	adds	r3, #2
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	e007      	b.n	8006d96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	781a      	ldrb	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	3301      	adds	r3, #1
 8006d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1c8      	bne.n	8006d46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2140      	movs	r1, #64	; 0x40
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 fe72 	bl	8007aa8 <UART_WaitOnFlagUntilTimeout>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e006      	b.n	8006de4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	e000      	b.n	8006de4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006de2:	2302      	movs	r3, #2
  }
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b091      	sub	sp, #68	; 0x44
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	d178      	bne.n	8006ef6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <HAL_UART_Transmit_IT+0x24>
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e071      	b.n	8006ef8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	88fa      	ldrh	r2, [r7, #6]
 8006e1e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	88fa      	ldrh	r2, [r7, #6]
 8006e26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2221      	movs	r2, #33	; 0x21
 8006e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e48:	d12a      	bne.n	8006ea0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e52:	d107      	bne.n	8006e64 <HAL_UART_Transmit_IT+0x78>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d103      	bne.n	8006e64 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4a29      	ldr	r2, [pc, #164]	; (8006f04 <HAL_UART_Transmit_IT+0x118>)
 8006e60:	679a      	str	r2, [r3, #120]	; 0x78
 8006e62:	e002      	b.n	8006e6a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4a28      	ldr	r2, [pc, #160]	; (8006f08 <HAL_UART_Transmit_IT+0x11c>)
 8006e68:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3308      	adds	r3, #8
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e80:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3308      	adds	r3, #8
 8006e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e8a:	637a      	str	r2, [r7, #52]	; 0x34
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1e5      	bne.n	8006e6a <HAL_UART_Transmit_IT+0x7e>
 8006e9e:	e028      	b.n	8006ef2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea8:	d107      	bne.n	8006eba <HAL_UART_Transmit_IT+0xce>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4a15      	ldr	r2, [pc, #84]	; (8006f0c <HAL_UART_Transmit_IT+0x120>)
 8006eb6:	679a      	str	r2, [r3, #120]	; 0x78
 8006eb8:	e002      	b.n	8006ec0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4a14      	ldr	r2, [pc, #80]	; (8006f10 <HAL_UART_Transmit_IT+0x124>)
 8006ebe:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ede:	623b      	str	r3, [r7, #32]
 8006ee0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	69f9      	ldr	r1, [r7, #28]
 8006ee4:	6a3a      	ldr	r2, [r7, #32]
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e6      	bne.n	8006ec0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e000      	b.n	8006ef8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006ef6:	2302      	movs	r3, #2
  }
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3744      	adds	r7, #68	; 0x44
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	0800810f 	.word	0x0800810f
 8006f08:	0800802f 	.word	0x0800802f
 8006f0c:	08007f6d 	.word	0x08007f6d
 8006f10:	08007eb5 	.word	0x08007eb5

08006f14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b0ba      	sub	sp, #232	; 0xe8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f42:	4013      	ands	r3, r2
 8006f44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d11b      	bne.n	8006f88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d015      	beq.n	8006f88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d105      	bne.n	8006f74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d009      	beq.n	8006f88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 82e3 	beq.w	8007544 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
      }
      return;
 8006f86:	e2dd      	b.n	8007544 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8123 	beq.w	80071d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006f96:	4b8d      	ldr	r3, [pc, #564]	; (80071cc <HAL_UART_IRQHandler+0x2b8>)
 8006f98:	4013      	ands	r3, r2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d106      	bne.n	8006fac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006fa2:	4b8b      	ldr	r3, [pc, #556]	; (80071d0 <HAL_UART_IRQHandler+0x2bc>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 8116 	beq.w	80071d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d011      	beq.n	8006fdc <HAL_UART_IRQHandler+0xc8>
 8006fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd2:	f043 0201 	orr.w	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d011      	beq.n	800700c <HAL_UART_IRQHandler+0xf8>
 8006fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007002:	f043 0204 	orr.w	r2, r3, #4
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800700c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d011      	beq.n	800703c <HAL_UART_IRQHandler+0x128>
 8007018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2204      	movs	r2, #4
 800702a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007032:	f043 0202 	orr.w	r2, r3, #2
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800703c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007040:	f003 0308 	and.w	r3, r3, #8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d017      	beq.n	8007078 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007054:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007058:	4b5c      	ldr	r3, [pc, #368]	; (80071cc <HAL_UART_IRQHandler+0x2b8>)
 800705a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2208      	movs	r2, #8
 8007066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706e:	f043 0208 	orr.w	r2, r3, #8
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007080:	2b00      	cmp	r3, #0
 8007082:	d012      	beq.n	80070aa <HAL_UART_IRQHandler+0x196>
 8007084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007088:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007098:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a0:	f043 0220 	orr.w	r2, r3, #32
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8249 	beq.w	8007548 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d013      	beq.n	80070ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fe:	2b40      	cmp	r3, #64	; 0x40
 8007100:	d005      	beq.n	800710e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007106:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800710a:	2b00      	cmp	r3, #0
 800710c:	d054      	beq.n	80071b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fe54 	bl	8007dbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711e:	2b40      	cmp	r3, #64	; 0x40
 8007120:	d146      	bne.n	80071b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3308      	adds	r3, #8
 8007128:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007138:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800713c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3308      	adds	r3, #8
 800714a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800714e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800715a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1d9      	bne.n	8007122 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007174:	2b00      	cmp	r3, #0
 8007176:	d017      	beq.n	80071a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800717e:	4a15      	ldr	r2, [pc, #84]	; (80071d4 <HAL_UART_IRQHandler+0x2c0>)
 8007180:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007188:	4618      	mov	r0, r3
 800718a:	f7fc fe50 	bl	8003e2e <HAL_DMA_Abort_IT>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d019      	beq.n	80071c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80071a2:	4610      	mov	r0, r2
 80071a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a6:	e00f      	b.n	80071c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f9eb 	bl	8007584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ae:	e00b      	b.n	80071c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9e7 	bl	8007584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b6:	e007      	b.n	80071c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f9e3 	bl	8007584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80071c6:	e1bf      	b.n	8007548 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c8:	bf00      	nop
    return;
 80071ca:	e1bd      	b.n	8007548 <HAL_UART_IRQHandler+0x634>
 80071cc:	10000001 	.word	0x10000001
 80071d0:	04000120 	.word	0x04000120
 80071d4:	08007e89 	.word	0x08007e89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	f040 8153 	bne.w	8007488 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 814c 	beq.w	8007488 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f4:	f003 0310 	and.w	r3, r3, #16
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 8145 	beq.w	8007488 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2210      	movs	r2, #16
 8007204:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007210:	2b40      	cmp	r3, #64	; 0x40
 8007212:	f040 80bb 	bne.w	800738c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007224:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 818f 	beq.w	800754c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007234:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007238:	429a      	cmp	r2, r3
 800723a:	f080 8187 	bcs.w	800754c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007244:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	2b00      	cmp	r3, #0
 8007258:	f040 8087 	bne.w	800736a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	461a      	mov	r2, r3
 8007282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800728a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007292:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800729e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1da      	bne.n	800725c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072b8:	f023 0301 	bic.w	r3, r3, #1
 80072bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3308      	adds	r3, #8
 80072c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e1      	bne.n	80072a6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3308      	adds	r3, #8
 80072e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3308      	adds	r3, #8
 8007302:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007306:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007308:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800730c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e3      	bne.n	80072e2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007338:	f023 0310 	bic.w	r3, r3, #16
 800733c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800734a:	65bb      	str	r3, [r7, #88]	; 0x58
 800734c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e4      	bne.n	8007328 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007364:	4618      	mov	r0, r3
 8007366:	f7fc fd03 	bl	8003d70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2202      	movs	r2, #2
 800736e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800737c:	b29b      	uxth	r3, r3
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	b29b      	uxth	r3, r3
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7fa fa2f 	bl	80017e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800738a:	e0df      	b.n	800754c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007398:	b29b      	uxth	r3, r3
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 80d1 	beq.w	8007550 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80073ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 80cc 	beq.w	8007550 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073da:	647b      	str	r3, [r7, #68]	; 0x44
 80073dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e4      	bne.n	80073b8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3308      	adds	r3, #8
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	623b      	str	r3, [r7, #32]
   return(result);
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007404:	f023 0301 	bic.w	r3, r3, #1
 8007408:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3308      	adds	r3, #8
 8007412:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007416:	633a      	str	r2, [r7, #48]	; 0x30
 8007418:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800741c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e1      	bne.n	80073ee <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	60fb      	str	r3, [r7, #12]
   return(result);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 0310 	bic.w	r3, r3, #16
 8007452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	69b9      	ldr	r1, [r7, #24]
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	617b      	str	r3, [r7, #20]
   return(result);
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e4      	bne.n	800743e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800747a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fa f9b1 	bl	80017e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007486:	e063      	b.n	8007550 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00e      	beq.n	80074b2 <HAL_UART_IRQHandler+0x59e>
 8007494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d008      	beq.n	80074b2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80074a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 fbd0 	bl	8008c50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074b0:	e051      	b.n	8007556 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80074b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d014      	beq.n	80074e8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80074be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d105      	bne.n	80074d6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80074ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d008      	beq.n	80074e8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d03a      	beq.n	8007554 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
    }
    return;
 80074e6:	e035      	b.n	8007554 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d009      	beq.n	8007508 <HAL_UART_IRQHandler+0x5f4>
 80074f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fe79 	bl	80081f8 <UART_EndTransmit_IT>
    return;
 8007506:	e026      	b.n	8007556 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <HAL_UART_IRQHandler+0x614>
 8007514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007518:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fba9 	bl	8008c78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007526:	e016      	b.n	8007556 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d010      	beq.n	8007556 <HAL_UART_IRQHandler+0x642>
 8007534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007538:	2b00      	cmp	r3, #0
 800753a:	da0c      	bge.n	8007556 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 fb91 	bl	8008c64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007542:	e008      	b.n	8007556 <HAL_UART_IRQHandler+0x642>
      return;
 8007544:	bf00      	nop
 8007546:	e006      	b.n	8007556 <HAL_UART_IRQHandler+0x642>
    return;
 8007548:	bf00      	nop
 800754a:	e004      	b.n	8007556 <HAL_UART_IRQHandler+0x642>
      return;
 800754c:	bf00      	nop
 800754e:	e002      	b.n	8007556 <HAL_UART_IRQHandler+0x642>
      return;
 8007550:	bf00      	nop
 8007552:	e000      	b.n	8007556 <HAL_UART_IRQHandler+0x642>
    return;
 8007554:	bf00      	nop
  }
}
 8007556:	37e8      	adds	r7, #232	; 0xe8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	431a      	orrs	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	4b8f      	ldr	r3, [pc, #572]	; (8007800 <UART_SetConfig+0x268>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	6979      	ldr	r1, [r7, #20]
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	617b      	str	r3, [r7, #20]
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007600:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6812      	ldr	r2, [r2, #0]
 8007608:	6979      	ldr	r1, [r7, #20]
 800760a:	430b      	orrs	r3, r1
 800760c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	f023 010f 	bic.w	r1, r3, #15
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a76      	ldr	r2, [pc, #472]	; (8007804 <UART_SetConfig+0x26c>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d11f      	bne.n	800766e <UART_SetConfig+0xd6>
 800762e:	2003      	movs	r0, #3
 8007630:	f7ff faee 	bl	8006c10 <LL_RCC_GetUSARTClockSource>
 8007634:	4603      	mov	r3, r0
 8007636:	2b03      	cmp	r3, #3
 8007638:	d816      	bhi.n	8007668 <UART_SetConfig+0xd0>
 800763a:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <UART_SetConfig+0xa8>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007651 	.word	0x08007651
 8007644:	0800765d 	.word	0x0800765d
 8007648:	08007657 	.word	0x08007657
 800764c:	08007663 	.word	0x08007663
 8007650:	2301      	movs	r3, #1
 8007652:	77fb      	strb	r3, [r7, #31]
 8007654:	e00d      	b.n	8007672 <UART_SetConfig+0xda>
 8007656:	2302      	movs	r3, #2
 8007658:	77fb      	strb	r3, [r7, #31]
 800765a:	e00a      	b.n	8007672 <UART_SetConfig+0xda>
 800765c:	2304      	movs	r3, #4
 800765e:	77fb      	strb	r3, [r7, #31]
 8007660:	e007      	b.n	8007672 <UART_SetConfig+0xda>
 8007662:	2308      	movs	r3, #8
 8007664:	77fb      	strb	r3, [r7, #31]
 8007666:	e004      	b.n	8007672 <UART_SetConfig+0xda>
 8007668:	2310      	movs	r3, #16
 800766a:	77fb      	strb	r3, [r7, #31]
 800766c:	e001      	b.n	8007672 <UART_SetConfig+0xda>
 800766e:	2310      	movs	r3, #16
 8007670:	77fb      	strb	r3, [r7, #31]
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800767a:	d15e      	bne.n	800773a <UART_SetConfig+0x1a2>
#endif /* LPUART1 */
  {
    switch (clocksource)
 800767c:	7ffb      	ldrb	r3, [r7, #31]
 800767e:	3b01      	subs	r3, #1
 8007680:	2b07      	cmp	r3, #7
 8007682:	d822      	bhi.n	80076ca <UART_SetConfig+0x132>
 8007684:	a201      	add	r2, pc, #4	; (adr r2, 800768c <UART_SetConfig+0xf4>)
 8007686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768a:	bf00      	nop
 800768c:	080076ad 	.word	0x080076ad
 8007690:	080076b5 	.word	0x080076b5
 8007694:	080076cb 	.word	0x080076cb
 8007698:	080076bb 	.word	0x080076bb
 800769c:	080076cb 	.word	0x080076cb
 80076a0:	080076cb 	.word	0x080076cb
 80076a4:	080076cb 	.word	0x080076cb
 80076a8:	080076c3 	.word	0x080076c3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ac:	f7fe f87e 	bl	80057ac <HAL_RCC_GetPCLK2Freq>
 80076b0:	61b8      	str	r0, [r7, #24]
        break;
 80076b2:	e00f      	b.n	80076d4 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076b4:	4b54      	ldr	r3, [pc, #336]	; (8007808 <UART_SetConfig+0x270>)
 80076b6:	61bb      	str	r3, [r7, #24]
        break;
 80076b8:	e00c      	b.n	80076d4 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ba:	f7fd fff7 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 80076be:	61b8      	str	r0, [r7, #24]
        break;
 80076c0:	e008      	b.n	80076d4 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076c6:	61bb      	str	r3, [r7, #24]
        break;
 80076c8:	e004      	b.n	80076d4 <UART_SetConfig+0x13c>
      default:
        pclk = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	77bb      	strb	r3, [r7, #30]
        break;
 80076d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d07e      	beq.n	80077d8 <UART_SetConfig+0x240>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	4a4b      	ldr	r2, [pc, #300]	; (800780c <UART_SetConfig+0x274>)
 80076e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076e4:	461a      	mov	r2, r3
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ec:	005a      	lsls	r2, r3, #1
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	085b      	lsrs	r3, r3, #1
 80076f4:	441a      	add	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80076fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	2b0f      	cmp	r3, #15
 8007704:	d916      	bls.n	8007734 <UART_SetConfig+0x19c>
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800770c:	d212      	bcs.n	8007734 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	b29b      	uxth	r3, r3
 8007712:	f023 030f 	bic.w	r3, r3, #15
 8007716:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	b29b      	uxth	r3, r3
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	b29a      	uxth	r2, r3
 8007724:	89fb      	ldrh	r3, [r7, #14]
 8007726:	4313      	orrs	r3, r2
 8007728:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	89fa      	ldrh	r2, [r7, #14]
 8007730:	60da      	str	r2, [r3, #12]
 8007732:	e051      	b.n	80077d8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	77bb      	strb	r3, [r7, #30]
 8007738:	e04e      	b.n	80077d8 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 800773a:	7ffb      	ldrb	r3, [r7, #31]
 800773c:	3b01      	subs	r3, #1
 800773e:	2b07      	cmp	r3, #7
 8007740:	d821      	bhi.n	8007786 <UART_SetConfig+0x1ee>
 8007742:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <UART_SetConfig+0x1b0>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	08007769 	.word	0x08007769
 800774c:	08007771 	.word	0x08007771
 8007750:	08007787 	.word	0x08007787
 8007754:	08007777 	.word	0x08007777
 8007758:	08007787 	.word	0x08007787
 800775c:	08007787 	.word	0x08007787
 8007760:	08007787 	.word	0x08007787
 8007764:	0800777f 	.word	0x0800777f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007768:	f7fe f820 	bl	80057ac <HAL_RCC_GetPCLK2Freq>
 800776c:	61b8      	str	r0, [r7, #24]
        break;
 800776e:	e00f      	b.n	8007790 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007770:	4b25      	ldr	r3, [pc, #148]	; (8007808 <UART_SetConfig+0x270>)
 8007772:	61bb      	str	r3, [r7, #24]
        break;
 8007774:	e00c      	b.n	8007790 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007776:	f7fd ff99 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 800777a:	61b8      	str	r0, [r7, #24]
        break;
 800777c:	e008      	b.n	8007790 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800777e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007782:	61bb      	str	r3, [r7, #24]
        break;
 8007784:	e004      	b.n	8007790 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	77bb      	strb	r3, [r7, #30]
        break;
 800778e:	bf00      	nop
    }

    if (pclk != 0U)
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d020      	beq.n	80077d8 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	4a1c      	ldr	r2, [pc, #112]	; (800780c <UART_SetConfig+0x274>)
 800779c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077a0:	461a      	mov	r2, r3
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	085b      	lsrs	r3, r3, #1
 80077ae:	441a      	add	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	2b0f      	cmp	r3, #15
 80077be:	d909      	bls.n	80077d4 <UART_SetConfig+0x23c>
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c6:	d205      	bcs.n	80077d4 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	60da      	str	r2, [r3, #12]
 80077d2:	e001      	b.n	80077d8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80077f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3720      	adds	r7, #32
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	cfff69f3 	.word	0xcfff69f3
 8007804:	40013800 	.word	0x40013800
 8007808:	00f42400 	.word	0x00f42400
 800780c:	0800c60c 	.word	0x0800c60c

08007810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00a      	beq.n	800783a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00a      	beq.n	800787e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007882:	f003 0308 	and.w	r3, r3, #8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00a      	beq.n	80078a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01a      	beq.n	8007926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800790e:	d10a      	bne.n	8007926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	605a      	str	r2, [r3, #4]
  }
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b098      	sub	sp, #96	; 0x60
 8007958:	af02      	add	r7, sp, #8
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007964:	f7fa fe4c 	bl	8002600 <HAL_GetTick>
 8007968:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0308 	and.w	r3, r3, #8
 8007974:	2b08      	cmp	r3, #8
 8007976:	d12f      	bne.n	80079d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007980:	2200      	movs	r2, #0
 8007982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f88e 	bl	8007aa8 <UART_WaitOnFlagUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d022      	beq.n	80079d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079a6:	653b      	str	r3, [r7, #80]	; 0x50
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b0:	647b      	str	r3, [r7, #68]	; 0x44
 80079b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e6      	bne.n	8007992 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e063      	b.n	8007aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d149      	bne.n	8007a7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ee:	2200      	movs	r2, #0
 80079f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f857 	bl	8007aa8 <UART_WaitOnFlagUntilTimeout>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d03c      	beq.n	8007a7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a20:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e6      	bne.n	8007a00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3308      	adds	r3, #8
 8007a38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f023 0301 	bic.w	r3, r3, #1
 8007a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3308      	adds	r3, #8
 8007a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a52:	61fa      	str	r2, [r7, #28]
 8007a54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	69b9      	ldr	r1, [r7, #24]
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e5      	bne.n	8007a32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e012      	b.n	8007aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3758      	adds	r7, #88	; 0x58
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab8:	e049      	b.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac0:	d045      	beq.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac2:	f7fa fd9d 	bl	8002600 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d302      	bcc.n	8007ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e048      	b.n	8007b6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0304 	and.w	r3, r3, #4
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d031      	beq.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	f003 0308 	and.w	r3, r3, #8
 8007af4:	2b08      	cmp	r3, #8
 8007af6:	d110      	bne.n	8007b1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2208      	movs	r2, #8
 8007afe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f95b 	bl	8007dbc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2208      	movs	r2, #8
 8007b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e029      	b.n	8007b6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b28:	d111      	bne.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f941 	bl	8007dbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e00f      	b.n	8007b6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69da      	ldr	r2, [r3, #28]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	4013      	ands	r3, r2
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	bf0c      	ite	eq
 8007b5e:	2301      	moveq	r3, #1
 8007b60:	2300      	movne	r3, #0
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	461a      	mov	r2, r3
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d0a6      	beq.n	8007aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b0a3      	sub	sp, #140	; 0x8c
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	4613      	mov	r3, r2
 8007b84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	88fa      	ldrh	r2, [r7, #6]
 8007b90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	88fa      	ldrh	r2, [r7, #6]
 8007b98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007baa:	d10e      	bne.n	8007bca <UART_Start_Receive_IT+0x52>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d105      	bne.n	8007bc0 <UART_Start_Receive_IT+0x48>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007bba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bbe:	e02d      	b.n	8007c1c <UART_Start_Receive_IT+0xa4>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	22ff      	movs	r2, #255	; 0xff
 8007bc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bc8:	e028      	b.n	8007c1c <UART_Start_Receive_IT+0xa4>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10d      	bne.n	8007bee <UART_Start_Receive_IT+0x76>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d104      	bne.n	8007be4 <UART_Start_Receive_IT+0x6c>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	22ff      	movs	r2, #255	; 0xff
 8007bde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007be2:	e01b      	b.n	8007c1c <UART_Start_Receive_IT+0xa4>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	227f      	movs	r2, #127	; 0x7f
 8007be8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bec:	e016      	b.n	8007c1c <UART_Start_Receive_IT+0xa4>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bf6:	d10d      	bne.n	8007c14 <UART_Start_Receive_IT+0x9c>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d104      	bne.n	8007c0a <UART_Start_Receive_IT+0x92>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	227f      	movs	r2, #127	; 0x7f
 8007c04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c08:	e008      	b.n	8007c1c <UART_Start_Receive_IT+0xa4>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	223f      	movs	r2, #63	; 0x3f
 8007c0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c12:	e003      	b.n	8007c1c <UART_Start_Receive_IT+0xa4>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2222      	movs	r2, #34	; 0x22
 8007c28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3308      	adds	r3, #8
 8007c32:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c36:	e853 3f00 	ldrex	r3, [r3]
 8007c3a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007c50:	673a      	str	r2, [r7, #112]	; 0x70
 8007c52:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007c56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e3      	bne.n	8007c2c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c6c:	d14f      	bne.n	8007d0e <UART_Start_Receive_IT+0x196>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c74:	88fa      	ldrh	r2, [r7, #6]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d349      	bcc.n	8007d0e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c82:	d107      	bne.n	8007c94 <UART_Start_Receive_IT+0x11c>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d103      	bne.n	8007c94 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4a47      	ldr	r2, [pc, #284]	; (8007dac <UART_Start_Receive_IT+0x234>)
 8007c90:	675a      	str	r2, [r3, #116]	; 0x74
 8007c92:	e002      	b.n	8007c9a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4a46      	ldr	r2, [pc, #280]	; (8007db0 <UART_Start_Receive_IT+0x238>)
 8007c98:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d01a      	beq.n	8007cd8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e4      	bne.n	8007ca2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3308      	adds	r3, #8
 8007cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007cf8:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e5      	bne.n	8007cd8 <UART_Start_Receive_IT+0x160>
 8007d0c:	e046      	b.n	8007d9c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d16:	d107      	bne.n	8007d28 <UART_Start_Receive_IT+0x1b0>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4a24      	ldr	r2, [pc, #144]	; (8007db4 <UART_Start_Receive_IT+0x23c>)
 8007d24:	675a      	str	r2, [r3, #116]	; 0x74
 8007d26:	e002      	b.n	8007d2e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4a23      	ldr	r2, [pc, #140]	; (8007db8 <UART_Start_Receive_IT+0x240>)
 8007d2c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d019      	beq.n	8007d6a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d4a:	677b      	str	r3, [r7, #116]	; 0x74
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d54:	637b      	str	r3, [r7, #52]	; 0x34
 8007d56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e6      	bne.n	8007d36 <UART_Start_Receive_IT+0x1be>
 8007d68:	e018      	b.n	8007d9c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	613b      	str	r3, [r7, #16]
   return(result);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	f043 0320 	orr.w	r3, r3, #32
 8007d7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	461a      	mov	r2, r3
 8007d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d88:	623b      	str	r3, [r7, #32]
 8007d8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	69f9      	ldr	r1, [r7, #28]
 8007d8e:	6a3a      	ldr	r2, [r7, #32]
 8007d90:	e841 2300 	strex	r3, r2, [r1]
 8007d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e6      	bne.n	8007d6a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	378c      	adds	r7, #140	; 0x8c
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	080088f5 	.word	0x080088f5
 8007db0:	080085a1 	.word	0x080085a1
 8007db4:	080083f7 	.word	0x080083f7
 8007db8:	0800824f 	.word	0x0800824f

08007dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b095      	sub	sp, #84	; 0x54
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de2:	643b      	str	r3, [r7, #64]	; 0x40
 8007de4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007de8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e6      	bne.n	8007dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e0c:	f023 0301 	bic.w	r3, r3, #1
 8007e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3308      	adds	r3, #8
 8007e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e22:	e841 2300 	strex	r3, r2, [r1]
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e3      	bne.n	8007df6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d118      	bne.n	8007e68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f023 0310 	bic.w	r3, r3, #16
 8007e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	461a      	mov	r2, r3
 8007e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e54:	61bb      	str	r3, [r7, #24]
 8007e56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6979      	ldr	r1, [r7, #20]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	613b      	str	r3, [r7, #16]
   return(result);
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e6      	bne.n	8007e36 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007e7c:	bf00      	nop
 8007e7e:	3754      	adds	r7, #84	; 0x54
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f7ff fb6c 	bl	8007584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eac:	bf00      	nop
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b08f      	sub	sp, #60	; 0x3c
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec2:	2b21      	cmp	r3, #33	; 0x21
 8007ec4:	d14c      	bne.n	8007f60 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d132      	bne.n	8007f38 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	461a      	mov	r2, r3
 8007eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ef2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef8:	e841 2300 	strex	r3, r2, [r1]
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e6      	bne.n	8007ed2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f18:	633b      	str	r3, [r7, #48]	; 0x30
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	61bb      	str	r3, [r7, #24]
 8007f24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	6979      	ldr	r1, [r7, #20]
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1e6      	bne.n	8007f04 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007f36:	e013      	b.n	8007f60 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3c:	781a      	ldrb	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	3b01      	subs	r3, #1
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007f60:	bf00      	nop
 8007f62:	373c      	adds	r7, #60	; 0x3c
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b091      	sub	sp, #68	; 0x44
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7a:	2b21      	cmp	r3, #33	; 0x21
 8007f7c:	d151      	bne.n	8008022 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d132      	bne.n	8007ff0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	623b      	str	r3, [r7, #32]
   return(result);
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8007faa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e6      	bne.n	8007f8a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fda:	61fb      	str	r3, [r7, #28]
 8007fdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	69b9      	ldr	r1, [r7, #24]
 8007fe0:	69fa      	ldr	r2, [r7, #28]
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	617b      	str	r3, [r7, #20]
   return(result);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e6      	bne.n	8007fbc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007fee:	e018      	b.n	8008022 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008004:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800a:	1c9a      	adds	r2, r3, #2
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008016:	b29b      	uxth	r3, r3
 8008018:	3b01      	subs	r3, #1
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008022:	bf00      	nop
 8008024:	3744      	adds	r7, #68	; 0x44
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800802e:	b480      	push	{r7}
 8008030:	b091      	sub	sp, #68	; 0x44
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803c:	2b21      	cmp	r3, #33	; 0x21
 800803e:	d160      	bne.n	8008102 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008046:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008048:	e057      	b.n	80080fa <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d133      	bne.n	80080be <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3308      	adds	r3, #8
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	623b      	str	r3, [r7, #32]
   return(result);
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800806c:	63bb      	str	r3, [r7, #56]	; 0x38
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3308      	adds	r3, #8
 8008074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008076:	633a      	str	r2, [r7, #48]	; 0x30
 8008078:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800807c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e5      	bne.n	8008056 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	60fb      	str	r3, [r7, #12]
   return(result);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800809e:	637b      	str	r3, [r7, #52]	; 0x34
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	461a      	mov	r2, r3
 80080a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a8:	61fb      	str	r3, [r7, #28]
 80080aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	69b9      	ldr	r1, [r7, #24]
 80080ae:	69fa      	ldr	r2, [r7, #28]
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	617b      	str	r3, [r7, #20]
   return(result);
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e6      	bne.n	800808a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80080bc:	e021      	b.n	8008102 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d013      	beq.n	80080f4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d0:	781a      	ldrb	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80080f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80080f6:	3b01      	subs	r3, #1
 80080f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80080fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1a4      	bne.n	800804a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008100:	e7ff      	b.n	8008102 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008102:	bf00      	nop
 8008104:	3744      	adds	r7, #68	; 0x44
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800810e:	b480      	push	{r7}
 8008110:	b091      	sub	sp, #68	; 0x44
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811c:	2b21      	cmp	r3, #33	; 0x21
 800811e:	d165      	bne.n	80081ec <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008126:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008128:	e05c      	b.n	80081e4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008130:	b29b      	uxth	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d133      	bne.n	800819e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3308      	adds	r3, #8
 800813c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	61fb      	str	r3, [r7, #28]
   return(result);
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800814c:	637b      	str	r3, [r7, #52]	; 0x34
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3308      	adds	r3, #8
 8008154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008158:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800815c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e5      	bne.n	8008136 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	e853 3f00 	ldrex	r3, [r3]
 8008176:	60bb      	str	r3, [r7, #8]
   return(result);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800817e:	633b      	str	r3, [r7, #48]	; 0x30
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	461a      	mov	r2, r3
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	61bb      	str	r3, [r7, #24]
 800818a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6979      	ldr	r1, [r7, #20]
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	613b      	str	r3, [r7, #16]
   return(result);
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e6      	bne.n	800816a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800819c:	e026      	b.n	80081ec <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d018      	beq.n	80081de <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b0:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081c0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c6:	1c9a      	adds	r2, r3, #2
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	3b01      	subs	r3, #1
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081e0:	3b01      	subs	r3, #1
 80081e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80081e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d19f      	bne.n	800812a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80081ea:	e7ff      	b.n	80081ec <UART_TxISR_16BIT_FIFOEN+0xde>
 80081ec:	bf00      	nop
 80081ee:	3744      	adds	r7, #68	; 0x44
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	60bb      	str	r3, [r7, #8]
   return(result);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008214:	61fb      	str	r3, [r7, #28]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	61bb      	str	r3, [r7, #24]
 8008220:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	6979      	ldr	r1, [r7, #20]
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	613b      	str	r3, [r7, #16]
   return(result);
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e6      	bne.n	8008200 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2220      	movs	r2, #32
 8008236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff f98b 	bl	800755c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008246:	bf00      	nop
 8008248:	3720      	adds	r7, #32
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b09c      	sub	sp, #112	; 0x70
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800825c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008266:	2b22      	cmp	r3, #34	; 0x22
 8008268:	f040 80b9 	bne.w	80083de <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008276:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800827a:	b2d9      	uxtb	r1, r3
 800827c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008280:	b2da      	uxtb	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008286:	400a      	ands	r2, r1
 8008288:	b2d2      	uxtb	r2, r2
 800828a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800829c:	b29b      	uxth	r3, r3
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f040 809c 	bne.w	80083ee <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082be:	e853 3f00 	ldrex	r3, [r3]
 80082c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	461a      	mov	r2, r3
 80082d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80082d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e6      	bne.n	80082b6 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3308      	adds	r3, #8
 80082ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	e853 3f00 	ldrex	r3, [r3]
 80082f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fa:	f023 0301 	bic.w	r3, r3, #1
 80082fe:	667b      	str	r3, [r7, #100]	; 0x64
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3308      	adds	r3, #8
 8008306:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008308:	647a      	str	r2, [r7, #68]	; 0x44
 800830a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800830e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008310:	e841 2300 	strex	r3, r2, [r1]
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e5      	bne.n	80082e8 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2220      	movs	r2, #32
 8008320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	671a      	str	r2, [r3, #112]	; 0x70
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
        }
      }
#else
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d018      	beq.n	8008370 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	623b      	str	r3, [r7, #32]
   return(result);
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008352:	663b      	str	r3, [r7, #96]	; 0x60
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800835c:	633b      	str	r3, [r7, #48]	; 0x30
 800835e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e6      	bne.n	800833e <UART_RxISR_8BIT+0xf0>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008374:	2b01      	cmp	r3, #1
 8008376:	d12e      	bne.n	80083d6 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	60fb      	str	r3, [r7, #12]
   return(result);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f023 0310 	bic.w	r3, r3, #16
 8008392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	69b9      	ldr	r1, [r7, #24]
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	617b      	str	r3, [r7, #20]
   return(result);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e6      	bne.n	800837e <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f003 0310 	and.w	r3, r3, #16
 80083ba:	2b10      	cmp	r3, #16
 80083bc:	d103      	bne.n	80083c6 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2210      	movs	r2, #16
 80083c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7f9 fa0a 	bl	80017e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083d4:	e00b      	b.n	80083ee <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff f8ca 	bl	8007570 <HAL_UART_RxCpltCallback>
}
 80083dc:	e007      	b.n	80083ee <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	699a      	ldr	r2, [r3, #24]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f042 0208 	orr.w	r2, r2, #8
 80083ec:	619a      	str	r2, [r3, #24]
}
 80083ee:	bf00      	nop
 80083f0:	3770      	adds	r7, #112	; 0x70
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b09c      	sub	sp, #112	; 0x70
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008404:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800840e:	2b22      	cmp	r3, #34	; 0x22
 8008410:	f040 80b9 	bne.w	8008586 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008422:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008424:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008428:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800842c:	4013      	ands	r3, r2
 800842e:	b29a      	uxth	r2, r3
 8008430:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008432:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008438:	1c9a      	adds	r2, r3, #2
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008444:	b29b      	uxth	r3, r3
 8008446:	3b01      	subs	r3, #1
 8008448:	b29a      	uxth	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008456:	b29b      	uxth	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	f040 809c 	bne.w	8008596 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800846c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800846e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008472:	667b      	str	r3, [r7, #100]	; 0x64
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800847c:	657b      	str	r3, [r7, #84]	; 0x54
 800847e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008482:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800848a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e6      	bne.n	800845e <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3308      	adds	r3, #8
 8008496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	f023 0301 	bic.w	r3, r3, #1
 80084a6:	663b      	str	r3, [r7, #96]	; 0x60
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3308      	adds	r3, #8
 80084ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084b0:	643a      	str	r2, [r7, #64]	; 0x40
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e5      	bne.n	8008490 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	671a      	str	r2, [r3, #112]	; 0x70
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
        }
      }
#else
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d018      	beq.n	8008518 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008506:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800850a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e6      	bne.n	80084e6 <UART_RxISR_16BIT+0xf0>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800851c:	2b01      	cmp	r3, #1
 800851e:	d12e      	bne.n	800857e <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	60bb      	str	r3, [r7, #8]
   return(result);
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f023 0310 	bic.w	r3, r3, #16
 800853a:	65bb      	str	r3, [r7, #88]	; 0x58
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008544:	61bb      	str	r3, [r7, #24]
 8008546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6979      	ldr	r1, [r7, #20]
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	e841 2300 	strex	r3, r2, [r1]
 8008550:	613b      	str	r3, [r7, #16]
   return(result);
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e6      	bne.n	8008526 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	f003 0310 	and.w	r3, r3, #16
 8008562:	2b10      	cmp	r3, #16
 8008564:	d103      	bne.n	800856e <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2210      	movs	r2, #16
 800856c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7f9 f936 	bl	80017e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800857c:	e00b      	b.n	8008596 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7fe fff6 	bl	8007570 <HAL_UART_RxCpltCallback>
}
 8008584:	e007      	b.n	8008596 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	699a      	ldr	r2, [r3, #24]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f042 0208 	orr.w	r2, r2, #8
 8008594:	619a      	str	r2, [r3, #24]
}
 8008596:	bf00      	nop
 8008598:	3770      	adds	r7, #112	; 0x70
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b0ac      	sub	sp, #176	; 0xb0
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085d6:	2b22      	cmp	r3, #34	; 0x22
 80085d8:	f040 817d 	bne.w	80088d6 <UART_RxISR_8BIT_FIFOEN+0x336>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80085e2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085e6:	e120      	b.n	800882a <UART_RxISR_8BIT_FIFOEN+0x28a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80085f6:	b2d9      	uxtb	r1, r3
 80085f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008602:	400a      	ands	r2, r1
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008618:	b29b      	uxth	r3, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	b29a      	uxth	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800862e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	2b00      	cmp	r3, #0
 8008638:	d053      	beq.n	80086e2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800863a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b00      	cmp	r3, #0
 8008644:	d011      	beq.n	800866a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008646:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800864a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2201      	movs	r2, #1
 8008658:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008660:	f043 0201 	orr.w	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800866a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d011      	beq.n	800869a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00b      	beq.n	800869a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2202      	movs	r2, #2
 8008688:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008690:	f043 0204 	orr.w	r2, r3, #4
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800869a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d011      	beq.n	80086ca <UART_RxISR_8BIT_FIFOEN+0x12a>
 80086a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00b      	beq.n	80086ca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2204      	movs	r2, #4
 80086b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c0:	f043 0202 	orr.w	r2, r3, #2
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d006      	beq.n	80086e2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7fe ff55 	bl	8007584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f040 809d 	bne.w	800882a <UART_RxISR_8BIT_FIFOEN+0x28a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086f8:	e853 3f00 	ldrex	r3, [r3]
 80086fc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80086fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008712:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008714:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008718:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e4      	bne.n	80086f0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3308      	adds	r3, #8
 800872c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800873c:	f023 0301 	bic.w	r3, r3, #1
 8008740:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3308      	adds	r3, #8
 800874a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800874e:	66ba      	str	r2, [r7, #104]	; 0x68
 8008750:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008752:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008754:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008756:	e841 2300 	strex	r3, r2, [r1]
 800875a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800875c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1e1      	bne.n	8008726 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2220      	movs	r2, #32
 8008766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	671a      	str	r2, [r3, #112]	; 0x70
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
          }
        }
#else
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01a      	beq.n	80087ba <UART_RxISR_8BIT_FIFOEN+0x21a>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008794:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008798:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087a6:	657b      	str	r3, [r7, #84]	; 0x54
 80087a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80087b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e4      	bne.n	8008784 <UART_RxISR_8BIT_FIFOEN+0x1e4>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d130      	bne.n	8008824 <UART_RxISR_8BIT_FIFOEN+0x284>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	f023 0310 	bic.w	r3, r3, #16
 80087dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087ea:	643b      	str	r3, [r7, #64]	; 0x40
 80087ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e4      	bne.n	80087c8 <UART_RxISR_8BIT_FIFOEN+0x228>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	f003 0310 	and.w	r3, r3, #16
 8008808:	2b10      	cmp	r3, #16
 800880a:	d103      	bne.n	8008814 <UART_RxISR_8BIT_FIFOEN+0x274>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2210      	movs	r2, #16
 8008812:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7f8 ffe3 	bl	80017e8 <HAL_UARTEx_RxEventCallback>
 8008822:	e002      	b.n	800882a <UART_RxISR_8BIT_FIFOEN+0x28a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7fe fea3 	bl	8007570 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800882a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800882e:	2b00      	cmp	r3, #0
 8008830:	d006      	beq.n	8008840 <UART_RxISR_8BIT_FIFOEN+0x2a0>
 8008832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	f47f aed4 	bne.w	80085e8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008846:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800884a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800884e:	2b00      	cmp	r3, #0
 8008850:	d049      	beq.n	80088e6 <UART_RxISR_8BIT_FIFOEN+0x346>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008858:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800885c:	429a      	cmp	r2, r3
 800885e:	d242      	bcs.n	80088e6 <UART_RxISR_8BIT_FIFOEN+0x346>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3308      	adds	r3, #8
 8008866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3308      	adds	r3, #8
 8008880:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008884:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800888a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e3      	bne.n	8008860 <UART_RxISR_8BIT_FIFOEN+0x2c0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a15      	ldr	r2, [pc, #84]	; (80088f0 <UART_RxISR_8BIT_FIFOEN+0x350>)
 800889c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	e853 3f00 	ldrex	r3, [r3]
 80088aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	f043 0320 	orr.w	r3, r3, #32
 80088b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088c0:	61bb      	str	r3, [r7, #24]
 80088c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	6979      	ldr	r1, [r7, #20]
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	613b      	str	r3, [r7, #16]
   return(result);
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e4      	bne.n	800889e <UART_RxISR_8BIT_FIFOEN+0x2fe>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088d4:	e007      	b.n	80088e6 <UART_RxISR_8BIT_FIFOEN+0x346>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699a      	ldr	r2, [r3, #24]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f042 0208 	orr.w	r2, r2, #8
 80088e4:	619a      	str	r2, [r3, #24]
}
 80088e6:	bf00      	nop
 80088e8:	37b0      	adds	r7, #176	; 0xb0
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	0800824f 	.word	0x0800824f

080088f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b0ae      	sub	sp, #184	; 0xb8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008902:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800892a:	2b22      	cmp	r3, #34	; 0x22
 800892c:	f040 8181 	bne.w	8008c32 <UART_RxISR_16BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008936:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800893a:	e124      	b.n	8008b86 <UART_RxISR_16BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800894e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008952:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008956:	4013      	ands	r3, r2
 8008958:	b29a      	uxth	r2, r3
 800895a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800895e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008964:	1c9a      	adds	r2, r3, #2
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008970:	b29b      	uxth	r3, r3
 8008972:	3b01      	subs	r3, #1
 8008974:	b29a      	uxth	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008986:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800898a:	f003 0307 	and.w	r3, r3, #7
 800898e:	2b00      	cmp	r3, #0
 8008990:	d053      	beq.n	8008a3a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	d011      	beq.n	80089c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800899e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00b      	beq.n	80089c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2201      	movs	r2, #1
 80089b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b8:	f043 0201 	orr.w	r2, r3, #1
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d011      	beq.n	80089f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80089ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00b      	beq.n	80089f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2202      	movs	r2, #2
 80089e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e8:	f043 0204 	orr.w	r2, r3, #4
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d011      	beq.n	8008a22 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80089fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00b      	beq.n	8008a22 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2204      	movs	r2, #4
 8008a10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a18:	f043 0202 	orr.w	r2, r3, #2
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d006      	beq.n	8008a3a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7fe fda9 	bl	8007584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f040 809f 	bne.w	8008b86 <UART_RxISR_16BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	461a      	mov	r2, r3
 8008a66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a6e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a76:	e841 2300 	strex	r3, r2, [r1]
 8008a7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e2      	bne.n	8008a48 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3308      	adds	r3, #8
 8008a88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a98:	f023 0301 	bic.w	r3, r3, #1
 8008a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008aac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ab2:	e841 2300 	strex	r3, r2, [r1]
 8008ab6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e1      	bne.n	8008a82 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	671a      	str	r2, [r3, #112]	; 0x70
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
          }
        }
#else
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01a      	beq.n	8008b16 <UART_RxISR_16BIT_FIFOEN+0x222>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008af0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008af4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	461a      	mov	r2, r3
 8008afe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b02:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e4      	bne.n	8008ae0 <UART_RxISR_16BIT_FIFOEN+0x1ec>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d130      	bne.n	8008b80 <UART_RxISR_16BIT_FIFOEN+0x28c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	e853 3f00 	ldrex	r3, [r3]
 8008b30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b34:	f023 0310 	bic.w	r3, r3, #16
 8008b38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b46:	647b      	str	r3, [r7, #68]	; 0x44
 8008b48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e4      	bne.n	8008b24 <UART_RxISR_16BIT_FIFOEN+0x230>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	f003 0310 	and.w	r3, r3, #16
 8008b64:	2b10      	cmp	r3, #16
 8008b66:	d103      	bne.n	8008b70 <UART_RxISR_16BIT_FIFOEN+0x27c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2210      	movs	r2, #16
 8008b6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7f8 fe35 	bl	80017e8 <HAL_UARTEx_RxEventCallback>
 8008b7e:	e002      	b.n	8008b86 <UART_RxISR_16BIT_FIFOEN+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7fe fcf5 	bl	8007570 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b86:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d006      	beq.n	8008b9c <UART_RxISR_16BIT_FIFOEN+0x2a8>
 8008b8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b92:	f003 0320 	and.w	r3, r3, #32
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f47f aed0 	bne.w	800893c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ba2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ba6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d049      	beq.n	8008c42 <UART_RxISR_16BIT_FIFOEN+0x34e>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008bb4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d242      	bcs.n	8008c42 <UART_RxISR_16BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	e853 3f00 	ldrex	r3, [r3]
 8008bca:	623b      	str	r3, [r7, #32]
   return(result);
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008be0:	633a      	str	r2, [r7, #48]	; 0x30
 8008be2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be8:	e841 2300 	strex	r3, r2, [r1]
 8008bec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e3      	bne.n	8008bbc <UART_RxISR_16BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <UART_RxISR_16BIT_FIFOEN+0x358>)
 8008bf8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	e853 3f00 	ldrex	r3, [r3]
 8008c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f043 0320 	orr.w	r3, r3, #32
 8008c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c1c:	61fb      	str	r3, [r7, #28]
 8008c1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c20:	69b9      	ldr	r1, [r7, #24]
 8008c22:	69fa      	ldr	r2, [r7, #28]
 8008c24:	e841 2300 	strex	r3, r2, [r1]
 8008c28:	617b      	str	r3, [r7, #20]
   return(result);
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1e4      	bne.n	8008bfa <UART_RxISR_16BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c30:	e007      	b.n	8008c42 <UART_RxISR_16BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	699a      	ldr	r2, [r3, #24]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f042 0208 	orr.w	r2, r2, #8
 8008c40:	619a      	str	r2, [r3, #24]
}
 8008c42:	bf00      	nop
 8008c44:	37b8      	adds	r7, #184	; 0xb8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	080083f7 	.word	0x080083f7

08008c50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d101      	bne.n	8008ca2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	e027      	b.n	8008cf2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2224      	movs	r2, #36	; 0x24
 8008cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f022 0201 	bic.w	r2, r2, #1
 8008cc8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008cd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d101      	bne.n	8008d16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d12:	2302      	movs	r3, #2
 8008d14:	e02d      	b.n	8008d72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2224      	movs	r2, #36	; 0x24
 8008d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f022 0201 	bic.w	r2, r2, #1
 8008d3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f8a4 	bl	8008ea0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d101      	bne.n	8008d92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d8e:	2302      	movs	r3, #2
 8008d90:	e02d      	b.n	8008dee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2224      	movs	r2, #36	; 0x24
 8008d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f022 0201 	bic.w	r2, r2, #1
 8008db8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f866 	bl	8008ea0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b08c      	sub	sp, #48	; 0x30
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	4613      	mov	r3, r2
 8008e02:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	d142      	bne.n	8008e94 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8008e14:	88fb      	ldrh	r3, [r7, #6]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e03b      	b.n	8008e96 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8008e2a:	88fb      	ldrh	r3, [r7, #6]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f7fe fea1 	bl	8007b78 <UART_Start_Receive_IT>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d124      	bne.n	8008e8e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d11d      	bne.n	8008e88 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2210      	movs	r2, #16
 8008e52:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	e853 3f00 	ldrex	r3, [r3]
 8008e60:	617b      	str	r3, [r7, #20]
   return(result);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f043 0310 	orr.w	r3, r3, #16
 8008e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
 8008e74:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e76:	6a39      	ldr	r1, [r7, #32]
 8008e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e6      	bne.n	8008e54 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8008e86:	e002      	b.n	8008e8e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008e8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e92:	e000      	b.n	8008e96 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008e94:	2302      	movs	r3, #2
  }
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3730      	adds	r7, #48	; 0x30
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d108      	bne.n	8008ec2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ec0:	e031      	b.n	8008f26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ec2:	2308      	movs	r3, #8
 8008ec4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ec6:	2308      	movs	r3, #8
 8008ec8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	0e5b      	lsrs	r3, r3, #25
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	f003 0307 	and.w	r3, r3, #7
 8008ed8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	0f5b      	lsrs	r3, r3, #29
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f003 0307 	and.w	r3, r3, #7
 8008ee8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008eea:	7bbb      	ldrb	r3, [r7, #14]
 8008eec:	7b3a      	ldrb	r2, [r7, #12]
 8008eee:	4911      	ldr	r1, [pc, #68]	; (8008f34 <UARTEx_SetNbDataToProcess+0x94>)
 8008ef0:	5c8a      	ldrb	r2, [r1, r2]
 8008ef2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ef6:	7b3a      	ldrb	r2, [r7, #12]
 8008ef8:	490f      	ldr	r1, [pc, #60]	; (8008f38 <UARTEx_SetNbDataToProcess+0x98>)
 8008efa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008efc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	7b7a      	ldrb	r2, [r7, #13]
 8008f0c:	4909      	ldr	r1, [pc, #36]	; (8008f34 <UARTEx_SetNbDataToProcess+0x94>)
 8008f0e:	5c8a      	ldrb	r2, [r1, r2]
 8008f10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f14:	7b7a      	ldrb	r2, [r7, #13]
 8008f16:	4908      	ldr	r1, [pc, #32]	; (8008f38 <UARTEx_SetNbDataToProcess+0x98>)
 8008f18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f26:	bf00      	nop
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	0800c624 	.word	0x0800c624
 8008f38:	0800c62c 	.word	0x0800c62c

08008f3c <atoi>:
 8008f3c:	220a      	movs	r2, #10
 8008f3e:	2100      	movs	r1, #0
 8008f40:	f000 bee0 	b.w	8009d04 <strtol>

08008f44 <__errno>:
 8008f44:	4b01      	ldr	r3, [pc, #4]	; (8008f4c <__errno+0x8>)
 8008f46:	6818      	ldr	r0, [r3, #0]
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	20000010 	.word	0x20000010

08008f50 <__libc_init_array>:
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	4d0d      	ldr	r5, [pc, #52]	; (8008f88 <__libc_init_array+0x38>)
 8008f54:	4c0d      	ldr	r4, [pc, #52]	; (8008f8c <__libc_init_array+0x3c>)
 8008f56:	1b64      	subs	r4, r4, r5
 8008f58:	10a4      	asrs	r4, r4, #2
 8008f5a:	2600      	movs	r6, #0
 8008f5c:	42a6      	cmp	r6, r4
 8008f5e:	d109      	bne.n	8008f74 <__libc_init_array+0x24>
 8008f60:	4d0b      	ldr	r5, [pc, #44]	; (8008f90 <__libc_init_array+0x40>)
 8008f62:	4c0c      	ldr	r4, [pc, #48]	; (8008f94 <__libc_init_array+0x44>)
 8008f64:	f003 fa30 	bl	800c3c8 <_init>
 8008f68:	1b64      	subs	r4, r4, r5
 8008f6a:	10a4      	asrs	r4, r4, #2
 8008f6c:	2600      	movs	r6, #0
 8008f6e:	42a6      	cmp	r6, r4
 8008f70:	d105      	bne.n	8008f7e <__libc_init_array+0x2e>
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
 8008f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f78:	4798      	blx	r3
 8008f7a:	3601      	adds	r6, #1
 8008f7c:	e7ee      	b.n	8008f5c <__libc_init_array+0xc>
 8008f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f82:	4798      	blx	r3
 8008f84:	3601      	adds	r6, #1
 8008f86:	e7f2      	b.n	8008f6e <__libc_init_array+0x1e>
 8008f88:	0800ca14 	.word	0x0800ca14
 8008f8c:	0800ca14 	.word	0x0800ca14
 8008f90:	0800ca14 	.word	0x0800ca14
 8008f94:	0800ca18 	.word	0x0800ca18

08008f98 <malloc>:
 8008f98:	4b02      	ldr	r3, [pc, #8]	; (8008fa4 <malloc+0xc>)
 8008f9a:	4601      	mov	r1, r0
 8008f9c:	6818      	ldr	r0, [r3, #0]
 8008f9e:	f000 b885 	b.w	80090ac <_malloc_r>
 8008fa2:	bf00      	nop
 8008fa4:	20000010 	.word	0x20000010

08008fa8 <memcpy>:
 8008fa8:	440a      	add	r2, r1
 8008faa:	4291      	cmp	r1, r2
 8008fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fb0:	d100      	bne.n	8008fb4 <memcpy+0xc>
 8008fb2:	4770      	bx	lr
 8008fb4:	b510      	push	{r4, lr}
 8008fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fbe:	4291      	cmp	r1, r2
 8008fc0:	d1f9      	bne.n	8008fb6 <memcpy+0xe>
 8008fc2:	bd10      	pop	{r4, pc}

08008fc4 <memset>:
 8008fc4:	4402      	add	r2, r0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d100      	bne.n	8008fce <memset+0xa>
 8008fcc:	4770      	bx	lr
 8008fce:	f803 1b01 	strb.w	r1, [r3], #1
 8008fd2:	e7f9      	b.n	8008fc8 <memset+0x4>

08008fd4 <_free_r>:
 8008fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fd6:	2900      	cmp	r1, #0
 8008fd8:	d044      	beq.n	8009064 <_free_r+0x90>
 8008fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fde:	9001      	str	r0, [sp, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f1a1 0404 	sub.w	r4, r1, #4
 8008fe6:	bfb8      	it	lt
 8008fe8:	18e4      	addlt	r4, r4, r3
 8008fea:	f001 fff3 	bl	800afd4 <__malloc_lock>
 8008fee:	4a1e      	ldr	r2, [pc, #120]	; (8009068 <_free_r+0x94>)
 8008ff0:	9801      	ldr	r0, [sp, #4]
 8008ff2:	6813      	ldr	r3, [r2, #0]
 8008ff4:	b933      	cbnz	r3, 8009004 <_free_r+0x30>
 8008ff6:	6063      	str	r3, [r4, #4]
 8008ff8:	6014      	str	r4, [r2, #0]
 8008ffa:	b003      	add	sp, #12
 8008ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009000:	f001 bfee 	b.w	800afe0 <__malloc_unlock>
 8009004:	42a3      	cmp	r3, r4
 8009006:	d908      	bls.n	800901a <_free_r+0x46>
 8009008:	6825      	ldr	r5, [r4, #0]
 800900a:	1961      	adds	r1, r4, r5
 800900c:	428b      	cmp	r3, r1
 800900e:	bf01      	itttt	eq
 8009010:	6819      	ldreq	r1, [r3, #0]
 8009012:	685b      	ldreq	r3, [r3, #4]
 8009014:	1949      	addeq	r1, r1, r5
 8009016:	6021      	streq	r1, [r4, #0]
 8009018:	e7ed      	b.n	8008ff6 <_free_r+0x22>
 800901a:	461a      	mov	r2, r3
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	b10b      	cbz	r3, 8009024 <_free_r+0x50>
 8009020:	42a3      	cmp	r3, r4
 8009022:	d9fa      	bls.n	800901a <_free_r+0x46>
 8009024:	6811      	ldr	r1, [r2, #0]
 8009026:	1855      	adds	r5, r2, r1
 8009028:	42a5      	cmp	r5, r4
 800902a:	d10b      	bne.n	8009044 <_free_r+0x70>
 800902c:	6824      	ldr	r4, [r4, #0]
 800902e:	4421      	add	r1, r4
 8009030:	1854      	adds	r4, r2, r1
 8009032:	42a3      	cmp	r3, r4
 8009034:	6011      	str	r1, [r2, #0]
 8009036:	d1e0      	bne.n	8008ffa <_free_r+0x26>
 8009038:	681c      	ldr	r4, [r3, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	6053      	str	r3, [r2, #4]
 800903e:	4421      	add	r1, r4
 8009040:	6011      	str	r1, [r2, #0]
 8009042:	e7da      	b.n	8008ffa <_free_r+0x26>
 8009044:	d902      	bls.n	800904c <_free_r+0x78>
 8009046:	230c      	movs	r3, #12
 8009048:	6003      	str	r3, [r0, #0]
 800904a:	e7d6      	b.n	8008ffa <_free_r+0x26>
 800904c:	6825      	ldr	r5, [r4, #0]
 800904e:	1961      	adds	r1, r4, r5
 8009050:	428b      	cmp	r3, r1
 8009052:	bf04      	itt	eq
 8009054:	6819      	ldreq	r1, [r3, #0]
 8009056:	685b      	ldreq	r3, [r3, #4]
 8009058:	6063      	str	r3, [r4, #4]
 800905a:	bf04      	itt	eq
 800905c:	1949      	addeq	r1, r1, r5
 800905e:	6021      	streq	r1, [r4, #0]
 8009060:	6054      	str	r4, [r2, #4]
 8009062:	e7ca      	b.n	8008ffa <_free_r+0x26>
 8009064:	b003      	add	sp, #12
 8009066:	bd30      	pop	{r4, r5, pc}
 8009068:	20000530 	.word	0x20000530

0800906c <sbrk_aligned>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	4e0e      	ldr	r6, [pc, #56]	; (80090a8 <sbrk_aligned+0x3c>)
 8009070:	460c      	mov	r4, r1
 8009072:	6831      	ldr	r1, [r6, #0]
 8009074:	4605      	mov	r5, r0
 8009076:	b911      	cbnz	r1, 800907e <sbrk_aligned+0x12>
 8009078:	f000 fd84 	bl	8009b84 <_sbrk_r>
 800907c:	6030      	str	r0, [r6, #0]
 800907e:	4621      	mov	r1, r4
 8009080:	4628      	mov	r0, r5
 8009082:	f000 fd7f 	bl	8009b84 <_sbrk_r>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	d00a      	beq.n	80090a0 <sbrk_aligned+0x34>
 800908a:	1cc4      	adds	r4, r0, #3
 800908c:	f024 0403 	bic.w	r4, r4, #3
 8009090:	42a0      	cmp	r0, r4
 8009092:	d007      	beq.n	80090a4 <sbrk_aligned+0x38>
 8009094:	1a21      	subs	r1, r4, r0
 8009096:	4628      	mov	r0, r5
 8009098:	f000 fd74 	bl	8009b84 <_sbrk_r>
 800909c:	3001      	adds	r0, #1
 800909e:	d101      	bne.n	80090a4 <sbrk_aligned+0x38>
 80090a0:	f04f 34ff 	mov.w	r4, #4294967295
 80090a4:	4620      	mov	r0, r4
 80090a6:	bd70      	pop	{r4, r5, r6, pc}
 80090a8:	20000534 	.word	0x20000534

080090ac <_malloc_r>:
 80090ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b0:	1ccd      	adds	r5, r1, #3
 80090b2:	f025 0503 	bic.w	r5, r5, #3
 80090b6:	3508      	adds	r5, #8
 80090b8:	2d0c      	cmp	r5, #12
 80090ba:	bf38      	it	cc
 80090bc:	250c      	movcc	r5, #12
 80090be:	2d00      	cmp	r5, #0
 80090c0:	4607      	mov	r7, r0
 80090c2:	db01      	blt.n	80090c8 <_malloc_r+0x1c>
 80090c4:	42a9      	cmp	r1, r5
 80090c6:	d905      	bls.n	80090d4 <_malloc_r+0x28>
 80090c8:	230c      	movs	r3, #12
 80090ca:	603b      	str	r3, [r7, #0]
 80090cc:	2600      	movs	r6, #0
 80090ce:	4630      	mov	r0, r6
 80090d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d4:	4e2e      	ldr	r6, [pc, #184]	; (8009190 <_malloc_r+0xe4>)
 80090d6:	f001 ff7d 	bl	800afd4 <__malloc_lock>
 80090da:	6833      	ldr	r3, [r6, #0]
 80090dc:	461c      	mov	r4, r3
 80090de:	bb34      	cbnz	r4, 800912e <_malloc_r+0x82>
 80090e0:	4629      	mov	r1, r5
 80090e2:	4638      	mov	r0, r7
 80090e4:	f7ff ffc2 	bl	800906c <sbrk_aligned>
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	4604      	mov	r4, r0
 80090ec:	d14d      	bne.n	800918a <_malloc_r+0xde>
 80090ee:	6834      	ldr	r4, [r6, #0]
 80090f0:	4626      	mov	r6, r4
 80090f2:	2e00      	cmp	r6, #0
 80090f4:	d140      	bne.n	8009178 <_malloc_r+0xcc>
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	4631      	mov	r1, r6
 80090fa:	4638      	mov	r0, r7
 80090fc:	eb04 0803 	add.w	r8, r4, r3
 8009100:	f000 fd40 	bl	8009b84 <_sbrk_r>
 8009104:	4580      	cmp	r8, r0
 8009106:	d13a      	bne.n	800917e <_malloc_r+0xd2>
 8009108:	6821      	ldr	r1, [r4, #0]
 800910a:	3503      	adds	r5, #3
 800910c:	1a6d      	subs	r5, r5, r1
 800910e:	f025 0503 	bic.w	r5, r5, #3
 8009112:	3508      	adds	r5, #8
 8009114:	2d0c      	cmp	r5, #12
 8009116:	bf38      	it	cc
 8009118:	250c      	movcc	r5, #12
 800911a:	4629      	mov	r1, r5
 800911c:	4638      	mov	r0, r7
 800911e:	f7ff ffa5 	bl	800906c <sbrk_aligned>
 8009122:	3001      	adds	r0, #1
 8009124:	d02b      	beq.n	800917e <_malloc_r+0xd2>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	442b      	add	r3, r5
 800912a:	6023      	str	r3, [r4, #0]
 800912c:	e00e      	b.n	800914c <_malloc_r+0xa0>
 800912e:	6822      	ldr	r2, [r4, #0]
 8009130:	1b52      	subs	r2, r2, r5
 8009132:	d41e      	bmi.n	8009172 <_malloc_r+0xc6>
 8009134:	2a0b      	cmp	r2, #11
 8009136:	d916      	bls.n	8009166 <_malloc_r+0xba>
 8009138:	1961      	adds	r1, r4, r5
 800913a:	42a3      	cmp	r3, r4
 800913c:	6025      	str	r5, [r4, #0]
 800913e:	bf18      	it	ne
 8009140:	6059      	strne	r1, [r3, #4]
 8009142:	6863      	ldr	r3, [r4, #4]
 8009144:	bf08      	it	eq
 8009146:	6031      	streq	r1, [r6, #0]
 8009148:	5162      	str	r2, [r4, r5]
 800914a:	604b      	str	r3, [r1, #4]
 800914c:	4638      	mov	r0, r7
 800914e:	f104 060b 	add.w	r6, r4, #11
 8009152:	f001 ff45 	bl	800afe0 <__malloc_unlock>
 8009156:	f026 0607 	bic.w	r6, r6, #7
 800915a:	1d23      	adds	r3, r4, #4
 800915c:	1af2      	subs	r2, r6, r3
 800915e:	d0b6      	beq.n	80090ce <_malloc_r+0x22>
 8009160:	1b9b      	subs	r3, r3, r6
 8009162:	50a3      	str	r3, [r4, r2]
 8009164:	e7b3      	b.n	80090ce <_malloc_r+0x22>
 8009166:	6862      	ldr	r2, [r4, #4]
 8009168:	42a3      	cmp	r3, r4
 800916a:	bf0c      	ite	eq
 800916c:	6032      	streq	r2, [r6, #0]
 800916e:	605a      	strne	r2, [r3, #4]
 8009170:	e7ec      	b.n	800914c <_malloc_r+0xa0>
 8009172:	4623      	mov	r3, r4
 8009174:	6864      	ldr	r4, [r4, #4]
 8009176:	e7b2      	b.n	80090de <_malloc_r+0x32>
 8009178:	4634      	mov	r4, r6
 800917a:	6876      	ldr	r6, [r6, #4]
 800917c:	e7b9      	b.n	80090f2 <_malloc_r+0x46>
 800917e:	230c      	movs	r3, #12
 8009180:	603b      	str	r3, [r7, #0]
 8009182:	4638      	mov	r0, r7
 8009184:	f001 ff2c 	bl	800afe0 <__malloc_unlock>
 8009188:	e7a1      	b.n	80090ce <_malloc_r+0x22>
 800918a:	6025      	str	r5, [r4, #0]
 800918c:	e7de      	b.n	800914c <_malloc_r+0xa0>
 800918e:	bf00      	nop
 8009190:	20000530 	.word	0x20000530

08009194 <__cvt>:
 8009194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009198:	ec55 4b10 	vmov	r4, r5, d0
 800919c:	2d00      	cmp	r5, #0
 800919e:	460e      	mov	r6, r1
 80091a0:	4619      	mov	r1, r3
 80091a2:	462b      	mov	r3, r5
 80091a4:	bfbb      	ittet	lt
 80091a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80091aa:	461d      	movlt	r5, r3
 80091ac:	2300      	movge	r3, #0
 80091ae:	232d      	movlt	r3, #45	; 0x2d
 80091b0:	700b      	strb	r3, [r1, #0]
 80091b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80091b8:	4691      	mov	r9, r2
 80091ba:	f023 0820 	bic.w	r8, r3, #32
 80091be:	bfbc      	itt	lt
 80091c0:	4622      	movlt	r2, r4
 80091c2:	4614      	movlt	r4, r2
 80091c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091c8:	d005      	beq.n	80091d6 <__cvt+0x42>
 80091ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80091ce:	d100      	bne.n	80091d2 <__cvt+0x3e>
 80091d0:	3601      	adds	r6, #1
 80091d2:	2102      	movs	r1, #2
 80091d4:	e000      	b.n	80091d8 <__cvt+0x44>
 80091d6:	2103      	movs	r1, #3
 80091d8:	ab03      	add	r3, sp, #12
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	ab02      	add	r3, sp, #8
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	ec45 4b10 	vmov	d0, r4, r5
 80091e4:	4653      	mov	r3, sl
 80091e6:	4632      	mov	r2, r6
 80091e8:	f000 fee2 	bl	8009fb0 <_dtoa_r>
 80091ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80091f0:	4607      	mov	r7, r0
 80091f2:	d102      	bne.n	80091fa <__cvt+0x66>
 80091f4:	f019 0f01 	tst.w	r9, #1
 80091f8:	d022      	beq.n	8009240 <__cvt+0xac>
 80091fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091fe:	eb07 0906 	add.w	r9, r7, r6
 8009202:	d110      	bne.n	8009226 <__cvt+0x92>
 8009204:	783b      	ldrb	r3, [r7, #0]
 8009206:	2b30      	cmp	r3, #48	; 0x30
 8009208:	d10a      	bne.n	8009220 <__cvt+0x8c>
 800920a:	2200      	movs	r2, #0
 800920c:	2300      	movs	r3, #0
 800920e:	4620      	mov	r0, r4
 8009210:	4629      	mov	r1, r5
 8009212:	f7f7 fc41 	bl	8000a98 <__aeabi_dcmpeq>
 8009216:	b918      	cbnz	r0, 8009220 <__cvt+0x8c>
 8009218:	f1c6 0601 	rsb	r6, r6, #1
 800921c:	f8ca 6000 	str.w	r6, [sl]
 8009220:	f8da 3000 	ldr.w	r3, [sl]
 8009224:	4499      	add	r9, r3
 8009226:	2200      	movs	r2, #0
 8009228:	2300      	movs	r3, #0
 800922a:	4620      	mov	r0, r4
 800922c:	4629      	mov	r1, r5
 800922e:	f7f7 fc33 	bl	8000a98 <__aeabi_dcmpeq>
 8009232:	b108      	cbz	r0, 8009238 <__cvt+0xa4>
 8009234:	f8cd 900c 	str.w	r9, [sp, #12]
 8009238:	2230      	movs	r2, #48	; 0x30
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	454b      	cmp	r3, r9
 800923e:	d307      	bcc.n	8009250 <__cvt+0xbc>
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009244:	1bdb      	subs	r3, r3, r7
 8009246:	4638      	mov	r0, r7
 8009248:	6013      	str	r3, [r2, #0]
 800924a:	b004      	add	sp, #16
 800924c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009250:	1c59      	adds	r1, r3, #1
 8009252:	9103      	str	r1, [sp, #12]
 8009254:	701a      	strb	r2, [r3, #0]
 8009256:	e7f0      	b.n	800923a <__cvt+0xa6>

08009258 <__exponent>:
 8009258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800925a:	4603      	mov	r3, r0
 800925c:	2900      	cmp	r1, #0
 800925e:	bfb8      	it	lt
 8009260:	4249      	neglt	r1, r1
 8009262:	f803 2b02 	strb.w	r2, [r3], #2
 8009266:	bfb4      	ite	lt
 8009268:	222d      	movlt	r2, #45	; 0x2d
 800926a:	222b      	movge	r2, #43	; 0x2b
 800926c:	2909      	cmp	r1, #9
 800926e:	7042      	strb	r2, [r0, #1]
 8009270:	dd2a      	ble.n	80092c8 <__exponent+0x70>
 8009272:	f10d 0407 	add.w	r4, sp, #7
 8009276:	46a4      	mov	ip, r4
 8009278:	270a      	movs	r7, #10
 800927a:	46a6      	mov	lr, r4
 800927c:	460a      	mov	r2, r1
 800927e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009282:	fb07 1516 	mls	r5, r7, r6, r1
 8009286:	3530      	adds	r5, #48	; 0x30
 8009288:	2a63      	cmp	r2, #99	; 0x63
 800928a:	f104 34ff 	add.w	r4, r4, #4294967295
 800928e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009292:	4631      	mov	r1, r6
 8009294:	dcf1      	bgt.n	800927a <__exponent+0x22>
 8009296:	3130      	adds	r1, #48	; 0x30
 8009298:	f1ae 0502 	sub.w	r5, lr, #2
 800929c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80092a0:	1c44      	adds	r4, r0, #1
 80092a2:	4629      	mov	r1, r5
 80092a4:	4561      	cmp	r1, ip
 80092a6:	d30a      	bcc.n	80092be <__exponent+0x66>
 80092a8:	f10d 0209 	add.w	r2, sp, #9
 80092ac:	eba2 020e 	sub.w	r2, r2, lr
 80092b0:	4565      	cmp	r5, ip
 80092b2:	bf88      	it	hi
 80092b4:	2200      	movhi	r2, #0
 80092b6:	4413      	add	r3, r2
 80092b8:	1a18      	subs	r0, r3, r0
 80092ba:	b003      	add	sp, #12
 80092bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80092c6:	e7ed      	b.n	80092a4 <__exponent+0x4c>
 80092c8:	2330      	movs	r3, #48	; 0x30
 80092ca:	3130      	adds	r1, #48	; 0x30
 80092cc:	7083      	strb	r3, [r0, #2]
 80092ce:	70c1      	strb	r1, [r0, #3]
 80092d0:	1d03      	adds	r3, r0, #4
 80092d2:	e7f1      	b.n	80092b8 <__exponent+0x60>

080092d4 <_printf_float>:
 80092d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d8:	ed2d 8b02 	vpush	{d8}
 80092dc:	b08d      	sub	sp, #52	; 0x34
 80092de:	460c      	mov	r4, r1
 80092e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80092e4:	4616      	mov	r6, r2
 80092e6:	461f      	mov	r7, r3
 80092e8:	4605      	mov	r5, r0
 80092ea:	f001 fe07 	bl	800aefc <_localeconv_r>
 80092ee:	f8d0 a000 	ldr.w	sl, [r0]
 80092f2:	4650      	mov	r0, sl
 80092f4:	f7f6 ff4e 	bl	8000194 <strlen>
 80092f8:	2300      	movs	r3, #0
 80092fa:	930a      	str	r3, [sp, #40]	; 0x28
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	9305      	str	r3, [sp, #20]
 8009300:	f8d8 3000 	ldr.w	r3, [r8]
 8009304:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009308:	3307      	adds	r3, #7
 800930a:	f023 0307 	bic.w	r3, r3, #7
 800930e:	f103 0208 	add.w	r2, r3, #8
 8009312:	f8c8 2000 	str.w	r2, [r8]
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800931e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009322:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009326:	9307      	str	r3, [sp, #28]
 8009328:	f8cd 8018 	str.w	r8, [sp, #24]
 800932c:	ee08 0a10 	vmov	s16, r0
 8009330:	4b9f      	ldr	r3, [pc, #636]	; (80095b0 <_printf_float+0x2dc>)
 8009332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009336:	f04f 32ff 	mov.w	r2, #4294967295
 800933a:	f7f7 fbdf 	bl	8000afc <__aeabi_dcmpun>
 800933e:	bb88      	cbnz	r0, 80093a4 <_printf_float+0xd0>
 8009340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009344:	4b9a      	ldr	r3, [pc, #616]	; (80095b0 <_printf_float+0x2dc>)
 8009346:	f04f 32ff 	mov.w	r2, #4294967295
 800934a:	f7f7 fbb9 	bl	8000ac0 <__aeabi_dcmple>
 800934e:	bb48      	cbnz	r0, 80093a4 <_printf_float+0xd0>
 8009350:	2200      	movs	r2, #0
 8009352:	2300      	movs	r3, #0
 8009354:	4640      	mov	r0, r8
 8009356:	4649      	mov	r1, r9
 8009358:	f7f7 fba8 	bl	8000aac <__aeabi_dcmplt>
 800935c:	b110      	cbz	r0, 8009364 <_printf_float+0x90>
 800935e:	232d      	movs	r3, #45	; 0x2d
 8009360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009364:	4b93      	ldr	r3, [pc, #588]	; (80095b4 <_printf_float+0x2e0>)
 8009366:	4894      	ldr	r0, [pc, #592]	; (80095b8 <_printf_float+0x2e4>)
 8009368:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800936c:	bf94      	ite	ls
 800936e:	4698      	movls	r8, r3
 8009370:	4680      	movhi	r8, r0
 8009372:	2303      	movs	r3, #3
 8009374:	6123      	str	r3, [r4, #16]
 8009376:	9b05      	ldr	r3, [sp, #20]
 8009378:	f023 0204 	bic.w	r2, r3, #4
 800937c:	6022      	str	r2, [r4, #0]
 800937e:	f04f 0900 	mov.w	r9, #0
 8009382:	9700      	str	r7, [sp, #0]
 8009384:	4633      	mov	r3, r6
 8009386:	aa0b      	add	r2, sp, #44	; 0x2c
 8009388:	4621      	mov	r1, r4
 800938a:	4628      	mov	r0, r5
 800938c:	f000 f9d8 	bl	8009740 <_printf_common>
 8009390:	3001      	adds	r0, #1
 8009392:	f040 8090 	bne.w	80094b6 <_printf_float+0x1e2>
 8009396:	f04f 30ff 	mov.w	r0, #4294967295
 800939a:	b00d      	add	sp, #52	; 0x34
 800939c:	ecbd 8b02 	vpop	{d8}
 80093a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a4:	4642      	mov	r2, r8
 80093a6:	464b      	mov	r3, r9
 80093a8:	4640      	mov	r0, r8
 80093aa:	4649      	mov	r1, r9
 80093ac:	f7f7 fba6 	bl	8000afc <__aeabi_dcmpun>
 80093b0:	b140      	cbz	r0, 80093c4 <_printf_float+0xf0>
 80093b2:	464b      	mov	r3, r9
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	bfbc      	itt	lt
 80093b8:	232d      	movlt	r3, #45	; 0x2d
 80093ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80093be:	487f      	ldr	r0, [pc, #508]	; (80095bc <_printf_float+0x2e8>)
 80093c0:	4b7f      	ldr	r3, [pc, #508]	; (80095c0 <_printf_float+0x2ec>)
 80093c2:	e7d1      	b.n	8009368 <_printf_float+0x94>
 80093c4:	6863      	ldr	r3, [r4, #4]
 80093c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80093ca:	9206      	str	r2, [sp, #24]
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	d13f      	bne.n	8009450 <_printf_float+0x17c>
 80093d0:	2306      	movs	r3, #6
 80093d2:	6063      	str	r3, [r4, #4]
 80093d4:	9b05      	ldr	r3, [sp, #20]
 80093d6:	6861      	ldr	r1, [r4, #4]
 80093d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80093dc:	2300      	movs	r3, #0
 80093de:	9303      	str	r3, [sp, #12]
 80093e0:	ab0a      	add	r3, sp, #40	; 0x28
 80093e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80093e6:	ab09      	add	r3, sp, #36	; 0x24
 80093e8:	ec49 8b10 	vmov	d0, r8, r9
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	6022      	str	r2, [r4, #0]
 80093f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80093f4:	4628      	mov	r0, r5
 80093f6:	f7ff fecd 	bl	8009194 <__cvt>
 80093fa:	9b06      	ldr	r3, [sp, #24]
 80093fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093fe:	2b47      	cmp	r3, #71	; 0x47
 8009400:	4680      	mov	r8, r0
 8009402:	d108      	bne.n	8009416 <_printf_float+0x142>
 8009404:	1cc8      	adds	r0, r1, #3
 8009406:	db02      	blt.n	800940e <_printf_float+0x13a>
 8009408:	6863      	ldr	r3, [r4, #4]
 800940a:	4299      	cmp	r1, r3
 800940c:	dd41      	ble.n	8009492 <_printf_float+0x1be>
 800940e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009412:	fa5f fb8b 	uxtb.w	fp, fp
 8009416:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800941a:	d820      	bhi.n	800945e <_printf_float+0x18a>
 800941c:	3901      	subs	r1, #1
 800941e:	465a      	mov	r2, fp
 8009420:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009424:	9109      	str	r1, [sp, #36]	; 0x24
 8009426:	f7ff ff17 	bl	8009258 <__exponent>
 800942a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800942c:	1813      	adds	r3, r2, r0
 800942e:	2a01      	cmp	r2, #1
 8009430:	4681      	mov	r9, r0
 8009432:	6123      	str	r3, [r4, #16]
 8009434:	dc02      	bgt.n	800943c <_printf_float+0x168>
 8009436:	6822      	ldr	r2, [r4, #0]
 8009438:	07d2      	lsls	r2, r2, #31
 800943a:	d501      	bpl.n	8009440 <_printf_float+0x16c>
 800943c:	3301      	adds	r3, #1
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009444:	2b00      	cmp	r3, #0
 8009446:	d09c      	beq.n	8009382 <_printf_float+0xae>
 8009448:	232d      	movs	r3, #45	; 0x2d
 800944a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800944e:	e798      	b.n	8009382 <_printf_float+0xae>
 8009450:	9a06      	ldr	r2, [sp, #24]
 8009452:	2a47      	cmp	r2, #71	; 0x47
 8009454:	d1be      	bne.n	80093d4 <_printf_float+0x100>
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1bc      	bne.n	80093d4 <_printf_float+0x100>
 800945a:	2301      	movs	r3, #1
 800945c:	e7b9      	b.n	80093d2 <_printf_float+0xfe>
 800945e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009462:	d118      	bne.n	8009496 <_printf_float+0x1c2>
 8009464:	2900      	cmp	r1, #0
 8009466:	6863      	ldr	r3, [r4, #4]
 8009468:	dd0b      	ble.n	8009482 <_printf_float+0x1ae>
 800946a:	6121      	str	r1, [r4, #16]
 800946c:	b913      	cbnz	r3, 8009474 <_printf_float+0x1a0>
 800946e:	6822      	ldr	r2, [r4, #0]
 8009470:	07d0      	lsls	r0, r2, #31
 8009472:	d502      	bpl.n	800947a <_printf_float+0x1a6>
 8009474:	3301      	adds	r3, #1
 8009476:	440b      	add	r3, r1
 8009478:	6123      	str	r3, [r4, #16]
 800947a:	65a1      	str	r1, [r4, #88]	; 0x58
 800947c:	f04f 0900 	mov.w	r9, #0
 8009480:	e7de      	b.n	8009440 <_printf_float+0x16c>
 8009482:	b913      	cbnz	r3, 800948a <_printf_float+0x1b6>
 8009484:	6822      	ldr	r2, [r4, #0]
 8009486:	07d2      	lsls	r2, r2, #31
 8009488:	d501      	bpl.n	800948e <_printf_float+0x1ba>
 800948a:	3302      	adds	r3, #2
 800948c:	e7f4      	b.n	8009478 <_printf_float+0x1a4>
 800948e:	2301      	movs	r3, #1
 8009490:	e7f2      	b.n	8009478 <_printf_float+0x1a4>
 8009492:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009498:	4299      	cmp	r1, r3
 800949a:	db05      	blt.n	80094a8 <_printf_float+0x1d4>
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	6121      	str	r1, [r4, #16]
 80094a0:	07d8      	lsls	r0, r3, #31
 80094a2:	d5ea      	bpl.n	800947a <_printf_float+0x1a6>
 80094a4:	1c4b      	adds	r3, r1, #1
 80094a6:	e7e7      	b.n	8009478 <_printf_float+0x1a4>
 80094a8:	2900      	cmp	r1, #0
 80094aa:	bfd4      	ite	le
 80094ac:	f1c1 0202 	rsble	r2, r1, #2
 80094b0:	2201      	movgt	r2, #1
 80094b2:	4413      	add	r3, r2
 80094b4:	e7e0      	b.n	8009478 <_printf_float+0x1a4>
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	055a      	lsls	r2, r3, #21
 80094ba:	d407      	bmi.n	80094cc <_printf_float+0x1f8>
 80094bc:	6923      	ldr	r3, [r4, #16]
 80094be:	4642      	mov	r2, r8
 80094c0:	4631      	mov	r1, r6
 80094c2:	4628      	mov	r0, r5
 80094c4:	47b8      	blx	r7
 80094c6:	3001      	adds	r0, #1
 80094c8:	d12c      	bne.n	8009524 <_printf_float+0x250>
 80094ca:	e764      	b.n	8009396 <_printf_float+0xc2>
 80094cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094d0:	f240 80e0 	bls.w	8009694 <_printf_float+0x3c0>
 80094d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094d8:	2200      	movs	r2, #0
 80094da:	2300      	movs	r3, #0
 80094dc:	f7f7 fadc 	bl	8000a98 <__aeabi_dcmpeq>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d034      	beq.n	800954e <_printf_float+0x27a>
 80094e4:	4a37      	ldr	r2, [pc, #220]	; (80095c4 <_printf_float+0x2f0>)
 80094e6:	2301      	movs	r3, #1
 80094e8:	4631      	mov	r1, r6
 80094ea:	4628      	mov	r0, r5
 80094ec:	47b8      	blx	r7
 80094ee:	3001      	adds	r0, #1
 80094f0:	f43f af51 	beq.w	8009396 <_printf_float+0xc2>
 80094f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094f8:	429a      	cmp	r2, r3
 80094fa:	db02      	blt.n	8009502 <_printf_float+0x22e>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	07d8      	lsls	r0, r3, #31
 8009500:	d510      	bpl.n	8009524 <_printf_float+0x250>
 8009502:	ee18 3a10 	vmov	r3, s16
 8009506:	4652      	mov	r2, sl
 8009508:	4631      	mov	r1, r6
 800950a:	4628      	mov	r0, r5
 800950c:	47b8      	blx	r7
 800950e:	3001      	adds	r0, #1
 8009510:	f43f af41 	beq.w	8009396 <_printf_float+0xc2>
 8009514:	f04f 0800 	mov.w	r8, #0
 8009518:	f104 091a 	add.w	r9, r4, #26
 800951c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800951e:	3b01      	subs	r3, #1
 8009520:	4543      	cmp	r3, r8
 8009522:	dc09      	bgt.n	8009538 <_printf_float+0x264>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	079b      	lsls	r3, r3, #30
 8009528:	f100 8105 	bmi.w	8009736 <_printf_float+0x462>
 800952c:	68e0      	ldr	r0, [r4, #12]
 800952e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009530:	4298      	cmp	r0, r3
 8009532:	bfb8      	it	lt
 8009534:	4618      	movlt	r0, r3
 8009536:	e730      	b.n	800939a <_printf_float+0xc6>
 8009538:	2301      	movs	r3, #1
 800953a:	464a      	mov	r2, r9
 800953c:	4631      	mov	r1, r6
 800953e:	4628      	mov	r0, r5
 8009540:	47b8      	blx	r7
 8009542:	3001      	adds	r0, #1
 8009544:	f43f af27 	beq.w	8009396 <_printf_float+0xc2>
 8009548:	f108 0801 	add.w	r8, r8, #1
 800954c:	e7e6      	b.n	800951c <_printf_float+0x248>
 800954e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009550:	2b00      	cmp	r3, #0
 8009552:	dc39      	bgt.n	80095c8 <_printf_float+0x2f4>
 8009554:	4a1b      	ldr	r2, [pc, #108]	; (80095c4 <_printf_float+0x2f0>)
 8009556:	2301      	movs	r3, #1
 8009558:	4631      	mov	r1, r6
 800955a:	4628      	mov	r0, r5
 800955c:	47b8      	blx	r7
 800955e:	3001      	adds	r0, #1
 8009560:	f43f af19 	beq.w	8009396 <_printf_float+0xc2>
 8009564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009568:	4313      	orrs	r3, r2
 800956a:	d102      	bne.n	8009572 <_printf_float+0x29e>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	07d9      	lsls	r1, r3, #31
 8009570:	d5d8      	bpl.n	8009524 <_printf_float+0x250>
 8009572:	ee18 3a10 	vmov	r3, s16
 8009576:	4652      	mov	r2, sl
 8009578:	4631      	mov	r1, r6
 800957a:	4628      	mov	r0, r5
 800957c:	47b8      	blx	r7
 800957e:	3001      	adds	r0, #1
 8009580:	f43f af09 	beq.w	8009396 <_printf_float+0xc2>
 8009584:	f04f 0900 	mov.w	r9, #0
 8009588:	f104 0a1a 	add.w	sl, r4, #26
 800958c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958e:	425b      	negs	r3, r3
 8009590:	454b      	cmp	r3, r9
 8009592:	dc01      	bgt.n	8009598 <_printf_float+0x2c4>
 8009594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009596:	e792      	b.n	80094be <_printf_float+0x1ea>
 8009598:	2301      	movs	r3, #1
 800959a:	4652      	mov	r2, sl
 800959c:	4631      	mov	r1, r6
 800959e:	4628      	mov	r0, r5
 80095a0:	47b8      	blx	r7
 80095a2:	3001      	adds	r0, #1
 80095a4:	f43f aef7 	beq.w	8009396 <_printf_float+0xc2>
 80095a8:	f109 0901 	add.w	r9, r9, #1
 80095ac:	e7ee      	b.n	800958c <_printf_float+0x2b8>
 80095ae:	bf00      	nop
 80095b0:	7fefffff 	.word	0x7fefffff
 80095b4:	0800c638 	.word	0x0800c638
 80095b8:	0800c63c 	.word	0x0800c63c
 80095bc:	0800c644 	.word	0x0800c644
 80095c0:	0800c640 	.word	0x0800c640
 80095c4:	0800c648 	.word	0x0800c648
 80095c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095cc:	429a      	cmp	r2, r3
 80095ce:	bfa8      	it	ge
 80095d0:	461a      	movge	r2, r3
 80095d2:	2a00      	cmp	r2, #0
 80095d4:	4691      	mov	r9, r2
 80095d6:	dc37      	bgt.n	8009648 <_printf_float+0x374>
 80095d8:	f04f 0b00 	mov.w	fp, #0
 80095dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095e0:	f104 021a 	add.w	r2, r4, #26
 80095e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095e6:	9305      	str	r3, [sp, #20]
 80095e8:	eba3 0309 	sub.w	r3, r3, r9
 80095ec:	455b      	cmp	r3, fp
 80095ee:	dc33      	bgt.n	8009658 <_printf_float+0x384>
 80095f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095f4:	429a      	cmp	r2, r3
 80095f6:	db3b      	blt.n	8009670 <_printf_float+0x39c>
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	07da      	lsls	r2, r3, #31
 80095fc:	d438      	bmi.n	8009670 <_printf_float+0x39c>
 80095fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009600:	9a05      	ldr	r2, [sp, #20]
 8009602:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009604:	1a9a      	subs	r2, r3, r2
 8009606:	eba3 0901 	sub.w	r9, r3, r1
 800960a:	4591      	cmp	r9, r2
 800960c:	bfa8      	it	ge
 800960e:	4691      	movge	r9, r2
 8009610:	f1b9 0f00 	cmp.w	r9, #0
 8009614:	dc35      	bgt.n	8009682 <_printf_float+0x3ae>
 8009616:	f04f 0800 	mov.w	r8, #0
 800961a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800961e:	f104 0a1a 	add.w	sl, r4, #26
 8009622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009626:	1a9b      	subs	r3, r3, r2
 8009628:	eba3 0309 	sub.w	r3, r3, r9
 800962c:	4543      	cmp	r3, r8
 800962e:	f77f af79 	ble.w	8009524 <_printf_float+0x250>
 8009632:	2301      	movs	r3, #1
 8009634:	4652      	mov	r2, sl
 8009636:	4631      	mov	r1, r6
 8009638:	4628      	mov	r0, r5
 800963a:	47b8      	blx	r7
 800963c:	3001      	adds	r0, #1
 800963e:	f43f aeaa 	beq.w	8009396 <_printf_float+0xc2>
 8009642:	f108 0801 	add.w	r8, r8, #1
 8009646:	e7ec      	b.n	8009622 <_printf_float+0x34e>
 8009648:	4613      	mov	r3, r2
 800964a:	4631      	mov	r1, r6
 800964c:	4642      	mov	r2, r8
 800964e:	4628      	mov	r0, r5
 8009650:	47b8      	blx	r7
 8009652:	3001      	adds	r0, #1
 8009654:	d1c0      	bne.n	80095d8 <_printf_float+0x304>
 8009656:	e69e      	b.n	8009396 <_printf_float+0xc2>
 8009658:	2301      	movs	r3, #1
 800965a:	4631      	mov	r1, r6
 800965c:	4628      	mov	r0, r5
 800965e:	9205      	str	r2, [sp, #20]
 8009660:	47b8      	blx	r7
 8009662:	3001      	adds	r0, #1
 8009664:	f43f ae97 	beq.w	8009396 <_printf_float+0xc2>
 8009668:	9a05      	ldr	r2, [sp, #20]
 800966a:	f10b 0b01 	add.w	fp, fp, #1
 800966e:	e7b9      	b.n	80095e4 <_printf_float+0x310>
 8009670:	ee18 3a10 	vmov	r3, s16
 8009674:	4652      	mov	r2, sl
 8009676:	4631      	mov	r1, r6
 8009678:	4628      	mov	r0, r5
 800967a:	47b8      	blx	r7
 800967c:	3001      	adds	r0, #1
 800967e:	d1be      	bne.n	80095fe <_printf_float+0x32a>
 8009680:	e689      	b.n	8009396 <_printf_float+0xc2>
 8009682:	9a05      	ldr	r2, [sp, #20]
 8009684:	464b      	mov	r3, r9
 8009686:	4442      	add	r2, r8
 8009688:	4631      	mov	r1, r6
 800968a:	4628      	mov	r0, r5
 800968c:	47b8      	blx	r7
 800968e:	3001      	adds	r0, #1
 8009690:	d1c1      	bne.n	8009616 <_printf_float+0x342>
 8009692:	e680      	b.n	8009396 <_printf_float+0xc2>
 8009694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009696:	2a01      	cmp	r2, #1
 8009698:	dc01      	bgt.n	800969e <_printf_float+0x3ca>
 800969a:	07db      	lsls	r3, r3, #31
 800969c:	d538      	bpl.n	8009710 <_printf_float+0x43c>
 800969e:	2301      	movs	r3, #1
 80096a0:	4642      	mov	r2, r8
 80096a2:	4631      	mov	r1, r6
 80096a4:	4628      	mov	r0, r5
 80096a6:	47b8      	blx	r7
 80096a8:	3001      	adds	r0, #1
 80096aa:	f43f ae74 	beq.w	8009396 <_printf_float+0xc2>
 80096ae:	ee18 3a10 	vmov	r3, s16
 80096b2:	4652      	mov	r2, sl
 80096b4:	4631      	mov	r1, r6
 80096b6:	4628      	mov	r0, r5
 80096b8:	47b8      	blx	r7
 80096ba:	3001      	adds	r0, #1
 80096bc:	f43f ae6b 	beq.w	8009396 <_printf_float+0xc2>
 80096c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096c4:	2200      	movs	r2, #0
 80096c6:	2300      	movs	r3, #0
 80096c8:	f7f7 f9e6 	bl	8000a98 <__aeabi_dcmpeq>
 80096cc:	b9d8      	cbnz	r0, 8009706 <_printf_float+0x432>
 80096ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d0:	f108 0201 	add.w	r2, r8, #1
 80096d4:	3b01      	subs	r3, #1
 80096d6:	4631      	mov	r1, r6
 80096d8:	4628      	mov	r0, r5
 80096da:	47b8      	blx	r7
 80096dc:	3001      	adds	r0, #1
 80096de:	d10e      	bne.n	80096fe <_printf_float+0x42a>
 80096e0:	e659      	b.n	8009396 <_printf_float+0xc2>
 80096e2:	2301      	movs	r3, #1
 80096e4:	4652      	mov	r2, sl
 80096e6:	4631      	mov	r1, r6
 80096e8:	4628      	mov	r0, r5
 80096ea:	47b8      	blx	r7
 80096ec:	3001      	adds	r0, #1
 80096ee:	f43f ae52 	beq.w	8009396 <_printf_float+0xc2>
 80096f2:	f108 0801 	add.w	r8, r8, #1
 80096f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f8:	3b01      	subs	r3, #1
 80096fa:	4543      	cmp	r3, r8
 80096fc:	dcf1      	bgt.n	80096e2 <_printf_float+0x40e>
 80096fe:	464b      	mov	r3, r9
 8009700:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009704:	e6dc      	b.n	80094c0 <_printf_float+0x1ec>
 8009706:	f04f 0800 	mov.w	r8, #0
 800970a:	f104 0a1a 	add.w	sl, r4, #26
 800970e:	e7f2      	b.n	80096f6 <_printf_float+0x422>
 8009710:	2301      	movs	r3, #1
 8009712:	4642      	mov	r2, r8
 8009714:	e7df      	b.n	80096d6 <_printf_float+0x402>
 8009716:	2301      	movs	r3, #1
 8009718:	464a      	mov	r2, r9
 800971a:	4631      	mov	r1, r6
 800971c:	4628      	mov	r0, r5
 800971e:	47b8      	blx	r7
 8009720:	3001      	adds	r0, #1
 8009722:	f43f ae38 	beq.w	8009396 <_printf_float+0xc2>
 8009726:	f108 0801 	add.w	r8, r8, #1
 800972a:	68e3      	ldr	r3, [r4, #12]
 800972c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800972e:	1a5b      	subs	r3, r3, r1
 8009730:	4543      	cmp	r3, r8
 8009732:	dcf0      	bgt.n	8009716 <_printf_float+0x442>
 8009734:	e6fa      	b.n	800952c <_printf_float+0x258>
 8009736:	f04f 0800 	mov.w	r8, #0
 800973a:	f104 0919 	add.w	r9, r4, #25
 800973e:	e7f4      	b.n	800972a <_printf_float+0x456>

08009740 <_printf_common>:
 8009740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009744:	4616      	mov	r6, r2
 8009746:	4699      	mov	r9, r3
 8009748:	688a      	ldr	r2, [r1, #8]
 800974a:	690b      	ldr	r3, [r1, #16]
 800974c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009750:	4293      	cmp	r3, r2
 8009752:	bfb8      	it	lt
 8009754:	4613      	movlt	r3, r2
 8009756:	6033      	str	r3, [r6, #0]
 8009758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800975c:	4607      	mov	r7, r0
 800975e:	460c      	mov	r4, r1
 8009760:	b10a      	cbz	r2, 8009766 <_printf_common+0x26>
 8009762:	3301      	adds	r3, #1
 8009764:	6033      	str	r3, [r6, #0]
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	0699      	lsls	r1, r3, #26
 800976a:	bf42      	ittt	mi
 800976c:	6833      	ldrmi	r3, [r6, #0]
 800976e:	3302      	addmi	r3, #2
 8009770:	6033      	strmi	r3, [r6, #0]
 8009772:	6825      	ldr	r5, [r4, #0]
 8009774:	f015 0506 	ands.w	r5, r5, #6
 8009778:	d106      	bne.n	8009788 <_printf_common+0x48>
 800977a:	f104 0a19 	add.w	sl, r4, #25
 800977e:	68e3      	ldr	r3, [r4, #12]
 8009780:	6832      	ldr	r2, [r6, #0]
 8009782:	1a9b      	subs	r3, r3, r2
 8009784:	42ab      	cmp	r3, r5
 8009786:	dc26      	bgt.n	80097d6 <_printf_common+0x96>
 8009788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800978c:	1e13      	subs	r3, r2, #0
 800978e:	6822      	ldr	r2, [r4, #0]
 8009790:	bf18      	it	ne
 8009792:	2301      	movne	r3, #1
 8009794:	0692      	lsls	r2, r2, #26
 8009796:	d42b      	bmi.n	80097f0 <_printf_common+0xb0>
 8009798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800979c:	4649      	mov	r1, r9
 800979e:	4638      	mov	r0, r7
 80097a0:	47c0      	blx	r8
 80097a2:	3001      	adds	r0, #1
 80097a4:	d01e      	beq.n	80097e4 <_printf_common+0xa4>
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	68e5      	ldr	r5, [r4, #12]
 80097aa:	6832      	ldr	r2, [r6, #0]
 80097ac:	f003 0306 	and.w	r3, r3, #6
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	bf08      	it	eq
 80097b4:	1aad      	subeq	r5, r5, r2
 80097b6:	68a3      	ldr	r3, [r4, #8]
 80097b8:	6922      	ldr	r2, [r4, #16]
 80097ba:	bf0c      	ite	eq
 80097bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097c0:	2500      	movne	r5, #0
 80097c2:	4293      	cmp	r3, r2
 80097c4:	bfc4      	itt	gt
 80097c6:	1a9b      	subgt	r3, r3, r2
 80097c8:	18ed      	addgt	r5, r5, r3
 80097ca:	2600      	movs	r6, #0
 80097cc:	341a      	adds	r4, #26
 80097ce:	42b5      	cmp	r5, r6
 80097d0:	d11a      	bne.n	8009808 <_printf_common+0xc8>
 80097d2:	2000      	movs	r0, #0
 80097d4:	e008      	b.n	80097e8 <_printf_common+0xa8>
 80097d6:	2301      	movs	r3, #1
 80097d8:	4652      	mov	r2, sl
 80097da:	4649      	mov	r1, r9
 80097dc:	4638      	mov	r0, r7
 80097de:	47c0      	blx	r8
 80097e0:	3001      	adds	r0, #1
 80097e2:	d103      	bne.n	80097ec <_printf_common+0xac>
 80097e4:	f04f 30ff 	mov.w	r0, #4294967295
 80097e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ec:	3501      	adds	r5, #1
 80097ee:	e7c6      	b.n	800977e <_printf_common+0x3e>
 80097f0:	18e1      	adds	r1, r4, r3
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	2030      	movs	r0, #48	; 0x30
 80097f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097fa:	4422      	add	r2, r4
 80097fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009804:	3302      	adds	r3, #2
 8009806:	e7c7      	b.n	8009798 <_printf_common+0x58>
 8009808:	2301      	movs	r3, #1
 800980a:	4622      	mov	r2, r4
 800980c:	4649      	mov	r1, r9
 800980e:	4638      	mov	r0, r7
 8009810:	47c0      	blx	r8
 8009812:	3001      	adds	r0, #1
 8009814:	d0e6      	beq.n	80097e4 <_printf_common+0xa4>
 8009816:	3601      	adds	r6, #1
 8009818:	e7d9      	b.n	80097ce <_printf_common+0x8e>
	...

0800981c <_printf_i>:
 800981c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009820:	7e0f      	ldrb	r7, [r1, #24]
 8009822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009824:	2f78      	cmp	r7, #120	; 0x78
 8009826:	4691      	mov	r9, r2
 8009828:	4680      	mov	r8, r0
 800982a:	460c      	mov	r4, r1
 800982c:	469a      	mov	sl, r3
 800982e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009832:	d807      	bhi.n	8009844 <_printf_i+0x28>
 8009834:	2f62      	cmp	r7, #98	; 0x62
 8009836:	d80a      	bhi.n	800984e <_printf_i+0x32>
 8009838:	2f00      	cmp	r7, #0
 800983a:	f000 80d8 	beq.w	80099ee <_printf_i+0x1d2>
 800983e:	2f58      	cmp	r7, #88	; 0x58
 8009840:	f000 80a3 	beq.w	800998a <_printf_i+0x16e>
 8009844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800984c:	e03a      	b.n	80098c4 <_printf_i+0xa8>
 800984e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009852:	2b15      	cmp	r3, #21
 8009854:	d8f6      	bhi.n	8009844 <_printf_i+0x28>
 8009856:	a101      	add	r1, pc, #4	; (adr r1, 800985c <_printf_i+0x40>)
 8009858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800985c:	080098b5 	.word	0x080098b5
 8009860:	080098c9 	.word	0x080098c9
 8009864:	08009845 	.word	0x08009845
 8009868:	08009845 	.word	0x08009845
 800986c:	08009845 	.word	0x08009845
 8009870:	08009845 	.word	0x08009845
 8009874:	080098c9 	.word	0x080098c9
 8009878:	08009845 	.word	0x08009845
 800987c:	08009845 	.word	0x08009845
 8009880:	08009845 	.word	0x08009845
 8009884:	08009845 	.word	0x08009845
 8009888:	080099d5 	.word	0x080099d5
 800988c:	080098f9 	.word	0x080098f9
 8009890:	080099b7 	.word	0x080099b7
 8009894:	08009845 	.word	0x08009845
 8009898:	08009845 	.word	0x08009845
 800989c:	080099f7 	.word	0x080099f7
 80098a0:	08009845 	.word	0x08009845
 80098a4:	080098f9 	.word	0x080098f9
 80098a8:	08009845 	.word	0x08009845
 80098ac:	08009845 	.word	0x08009845
 80098b0:	080099bf 	.word	0x080099bf
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	1d1a      	adds	r2, r3, #4
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	602a      	str	r2, [r5, #0]
 80098bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098c4:	2301      	movs	r3, #1
 80098c6:	e0a3      	b.n	8009a10 <_printf_i+0x1f4>
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	6829      	ldr	r1, [r5, #0]
 80098cc:	0606      	lsls	r6, r0, #24
 80098ce:	f101 0304 	add.w	r3, r1, #4
 80098d2:	d50a      	bpl.n	80098ea <_printf_i+0xce>
 80098d4:	680e      	ldr	r6, [r1, #0]
 80098d6:	602b      	str	r3, [r5, #0]
 80098d8:	2e00      	cmp	r6, #0
 80098da:	da03      	bge.n	80098e4 <_printf_i+0xc8>
 80098dc:	232d      	movs	r3, #45	; 0x2d
 80098de:	4276      	negs	r6, r6
 80098e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098e4:	485e      	ldr	r0, [pc, #376]	; (8009a60 <_printf_i+0x244>)
 80098e6:	230a      	movs	r3, #10
 80098e8:	e019      	b.n	800991e <_printf_i+0x102>
 80098ea:	680e      	ldr	r6, [r1, #0]
 80098ec:	602b      	str	r3, [r5, #0]
 80098ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098f2:	bf18      	it	ne
 80098f4:	b236      	sxthne	r6, r6
 80098f6:	e7ef      	b.n	80098d8 <_printf_i+0xbc>
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	6820      	ldr	r0, [r4, #0]
 80098fc:	1d19      	adds	r1, r3, #4
 80098fe:	6029      	str	r1, [r5, #0]
 8009900:	0601      	lsls	r1, r0, #24
 8009902:	d501      	bpl.n	8009908 <_printf_i+0xec>
 8009904:	681e      	ldr	r6, [r3, #0]
 8009906:	e002      	b.n	800990e <_printf_i+0xf2>
 8009908:	0646      	lsls	r6, r0, #25
 800990a:	d5fb      	bpl.n	8009904 <_printf_i+0xe8>
 800990c:	881e      	ldrh	r6, [r3, #0]
 800990e:	4854      	ldr	r0, [pc, #336]	; (8009a60 <_printf_i+0x244>)
 8009910:	2f6f      	cmp	r7, #111	; 0x6f
 8009912:	bf0c      	ite	eq
 8009914:	2308      	moveq	r3, #8
 8009916:	230a      	movne	r3, #10
 8009918:	2100      	movs	r1, #0
 800991a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800991e:	6865      	ldr	r5, [r4, #4]
 8009920:	60a5      	str	r5, [r4, #8]
 8009922:	2d00      	cmp	r5, #0
 8009924:	bfa2      	ittt	ge
 8009926:	6821      	ldrge	r1, [r4, #0]
 8009928:	f021 0104 	bicge.w	r1, r1, #4
 800992c:	6021      	strge	r1, [r4, #0]
 800992e:	b90e      	cbnz	r6, 8009934 <_printf_i+0x118>
 8009930:	2d00      	cmp	r5, #0
 8009932:	d04d      	beq.n	80099d0 <_printf_i+0x1b4>
 8009934:	4615      	mov	r5, r2
 8009936:	fbb6 f1f3 	udiv	r1, r6, r3
 800993a:	fb03 6711 	mls	r7, r3, r1, r6
 800993e:	5dc7      	ldrb	r7, [r0, r7]
 8009940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009944:	4637      	mov	r7, r6
 8009946:	42bb      	cmp	r3, r7
 8009948:	460e      	mov	r6, r1
 800994a:	d9f4      	bls.n	8009936 <_printf_i+0x11a>
 800994c:	2b08      	cmp	r3, #8
 800994e:	d10b      	bne.n	8009968 <_printf_i+0x14c>
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	07de      	lsls	r6, r3, #31
 8009954:	d508      	bpl.n	8009968 <_printf_i+0x14c>
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	6861      	ldr	r1, [r4, #4]
 800995a:	4299      	cmp	r1, r3
 800995c:	bfde      	ittt	le
 800995e:	2330      	movle	r3, #48	; 0x30
 8009960:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009964:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009968:	1b52      	subs	r2, r2, r5
 800996a:	6122      	str	r2, [r4, #16]
 800996c:	f8cd a000 	str.w	sl, [sp]
 8009970:	464b      	mov	r3, r9
 8009972:	aa03      	add	r2, sp, #12
 8009974:	4621      	mov	r1, r4
 8009976:	4640      	mov	r0, r8
 8009978:	f7ff fee2 	bl	8009740 <_printf_common>
 800997c:	3001      	adds	r0, #1
 800997e:	d14c      	bne.n	8009a1a <_printf_i+0x1fe>
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	b004      	add	sp, #16
 8009986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998a:	4835      	ldr	r0, [pc, #212]	; (8009a60 <_printf_i+0x244>)
 800998c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009990:	6829      	ldr	r1, [r5, #0]
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	f851 6b04 	ldr.w	r6, [r1], #4
 8009998:	6029      	str	r1, [r5, #0]
 800999a:	061d      	lsls	r5, r3, #24
 800999c:	d514      	bpl.n	80099c8 <_printf_i+0x1ac>
 800999e:	07df      	lsls	r7, r3, #31
 80099a0:	bf44      	itt	mi
 80099a2:	f043 0320 	orrmi.w	r3, r3, #32
 80099a6:	6023      	strmi	r3, [r4, #0]
 80099a8:	b91e      	cbnz	r6, 80099b2 <_printf_i+0x196>
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	f023 0320 	bic.w	r3, r3, #32
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	2310      	movs	r3, #16
 80099b4:	e7b0      	b.n	8009918 <_printf_i+0xfc>
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	f043 0320 	orr.w	r3, r3, #32
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	2378      	movs	r3, #120	; 0x78
 80099c0:	4828      	ldr	r0, [pc, #160]	; (8009a64 <_printf_i+0x248>)
 80099c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099c6:	e7e3      	b.n	8009990 <_printf_i+0x174>
 80099c8:	0659      	lsls	r1, r3, #25
 80099ca:	bf48      	it	mi
 80099cc:	b2b6      	uxthmi	r6, r6
 80099ce:	e7e6      	b.n	800999e <_printf_i+0x182>
 80099d0:	4615      	mov	r5, r2
 80099d2:	e7bb      	b.n	800994c <_printf_i+0x130>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	6826      	ldr	r6, [r4, #0]
 80099d8:	6961      	ldr	r1, [r4, #20]
 80099da:	1d18      	adds	r0, r3, #4
 80099dc:	6028      	str	r0, [r5, #0]
 80099de:	0635      	lsls	r5, r6, #24
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	d501      	bpl.n	80099e8 <_printf_i+0x1cc>
 80099e4:	6019      	str	r1, [r3, #0]
 80099e6:	e002      	b.n	80099ee <_printf_i+0x1d2>
 80099e8:	0670      	lsls	r0, r6, #25
 80099ea:	d5fb      	bpl.n	80099e4 <_printf_i+0x1c8>
 80099ec:	8019      	strh	r1, [r3, #0]
 80099ee:	2300      	movs	r3, #0
 80099f0:	6123      	str	r3, [r4, #16]
 80099f2:	4615      	mov	r5, r2
 80099f4:	e7ba      	b.n	800996c <_printf_i+0x150>
 80099f6:	682b      	ldr	r3, [r5, #0]
 80099f8:	1d1a      	adds	r2, r3, #4
 80099fa:	602a      	str	r2, [r5, #0]
 80099fc:	681d      	ldr	r5, [r3, #0]
 80099fe:	6862      	ldr	r2, [r4, #4]
 8009a00:	2100      	movs	r1, #0
 8009a02:	4628      	mov	r0, r5
 8009a04:	f7f6 fbd4 	bl	80001b0 <memchr>
 8009a08:	b108      	cbz	r0, 8009a0e <_printf_i+0x1f2>
 8009a0a:	1b40      	subs	r0, r0, r5
 8009a0c:	6060      	str	r0, [r4, #4]
 8009a0e:	6863      	ldr	r3, [r4, #4]
 8009a10:	6123      	str	r3, [r4, #16]
 8009a12:	2300      	movs	r3, #0
 8009a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a18:	e7a8      	b.n	800996c <_printf_i+0x150>
 8009a1a:	6923      	ldr	r3, [r4, #16]
 8009a1c:	462a      	mov	r2, r5
 8009a1e:	4649      	mov	r1, r9
 8009a20:	4640      	mov	r0, r8
 8009a22:	47d0      	blx	sl
 8009a24:	3001      	adds	r0, #1
 8009a26:	d0ab      	beq.n	8009980 <_printf_i+0x164>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	079b      	lsls	r3, r3, #30
 8009a2c:	d413      	bmi.n	8009a56 <_printf_i+0x23a>
 8009a2e:	68e0      	ldr	r0, [r4, #12]
 8009a30:	9b03      	ldr	r3, [sp, #12]
 8009a32:	4298      	cmp	r0, r3
 8009a34:	bfb8      	it	lt
 8009a36:	4618      	movlt	r0, r3
 8009a38:	e7a4      	b.n	8009984 <_printf_i+0x168>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	4649      	mov	r1, r9
 8009a40:	4640      	mov	r0, r8
 8009a42:	47d0      	blx	sl
 8009a44:	3001      	adds	r0, #1
 8009a46:	d09b      	beq.n	8009980 <_printf_i+0x164>
 8009a48:	3501      	adds	r5, #1
 8009a4a:	68e3      	ldr	r3, [r4, #12]
 8009a4c:	9903      	ldr	r1, [sp, #12]
 8009a4e:	1a5b      	subs	r3, r3, r1
 8009a50:	42ab      	cmp	r3, r5
 8009a52:	dcf2      	bgt.n	8009a3a <_printf_i+0x21e>
 8009a54:	e7eb      	b.n	8009a2e <_printf_i+0x212>
 8009a56:	2500      	movs	r5, #0
 8009a58:	f104 0619 	add.w	r6, r4, #25
 8009a5c:	e7f5      	b.n	8009a4a <_printf_i+0x22e>
 8009a5e:	bf00      	nop
 8009a60:	0800c64a 	.word	0x0800c64a
 8009a64:	0800c65b 	.word	0x0800c65b

08009a68 <iprintf>:
 8009a68:	b40f      	push	{r0, r1, r2, r3}
 8009a6a:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <iprintf+0x2c>)
 8009a6c:	b513      	push	{r0, r1, r4, lr}
 8009a6e:	681c      	ldr	r4, [r3, #0]
 8009a70:	b124      	cbz	r4, 8009a7c <iprintf+0x14>
 8009a72:	69a3      	ldr	r3, [r4, #24]
 8009a74:	b913      	cbnz	r3, 8009a7c <iprintf+0x14>
 8009a76:	4620      	mov	r0, r4
 8009a78:	f001 f9a2 	bl	800adc0 <__sinit>
 8009a7c:	ab05      	add	r3, sp, #20
 8009a7e:	9a04      	ldr	r2, [sp, #16]
 8009a80:	68a1      	ldr	r1, [r4, #8]
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	4620      	mov	r0, r4
 8009a86:	f001 ffd1 	bl	800ba2c <_vfiprintf_r>
 8009a8a:	b002      	add	sp, #8
 8009a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a90:	b004      	add	sp, #16
 8009a92:	4770      	bx	lr
 8009a94:	20000010 	.word	0x20000010

08009a98 <_puts_r>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	460e      	mov	r6, r1
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	b118      	cbz	r0, 8009aa8 <_puts_r+0x10>
 8009aa0:	6983      	ldr	r3, [r0, #24]
 8009aa2:	b90b      	cbnz	r3, 8009aa8 <_puts_r+0x10>
 8009aa4:	f001 f98c 	bl	800adc0 <__sinit>
 8009aa8:	69ab      	ldr	r3, [r5, #24]
 8009aaa:	68ac      	ldr	r4, [r5, #8]
 8009aac:	b913      	cbnz	r3, 8009ab4 <_puts_r+0x1c>
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f001 f986 	bl	800adc0 <__sinit>
 8009ab4:	4b2c      	ldr	r3, [pc, #176]	; (8009b68 <_puts_r+0xd0>)
 8009ab6:	429c      	cmp	r4, r3
 8009ab8:	d120      	bne.n	8009afc <_puts_r+0x64>
 8009aba:	686c      	ldr	r4, [r5, #4]
 8009abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009abe:	07db      	lsls	r3, r3, #31
 8009ac0:	d405      	bmi.n	8009ace <_puts_r+0x36>
 8009ac2:	89a3      	ldrh	r3, [r4, #12]
 8009ac4:	0598      	lsls	r0, r3, #22
 8009ac6:	d402      	bmi.n	8009ace <_puts_r+0x36>
 8009ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aca:	f001 fa1c 	bl	800af06 <__retarget_lock_acquire_recursive>
 8009ace:	89a3      	ldrh	r3, [r4, #12]
 8009ad0:	0719      	lsls	r1, r3, #28
 8009ad2:	d51d      	bpl.n	8009b10 <_puts_r+0x78>
 8009ad4:	6923      	ldr	r3, [r4, #16]
 8009ad6:	b1db      	cbz	r3, 8009b10 <_puts_r+0x78>
 8009ad8:	3e01      	subs	r6, #1
 8009ada:	68a3      	ldr	r3, [r4, #8]
 8009adc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	60a3      	str	r3, [r4, #8]
 8009ae4:	bb39      	cbnz	r1, 8009b36 <_puts_r+0x9e>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	da38      	bge.n	8009b5c <_puts_r+0xc4>
 8009aea:	4622      	mov	r2, r4
 8009aec:	210a      	movs	r1, #10
 8009aee:	4628      	mov	r0, r5
 8009af0:	f000 f912 	bl	8009d18 <__swbuf_r>
 8009af4:	3001      	adds	r0, #1
 8009af6:	d011      	beq.n	8009b1c <_puts_r+0x84>
 8009af8:	250a      	movs	r5, #10
 8009afa:	e011      	b.n	8009b20 <_puts_r+0x88>
 8009afc:	4b1b      	ldr	r3, [pc, #108]	; (8009b6c <_puts_r+0xd4>)
 8009afe:	429c      	cmp	r4, r3
 8009b00:	d101      	bne.n	8009b06 <_puts_r+0x6e>
 8009b02:	68ac      	ldr	r4, [r5, #8]
 8009b04:	e7da      	b.n	8009abc <_puts_r+0x24>
 8009b06:	4b1a      	ldr	r3, [pc, #104]	; (8009b70 <_puts_r+0xd8>)
 8009b08:	429c      	cmp	r4, r3
 8009b0a:	bf08      	it	eq
 8009b0c:	68ec      	ldreq	r4, [r5, #12]
 8009b0e:	e7d5      	b.n	8009abc <_puts_r+0x24>
 8009b10:	4621      	mov	r1, r4
 8009b12:	4628      	mov	r0, r5
 8009b14:	f000 f952 	bl	8009dbc <__swsetup_r>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	d0dd      	beq.n	8009ad8 <_puts_r+0x40>
 8009b1c:	f04f 35ff 	mov.w	r5, #4294967295
 8009b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b22:	07da      	lsls	r2, r3, #31
 8009b24:	d405      	bmi.n	8009b32 <_puts_r+0x9a>
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	059b      	lsls	r3, r3, #22
 8009b2a:	d402      	bmi.n	8009b32 <_puts_r+0x9a>
 8009b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b2e:	f001 f9eb 	bl	800af08 <__retarget_lock_release_recursive>
 8009b32:	4628      	mov	r0, r5
 8009b34:	bd70      	pop	{r4, r5, r6, pc}
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	da04      	bge.n	8009b44 <_puts_r+0xac>
 8009b3a:	69a2      	ldr	r2, [r4, #24]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	dc06      	bgt.n	8009b4e <_puts_r+0xb6>
 8009b40:	290a      	cmp	r1, #10
 8009b42:	d004      	beq.n	8009b4e <_puts_r+0xb6>
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	6022      	str	r2, [r4, #0]
 8009b4a:	7019      	strb	r1, [r3, #0]
 8009b4c:	e7c5      	b.n	8009ada <_puts_r+0x42>
 8009b4e:	4622      	mov	r2, r4
 8009b50:	4628      	mov	r0, r5
 8009b52:	f000 f8e1 	bl	8009d18 <__swbuf_r>
 8009b56:	3001      	adds	r0, #1
 8009b58:	d1bf      	bne.n	8009ada <_puts_r+0x42>
 8009b5a:	e7df      	b.n	8009b1c <_puts_r+0x84>
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	250a      	movs	r5, #10
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	6022      	str	r2, [r4, #0]
 8009b64:	701d      	strb	r5, [r3, #0]
 8009b66:	e7db      	b.n	8009b20 <_puts_r+0x88>
 8009b68:	0800c820 	.word	0x0800c820
 8009b6c:	0800c840 	.word	0x0800c840
 8009b70:	0800c800 	.word	0x0800c800

08009b74 <puts>:
 8009b74:	4b02      	ldr	r3, [pc, #8]	; (8009b80 <puts+0xc>)
 8009b76:	4601      	mov	r1, r0
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	f7ff bf8d 	b.w	8009a98 <_puts_r>
 8009b7e:	bf00      	nop
 8009b80:	20000010 	.word	0x20000010

08009b84 <_sbrk_r>:
 8009b84:	b538      	push	{r3, r4, r5, lr}
 8009b86:	4d06      	ldr	r5, [pc, #24]	; (8009ba0 <_sbrk_r+0x1c>)
 8009b88:	2300      	movs	r3, #0
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	4608      	mov	r0, r1
 8009b8e:	602b      	str	r3, [r5, #0]
 8009b90:	f7f8 fac0 	bl	8002114 <_sbrk>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d102      	bne.n	8009b9e <_sbrk_r+0x1a>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	b103      	cbz	r3, 8009b9e <_sbrk_r+0x1a>
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ba0:	2000053c 	.word	0x2000053c

08009ba4 <siprintf>:
 8009ba4:	b40e      	push	{r1, r2, r3}
 8009ba6:	b500      	push	{lr}
 8009ba8:	b09c      	sub	sp, #112	; 0x70
 8009baa:	ab1d      	add	r3, sp, #116	; 0x74
 8009bac:	9002      	str	r0, [sp, #8]
 8009bae:	9006      	str	r0, [sp, #24]
 8009bb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bb4:	4809      	ldr	r0, [pc, #36]	; (8009bdc <siprintf+0x38>)
 8009bb6:	9107      	str	r1, [sp, #28]
 8009bb8:	9104      	str	r1, [sp, #16]
 8009bba:	4909      	ldr	r1, [pc, #36]	; (8009be0 <siprintf+0x3c>)
 8009bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc0:	9105      	str	r1, [sp, #20]
 8009bc2:	6800      	ldr	r0, [r0, #0]
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	a902      	add	r1, sp, #8
 8009bc8:	f001 fe06 	bl	800b7d8 <_svfiprintf_r>
 8009bcc:	9b02      	ldr	r3, [sp, #8]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	701a      	strb	r2, [r3, #0]
 8009bd2:	b01c      	add	sp, #112	; 0x70
 8009bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bd8:	b003      	add	sp, #12
 8009bda:	4770      	bx	lr
 8009bdc:	20000010 	.word	0x20000010
 8009be0:	ffff0208 	.word	0xffff0208

08009be4 <strchr>:
 8009be4:	b2c9      	uxtb	r1, r1
 8009be6:	4603      	mov	r3, r0
 8009be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bec:	b11a      	cbz	r2, 8009bf6 <strchr+0x12>
 8009bee:	428a      	cmp	r2, r1
 8009bf0:	d1f9      	bne.n	8009be6 <strchr+0x2>
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	4770      	bx	lr
 8009bf6:	2900      	cmp	r1, #0
 8009bf8:	bf18      	it	ne
 8009bfa:	2300      	movne	r3, #0
 8009bfc:	e7f9      	b.n	8009bf2 <strchr+0xe>
	...

08009c00 <_strtol_l.constprop.0>:
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c06:	d001      	beq.n	8009c0c <_strtol_l.constprop.0+0xc>
 8009c08:	2b24      	cmp	r3, #36	; 0x24
 8009c0a:	d906      	bls.n	8009c1a <_strtol_l.constprop.0+0x1a>
 8009c0c:	f7ff f99a 	bl	8008f44 <__errno>
 8009c10:	2316      	movs	r3, #22
 8009c12:	6003      	str	r3, [r0, #0]
 8009c14:	2000      	movs	r0, #0
 8009c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009d00 <_strtol_l.constprop.0+0x100>
 8009c1e:	460d      	mov	r5, r1
 8009c20:	462e      	mov	r6, r5
 8009c22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c26:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009c2a:	f017 0708 	ands.w	r7, r7, #8
 8009c2e:	d1f7      	bne.n	8009c20 <_strtol_l.constprop.0+0x20>
 8009c30:	2c2d      	cmp	r4, #45	; 0x2d
 8009c32:	d132      	bne.n	8009c9a <_strtol_l.constprop.0+0x9a>
 8009c34:	782c      	ldrb	r4, [r5, #0]
 8009c36:	2701      	movs	r7, #1
 8009c38:	1cb5      	adds	r5, r6, #2
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d05b      	beq.n	8009cf6 <_strtol_l.constprop.0+0xf6>
 8009c3e:	2b10      	cmp	r3, #16
 8009c40:	d109      	bne.n	8009c56 <_strtol_l.constprop.0+0x56>
 8009c42:	2c30      	cmp	r4, #48	; 0x30
 8009c44:	d107      	bne.n	8009c56 <_strtol_l.constprop.0+0x56>
 8009c46:	782c      	ldrb	r4, [r5, #0]
 8009c48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009c4c:	2c58      	cmp	r4, #88	; 0x58
 8009c4e:	d14d      	bne.n	8009cec <_strtol_l.constprop.0+0xec>
 8009c50:	786c      	ldrb	r4, [r5, #1]
 8009c52:	2310      	movs	r3, #16
 8009c54:	3502      	adds	r5, #2
 8009c56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009c5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c5e:	f04f 0c00 	mov.w	ip, #0
 8009c62:	fbb8 f9f3 	udiv	r9, r8, r3
 8009c66:	4666      	mov	r6, ip
 8009c68:	fb03 8a19 	mls	sl, r3, r9, r8
 8009c6c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009c70:	f1be 0f09 	cmp.w	lr, #9
 8009c74:	d816      	bhi.n	8009ca4 <_strtol_l.constprop.0+0xa4>
 8009c76:	4674      	mov	r4, lr
 8009c78:	42a3      	cmp	r3, r4
 8009c7a:	dd24      	ble.n	8009cc6 <_strtol_l.constprop.0+0xc6>
 8009c7c:	f1bc 0f00 	cmp.w	ip, #0
 8009c80:	db1e      	blt.n	8009cc0 <_strtol_l.constprop.0+0xc0>
 8009c82:	45b1      	cmp	r9, r6
 8009c84:	d31c      	bcc.n	8009cc0 <_strtol_l.constprop.0+0xc0>
 8009c86:	d101      	bne.n	8009c8c <_strtol_l.constprop.0+0x8c>
 8009c88:	45a2      	cmp	sl, r4
 8009c8a:	db19      	blt.n	8009cc0 <_strtol_l.constprop.0+0xc0>
 8009c8c:	fb06 4603 	mla	r6, r6, r3, r4
 8009c90:	f04f 0c01 	mov.w	ip, #1
 8009c94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c98:	e7e8      	b.n	8009c6c <_strtol_l.constprop.0+0x6c>
 8009c9a:	2c2b      	cmp	r4, #43	; 0x2b
 8009c9c:	bf04      	itt	eq
 8009c9e:	782c      	ldrbeq	r4, [r5, #0]
 8009ca0:	1cb5      	addeq	r5, r6, #2
 8009ca2:	e7ca      	b.n	8009c3a <_strtol_l.constprop.0+0x3a>
 8009ca4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009ca8:	f1be 0f19 	cmp.w	lr, #25
 8009cac:	d801      	bhi.n	8009cb2 <_strtol_l.constprop.0+0xb2>
 8009cae:	3c37      	subs	r4, #55	; 0x37
 8009cb0:	e7e2      	b.n	8009c78 <_strtol_l.constprop.0+0x78>
 8009cb2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009cb6:	f1be 0f19 	cmp.w	lr, #25
 8009cba:	d804      	bhi.n	8009cc6 <_strtol_l.constprop.0+0xc6>
 8009cbc:	3c57      	subs	r4, #87	; 0x57
 8009cbe:	e7db      	b.n	8009c78 <_strtol_l.constprop.0+0x78>
 8009cc0:	f04f 3cff 	mov.w	ip, #4294967295
 8009cc4:	e7e6      	b.n	8009c94 <_strtol_l.constprop.0+0x94>
 8009cc6:	f1bc 0f00 	cmp.w	ip, #0
 8009cca:	da05      	bge.n	8009cd8 <_strtol_l.constprop.0+0xd8>
 8009ccc:	2322      	movs	r3, #34	; 0x22
 8009cce:	6003      	str	r3, [r0, #0]
 8009cd0:	4646      	mov	r6, r8
 8009cd2:	b942      	cbnz	r2, 8009ce6 <_strtol_l.constprop.0+0xe6>
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	e79e      	b.n	8009c16 <_strtol_l.constprop.0+0x16>
 8009cd8:	b107      	cbz	r7, 8009cdc <_strtol_l.constprop.0+0xdc>
 8009cda:	4276      	negs	r6, r6
 8009cdc:	2a00      	cmp	r2, #0
 8009cde:	d0f9      	beq.n	8009cd4 <_strtol_l.constprop.0+0xd4>
 8009ce0:	f1bc 0f00 	cmp.w	ip, #0
 8009ce4:	d000      	beq.n	8009ce8 <_strtol_l.constprop.0+0xe8>
 8009ce6:	1e69      	subs	r1, r5, #1
 8009ce8:	6011      	str	r1, [r2, #0]
 8009cea:	e7f3      	b.n	8009cd4 <_strtol_l.constprop.0+0xd4>
 8009cec:	2430      	movs	r4, #48	; 0x30
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1b1      	bne.n	8009c56 <_strtol_l.constprop.0+0x56>
 8009cf2:	2308      	movs	r3, #8
 8009cf4:	e7af      	b.n	8009c56 <_strtol_l.constprop.0+0x56>
 8009cf6:	2c30      	cmp	r4, #48	; 0x30
 8009cf8:	d0a5      	beq.n	8009c46 <_strtol_l.constprop.0+0x46>
 8009cfa:	230a      	movs	r3, #10
 8009cfc:	e7ab      	b.n	8009c56 <_strtol_l.constprop.0+0x56>
 8009cfe:	bf00      	nop
 8009d00:	0800c66d 	.word	0x0800c66d

08009d04 <strtol>:
 8009d04:	4613      	mov	r3, r2
 8009d06:	460a      	mov	r2, r1
 8009d08:	4601      	mov	r1, r0
 8009d0a:	4802      	ldr	r0, [pc, #8]	; (8009d14 <strtol+0x10>)
 8009d0c:	6800      	ldr	r0, [r0, #0]
 8009d0e:	f7ff bf77 	b.w	8009c00 <_strtol_l.constprop.0>
 8009d12:	bf00      	nop
 8009d14:	20000010 	.word	0x20000010

08009d18 <__swbuf_r>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	460e      	mov	r6, r1
 8009d1c:	4614      	mov	r4, r2
 8009d1e:	4605      	mov	r5, r0
 8009d20:	b118      	cbz	r0, 8009d2a <__swbuf_r+0x12>
 8009d22:	6983      	ldr	r3, [r0, #24]
 8009d24:	b90b      	cbnz	r3, 8009d2a <__swbuf_r+0x12>
 8009d26:	f001 f84b 	bl	800adc0 <__sinit>
 8009d2a:	4b21      	ldr	r3, [pc, #132]	; (8009db0 <__swbuf_r+0x98>)
 8009d2c:	429c      	cmp	r4, r3
 8009d2e:	d12b      	bne.n	8009d88 <__swbuf_r+0x70>
 8009d30:	686c      	ldr	r4, [r5, #4]
 8009d32:	69a3      	ldr	r3, [r4, #24]
 8009d34:	60a3      	str	r3, [r4, #8]
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	071a      	lsls	r2, r3, #28
 8009d3a:	d52f      	bpl.n	8009d9c <__swbuf_r+0x84>
 8009d3c:	6923      	ldr	r3, [r4, #16]
 8009d3e:	b36b      	cbz	r3, 8009d9c <__swbuf_r+0x84>
 8009d40:	6923      	ldr	r3, [r4, #16]
 8009d42:	6820      	ldr	r0, [r4, #0]
 8009d44:	1ac0      	subs	r0, r0, r3
 8009d46:	6963      	ldr	r3, [r4, #20]
 8009d48:	b2f6      	uxtb	r6, r6
 8009d4a:	4283      	cmp	r3, r0
 8009d4c:	4637      	mov	r7, r6
 8009d4e:	dc04      	bgt.n	8009d5a <__swbuf_r+0x42>
 8009d50:	4621      	mov	r1, r4
 8009d52:	4628      	mov	r0, r5
 8009d54:	f000 ffa0 	bl	800ac98 <_fflush_r>
 8009d58:	bb30      	cbnz	r0, 8009da8 <__swbuf_r+0x90>
 8009d5a:	68a3      	ldr	r3, [r4, #8]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	60a3      	str	r3, [r4, #8]
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	6022      	str	r2, [r4, #0]
 8009d66:	701e      	strb	r6, [r3, #0]
 8009d68:	6963      	ldr	r3, [r4, #20]
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	4283      	cmp	r3, r0
 8009d6e:	d004      	beq.n	8009d7a <__swbuf_r+0x62>
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	07db      	lsls	r3, r3, #31
 8009d74:	d506      	bpl.n	8009d84 <__swbuf_r+0x6c>
 8009d76:	2e0a      	cmp	r6, #10
 8009d78:	d104      	bne.n	8009d84 <__swbuf_r+0x6c>
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f000 ff8b 	bl	800ac98 <_fflush_r>
 8009d82:	b988      	cbnz	r0, 8009da8 <__swbuf_r+0x90>
 8009d84:	4638      	mov	r0, r7
 8009d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d88:	4b0a      	ldr	r3, [pc, #40]	; (8009db4 <__swbuf_r+0x9c>)
 8009d8a:	429c      	cmp	r4, r3
 8009d8c:	d101      	bne.n	8009d92 <__swbuf_r+0x7a>
 8009d8e:	68ac      	ldr	r4, [r5, #8]
 8009d90:	e7cf      	b.n	8009d32 <__swbuf_r+0x1a>
 8009d92:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <__swbuf_r+0xa0>)
 8009d94:	429c      	cmp	r4, r3
 8009d96:	bf08      	it	eq
 8009d98:	68ec      	ldreq	r4, [r5, #12]
 8009d9a:	e7ca      	b.n	8009d32 <__swbuf_r+0x1a>
 8009d9c:	4621      	mov	r1, r4
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f000 f80c 	bl	8009dbc <__swsetup_r>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d0cb      	beq.n	8009d40 <__swbuf_r+0x28>
 8009da8:	f04f 37ff 	mov.w	r7, #4294967295
 8009dac:	e7ea      	b.n	8009d84 <__swbuf_r+0x6c>
 8009dae:	bf00      	nop
 8009db0:	0800c820 	.word	0x0800c820
 8009db4:	0800c840 	.word	0x0800c840
 8009db8:	0800c800 	.word	0x0800c800

08009dbc <__swsetup_r>:
 8009dbc:	4b32      	ldr	r3, [pc, #200]	; (8009e88 <__swsetup_r+0xcc>)
 8009dbe:	b570      	push	{r4, r5, r6, lr}
 8009dc0:	681d      	ldr	r5, [r3, #0]
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	b125      	cbz	r5, 8009dd2 <__swsetup_r+0x16>
 8009dc8:	69ab      	ldr	r3, [r5, #24]
 8009dca:	b913      	cbnz	r3, 8009dd2 <__swsetup_r+0x16>
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f000 fff7 	bl	800adc0 <__sinit>
 8009dd2:	4b2e      	ldr	r3, [pc, #184]	; (8009e8c <__swsetup_r+0xd0>)
 8009dd4:	429c      	cmp	r4, r3
 8009dd6:	d10f      	bne.n	8009df8 <__swsetup_r+0x3c>
 8009dd8:	686c      	ldr	r4, [r5, #4]
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009de0:	0719      	lsls	r1, r3, #28
 8009de2:	d42c      	bmi.n	8009e3e <__swsetup_r+0x82>
 8009de4:	06dd      	lsls	r5, r3, #27
 8009de6:	d411      	bmi.n	8009e0c <__swsetup_r+0x50>
 8009de8:	2309      	movs	r3, #9
 8009dea:	6033      	str	r3, [r6, #0]
 8009dec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009df0:	81a3      	strh	r3, [r4, #12]
 8009df2:	f04f 30ff 	mov.w	r0, #4294967295
 8009df6:	e03e      	b.n	8009e76 <__swsetup_r+0xba>
 8009df8:	4b25      	ldr	r3, [pc, #148]	; (8009e90 <__swsetup_r+0xd4>)
 8009dfa:	429c      	cmp	r4, r3
 8009dfc:	d101      	bne.n	8009e02 <__swsetup_r+0x46>
 8009dfe:	68ac      	ldr	r4, [r5, #8]
 8009e00:	e7eb      	b.n	8009dda <__swsetup_r+0x1e>
 8009e02:	4b24      	ldr	r3, [pc, #144]	; (8009e94 <__swsetup_r+0xd8>)
 8009e04:	429c      	cmp	r4, r3
 8009e06:	bf08      	it	eq
 8009e08:	68ec      	ldreq	r4, [r5, #12]
 8009e0a:	e7e6      	b.n	8009dda <__swsetup_r+0x1e>
 8009e0c:	0758      	lsls	r0, r3, #29
 8009e0e:	d512      	bpl.n	8009e36 <__swsetup_r+0x7a>
 8009e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e12:	b141      	cbz	r1, 8009e26 <__swsetup_r+0x6a>
 8009e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e18:	4299      	cmp	r1, r3
 8009e1a:	d002      	beq.n	8009e22 <__swsetup_r+0x66>
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f7ff f8d9 	bl	8008fd4 <_free_r>
 8009e22:	2300      	movs	r3, #0
 8009e24:	6363      	str	r3, [r4, #52]	; 0x34
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e2c:	81a3      	strh	r3, [r4, #12]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	6063      	str	r3, [r4, #4]
 8009e32:	6923      	ldr	r3, [r4, #16]
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	f043 0308 	orr.w	r3, r3, #8
 8009e3c:	81a3      	strh	r3, [r4, #12]
 8009e3e:	6923      	ldr	r3, [r4, #16]
 8009e40:	b94b      	cbnz	r3, 8009e56 <__swsetup_r+0x9a>
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e4c:	d003      	beq.n	8009e56 <__swsetup_r+0x9a>
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4630      	mov	r0, r6
 8009e52:	f001 f87f 	bl	800af54 <__smakebuf_r>
 8009e56:	89a0      	ldrh	r0, [r4, #12]
 8009e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e5c:	f010 0301 	ands.w	r3, r0, #1
 8009e60:	d00a      	beq.n	8009e78 <__swsetup_r+0xbc>
 8009e62:	2300      	movs	r3, #0
 8009e64:	60a3      	str	r3, [r4, #8]
 8009e66:	6963      	ldr	r3, [r4, #20]
 8009e68:	425b      	negs	r3, r3
 8009e6a:	61a3      	str	r3, [r4, #24]
 8009e6c:	6923      	ldr	r3, [r4, #16]
 8009e6e:	b943      	cbnz	r3, 8009e82 <__swsetup_r+0xc6>
 8009e70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e74:	d1ba      	bne.n	8009dec <__swsetup_r+0x30>
 8009e76:	bd70      	pop	{r4, r5, r6, pc}
 8009e78:	0781      	lsls	r1, r0, #30
 8009e7a:	bf58      	it	pl
 8009e7c:	6963      	ldrpl	r3, [r4, #20]
 8009e7e:	60a3      	str	r3, [r4, #8]
 8009e80:	e7f4      	b.n	8009e6c <__swsetup_r+0xb0>
 8009e82:	2000      	movs	r0, #0
 8009e84:	e7f7      	b.n	8009e76 <__swsetup_r+0xba>
 8009e86:	bf00      	nop
 8009e88:	20000010 	.word	0x20000010
 8009e8c:	0800c820 	.word	0x0800c820
 8009e90:	0800c840 	.word	0x0800c840
 8009e94:	0800c800 	.word	0x0800c800

08009e98 <quorem>:
 8009e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	6903      	ldr	r3, [r0, #16]
 8009e9e:	690c      	ldr	r4, [r1, #16]
 8009ea0:	42a3      	cmp	r3, r4
 8009ea2:	4607      	mov	r7, r0
 8009ea4:	f2c0 8081 	blt.w	8009faa <quorem+0x112>
 8009ea8:	3c01      	subs	r4, #1
 8009eaa:	f101 0814 	add.w	r8, r1, #20
 8009eae:	f100 0514 	add.w	r5, r0, #20
 8009eb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eb6:	9301      	str	r3, [sp, #4]
 8009eb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ebc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ec8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ecc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ed0:	d331      	bcc.n	8009f36 <quorem+0x9e>
 8009ed2:	f04f 0e00 	mov.w	lr, #0
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	46ac      	mov	ip, r5
 8009eda:	46f2      	mov	sl, lr
 8009edc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ee0:	b293      	uxth	r3, r2
 8009ee2:	fb06 e303 	mla	r3, r6, r3, lr
 8009ee6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	ebaa 0303 	sub.w	r3, sl, r3
 8009ef0:	f8dc a000 	ldr.w	sl, [ip]
 8009ef4:	0c12      	lsrs	r2, r2, #16
 8009ef6:	fa13 f38a 	uxtah	r3, r3, sl
 8009efa:	fb06 e202 	mla	r2, r6, r2, lr
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	9b00      	ldr	r3, [sp, #0]
 8009f02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f06:	b292      	uxth	r2, r2
 8009f08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f10:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f14:	4581      	cmp	r9, r0
 8009f16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f1a:	f84c 3b04 	str.w	r3, [ip], #4
 8009f1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f22:	d2db      	bcs.n	8009edc <quorem+0x44>
 8009f24:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f28:	b92b      	cbnz	r3, 8009f36 <quorem+0x9e>
 8009f2a:	9b01      	ldr	r3, [sp, #4]
 8009f2c:	3b04      	subs	r3, #4
 8009f2e:	429d      	cmp	r5, r3
 8009f30:	461a      	mov	r2, r3
 8009f32:	d32e      	bcc.n	8009f92 <quorem+0xfa>
 8009f34:	613c      	str	r4, [r7, #16]
 8009f36:	4638      	mov	r0, r7
 8009f38:	f001 fada 	bl	800b4f0 <__mcmp>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	db24      	blt.n	8009f8a <quorem+0xf2>
 8009f40:	3601      	adds	r6, #1
 8009f42:	4628      	mov	r0, r5
 8009f44:	f04f 0c00 	mov.w	ip, #0
 8009f48:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f4c:	f8d0 e000 	ldr.w	lr, [r0]
 8009f50:	b293      	uxth	r3, r2
 8009f52:	ebac 0303 	sub.w	r3, ip, r3
 8009f56:	0c12      	lsrs	r2, r2, #16
 8009f58:	fa13 f38e 	uxtah	r3, r3, lr
 8009f5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f6a:	45c1      	cmp	r9, r8
 8009f6c:	f840 3b04 	str.w	r3, [r0], #4
 8009f70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f74:	d2e8      	bcs.n	8009f48 <quorem+0xb0>
 8009f76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f7e:	b922      	cbnz	r2, 8009f8a <quorem+0xf2>
 8009f80:	3b04      	subs	r3, #4
 8009f82:	429d      	cmp	r5, r3
 8009f84:	461a      	mov	r2, r3
 8009f86:	d30a      	bcc.n	8009f9e <quorem+0x106>
 8009f88:	613c      	str	r4, [r7, #16]
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	b003      	add	sp, #12
 8009f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f92:	6812      	ldr	r2, [r2, #0]
 8009f94:	3b04      	subs	r3, #4
 8009f96:	2a00      	cmp	r2, #0
 8009f98:	d1cc      	bne.n	8009f34 <quorem+0x9c>
 8009f9a:	3c01      	subs	r4, #1
 8009f9c:	e7c7      	b.n	8009f2e <quorem+0x96>
 8009f9e:	6812      	ldr	r2, [r2, #0]
 8009fa0:	3b04      	subs	r3, #4
 8009fa2:	2a00      	cmp	r2, #0
 8009fa4:	d1f0      	bne.n	8009f88 <quorem+0xf0>
 8009fa6:	3c01      	subs	r4, #1
 8009fa8:	e7eb      	b.n	8009f82 <quorem+0xea>
 8009faa:	2000      	movs	r0, #0
 8009fac:	e7ee      	b.n	8009f8c <quorem+0xf4>
	...

08009fb0 <_dtoa_r>:
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	ed2d 8b04 	vpush	{d8-d9}
 8009fb8:	ec57 6b10 	vmov	r6, r7, d0
 8009fbc:	b093      	sub	sp, #76	; 0x4c
 8009fbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009fc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009fc4:	9106      	str	r1, [sp, #24]
 8009fc6:	ee10 aa10 	vmov	sl, s0
 8009fca:	4604      	mov	r4, r0
 8009fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8009fce:	930c      	str	r3, [sp, #48]	; 0x30
 8009fd0:	46bb      	mov	fp, r7
 8009fd2:	b975      	cbnz	r5, 8009ff2 <_dtoa_r+0x42>
 8009fd4:	2010      	movs	r0, #16
 8009fd6:	f7fe ffdf 	bl	8008f98 <malloc>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	6260      	str	r0, [r4, #36]	; 0x24
 8009fde:	b920      	cbnz	r0, 8009fea <_dtoa_r+0x3a>
 8009fe0:	4ba7      	ldr	r3, [pc, #668]	; (800a280 <_dtoa_r+0x2d0>)
 8009fe2:	21ea      	movs	r1, #234	; 0xea
 8009fe4:	48a7      	ldr	r0, [pc, #668]	; (800a284 <_dtoa_r+0x2d4>)
 8009fe6:	f001 fea7 	bl	800bd38 <__assert_func>
 8009fea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fee:	6005      	str	r5, [r0, #0]
 8009ff0:	60c5      	str	r5, [r0, #12]
 8009ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ff4:	6819      	ldr	r1, [r3, #0]
 8009ff6:	b151      	cbz	r1, 800a00e <_dtoa_r+0x5e>
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	604a      	str	r2, [r1, #4]
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	4093      	lsls	r3, r2
 800a000:	608b      	str	r3, [r1, #8]
 800a002:	4620      	mov	r0, r4
 800a004:	f001 f832 	bl	800b06c <_Bfree>
 800a008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a00a:	2200      	movs	r2, #0
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	1e3b      	subs	r3, r7, #0
 800a010:	bfaa      	itet	ge
 800a012:	2300      	movge	r3, #0
 800a014:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a018:	f8c8 3000 	strge.w	r3, [r8]
 800a01c:	4b9a      	ldr	r3, [pc, #616]	; (800a288 <_dtoa_r+0x2d8>)
 800a01e:	bfbc      	itt	lt
 800a020:	2201      	movlt	r2, #1
 800a022:	f8c8 2000 	strlt.w	r2, [r8]
 800a026:	ea33 030b 	bics.w	r3, r3, fp
 800a02a:	d11b      	bne.n	800a064 <_dtoa_r+0xb4>
 800a02c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a02e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a032:	6013      	str	r3, [r2, #0]
 800a034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a038:	4333      	orrs	r3, r6
 800a03a:	f000 8592 	beq.w	800ab62 <_dtoa_r+0xbb2>
 800a03e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a040:	b963      	cbnz	r3, 800a05c <_dtoa_r+0xac>
 800a042:	4b92      	ldr	r3, [pc, #584]	; (800a28c <_dtoa_r+0x2dc>)
 800a044:	e022      	b.n	800a08c <_dtoa_r+0xdc>
 800a046:	4b92      	ldr	r3, [pc, #584]	; (800a290 <_dtoa_r+0x2e0>)
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	3308      	adds	r3, #8
 800a04c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a04e:	6013      	str	r3, [r2, #0]
 800a050:	9801      	ldr	r0, [sp, #4]
 800a052:	b013      	add	sp, #76	; 0x4c
 800a054:	ecbd 8b04 	vpop	{d8-d9}
 800a058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05c:	4b8b      	ldr	r3, [pc, #556]	; (800a28c <_dtoa_r+0x2dc>)
 800a05e:	9301      	str	r3, [sp, #4]
 800a060:	3303      	adds	r3, #3
 800a062:	e7f3      	b.n	800a04c <_dtoa_r+0x9c>
 800a064:	2200      	movs	r2, #0
 800a066:	2300      	movs	r3, #0
 800a068:	4650      	mov	r0, sl
 800a06a:	4659      	mov	r1, fp
 800a06c:	f7f6 fd14 	bl	8000a98 <__aeabi_dcmpeq>
 800a070:	ec4b ab19 	vmov	d9, sl, fp
 800a074:	4680      	mov	r8, r0
 800a076:	b158      	cbz	r0, 800a090 <_dtoa_r+0xe0>
 800a078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a07a:	2301      	movs	r3, #1
 800a07c:	6013      	str	r3, [r2, #0]
 800a07e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 856b 	beq.w	800ab5c <_dtoa_r+0xbac>
 800a086:	4883      	ldr	r0, [pc, #524]	; (800a294 <_dtoa_r+0x2e4>)
 800a088:	6018      	str	r0, [r3, #0]
 800a08a:	1e43      	subs	r3, r0, #1
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	e7df      	b.n	800a050 <_dtoa_r+0xa0>
 800a090:	ec4b ab10 	vmov	d0, sl, fp
 800a094:	aa10      	add	r2, sp, #64	; 0x40
 800a096:	a911      	add	r1, sp, #68	; 0x44
 800a098:	4620      	mov	r0, r4
 800a09a:	f001 facf 	bl	800b63c <__d2b>
 800a09e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a0a2:	ee08 0a10 	vmov	s16, r0
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	f000 8084 	beq.w	800a1b4 <_dtoa_r+0x204>
 800a0ac:	ee19 3a90 	vmov	r3, s19
 800a0b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a0b8:	4656      	mov	r6, sl
 800a0ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a0be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a0c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a0c6:	4b74      	ldr	r3, [pc, #464]	; (800a298 <_dtoa_r+0x2e8>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	f7f6 f8c3 	bl	8000258 <__aeabi_dsub>
 800a0d2:	a365      	add	r3, pc, #404	; (adr r3, 800a268 <_dtoa_r+0x2b8>)
 800a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d8:	f7f6 fa76 	bl	80005c8 <__aeabi_dmul>
 800a0dc:	a364      	add	r3, pc, #400	; (adr r3, 800a270 <_dtoa_r+0x2c0>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 f8bb 	bl	800025c <__adddf3>
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	460f      	mov	r7, r1
 800a0ec:	f7f6 fa02 	bl	80004f4 <__aeabi_i2d>
 800a0f0:	a361      	add	r3, pc, #388	; (adr r3, 800a278 <_dtoa_r+0x2c8>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 fa67 	bl	80005c8 <__aeabi_dmul>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4630      	mov	r0, r6
 800a100:	4639      	mov	r1, r7
 800a102:	f7f6 f8ab 	bl	800025c <__adddf3>
 800a106:	4606      	mov	r6, r0
 800a108:	460f      	mov	r7, r1
 800a10a:	f7f6 fd0d 	bl	8000b28 <__aeabi_d2iz>
 800a10e:	2200      	movs	r2, #0
 800a110:	9000      	str	r0, [sp, #0]
 800a112:	2300      	movs	r3, #0
 800a114:	4630      	mov	r0, r6
 800a116:	4639      	mov	r1, r7
 800a118:	f7f6 fcc8 	bl	8000aac <__aeabi_dcmplt>
 800a11c:	b150      	cbz	r0, 800a134 <_dtoa_r+0x184>
 800a11e:	9800      	ldr	r0, [sp, #0]
 800a120:	f7f6 f9e8 	bl	80004f4 <__aeabi_i2d>
 800a124:	4632      	mov	r2, r6
 800a126:	463b      	mov	r3, r7
 800a128:	f7f6 fcb6 	bl	8000a98 <__aeabi_dcmpeq>
 800a12c:	b910      	cbnz	r0, 800a134 <_dtoa_r+0x184>
 800a12e:	9b00      	ldr	r3, [sp, #0]
 800a130:	3b01      	subs	r3, #1
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	9b00      	ldr	r3, [sp, #0]
 800a136:	2b16      	cmp	r3, #22
 800a138:	d85a      	bhi.n	800a1f0 <_dtoa_r+0x240>
 800a13a:	9a00      	ldr	r2, [sp, #0]
 800a13c:	4b57      	ldr	r3, [pc, #348]	; (800a29c <_dtoa_r+0x2ec>)
 800a13e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	ec51 0b19 	vmov	r0, r1, d9
 800a14a:	f7f6 fcaf 	bl	8000aac <__aeabi_dcmplt>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d050      	beq.n	800a1f4 <_dtoa_r+0x244>
 800a152:	9b00      	ldr	r3, [sp, #0]
 800a154:	3b01      	subs	r3, #1
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	2300      	movs	r3, #0
 800a15a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a15c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a15e:	1b5d      	subs	r5, r3, r5
 800a160:	1e6b      	subs	r3, r5, #1
 800a162:	9305      	str	r3, [sp, #20]
 800a164:	bf45      	ittet	mi
 800a166:	f1c5 0301 	rsbmi	r3, r5, #1
 800a16a:	9304      	strmi	r3, [sp, #16]
 800a16c:	2300      	movpl	r3, #0
 800a16e:	2300      	movmi	r3, #0
 800a170:	bf4c      	ite	mi
 800a172:	9305      	strmi	r3, [sp, #20]
 800a174:	9304      	strpl	r3, [sp, #16]
 800a176:	9b00      	ldr	r3, [sp, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	db3d      	blt.n	800a1f8 <_dtoa_r+0x248>
 800a17c:	9b05      	ldr	r3, [sp, #20]
 800a17e:	9a00      	ldr	r2, [sp, #0]
 800a180:	920a      	str	r2, [sp, #40]	; 0x28
 800a182:	4413      	add	r3, r2
 800a184:	9305      	str	r3, [sp, #20]
 800a186:	2300      	movs	r3, #0
 800a188:	9307      	str	r3, [sp, #28]
 800a18a:	9b06      	ldr	r3, [sp, #24]
 800a18c:	2b09      	cmp	r3, #9
 800a18e:	f200 8089 	bhi.w	800a2a4 <_dtoa_r+0x2f4>
 800a192:	2b05      	cmp	r3, #5
 800a194:	bfc4      	itt	gt
 800a196:	3b04      	subgt	r3, #4
 800a198:	9306      	strgt	r3, [sp, #24]
 800a19a:	9b06      	ldr	r3, [sp, #24]
 800a19c:	f1a3 0302 	sub.w	r3, r3, #2
 800a1a0:	bfcc      	ite	gt
 800a1a2:	2500      	movgt	r5, #0
 800a1a4:	2501      	movle	r5, #1
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	f200 8087 	bhi.w	800a2ba <_dtoa_r+0x30a>
 800a1ac:	e8df f003 	tbb	[pc, r3]
 800a1b0:	59383a2d 	.word	0x59383a2d
 800a1b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a1b8:	441d      	add	r5, r3
 800a1ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a1be:	2b20      	cmp	r3, #32
 800a1c0:	bfc1      	itttt	gt
 800a1c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a1ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800a1ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a1d2:	bfda      	itte	le
 800a1d4:	f1c3 0320 	rsble	r3, r3, #32
 800a1d8:	fa06 f003 	lslle.w	r0, r6, r3
 800a1dc:	4318      	orrgt	r0, r3
 800a1de:	f7f6 f979 	bl	80004d4 <__aeabi_ui2d>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a1ea:	3d01      	subs	r5, #1
 800a1ec:	930e      	str	r3, [sp, #56]	; 0x38
 800a1ee:	e76a      	b.n	800a0c6 <_dtoa_r+0x116>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e7b2      	b.n	800a15a <_dtoa_r+0x1aa>
 800a1f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1f6:	e7b1      	b.n	800a15c <_dtoa_r+0x1ac>
 800a1f8:	9b04      	ldr	r3, [sp, #16]
 800a1fa:	9a00      	ldr	r2, [sp, #0]
 800a1fc:	1a9b      	subs	r3, r3, r2
 800a1fe:	9304      	str	r3, [sp, #16]
 800a200:	4253      	negs	r3, r2
 800a202:	9307      	str	r3, [sp, #28]
 800a204:	2300      	movs	r3, #0
 800a206:	930a      	str	r3, [sp, #40]	; 0x28
 800a208:	e7bf      	b.n	800a18a <_dtoa_r+0x1da>
 800a20a:	2300      	movs	r3, #0
 800a20c:	9308      	str	r3, [sp, #32]
 800a20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a210:	2b00      	cmp	r3, #0
 800a212:	dc55      	bgt.n	800a2c0 <_dtoa_r+0x310>
 800a214:	2301      	movs	r3, #1
 800a216:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a21a:	461a      	mov	r2, r3
 800a21c:	9209      	str	r2, [sp, #36]	; 0x24
 800a21e:	e00c      	b.n	800a23a <_dtoa_r+0x28a>
 800a220:	2301      	movs	r3, #1
 800a222:	e7f3      	b.n	800a20c <_dtoa_r+0x25c>
 800a224:	2300      	movs	r3, #0
 800a226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a228:	9308      	str	r3, [sp, #32]
 800a22a:	9b00      	ldr	r3, [sp, #0]
 800a22c:	4413      	add	r3, r2
 800a22e:	9302      	str	r3, [sp, #8]
 800a230:	3301      	adds	r3, #1
 800a232:	2b01      	cmp	r3, #1
 800a234:	9303      	str	r3, [sp, #12]
 800a236:	bfb8      	it	lt
 800a238:	2301      	movlt	r3, #1
 800a23a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a23c:	2200      	movs	r2, #0
 800a23e:	6042      	str	r2, [r0, #4]
 800a240:	2204      	movs	r2, #4
 800a242:	f102 0614 	add.w	r6, r2, #20
 800a246:	429e      	cmp	r6, r3
 800a248:	6841      	ldr	r1, [r0, #4]
 800a24a:	d93d      	bls.n	800a2c8 <_dtoa_r+0x318>
 800a24c:	4620      	mov	r0, r4
 800a24e:	f000 fecd 	bl	800afec <_Balloc>
 800a252:	9001      	str	r0, [sp, #4]
 800a254:	2800      	cmp	r0, #0
 800a256:	d13b      	bne.n	800a2d0 <_dtoa_r+0x320>
 800a258:	4b11      	ldr	r3, [pc, #68]	; (800a2a0 <_dtoa_r+0x2f0>)
 800a25a:	4602      	mov	r2, r0
 800a25c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a260:	e6c0      	b.n	8009fe4 <_dtoa_r+0x34>
 800a262:	2301      	movs	r3, #1
 800a264:	e7df      	b.n	800a226 <_dtoa_r+0x276>
 800a266:	bf00      	nop
 800a268:	636f4361 	.word	0x636f4361
 800a26c:	3fd287a7 	.word	0x3fd287a7
 800a270:	8b60c8b3 	.word	0x8b60c8b3
 800a274:	3fc68a28 	.word	0x3fc68a28
 800a278:	509f79fb 	.word	0x509f79fb
 800a27c:	3fd34413 	.word	0x3fd34413
 800a280:	0800c77a 	.word	0x0800c77a
 800a284:	0800c791 	.word	0x0800c791
 800a288:	7ff00000 	.word	0x7ff00000
 800a28c:	0800c776 	.word	0x0800c776
 800a290:	0800c76d 	.word	0x0800c76d
 800a294:	0800c649 	.word	0x0800c649
 800a298:	3ff80000 	.word	0x3ff80000
 800a29c:	0800c8e8 	.word	0x0800c8e8
 800a2a0:	0800c7ec 	.word	0x0800c7ec
 800a2a4:	2501      	movs	r5, #1
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	9306      	str	r3, [sp, #24]
 800a2aa:	9508      	str	r5, [sp, #32]
 800a2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	2312      	movs	r3, #18
 800a2b8:	e7b0      	b.n	800a21c <_dtoa_r+0x26c>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	9308      	str	r3, [sp, #32]
 800a2be:	e7f5      	b.n	800a2ac <_dtoa_r+0x2fc>
 800a2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2c6:	e7b8      	b.n	800a23a <_dtoa_r+0x28a>
 800a2c8:	3101      	adds	r1, #1
 800a2ca:	6041      	str	r1, [r0, #4]
 800a2cc:	0052      	lsls	r2, r2, #1
 800a2ce:	e7b8      	b.n	800a242 <_dtoa_r+0x292>
 800a2d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2d2:	9a01      	ldr	r2, [sp, #4]
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	9b03      	ldr	r3, [sp, #12]
 800a2d8:	2b0e      	cmp	r3, #14
 800a2da:	f200 809d 	bhi.w	800a418 <_dtoa_r+0x468>
 800a2de:	2d00      	cmp	r5, #0
 800a2e0:	f000 809a 	beq.w	800a418 <_dtoa_r+0x468>
 800a2e4:	9b00      	ldr	r3, [sp, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	dd32      	ble.n	800a350 <_dtoa_r+0x3a0>
 800a2ea:	4ab7      	ldr	r2, [pc, #732]	; (800a5c8 <_dtoa_r+0x618>)
 800a2ec:	f003 030f 	and.w	r3, r3, #15
 800a2f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2f8:	9b00      	ldr	r3, [sp, #0]
 800a2fa:	05d8      	lsls	r0, r3, #23
 800a2fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a300:	d516      	bpl.n	800a330 <_dtoa_r+0x380>
 800a302:	4bb2      	ldr	r3, [pc, #712]	; (800a5cc <_dtoa_r+0x61c>)
 800a304:	ec51 0b19 	vmov	r0, r1, d9
 800a308:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a30c:	f7f6 fa86 	bl	800081c <__aeabi_ddiv>
 800a310:	f007 070f 	and.w	r7, r7, #15
 800a314:	4682      	mov	sl, r0
 800a316:	468b      	mov	fp, r1
 800a318:	2503      	movs	r5, #3
 800a31a:	4eac      	ldr	r6, [pc, #688]	; (800a5cc <_dtoa_r+0x61c>)
 800a31c:	b957      	cbnz	r7, 800a334 <_dtoa_r+0x384>
 800a31e:	4642      	mov	r2, r8
 800a320:	464b      	mov	r3, r9
 800a322:	4650      	mov	r0, sl
 800a324:	4659      	mov	r1, fp
 800a326:	f7f6 fa79 	bl	800081c <__aeabi_ddiv>
 800a32a:	4682      	mov	sl, r0
 800a32c:	468b      	mov	fp, r1
 800a32e:	e028      	b.n	800a382 <_dtoa_r+0x3d2>
 800a330:	2502      	movs	r5, #2
 800a332:	e7f2      	b.n	800a31a <_dtoa_r+0x36a>
 800a334:	07f9      	lsls	r1, r7, #31
 800a336:	d508      	bpl.n	800a34a <_dtoa_r+0x39a>
 800a338:	4640      	mov	r0, r8
 800a33a:	4649      	mov	r1, r9
 800a33c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a340:	f7f6 f942 	bl	80005c8 <__aeabi_dmul>
 800a344:	3501      	adds	r5, #1
 800a346:	4680      	mov	r8, r0
 800a348:	4689      	mov	r9, r1
 800a34a:	107f      	asrs	r7, r7, #1
 800a34c:	3608      	adds	r6, #8
 800a34e:	e7e5      	b.n	800a31c <_dtoa_r+0x36c>
 800a350:	f000 809b 	beq.w	800a48a <_dtoa_r+0x4da>
 800a354:	9b00      	ldr	r3, [sp, #0]
 800a356:	4f9d      	ldr	r7, [pc, #628]	; (800a5cc <_dtoa_r+0x61c>)
 800a358:	425e      	negs	r6, r3
 800a35a:	4b9b      	ldr	r3, [pc, #620]	; (800a5c8 <_dtoa_r+0x618>)
 800a35c:	f006 020f 	and.w	r2, r6, #15
 800a360:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	ec51 0b19 	vmov	r0, r1, d9
 800a36c:	f7f6 f92c 	bl	80005c8 <__aeabi_dmul>
 800a370:	1136      	asrs	r6, r6, #4
 800a372:	4682      	mov	sl, r0
 800a374:	468b      	mov	fp, r1
 800a376:	2300      	movs	r3, #0
 800a378:	2502      	movs	r5, #2
 800a37a:	2e00      	cmp	r6, #0
 800a37c:	d17a      	bne.n	800a474 <_dtoa_r+0x4c4>
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1d3      	bne.n	800a32a <_dtoa_r+0x37a>
 800a382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 8082 	beq.w	800a48e <_dtoa_r+0x4de>
 800a38a:	4b91      	ldr	r3, [pc, #580]	; (800a5d0 <_dtoa_r+0x620>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	4650      	mov	r0, sl
 800a390:	4659      	mov	r1, fp
 800a392:	f7f6 fb8b 	bl	8000aac <__aeabi_dcmplt>
 800a396:	2800      	cmp	r0, #0
 800a398:	d079      	beq.n	800a48e <_dtoa_r+0x4de>
 800a39a:	9b03      	ldr	r3, [sp, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d076      	beq.n	800a48e <_dtoa_r+0x4de>
 800a3a0:	9b02      	ldr	r3, [sp, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	dd36      	ble.n	800a414 <_dtoa_r+0x464>
 800a3a6:	9b00      	ldr	r3, [sp, #0]
 800a3a8:	4650      	mov	r0, sl
 800a3aa:	4659      	mov	r1, fp
 800a3ac:	1e5f      	subs	r7, r3, #1
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	4b88      	ldr	r3, [pc, #544]	; (800a5d4 <_dtoa_r+0x624>)
 800a3b2:	f7f6 f909 	bl	80005c8 <__aeabi_dmul>
 800a3b6:	9e02      	ldr	r6, [sp, #8]
 800a3b8:	4682      	mov	sl, r0
 800a3ba:	468b      	mov	fp, r1
 800a3bc:	3501      	adds	r5, #1
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f7f6 f898 	bl	80004f4 <__aeabi_i2d>
 800a3c4:	4652      	mov	r2, sl
 800a3c6:	465b      	mov	r3, fp
 800a3c8:	f7f6 f8fe 	bl	80005c8 <__aeabi_dmul>
 800a3cc:	4b82      	ldr	r3, [pc, #520]	; (800a5d8 <_dtoa_r+0x628>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f7f5 ff44 	bl	800025c <__adddf3>
 800a3d4:	46d0      	mov	r8, sl
 800a3d6:	46d9      	mov	r9, fp
 800a3d8:	4682      	mov	sl, r0
 800a3da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a3de:	2e00      	cmp	r6, #0
 800a3e0:	d158      	bne.n	800a494 <_dtoa_r+0x4e4>
 800a3e2:	4b7e      	ldr	r3, [pc, #504]	; (800a5dc <_dtoa_r+0x62c>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	f7f5 ff35 	bl	8000258 <__aeabi_dsub>
 800a3ee:	4652      	mov	r2, sl
 800a3f0:	465b      	mov	r3, fp
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	4689      	mov	r9, r1
 800a3f6:	f7f6 fb77 	bl	8000ae8 <__aeabi_dcmpgt>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	f040 8295 	bne.w	800a92a <_dtoa_r+0x97a>
 800a400:	4652      	mov	r2, sl
 800a402:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a406:	4640      	mov	r0, r8
 800a408:	4649      	mov	r1, r9
 800a40a:	f7f6 fb4f 	bl	8000aac <__aeabi_dcmplt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	f040 8289 	bne.w	800a926 <_dtoa_r+0x976>
 800a414:	ec5b ab19 	vmov	sl, fp, d9
 800a418:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f2c0 8148 	blt.w	800a6b0 <_dtoa_r+0x700>
 800a420:	9a00      	ldr	r2, [sp, #0]
 800a422:	2a0e      	cmp	r2, #14
 800a424:	f300 8144 	bgt.w	800a6b0 <_dtoa_r+0x700>
 800a428:	4b67      	ldr	r3, [pc, #412]	; (800a5c8 <_dtoa_r+0x618>)
 800a42a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a42e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a434:	2b00      	cmp	r3, #0
 800a436:	f280 80d5 	bge.w	800a5e4 <_dtoa_r+0x634>
 800a43a:	9b03      	ldr	r3, [sp, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f300 80d1 	bgt.w	800a5e4 <_dtoa_r+0x634>
 800a442:	f040 826f 	bne.w	800a924 <_dtoa_r+0x974>
 800a446:	4b65      	ldr	r3, [pc, #404]	; (800a5dc <_dtoa_r+0x62c>)
 800a448:	2200      	movs	r2, #0
 800a44a:	4640      	mov	r0, r8
 800a44c:	4649      	mov	r1, r9
 800a44e:	f7f6 f8bb 	bl	80005c8 <__aeabi_dmul>
 800a452:	4652      	mov	r2, sl
 800a454:	465b      	mov	r3, fp
 800a456:	f7f6 fb3d 	bl	8000ad4 <__aeabi_dcmpge>
 800a45a:	9e03      	ldr	r6, [sp, #12]
 800a45c:	4637      	mov	r7, r6
 800a45e:	2800      	cmp	r0, #0
 800a460:	f040 8245 	bne.w	800a8ee <_dtoa_r+0x93e>
 800a464:	9d01      	ldr	r5, [sp, #4]
 800a466:	2331      	movs	r3, #49	; 0x31
 800a468:	f805 3b01 	strb.w	r3, [r5], #1
 800a46c:	9b00      	ldr	r3, [sp, #0]
 800a46e:	3301      	adds	r3, #1
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	e240      	b.n	800a8f6 <_dtoa_r+0x946>
 800a474:	07f2      	lsls	r2, r6, #31
 800a476:	d505      	bpl.n	800a484 <_dtoa_r+0x4d4>
 800a478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a47c:	f7f6 f8a4 	bl	80005c8 <__aeabi_dmul>
 800a480:	3501      	adds	r5, #1
 800a482:	2301      	movs	r3, #1
 800a484:	1076      	asrs	r6, r6, #1
 800a486:	3708      	adds	r7, #8
 800a488:	e777      	b.n	800a37a <_dtoa_r+0x3ca>
 800a48a:	2502      	movs	r5, #2
 800a48c:	e779      	b.n	800a382 <_dtoa_r+0x3d2>
 800a48e:	9f00      	ldr	r7, [sp, #0]
 800a490:	9e03      	ldr	r6, [sp, #12]
 800a492:	e794      	b.n	800a3be <_dtoa_r+0x40e>
 800a494:	9901      	ldr	r1, [sp, #4]
 800a496:	4b4c      	ldr	r3, [pc, #304]	; (800a5c8 <_dtoa_r+0x618>)
 800a498:	4431      	add	r1, r6
 800a49a:	910d      	str	r1, [sp, #52]	; 0x34
 800a49c:	9908      	ldr	r1, [sp, #32]
 800a49e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a4a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4a6:	2900      	cmp	r1, #0
 800a4a8:	d043      	beq.n	800a532 <_dtoa_r+0x582>
 800a4aa:	494d      	ldr	r1, [pc, #308]	; (800a5e0 <_dtoa_r+0x630>)
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	f7f6 f9b5 	bl	800081c <__aeabi_ddiv>
 800a4b2:	4652      	mov	r2, sl
 800a4b4:	465b      	mov	r3, fp
 800a4b6:	f7f5 fecf 	bl	8000258 <__aeabi_dsub>
 800a4ba:	9d01      	ldr	r5, [sp, #4]
 800a4bc:	4682      	mov	sl, r0
 800a4be:	468b      	mov	fp, r1
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	f7f6 fb30 	bl	8000b28 <__aeabi_d2iz>
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	f7f6 f813 	bl	80004f4 <__aeabi_i2d>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	4649      	mov	r1, r9
 800a4d6:	f7f5 febf 	bl	8000258 <__aeabi_dsub>
 800a4da:	3630      	adds	r6, #48	; 0x30
 800a4dc:	f805 6b01 	strb.w	r6, [r5], #1
 800a4e0:	4652      	mov	r2, sl
 800a4e2:	465b      	mov	r3, fp
 800a4e4:	4680      	mov	r8, r0
 800a4e6:	4689      	mov	r9, r1
 800a4e8:	f7f6 fae0 	bl	8000aac <__aeabi_dcmplt>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d163      	bne.n	800a5b8 <_dtoa_r+0x608>
 800a4f0:	4642      	mov	r2, r8
 800a4f2:	464b      	mov	r3, r9
 800a4f4:	4936      	ldr	r1, [pc, #216]	; (800a5d0 <_dtoa_r+0x620>)
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	f7f5 feae 	bl	8000258 <__aeabi_dsub>
 800a4fc:	4652      	mov	r2, sl
 800a4fe:	465b      	mov	r3, fp
 800a500:	f7f6 fad4 	bl	8000aac <__aeabi_dcmplt>
 800a504:	2800      	cmp	r0, #0
 800a506:	f040 80b5 	bne.w	800a674 <_dtoa_r+0x6c4>
 800a50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a50c:	429d      	cmp	r5, r3
 800a50e:	d081      	beq.n	800a414 <_dtoa_r+0x464>
 800a510:	4b30      	ldr	r3, [pc, #192]	; (800a5d4 <_dtoa_r+0x624>)
 800a512:	2200      	movs	r2, #0
 800a514:	4650      	mov	r0, sl
 800a516:	4659      	mov	r1, fp
 800a518:	f7f6 f856 	bl	80005c8 <__aeabi_dmul>
 800a51c:	4b2d      	ldr	r3, [pc, #180]	; (800a5d4 <_dtoa_r+0x624>)
 800a51e:	4682      	mov	sl, r0
 800a520:	468b      	mov	fp, r1
 800a522:	4640      	mov	r0, r8
 800a524:	4649      	mov	r1, r9
 800a526:	2200      	movs	r2, #0
 800a528:	f7f6 f84e 	bl	80005c8 <__aeabi_dmul>
 800a52c:	4680      	mov	r8, r0
 800a52e:	4689      	mov	r9, r1
 800a530:	e7c6      	b.n	800a4c0 <_dtoa_r+0x510>
 800a532:	4650      	mov	r0, sl
 800a534:	4659      	mov	r1, fp
 800a536:	f7f6 f847 	bl	80005c8 <__aeabi_dmul>
 800a53a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a53c:	9d01      	ldr	r5, [sp, #4]
 800a53e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a540:	4682      	mov	sl, r0
 800a542:	468b      	mov	fp, r1
 800a544:	4649      	mov	r1, r9
 800a546:	4640      	mov	r0, r8
 800a548:	f7f6 faee 	bl	8000b28 <__aeabi_d2iz>
 800a54c:	4606      	mov	r6, r0
 800a54e:	f7f5 ffd1 	bl	80004f4 <__aeabi_i2d>
 800a552:	3630      	adds	r6, #48	; 0x30
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4640      	mov	r0, r8
 800a55a:	4649      	mov	r1, r9
 800a55c:	f7f5 fe7c 	bl	8000258 <__aeabi_dsub>
 800a560:	f805 6b01 	strb.w	r6, [r5], #1
 800a564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a566:	429d      	cmp	r5, r3
 800a568:	4680      	mov	r8, r0
 800a56a:	4689      	mov	r9, r1
 800a56c:	f04f 0200 	mov.w	r2, #0
 800a570:	d124      	bne.n	800a5bc <_dtoa_r+0x60c>
 800a572:	4b1b      	ldr	r3, [pc, #108]	; (800a5e0 <_dtoa_r+0x630>)
 800a574:	4650      	mov	r0, sl
 800a576:	4659      	mov	r1, fp
 800a578:	f7f5 fe70 	bl	800025c <__adddf3>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	4640      	mov	r0, r8
 800a582:	4649      	mov	r1, r9
 800a584:	f7f6 fab0 	bl	8000ae8 <__aeabi_dcmpgt>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d173      	bne.n	800a674 <_dtoa_r+0x6c4>
 800a58c:	4652      	mov	r2, sl
 800a58e:	465b      	mov	r3, fp
 800a590:	4913      	ldr	r1, [pc, #76]	; (800a5e0 <_dtoa_r+0x630>)
 800a592:	2000      	movs	r0, #0
 800a594:	f7f5 fe60 	bl	8000258 <__aeabi_dsub>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4640      	mov	r0, r8
 800a59e:	4649      	mov	r1, r9
 800a5a0:	f7f6 fa84 	bl	8000aac <__aeabi_dcmplt>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	f43f af35 	beq.w	800a414 <_dtoa_r+0x464>
 800a5aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a5ac:	1e6b      	subs	r3, r5, #1
 800a5ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5b4:	2b30      	cmp	r3, #48	; 0x30
 800a5b6:	d0f8      	beq.n	800a5aa <_dtoa_r+0x5fa>
 800a5b8:	9700      	str	r7, [sp, #0]
 800a5ba:	e049      	b.n	800a650 <_dtoa_r+0x6a0>
 800a5bc:	4b05      	ldr	r3, [pc, #20]	; (800a5d4 <_dtoa_r+0x624>)
 800a5be:	f7f6 f803 	bl	80005c8 <__aeabi_dmul>
 800a5c2:	4680      	mov	r8, r0
 800a5c4:	4689      	mov	r9, r1
 800a5c6:	e7bd      	b.n	800a544 <_dtoa_r+0x594>
 800a5c8:	0800c8e8 	.word	0x0800c8e8
 800a5cc:	0800c8c0 	.word	0x0800c8c0
 800a5d0:	3ff00000 	.word	0x3ff00000
 800a5d4:	40240000 	.word	0x40240000
 800a5d8:	401c0000 	.word	0x401c0000
 800a5dc:	40140000 	.word	0x40140000
 800a5e0:	3fe00000 	.word	0x3fe00000
 800a5e4:	9d01      	ldr	r5, [sp, #4]
 800a5e6:	4656      	mov	r6, sl
 800a5e8:	465f      	mov	r7, fp
 800a5ea:	4642      	mov	r2, r8
 800a5ec:	464b      	mov	r3, r9
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	4639      	mov	r1, r7
 800a5f2:	f7f6 f913 	bl	800081c <__aeabi_ddiv>
 800a5f6:	f7f6 fa97 	bl	8000b28 <__aeabi_d2iz>
 800a5fa:	4682      	mov	sl, r0
 800a5fc:	f7f5 ff7a 	bl	80004f4 <__aeabi_i2d>
 800a600:	4642      	mov	r2, r8
 800a602:	464b      	mov	r3, r9
 800a604:	f7f5 ffe0 	bl	80005c8 <__aeabi_dmul>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a614:	f7f5 fe20 	bl	8000258 <__aeabi_dsub>
 800a618:	f805 6b01 	strb.w	r6, [r5], #1
 800a61c:	9e01      	ldr	r6, [sp, #4]
 800a61e:	9f03      	ldr	r7, [sp, #12]
 800a620:	1bae      	subs	r6, r5, r6
 800a622:	42b7      	cmp	r7, r6
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	d135      	bne.n	800a696 <_dtoa_r+0x6e6>
 800a62a:	f7f5 fe17 	bl	800025c <__adddf3>
 800a62e:	4642      	mov	r2, r8
 800a630:	464b      	mov	r3, r9
 800a632:	4606      	mov	r6, r0
 800a634:	460f      	mov	r7, r1
 800a636:	f7f6 fa57 	bl	8000ae8 <__aeabi_dcmpgt>
 800a63a:	b9d0      	cbnz	r0, 800a672 <_dtoa_r+0x6c2>
 800a63c:	4642      	mov	r2, r8
 800a63e:	464b      	mov	r3, r9
 800a640:	4630      	mov	r0, r6
 800a642:	4639      	mov	r1, r7
 800a644:	f7f6 fa28 	bl	8000a98 <__aeabi_dcmpeq>
 800a648:	b110      	cbz	r0, 800a650 <_dtoa_r+0x6a0>
 800a64a:	f01a 0f01 	tst.w	sl, #1
 800a64e:	d110      	bne.n	800a672 <_dtoa_r+0x6c2>
 800a650:	4620      	mov	r0, r4
 800a652:	ee18 1a10 	vmov	r1, s16
 800a656:	f000 fd09 	bl	800b06c <_Bfree>
 800a65a:	2300      	movs	r3, #0
 800a65c:	9800      	ldr	r0, [sp, #0]
 800a65e:	702b      	strb	r3, [r5, #0]
 800a660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a662:	3001      	adds	r0, #1
 800a664:	6018      	str	r0, [r3, #0]
 800a666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f43f acf1 	beq.w	800a050 <_dtoa_r+0xa0>
 800a66e:	601d      	str	r5, [r3, #0]
 800a670:	e4ee      	b.n	800a050 <_dtoa_r+0xa0>
 800a672:	9f00      	ldr	r7, [sp, #0]
 800a674:	462b      	mov	r3, r5
 800a676:	461d      	mov	r5, r3
 800a678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a67c:	2a39      	cmp	r2, #57	; 0x39
 800a67e:	d106      	bne.n	800a68e <_dtoa_r+0x6de>
 800a680:	9a01      	ldr	r2, [sp, #4]
 800a682:	429a      	cmp	r2, r3
 800a684:	d1f7      	bne.n	800a676 <_dtoa_r+0x6c6>
 800a686:	9901      	ldr	r1, [sp, #4]
 800a688:	2230      	movs	r2, #48	; 0x30
 800a68a:	3701      	adds	r7, #1
 800a68c:	700a      	strb	r2, [r1, #0]
 800a68e:	781a      	ldrb	r2, [r3, #0]
 800a690:	3201      	adds	r2, #1
 800a692:	701a      	strb	r2, [r3, #0]
 800a694:	e790      	b.n	800a5b8 <_dtoa_r+0x608>
 800a696:	4ba6      	ldr	r3, [pc, #664]	; (800a930 <_dtoa_r+0x980>)
 800a698:	2200      	movs	r2, #0
 800a69a:	f7f5 ff95 	bl	80005c8 <__aeabi_dmul>
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	f7f6 f9f7 	bl	8000a98 <__aeabi_dcmpeq>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d09d      	beq.n	800a5ea <_dtoa_r+0x63a>
 800a6ae:	e7cf      	b.n	800a650 <_dtoa_r+0x6a0>
 800a6b0:	9a08      	ldr	r2, [sp, #32]
 800a6b2:	2a00      	cmp	r2, #0
 800a6b4:	f000 80d7 	beq.w	800a866 <_dtoa_r+0x8b6>
 800a6b8:	9a06      	ldr	r2, [sp, #24]
 800a6ba:	2a01      	cmp	r2, #1
 800a6bc:	f300 80ba 	bgt.w	800a834 <_dtoa_r+0x884>
 800a6c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6c2:	2a00      	cmp	r2, #0
 800a6c4:	f000 80b2 	beq.w	800a82c <_dtoa_r+0x87c>
 800a6c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6cc:	9e07      	ldr	r6, [sp, #28]
 800a6ce:	9d04      	ldr	r5, [sp, #16]
 800a6d0:	9a04      	ldr	r2, [sp, #16]
 800a6d2:	441a      	add	r2, r3
 800a6d4:	9204      	str	r2, [sp, #16]
 800a6d6:	9a05      	ldr	r2, [sp, #20]
 800a6d8:	2101      	movs	r1, #1
 800a6da:	441a      	add	r2, r3
 800a6dc:	4620      	mov	r0, r4
 800a6de:	9205      	str	r2, [sp, #20]
 800a6e0:	f000 fd7c 	bl	800b1dc <__i2b>
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	2d00      	cmp	r5, #0
 800a6e8:	dd0c      	ble.n	800a704 <_dtoa_r+0x754>
 800a6ea:	9b05      	ldr	r3, [sp, #20]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	dd09      	ble.n	800a704 <_dtoa_r+0x754>
 800a6f0:	42ab      	cmp	r3, r5
 800a6f2:	9a04      	ldr	r2, [sp, #16]
 800a6f4:	bfa8      	it	ge
 800a6f6:	462b      	movge	r3, r5
 800a6f8:	1ad2      	subs	r2, r2, r3
 800a6fa:	9204      	str	r2, [sp, #16]
 800a6fc:	9a05      	ldr	r2, [sp, #20]
 800a6fe:	1aed      	subs	r5, r5, r3
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	9305      	str	r3, [sp, #20]
 800a704:	9b07      	ldr	r3, [sp, #28]
 800a706:	b31b      	cbz	r3, 800a750 <_dtoa_r+0x7a0>
 800a708:	9b08      	ldr	r3, [sp, #32]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 80af 	beq.w	800a86e <_dtoa_r+0x8be>
 800a710:	2e00      	cmp	r6, #0
 800a712:	dd13      	ble.n	800a73c <_dtoa_r+0x78c>
 800a714:	4639      	mov	r1, r7
 800a716:	4632      	mov	r2, r6
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 fe1f 	bl	800b35c <__pow5mult>
 800a71e:	ee18 2a10 	vmov	r2, s16
 800a722:	4601      	mov	r1, r0
 800a724:	4607      	mov	r7, r0
 800a726:	4620      	mov	r0, r4
 800a728:	f000 fd6e 	bl	800b208 <__multiply>
 800a72c:	ee18 1a10 	vmov	r1, s16
 800a730:	4680      	mov	r8, r0
 800a732:	4620      	mov	r0, r4
 800a734:	f000 fc9a 	bl	800b06c <_Bfree>
 800a738:	ee08 8a10 	vmov	s16, r8
 800a73c:	9b07      	ldr	r3, [sp, #28]
 800a73e:	1b9a      	subs	r2, r3, r6
 800a740:	d006      	beq.n	800a750 <_dtoa_r+0x7a0>
 800a742:	ee18 1a10 	vmov	r1, s16
 800a746:	4620      	mov	r0, r4
 800a748:	f000 fe08 	bl	800b35c <__pow5mult>
 800a74c:	ee08 0a10 	vmov	s16, r0
 800a750:	2101      	movs	r1, #1
 800a752:	4620      	mov	r0, r4
 800a754:	f000 fd42 	bl	800b1dc <__i2b>
 800a758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	4606      	mov	r6, r0
 800a75e:	f340 8088 	ble.w	800a872 <_dtoa_r+0x8c2>
 800a762:	461a      	mov	r2, r3
 800a764:	4601      	mov	r1, r0
 800a766:	4620      	mov	r0, r4
 800a768:	f000 fdf8 	bl	800b35c <__pow5mult>
 800a76c:	9b06      	ldr	r3, [sp, #24]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	4606      	mov	r6, r0
 800a772:	f340 8081 	ble.w	800a878 <_dtoa_r+0x8c8>
 800a776:	f04f 0800 	mov.w	r8, #0
 800a77a:	6933      	ldr	r3, [r6, #16]
 800a77c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a780:	6918      	ldr	r0, [r3, #16]
 800a782:	f000 fcdb 	bl	800b13c <__hi0bits>
 800a786:	f1c0 0020 	rsb	r0, r0, #32
 800a78a:	9b05      	ldr	r3, [sp, #20]
 800a78c:	4418      	add	r0, r3
 800a78e:	f010 001f 	ands.w	r0, r0, #31
 800a792:	f000 8092 	beq.w	800a8ba <_dtoa_r+0x90a>
 800a796:	f1c0 0320 	rsb	r3, r0, #32
 800a79a:	2b04      	cmp	r3, #4
 800a79c:	f340 808a 	ble.w	800a8b4 <_dtoa_r+0x904>
 800a7a0:	f1c0 001c 	rsb	r0, r0, #28
 800a7a4:	9b04      	ldr	r3, [sp, #16]
 800a7a6:	4403      	add	r3, r0
 800a7a8:	9304      	str	r3, [sp, #16]
 800a7aa:	9b05      	ldr	r3, [sp, #20]
 800a7ac:	4403      	add	r3, r0
 800a7ae:	4405      	add	r5, r0
 800a7b0:	9305      	str	r3, [sp, #20]
 800a7b2:	9b04      	ldr	r3, [sp, #16]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	dd07      	ble.n	800a7c8 <_dtoa_r+0x818>
 800a7b8:	ee18 1a10 	vmov	r1, s16
 800a7bc:	461a      	mov	r2, r3
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f000 fe26 	bl	800b410 <__lshift>
 800a7c4:	ee08 0a10 	vmov	s16, r0
 800a7c8:	9b05      	ldr	r3, [sp, #20]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	dd05      	ble.n	800a7da <_dtoa_r+0x82a>
 800a7ce:	4631      	mov	r1, r6
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f000 fe1c 	bl	800b410 <__lshift>
 800a7d8:	4606      	mov	r6, r0
 800a7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d06e      	beq.n	800a8be <_dtoa_r+0x90e>
 800a7e0:	ee18 0a10 	vmov	r0, s16
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	f000 fe83 	bl	800b4f0 <__mcmp>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	da67      	bge.n	800a8be <_dtoa_r+0x90e>
 800a7ee:	9b00      	ldr	r3, [sp, #0]
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	ee18 1a10 	vmov	r1, s16
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	220a      	movs	r2, #10
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f000 fc57 	bl	800b0b0 <__multadd>
 800a802:	9b08      	ldr	r3, [sp, #32]
 800a804:	ee08 0a10 	vmov	s16, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f000 81b1 	beq.w	800ab70 <_dtoa_r+0xbc0>
 800a80e:	2300      	movs	r3, #0
 800a810:	4639      	mov	r1, r7
 800a812:	220a      	movs	r2, #10
 800a814:	4620      	mov	r0, r4
 800a816:	f000 fc4b 	bl	800b0b0 <__multadd>
 800a81a:	9b02      	ldr	r3, [sp, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	4607      	mov	r7, r0
 800a820:	f300 808e 	bgt.w	800a940 <_dtoa_r+0x990>
 800a824:	9b06      	ldr	r3, [sp, #24]
 800a826:	2b02      	cmp	r3, #2
 800a828:	dc51      	bgt.n	800a8ce <_dtoa_r+0x91e>
 800a82a:	e089      	b.n	800a940 <_dtoa_r+0x990>
 800a82c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a82e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a832:	e74b      	b.n	800a6cc <_dtoa_r+0x71c>
 800a834:	9b03      	ldr	r3, [sp, #12]
 800a836:	1e5e      	subs	r6, r3, #1
 800a838:	9b07      	ldr	r3, [sp, #28]
 800a83a:	42b3      	cmp	r3, r6
 800a83c:	bfbf      	itttt	lt
 800a83e:	9b07      	ldrlt	r3, [sp, #28]
 800a840:	9607      	strlt	r6, [sp, #28]
 800a842:	1af2      	sublt	r2, r6, r3
 800a844:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a846:	bfb6      	itet	lt
 800a848:	189b      	addlt	r3, r3, r2
 800a84a:	1b9e      	subge	r6, r3, r6
 800a84c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a84e:	9b03      	ldr	r3, [sp, #12]
 800a850:	bfb8      	it	lt
 800a852:	2600      	movlt	r6, #0
 800a854:	2b00      	cmp	r3, #0
 800a856:	bfb7      	itett	lt
 800a858:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a85c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a860:	1a9d      	sublt	r5, r3, r2
 800a862:	2300      	movlt	r3, #0
 800a864:	e734      	b.n	800a6d0 <_dtoa_r+0x720>
 800a866:	9e07      	ldr	r6, [sp, #28]
 800a868:	9d04      	ldr	r5, [sp, #16]
 800a86a:	9f08      	ldr	r7, [sp, #32]
 800a86c:	e73b      	b.n	800a6e6 <_dtoa_r+0x736>
 800a86e:	9a07      	ldr	r2, [sp, #28]
 800a870:	e767      	b.n	800a742 <_dtoa_r+0x792>
 800a872:	9b06      	ldr	r3, [sp, #24]
 800a874:	2b01      	cmp	r3, #1
 800a876:	dc18      	bgt.n	800a8aa <_dtoa_r+0x8fa>
 800a878:	f1ba 0f00 	cmp.w	sl, #0
 800a87c:	d115      	bne.n	800a8aa <_dtoa_r+0x8fa>
 800a87e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a882:	b993      	cbnz	r3, 800a8aa <_dtoa_r+0x8fa>
 800a884:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a888:	0d1b      	lsrs	r3, r3, #20
 800a88a:	051b      	lsls	r3, r3, #20
 800a88c:	b183      	cbz	r3, 800a8b0 <_dtoa_r+0x900>
 800a88e:	9b04      	ldr	r3, [sp, #16]
 800a890:	3301      	adds	r3, #1
 800a892:	9304      	str	r3, [sp, #16]
 800a894:	9b05      	ldr	r3, [sp, #20]
 800a896:	3301      	adds	r3, #1
 800a898:	9305      	str	r3, [sp, #20]
 800a89a:	f04f 0801 	mov.w	r8, #1
 800a89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f47f af6a 	bne.w	800a77a <_dtoa_r+0x7ca>
 800a8a6:	2001      	movs	r0, #1
 800a8a8:	e76f      	b.n	800a78a <_dtoa_r+0x7da>
 800a8aa:	f04f 0800 	mov.w	r8, #0
 800a8ae:	e7f6      	b.n	800a89e <_dtoa_r+0x8ee>
 800a8b0:	4698      	mov	r8, r3
 800a8b2:	e7f4      	b.n	800a89e <_dtoa_r+0x8ee>
 800a8b4:	f43f af7d 	beq.w	800a7b2 <_dtoa_r+0x802>
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	301c      	adds	r0, #28
 800a8bc:	e772      	b.n	800a7a4 <_dtoa_r+0x7f4>
 800a8be:	9b03      	ldr	r3, [sp, #12]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dc37      	bgt.n	800a934 <_dtoa_r+0x984>
 800a8c4:	9b06      	ldr	r3, [sp, #24]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	dd34      	ble.n	800a934 <_dtoa_r+0x984>
 800a8ca:	9b03      	ldr	r3, [sp, #12]
 800a8cc:	9302      	str	r3, [sp, #8]
 800a8ce:	9b02      	ldr	r3, [sp, #8]
 800a8d0:	b96b      	cbnz	r3, 800a8ee <_dtoa_r+0x93e>
 800a8d2:	4631      	mov	r1, r6
 800a8d4:	2205      	movs	r2, #5
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f000 fbea 	bl	800b0b0 <__multadd>
 800a8dc:	4601      	mov	r1, r0
 800a8de:	4606      	mov	r6, r0
 800a8e0:	ee18 0a10 	vmov	r0, s16
 800a8e4:	f000 fe04 	bl	800b4f0 <__mcmp>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	f73f adbb 	bgt.w	800a464 <_dtoa_r+0x4b4>
 800a8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f0:	9d01      	ldr	r5, [sp, #4]
 800a8f2:	43db      	mvns	r3, r3
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	f04f 0800 	mov.w	r8, #0
 800a8fa:	4631      	mov	r1, r6
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f000 fbb5 	bl	800b06c <_Bfree>
 800a902:	2f00      	cmp	r7, #0
 800a904:	f43f aea4 	beq.w	800a650 <_dtoa_r+0x6a0>
 800a908:	f1b8 0f00 	cmp.w	r8, #0
 800a90c:	d005      	beq.n	800a91a <_dtoa_r+0x96a>
 800a90e:	45b8      	cmp	r8, r7
 800a910:	d003      	beq.n	800a91a <_dtoa_r+0x96a>
 800a912:	4641      	mov	r1, r8
 800a914:	4620      	mov	r0, r4
 800a916:	f000 fba9 	bl	800b06c <_Bfree>
 800a91a:	4639      	mov	r1, r7
 800a91c:	4620      	mov	r0, r4
 800a91e:	f000 fba5 	bl	800b06c <_Bfree>
 800a922:	e695      	b.n	800a650 <_dtoa_r+0x6a0>
 800a924:	2600      	movs	r6, #0
 800a926:	4637      	mov	r7, r6
 800a928:	e7e1      	b.n	800a8ee <_dtoa_r+0x93e>
 800a92a:	9700      	str	r7, [sp, #0]
 800a92c:	4637      	mov	r7, r6
 800a92e:	e599      	b.n	800a464 <_dtoa_r+0x4b4>
 800a930:	40240000 	.word	0x40240000
 800a934:	9b08      	ldr	r3, [sp, #32]
 800a936:	2b00      	cmp	r3, #0
 800a938:	f000 80ca 	beq.w	800aad0 <_dtoa_r+0xb20>
 800a93c:	9b03      	ldr	r3, [sp, #12]
 800a93e:	9302      	str	r3, [sp, #8]
 800a940:	2d00      	cmp	r5, #0
 800a942:	dd05      	ble.n	800a950 <_dtoa_r+0x9a0>
 800a944:	4639      	mov	r1, r7
 800a946:	462a      	mov	r2, r5
 800a948:	4620      	mov	r0, r4
 800a94a:	f000 fd61 	bl	800b410 <__lshift>
 800a94e:	4607      	mov	r7, r0
 800a950:	f1b8 0f00 	cmp.w	r8, #0
 800a954:	d05b      	beq.n	800aa0e <_dtoa_r+0xa5e>
 800a956:	6879      	ldr	r1, [r7, #4]
 800a958:	4620      	mov	r0, r4
 800a95a:	f000 fb47 	bl	800afec <_Balloc>
 800a95e:	4605      	mov	r5, r0
 800a960:	b928      	cbnz	r0, 800a96e <_dtoa_r+0x9be>
 800a962:	4b87      	ldr	r3, [pc, #540]	; (800ab80 <_dtoa_r+0xbd0>)
 800a964:	4602      	mov	r2, r0
 800a966:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a96a:	f7ff bb3b 	b.w	8009fe4 <_dtoa_r+0x34>
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	3202      	adds	r2, #2
 800a972:	0092      	lsls	r2, r2, #2
 800a974:	f107 010c 	add.w	r1, r7, #12
 800a978:	300c      	adds	r0, #12
 800a97a:	f7fe fb15 	bl	8008fa8 <memcpy>
 800a97e:	2201      	movs	r2, #1
 800a980:	4629      	mov	r1, r5
 800a982:	4620      	mov	r0, r4
 800a984:	f000 fd44 	bl	800b410 <__lshift>
 800a988:	9b01      	ldr	r3, [sp, #4]
 800a98a:	f103 0901 	add.w	r9, r3, #1
 800a98e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a992:	4413      	add	r3, r2
 800a994:	9305      	str	r3, [sp, #20]
 800a996:	f00a 0301 	and.w	r3, sl, #1
 800a99a:	46b8      	mov	r8, r7
 800a99c:	9304      	str	r3, [sp, #16]
 800a99e:	4607      	mov	r7, r0
 800a9a0:	4631      	mov	r1, r6
 800a9a2:	ee18 0a10 	vmov	r0, s16
 800a9a6:	f7ff fa77 	bl	8009e98 <quorem>
 800a9aa:	4641      	mov	r1, r8
 800a9ac:	9002      	str	r0, [sp, #8]
 800a9ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a9b2:	ee18 0a10 	vmov	r0, s16
 800a9b6:	f000 fd9b 	bl	800b4f0 <__mcmp>
 800a9ba:	463a      	mov	r2, r7
 800a9bc:	9003      	str	r0, [sp, #12]
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f000 fdb1 	bl	800b528 <__mdiff>
 800a9c6:	68c2      	ldr	r2, [r0, #12]
 800a9c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a9cc:	4605      	mov	r5, r0
 800a9ce:	bb02      	cbnz	r2, 800aa12 <_dtoa_r+0xa62>
 800a9d0:	4601      	mov	r1, r0
 800a9d2:	ee18 0a10 	vmov	r0, s16
 800a9d6:	f000 fd8b 	bl	800b4f0 <__mcmp>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	4629      	mov	r1, r5
 800a9de:	4620      	mov	r0, r4
 800a9e0:	9207      	str	r2, [sp, #28]
 800a9e2:	f000 fb43 	bl	800b06c <_Bfree>
 800a9e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a9ea:	ea43 0102 	orr.w	r1, r3, r2
 800a9ee:	9b04      	ldr	r3, [sp, #16]
 800a9f0:	430b      	orrs	r3, r1
 800a9f2:	464d      	mov	r5, r9
 800a9f4:	d10f      	bne.n	800aa16 <_dtoa_r+0xa66>
 800a9f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9fa:	d02a      	beq.n	800aa52 <_dtoa_r+0xaa2>
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	dd02      	ble.n	800aa08 <_dtoa_r+0xa58>
 800aa02:	9b02      	ldr	r3, [sp, #8]
 800aa04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aa08:	f88b a000 	strb.w	sl, [fp]
 800aa0c:	e775      	b.n	800a8fa <_dtoa_r+0x94a>
 800aa0e:	4638      	mov	r0, r7
 800aa10:	e7ba      	b.n	800a988 <_dtoa_r+0x9d8>
 800aa12:	2201      	movs	r2, #1
 800aa14:	e7e2      	b.n	800a9dc <_dtoa_r+0xa2c>
 800aa16:	9b03      	ldr	r3, [sp, #12]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	db04      	blt.n	800aa26 <_dtoa_r+0xa76>
 800aa1c:	9906      	ldr	r1, [sp, #24]
 800aa1e:	430b      	orrs	r3, r1
 800aa20:	9904      	ldr	r1, [sp, #16]
 800aa22:	430b      	orrs	r3, r1
 800aa24:	d122      	bne.n	800aa6c <_dtoa_r+0xabc>
 800aa26:	2a00      	cmp	r2, #0
 800aa28:	ddee      	ble.n	800aa08 <_dtoa_r+0xa58>
 800aa2a:	ee18 1a10 	vmov	r1, s16
 800aa2e:	2201      	movs	r2, #1
 800aa30:	4620      	mov	r0, r4
 800aa32:	f000 fced 	bl	800b410 <__lshift>
 800aa36:	4631      	mov	r1, r6
 800aa38:	ee08 0a10 	vmov	s16, r0
 800aa3c:	f000 fd58 	bl	800b4f0 <__mcmp>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	dc03      	bgt.n	800aa4c <_dtoa_r+0xa9c>
 800aa44:	d1e0      	bne.n	800aa08 <_dtoa_r+0xa58>
 800aa46:	f01a 0f01 	tst.w	sl, #1
 800aa4a:	d0dd      	beq.n	800aa08 <_dtoa_r+0xa58>
 800aa4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa50:	d1d7      	bne.n	800aa02 <_dtoa_r+0xa52>
 800aa52:	2339      	movs	r3, #57	; 0x39
 800aa54:	f88b 3000 	strb.w	r3, [fp]
 800aa58:	462b      	mov	r3, r5
 800aa5a:	461d      	mov	r5, r3
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa62:	2a39      	cmp	r2, #57	; 0x39
 800aa64:	d071      	beq.n	800ab4a <_dtoa_r+0xb9a>
 800aa66:	3201      	adds	r2, #1
 800aa68:	701a      	strb	r2, [r3, #0]
 800aa6a:	e746      	b.n	800a8fa <_dtoa_r+0x94a>
 800aa6c:	2a00      	cmp	r2, #0
 800aa6e:	dd07      	ble.n	800aa80 <_dtoa_r+0xad0>
 800aa70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa74:	d0ed      	beq.n	800aa52 <_dtoa_r+0xaa2>
 800aa76:	f10a 0301 	add.w	r3, sl, #1
 800aa7a:	f88b 3000 	strb.w	r3, [fp]
 800aa7e:	e73c      	b.n	800a8fa <_dtoa_r+0x94a>
 800aa80:	9b05      	ldr	r3, [sp, #20]
 800aa82:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aa86:	4599      	cmp	r9, r3
 800aa88:	d047      	beq.n	800ab1a <_dtoa_r+0xb6a>
 800aa8a:	ee18 1a10 	vmov	r1, s16
 800aa8e:	2300      	movs	r3, #0
 800aa90:	220a      	movs	r2, #10
 800aa92:	4620      	mov	r0, r4
 800aa94:	f000 fb0c 	bl	800b0b0 <__multadd>
 800aa98:	45b8      	cmp	r8, r7
 800aa9a:	ee08 0a10 	vmov	s16, r0
 800aa9e:	f04f 0300 	mov.w	r3, #0
 800aaa2:	f04f 020a 	mov.w	r2, #10
 800aaa6:	4641      	mov	r1, r8
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	d106      	bne.n	800aaba <_dtoa_r+0xb0a>
 800aaac:	f000 fb00 	bl	800b0b0 <__multadd>
 800aab0:	4680      	mov	r8, r0
 800aab2:	4607      	mov	r7, r0
 800aab4:	f109 0901 	add.w	r9, r9, #1
 800aab8:	e772      	b.n	800a9a0 <_dtoa_r+0x9f0>
 800aaba:	f000 faf9 	bl	800b0b0 <__multadd>
 800aabe:	4639      	mov	r1, r7
 800aac0:	4680      	mov	r8, r0
 800aac2:	2300      	movs	r3, #0
 800aac4:	220a      	movs	r2, #10
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 faf2 	bl	800b0b0 <__multadd>
 800aacc:	4607      	mov	r7, r0
 800aace:	e7f1      	b.n	800aab4 <_dtoa_r+0xb04>
 800aad0:	9b03      	ldr	r3, [sp, #12]
 800aad2:	9302      	str	r3, [sp, #8]
 800aad4:	9d01      	ldr	r5, [sp, #4]
 800aad6:	ee18 0a10 	vmov	r0, s16
 800aada:	4631      	mov	r1, r6
 800aadc:	f7ff f9dc 	bl	8009e98 <quorem>
 800aae0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aae4:	9b01      	ldr	r3, [sp, #4]
 800aae6:	f805 ab01 	strb.w	sl, [r5], #1
 800aaea:	1aea      	subs	r2, r5, r3
 800aaec:	9b02      	ldr	r3, [sp, #8]
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	dd09      	ble.n	800ab06 <_dtoa_r+0xb56>
 800aaf2:	ee18 1a10 	vmov	r1, s16
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	220a      	movs	r2, #10
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 fad8 	bl	800b0b0 <__multadd>
 800ab00:	ee08 0a10 	vmov	s16, r0
 800ab04:	e7e7      	b.n	800aad6 <_dtoa_r+0xb26>
 800ab06:	9b02      	ldr	r3, [sp, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	bfc8      	it	gt
 800ab0c:	461d      	movgt	r5, r3
 800ab0e:	9b01      	ldr	r3, [sp, #4]
 800ab10:	bfd8      	it	le
 800ab12:	2501      	movle	r5, #1
 800ab14:	441d      	add	r5, r3
 800ab16:	f04f 0800 	mov.w	r8, #0
 800ab1a:	ee18 1a10 	vmov	r1, s16
 800ab1e:	2201      	movs	r2, #1
 800ab20:	4620      	mov	r0, r4
 800ab22:	f000 fc75 	bl	800b410 <__lshift>
 800ab26:	4631      	mov	r1, r6
 800ab28:	ee08 0a10 	vmov	s16, r0
 800ab2c:	f000 fce0 	bl	800b4f0 <__mcmp>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	dc91      	bgt.n	800aa58 <_dtoa_r+0xaa8>
 800ab34:	d102      	bne.n	800ab3c <_dtoa_r+0xb8c>
 800ab36:	f01a 0f01 	tst.w	sl, #1
 800ab3a:	d18d      	bne.n	800aa58 <_dtoa_r+0xaa8>
 800ab3c:	462b      	mov	r3, r5
 800ab3e:	461d      	mov	r5, r3
 800ab40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab44:	2a30      	cmp	r2, #48	; 0x30
 800ab46:	d0fa      	beq.n	800ab3e <_dtoa_r+0xb8e>
 800ab48:	e6d7      	b.n	800a8fa <_dtoa_r+0x94a>
 800ab4a:	9a01      	ldr	r2, [sp, #4]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d184      	bne.n	800aa5a <_dtoa_r+0xaaa>
 800ab50:	9b00      	ldr	r3, [sp, #0]
 800ab52:	3301      	adds	r3, #1
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	2331      	movs	r3, #49	; 0x31
 800ab58:	7013      	strb	r3, [r2, #0]
 800ab5a:	e6ce      	b.n	800a8fa <_dtoa_r+0x94a>
 800ab5c:	4b09      	ldr	r3, [pc, #36]	; (800ab84 <_dtoa_r+0xbd4>)
 800ab5e:	f7ff ba95 	b.w	800a08c <_dtoa_r+0xdc>
 800ab62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f47f aa6e 	bne.w	800a046 <_dtoa_r+0x96>
 800ab6a:	4b07      	ldr	r3, [pc, #28]	; (800ab88 <_dtoa_r+0xbd8>)
 800ab6c:	f7ff ba8e 	b.w	800a08c <_dtoa_r+0xdc>
 800ab70:	9b02      	ldr	r3, [sp, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	dcae      	bgt.n	800aad4 <_dtoa_r+0xb24>
 800ab76:	9b06      	ldr	r3, [sp, #24]
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	f73f aea8 	bgt.w	800a8ce <_dtoa_r+0x91e>
 800ab7e:	e7a9      	b.n	800aad4 <_dtoa_r+0xb24>
 800ab80:	0800c7ec 	.word	0x0800c7ec
 800ab84:	0800c648 	.word	0x0800c648
 800ab88:	0800c76d 	.word	0x0800c76d

0800ab8c <__sflush_r>:
 800ab8c:	898a      	ldrh	r2, [r1, #12]
 800ab8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab92:	4605      	mov	r5, r0
 800ab94:	0710      	lsls	r0, r2, #28
 800ab96:	460c      	mov	r4, r1
 800ab98:	d458      	bmi.n	800ac4c <__sflush_r+0xc0>
 800ab9a:	684b      	ldr	r3, [r1, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dc05      	bgt.n	800abac <__sflush_r+0x20>
 800aba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	dc02      	bgt.n	800abac <__sflush_r+0x20>
 800aba6:	2000      	movs	r0, #0
 800aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abae:	2e00      	cmp	r6, #0
 800abb0:	d0f9      	beq.n	800aba6 <__sflush_r+0x1a>
 800abb2:	2300      	movs	r3, #0
 800abb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abb8:	682f      	ldr	r7, [r5, #0]
 800abba:	602b      	str	r3, [r5, #0]
 800abbc:	d032      	beq.n	800ac24 <__sflush_r+0x98>
 800abbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abc0:	89a3      	ldrh	r3, [r4, #12]
 800abc2:	075a      	lsls	r2, r3, #29
 800abc4:	d505      	bpl.n	800abd2 <__sflush_r+0x46>
 800abc6:	6863      	ldr	r3, [r4, #4]
 800abc8:	1ac0      	subs	r0, r0, r3
 800abca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abcc:	b10b      	cbz	r3, 800abd2 <__sflush_r+0x46>
 800abce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abd0:	1ac0      	subs	r0, r0, r3
 800abd2:	2300      	movs	r3, #0
 800abd4:	4602      	mov	r2, r0
 800abd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abd8:	6a21      	ldr	r1, [r4, #32]
 800abda:	4628      	mov	r0, r5
 800abdc:	47b0      	blx	r6
 800abde:	1c43      	adds	r3, r0, #1
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	d106      	bne.n	800abf2 <__sflush_r+0x66>
 800abe4:	6829      	ldr	r1, [r5, #0]
 800abe6:	291d      	cmp	r1, #29
 800abe8:	d82c      	bhi.n	800ac44 <__sflush_r+0xb8>
 800abea:	4a2a      	ldr	r2, [pc, #168]	; (800ac94 <__sflush_r+0x108>)
 800abec:	40ca      	lsrs	r2, r1
 800abee:	07d6      	lsls	r6, r2, #31
 800abf0:	d528      	bpl.n	800ac44 <__sflush_r+0xb8>
 800abf2:	2200      	movs	r2, #0
 800abf4:	6062      	str	r2, [r4, #4]
 800abf6:	04d9      	lsls	r1, r3, #19
 800abf8:	6922      	ldr	r2, [r4, #16]
 800abfa:	6022      	str	r2, [r4, #0]
 800abfc:	d504      	bpl.n	800ac08 <__sflush_r+0x7c>
 800abfe:	1c42      	adds	r2, r0, #1
 800ac00:	d101      	bne.n	800ac06 <__sflush_r+0x7a>
 800ac02:	682b      	ldr	r3, [r5, #0]
 800ac04:	b903      	cbnz	r3, 800ac08 <__sflush_r+0x7c>
 800ac06:	6560      	str	r0, [r4, #84]	; 0x54
 800ac08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac0a:	602f      	str	r7, [r5, #0]
 800ac0c:	2900      	cmp	r1, #0
 800ac0e:	d0ca      	beq.n	800aba6 <__sflush_r+0x1a>
 800ac10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac14:	4299      	cmp	r1, r3
 800ac16:	d002      	beq.n	800ac1e <__sflush_r+0x92>
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f7fe f9db 	bl	8008fd4 <_free_r>
 800ac1e:	2000      	movs	r0, #0
 800ac20:	6360      	str	r0, [r4, #52]	; 0x34
 800ac22:	e7c1      	b.n	800aba8 <__sflush_r+0x1c>
 800ac24:	6a21      	ldr	r1, [r4, #32]
 800ac26:	2301      	movs	r3, #1
 800ac28:	4628      	mov	r0, r5
 800ac2a:	47b0      	blx	r6
 800ac2c:	1c41      	adds	r1, r0, #1
 800ac2e:	d1c7      	bne.n	800abc0 <__sflush_r+0x34>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0c4      	beq.n	800abc0 <__sflush_r+0x34>
 800ac36:	2b1d      	cmp	r3, #29
 800ac38:	d001      	beq.n	800ac3e <__sflush_r+0xb2>
 800ac3a:	2b16      	cmp	r3, #22
 800ac3c:	d101      	bne.n	800ac42 <__sflush_r+0xb6>
 800ac3e:	602f      	str	r7, [r5, #0]
 800ac40:	e7b1      	b.n	800aba6 <__sflush_r+0x1a>
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	e7ad      	b.n	800aba8 <__sflush_r+0x1c>
 800ac4c:	690f      	ldr	r7, [r1, #16]
 800ac4e:	2f00      	cmp	r7, #0
 800ac50:	d0a9      	beq.n	800aba6 <__sflush_r+0x1a>
 800ac52:	0793      	lsls	r3, r2, #30
 800ac54:	680e      	ldr	r6, [r1, #0]
 800ac56:	bf08      	it	eq
 800ac58:	694b      	ldreq	r3, [r1, #20]
 800ac5a:	600f      	str	r7, [r1, #0]
 800ac5c:	bf18      	it	ne
 800ac5e:	2300      	movne	r3, #0
 800ac60:	eba6 0807 	sub.w	r8, r6, r7
 800ac64:	608b      	str	r3, [r1, #8]
 800ac66:	f1b8 0f00 	cmp.w	r8, #0
 800ac6a:	dd9c      	ble.n	800aba6 <__sflush_r+0x1a>
 800ac6c:	6a21      	ldr	r1, [r4, #32]
 800ac6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac70:	4643      	mov	r3, r8
 800ac72:	463a      	mov	r2, r7
 800ac74:	4628      	mov	r0, r5
 800ac76:	47b0      	blx	r6
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	dc06      	bgt.n	800ac8a <__sflush_r+0xfe>
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	f04f 30ff 	mov.w	r0, #4294967295
 800ac88:	e78e      	b.n	800aba8 <__sflush_r+0x1c>
 800ac8a:	4407      	add	r7, r0
 800ac8c:	eba8 0800 	sub.w	r8, r8, r0
 800ac90:	e7e9      	b.n	800ac66 <__sflush_r+0xda>
 800ac92:	bf00      	nop
 800ac94:	20400001 	.word	0x20400001

0800ac98 <_fflush_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	690b      	ldr	r3, [r1, #16]
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	460c      	mov	r4, r1
 800aca0:	b913      	cbnz	r3, 800aca8 <_fflush_r+0x10>
 800aca2:	2500      	movs	r5, #0
 800aca4:	4628      	mov	r0, r5
 800aca6:	bd38      	pop	{r3, r4, r5, pc}
 800aca8:	b118      	cbz	r0, 800acb2 <_fflush_r+0x1a>
 800acaa:	6983      	ldr	r3, [r0, #24]
 800acac:	b90b      	cbnz	r3, 800acb2 <_fflush_r+0x1a>
 800acae:	f000 f887 	bl	800adc0 <__sinit>
 800acb2:	4b14      	ldr	r3, [pc, #80]	; (800ad04 <_fflush_r+0x6c>)
 800acb4:	429c      	cmp	r4, r3
 800acb6:	d11b      	bne.n	800acf0 <_fflush_r+0x58>
 800acb8:	686c      	ldr	r4, [r5, #4]
 800acba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d0ef      	beq.n	800aca2 <_fflush_r+0xa>
 800acc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acc4:	07d0      	lsls	r0, r2, #31
 800acc6:	d404      	bmi.n	800acd2 <_fflush_r+0x3a>
 800acc8:	0599      	lsls	r1, r3, #22
 800acca:	d402      	bmi.n	800acd2 <_fflush_r+0x3a>
 800accc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acce:	f000 f91a 	bl	800af06 <__retarget_lock_acquire_recursive>
 800acd2:	4628      	mov	r0, r5
 800acd4:	4621      	mov	r1, r4
 800acd6:	f7ff ff59 	bl	800ab8c <__sflush_r>
 800acda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acdc:	07da      	lsls	r2, r3, #31
 800acde:	4605      	mov	r5, r0
 800ace0:	d4e0      	bmi.n	800aca4 <_fflush_r+0xc>
 800ace2:	89a3      	ldrh	r3, [r4, #12]
 800ace4:	059b      	lsls	r3, r3, #22
 800ace6:	d4dd      	bmi.n	800aca4 <_fflush_r+0xc>
 800ace8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acea:	f000 f90d 	bl	800af08 <__retarget_lock_release_recursive>
 800acee:	e7d9      	b.n	800aca4 <_fflush_r+0xc>
 800acf0:	4b05      	ldr	r3, [pc, #20]	; (800ad08 <_fflush_r+0x70>)
 800acf2:	429c      	cmp	r4, r3
 800acf4:	d101      	bne.n	800acfa <_fflush_r+0x62>
 800acf6:	68ac      	ldr	r4, [r5, #8]
 800acf8:	e7df      	b.n	800acba <_fflush_r+0x22>
 800acfa:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <_fflush_r+0x74>)
 800acfc:	429c      	cmp	r4, r3
 800acfe:	bf08      	it	eq
 800ad00:	68ec      	ldreq	r4, [r5, #12]
 800ad02:	e7da      	b.n	800acba <_fflush_r+0x22>
 800ad04:	0800c820 	.word	0x0800c820
 800ad08:	0800c840 	.word	0x0800c840
 800ad0c:	0800c800 	.word	0x0800c800

0800ad10 <std>:
 800ad10:	2300      	movs	r3, #0
 800ad12:	b510      	push	{r4, lr}
 800ad14:	4604      	mov	r4, r0
 800ad16:	e9c0 3300 	strd	r3, r3, [r0]
 800ad1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad1e:	6083      	str	r3, [r0, #8]
 800ad20:	8181      	strh	r1, [r0, #12]
 800ad22:	6643      	str	r3, [r0, #100]	; 0x64
 800ad24:	81c2      	strh	r2, [r0, #14]
 800ad26:	6183      	str	r3, [r0, #24]
 800ad28:	4619      	mov	r1, r3
 800ad2a:	2208      	movs	r2, #8
 800ad2c:	305c      	adds	r0, #92	; 0x5c
 800ad2e:	f7fe f949 	bl	8008fc4 <memset>
 800ad32:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <std+0x38>)
 800ad34:	6263      	str	r3, [r4, #36]	; 0x24
 800ad36:	4b05      	ldr	r3, [pc, #20]	; (800ad4c <std+0x3c>)
 800ad38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad3a:	4b05      	ldr	r3, [pc, #20]	; (800ad50 <std+0x40>)
 800ad3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad3e:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <std+0x44>)
 800ad40:	6224      	str	r4, [r4, #32]
 800ad42:	6323      	str	r3, [r4, #48]	; 0x30
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	bf00      	nop
 800ad48:	0800bc8d 	.word	0x0800bc8d
 800ad4c:	0800bcaf 	.word	0x0800bcaf
 800ad50:	0800bce7 	.word	0x0800bce7
 800ad54:	0800bd0b 	.word	0x0800bd0b

0800ad58 <_cleanup_r>:
 800ad58:	4901      	ldr	r1, [pc, #4]	; (800ad60 <_cleanup_r+0x8>)
 800ad5a:	f000 b8af 	b.w	800aebc <_fwalk_reent>
 800ad5e:	bf00      	nop
 800ad60:	0800ac99 	.word	0x0800ac99

0800ad64 <__sfmoreglue>:
 800ad64:	b570      	push	{r4, r5, r6, lr}
 800ad66:	2268      	movs	r2, #104	; 0x68
 800ad68:	1e4d      	subs	r5, r1, #1
 800ad6a:	4355      	muls	r5, r2
 800ad6c:	460e      	mov	r6, r1
 800ad6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad72:	f7fe f99b 	bl	80090ac <_malloc_r>
 800ad76:	4604      	mov	r4, r0
 800ad78:	b140      	cbz	r0, 800ad8c <__sfmoreglue+0x28>
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ad80:	300c      	adds	r0, #12
 800ad82:	60a0      	str	r0, [r4, #8]
 800ad84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad88:	f7fe f91c 	bl	8008fc4 <memset>
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}

0800ad90 <__sfp_lock_acquire>:
 800ad90:	4801      	ldr	r0, [pc, #4]	; (800ad98 <__sfp_lock_acquire+0x8>)
 800ad92:	f000 b8b8 	b.w	800af06 <__retarget_lock_acquire_recursive>
 800ad96:	bf00      	nop
 800ad98:	20000539 	.word	0x20000539

0800ad9c <__sfp_lock_release>:
 800ad9c:	4801      	ldr	r0, [pc, #4]	; (800ada4 <__sfp_lock_release+0x8>)
 800ad9e:	f000 b8b3 	b.w	800af08 <__retarget_lock_release_recursive>
 800ada2:	bf00      	nop
 800ada4:	20000539 	.word	0x20000539

0800ada8 <__sinit_lock_acquire>:
 800ada8:	4801      	ldr	r0, [pc, #4]	; (800adb0 <__sinit_lock_acquire+0x8>)
 800adaa:	f000 b8ac 	b.w	800af06 <__retarget_lock_acquire_recursive>
 800adae:	bf00      	nop
 800adb0:	2000053a 	.word	0x2000053a

0800adb4 <__sinit_lock_release>:
 800adb4:	4801      	ldr	r0, [pc, #4]	; (800adbc <__sinit_lock_release+0x8>)
 800adb6:	f000 b8a7 	b.w	800af08 <__retarget_lock_release_recursive>
 800adba:	bf00      	nop
 800adbc:	2000053a 	.word	0x2000053a

0800adc0 <__sinit>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	4604      	mov	r4, r0
 800adc4:	f7ff fff0 	bl	800ada8 <__sinit_lock_acquire>
 800adc8:	69a3      	ldr	r3, [r4, #24]
 800adca:	b11b      	cbz	r3, 800add4 <__sinit+0x14>
 800adcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800add0:	f7ff bff0 	b.w	800adb4 <__sinit_lock_release>
 800add4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800add8:	6523      	str	r3, [r4, #80]	; 0x50
 800adda:	4b13      	ldr	r3, [pc, #76]	; (800ae28 <__sinit+0x68>)
 800addc:	4a13      	ldr	r2, [pc, #76]	; (800ae2c <__sinit+0x6c>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ade2:	42a3      	cmp	r3, r4
 800ade4:	bf04      	itt	eq
 800ade6:	2301      	moveq	r3, #1
 800ade8:	61a3      	streq	r3, [r4, #24]
 800adea:	4620      	mov	r0, r4
 800adec:	f000 f820 	bl	800ae30 <__sfp>
 800adf0:	6060      	str	r0, [r4, #4]
 800adf2:	4620      	mov	r0, r4
 800adf4:	f000 f81c 	bl	800ae30 <__sfp>
 800adf8:	60a0      	str	r0, [r4, #8]
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 f818 	bl	800ae30 <__sfp>
 800ae00:	2200      	movs	r2, #0
 800ae02:	60e0      	str	r0, [r4, #12]
 800ae04:	2104      	movs	r1, #4
 800ae06:	6860      	ldr	r0, [r4, #4]
 800ae08:	f7ff ff82 	bl	800ad10 <std>
 800ae0c:	68a0      	ldr	r0, [r4, #8]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	2109      	movs	r1, #9
 800ae12:	f7ff ff7d 	bl	800ad10 <std>
 800ae16:	68e0      	ldr	r0, [r4, #12]
 800ae18:	2202      	movs	r2, #2
 800ae1a:	2112      	movs	r1, #18
 800ae1c:	f7ff ff78 	bl	800ad10 <std>
 800ae20:	2301      	movs	r3, #1
 800ae22:	61a3      	str	r3, [r4, #24]
 800ae24:	e7d2      	b.n	800adcc <__sinit+0xc>
 800ae26:	bf00      	nop
 800ae28:	0800c634 	.word	0x0800c634
 800ae2c:	0800ad59 	.word	0x0800ad59

0800ae30 <__sfp>:
 800ae30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae32:	4607      	mov	r7, r0
 800ae34:	f7ff ffac 	bl	800ad90 <__sfp_lock_acquire>
 800ae38:	4b1e      	ldr	r3, [pc, #120]	; (800aeb4 <__sfp+0x84>)
 800ae3a:	681e      	ldr	r6, [r3, #0]
 800ae3c:	69b3      	ldr	r3, [r6, #24]
 800ae3e:	b913      	cbnz	r3, 800ae46 <__sfp+0x16>
 800ae40:	4630      	mov	r0, r6
 800ae42:	f7ff ffbd 	bl	800adc0 <__sinit>
 800ae46:	3648      	adds	r6, #72	; 0x48
 800ae48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	d503      	bpl.n	800ae58 <__sfp+0x28>
 800ae50:	6833      	ldr	r3, [r6, #0]
 800ae52:	b30b      	cbz	r3, 800ae98 <__sfp+0x68>
 800ae54:	6836      	ldr	r6, [r6, #0]
 800ae56:	e7f7      	b.n	800ae48 <__sfp+0x18>
 800ae58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae5c:	b9d5      	cbnz	r5, 800ae94 <__sfp+0x64>
 800ae5e:	4b16      	ldr	r3, [pc, #88]	; (800aeb8 <__sfp+0x88>)
 800ae60:	60e3      	str	r3, [r4, #12]
 800ae62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae66:	6665      	str	r5, [r4, #100]	; 0x64
 800ae68:	f000 f84c 	bl	800af04 <__retarget_lock_init_recursive>
 800ae6c:	f7ff ff96 	bl	800ad9c <__sfp_lock_release>
 800ae70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae78:	6025      	str	r5, [r4, #0]
 800ae7a:	61a5      	str	r5, [r4, #24]
 800ae7c:	2208      	movs	r2, #8
 800ae7e:	4629      	mov	r1, r5
 800ae80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae84:	f7fe f89e 	bl	8008fc4 <memset>
 800ae88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae90:	4620      	mov	r0, r4
 800ae92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae94:	3468      	adds	r4, #104	; 0x68
 800ae96:	e7d9      	b.n	800ae4c <__sfp+0x1c>
 800ae98:	2104      	movs	r1, #4
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	f7ff ff62 	bl	800ad64 <__sfmoreglue>
 800aea0:	4604      	mov	r4, r0
 800aea2:	6030      	str	r0, [r6, #0]
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d1d5      	bne.n	800ae54 <__sfp+0x24>
 800aea8:	f7ff ff78 	bl	800ad9c <__sfp_lock_release>
 800aeac:	230c      	movs	r3, #12
 800aeae:	603b      	str	r3, [r7, #0]
 800aeb0:	e7ee      	b.n	800ae90 <__sfp+0x60>
 800aeb2:	bf00      	nop
 800aeb4:	0800c634 	.word	0x0800c634
 800aeb8:	ffff0001 	.word	0xffff0001

0800aebc <_fwalk_reent>:
 800aebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec0:	4606      	mov	r6, r0
 800aec2:	4688      	mov	r8, r1
 800aec4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aec8:	2700      	movs	r7, #0
 800aeca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aece:	f1b9 0901 	subs.w	r9, r9, #1
 800aed2:	d505      	bpl.n	800aee0 <_fwalk_reent+0x24>
 800aed4:	6824      	ldr	r4, [r4, #0]
 800aed6:	2c00      	cmp	r4, #0
 800aed8:	d1f7      	bne.n	800aeca <_fwalk_reent+0xe>
 800aeda:	4638      	mov	r0, r7
 800aedc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee0:	89ab      	ldrh	r3, [r5, #12]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d907      	bls.n	800aef6 <_fwalk_reent+0x3a>
 800aee6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aeea:	3301      	adds	r3, #1
 800aeec:	d003      	beq.n	800aef6 <_fwalk_reent+0x3a>
 800aeee:	4629      	mov	r1, r5
 800aef0:	4630      	mov	r0, r6
 800aef2:	47c0      	blx	r8
 800aef4:	4307      	orrs	r7, r0
 800aef6:	3568      	adds	r5, #104	; 0x68
 800aef8:	e7e9      	b.n	800aece <_fwalk_reent+0x12>
	...

0800aefc <_localeconv_r>:
 800aefc:	4800      	ldr	r0, [pc, #0]	; (800af00 <_localeconv_r+0x4>)
 800aefe:	4770      	bx	lr
 800af00:	20000164 	.word	0x20000164

0800af04 <__retarget_lock_init_recursive>:
 800af04:	4770      	bx	lr

0800af06 <__retarget_lock_acquire_recursive>:
 800af06:	4770      	bx	lr

0800af08 <__retarget_lock_release_recursive>:
 800af08:	4770      	bx	lr

0800af0a <__swhatbuf_r>:
 800af0a:	b570      	push	{r4, r5, r6, lr}
 800af0c:	460e      	mov	r6, r1
 800af0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af12:	2900      	cmp	r1, #0
 800af14:	b096      	sub	sp, #88	; 0x58
 800af16:	4614      	mov	r4, r2
 800af18:	461d      	mov	r5, r3
 800af1a:	da08      	bge.n	800af2e <__swhatbuf_r+0x24>
 800af1c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	602a      	str	r2, [r5, #0]
 800af24:	061a      	lsls	r2, r3, #24
 800af26:	d410      	bmi.n	800af4a <__swhatbuf_r+0x40>
 800af28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af2c:	e00e      	b.n	800af4c <__swhatbuf_r+0x42>
 800af2e:	466a      	mov	r2, sp
 800af30:	f000 ff42 	bl	800bdb8 <_fstat_r>
 800af34:	2800      	cmp	r0, #0
 800af36:	dbf1      	blt.n	800af1c <__swhatbuf_r+0x12>
 800af38:	9a01      	ldr	r2, [sp, #4]
 800af3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af42:	425a      	negs	r2, r3
 800af44:	415a      	adcs	r2, r3
 800af46:	602a      	str	r2, [r5, #0]
 800af48:	e7ee      	b.n	800af28 <__swhatbuf_r+0x1e>
 800af4a:	2340      	movs	r3, #64	; 0x40
 800af4c:	2000      	movs	r0, #0
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	b016      	add	sp, #88	; 0x58
 800af52:	bd70      	pop	{r4, r5, r6, pc}

0800af54 <__smakebuf_r>:
 800af54:	898b      	ldrh	r3, [r1, #12]
 800af56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af58:	079d      	lsls	r5, r3, #30
 800af5a:	4606      	mov	r6, r0
 800af5c:	460c      	mov	r4, r1
 800af5e:	d507      	bpl.n	800af70 <__smakebuf_r+0x1c>
 800af60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	6123      	str	r3, [r4, #16]
 800af68:	2301      	movs	r3, #1
 800af6a:	6163      	str	r3, [r4, #20]
 800af6c:	b002      	add	sp, #8
 800af6e:	bd70      	pop	{r4, r5, r6, pc}
 800af70:	ab01      	add	r3, sp, #4
 800af72:	466a      	mov	r2, sp
 800af74:	f7ff ffc9 	bl	800af0a <__swhatbuf_r>
 800af78:	9900      	ldr	r1, [sp, #0]
 800af7a:	4605      	mov	r5, r0
 800af7c:	4630      	mov	r0, r6
 800af7e:	f7fe f895 	bl	80090ac <_malloc_r>
 800af82:	b948      	cbnz	r0, 800af98 <__smakebuf_r+0x44>
 800af84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af88:	059a      	lsls	r2, r3, #22
 800af8a:	d4ef      	bmi.n	800af6c <__smakebuf_r+0x18>
 800af8c:	f023 0303 	bic.w	r3, r3, #3
 800af90:	f043 0302 	orr.w	r3, r3, #2
 800af94:	81a3      	strh	r3, [r4, #12]
 800af96:	e7e3      	b.n	800af60 <__smakebuf_r+0xc>
 800af98:	4b0d      	ldr	r3, [pc, #52]	; (800afd0 <__smakebuf_r+0x7c>)
 800af9a:	62b3      	str	r3, [r6, #40]	; 0x28
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	6020      	str	r0, [r4, #0]
 800afa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afa4:	81a3      	strh	r3, [r4, #12]
 800afa6:	9b00      	ldr	r3, [sp, #0]
 800afa8:	6163      	str	r3, [r4, #20]
 800afaa:	9b01      	ldr	r3, [sp, #4]
 800afac:	6120      	str	r0, [r4, #16]
 800afae:	b15b      	cbz	r3, 800afc8 <__smakebuf_r+0x74>
 800afb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afb4:	4630      	mov	r0, r6
 800afb6:	f000 ff11 	bl	800bddc <_isatty_r>
 800afba:	b128      	cbz	r0, 800afc8 <__smakebuf_r+0x74>
 800afbc:	89a3      	ldrh	r3, [r4, #12]
 800afbe:	f023 0303 	bic.w	r3, r3, #3
 800afc2:	f043 0301 	orr.w	r3, r3, #1
 800afc6:	81a3      	strh	r3, [r4, #12]
 800afc8:	89a0      	ldrh	r0, [r4, #12]
 800afca:	4305      	orrs	r5, r0
 800afcc:	81a5      	strh	r5, [r4, #12]
 800afce:	e7cd      	b.n	800af6c <__smakebuf_r+0x18>
 800afd0:	0800ad59 	.word	0x0800ad59

0800afd4 <__malloc_lock>:
 800afd4:	4801      	ldr	r0, [pc, #4]	; (800afdc <__malloc_lock+0x8>)
 800afd6:	f7ff bf96 	b.w	800af06 <__retarget_lock_acquire_recursive>
 800afda:	bf00      	nop
 800afdc:	20000538 	.word	0x20000538

0800afe0 <__malloc_unlock>:
 800afe0:	4801      	ldr	r0, [pc, #4]	; (800afe8 <__malloc_unlock+0x8>)
 800afe2:	f7ff bf91 	b.w	800af08 <__retarget_lock_release_recursive>
 800afe6:	bf00      	nop
 800afe8:	20000538 	.word	0x20000538

0800afec <_Balloc>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aff0:	4604      	mov	r4, r0
 800aff2:	460d      	mov	r5, r1
 800aff4:	b976      	cbnz	r6, 800b014 <_Balloc+0x28>
 800aff6:	2010      	movs	r0, #16
 800aff8:	f7fd ffce 	bl	8008f98 <malloc>
 800affc:	4602      	mov	r2, r0
 800affe:	6260      	str	r0, [r4, #36]	; 0x24
 800b000:	b920      	cbnz	r0, 800b00c <_Balloc+0x20>
 800b002:	4b18      	ldr	r3, [pc, #96]	; (800b064 <_Balloc+0x78>)
 800b004:	4818      	ldr	r0, [pc, #96]	; (800b068 <_Balloc+0x7c>)
 800b006:	2166      	movs	r1, #102	; 0x66
 800b008:	f000 fe96 	bl	800bd38 <__assert_func>
 800b00c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b010:	6006      	str	r6, [r0, #0]
 800b012:	60c6      	str	r6, [r0, #12]
 800b014:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b016:	68f3      	ldr	r3, [r6, #12]
 800b018:	b183      	cbz	r3, 800b03c <_Balloc+0x50>
 800b01a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b022:	b9b8      	cbnz	r0, 800b054 <_Balloc+0x68>
 800b024:	2101      	movs	r1, #1
 800b026:	fa01 f605 	lsl.w	r6, r1, r5
 800b02a:	1d72      	adds	r2, r6, #5
 800b02c:	0092      	lsls	r2, r2, #2
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 fb60 	bl	800b6f4 <_calloc_r>
 800b034:	b160      	cbz	r0, 800b050 <_Balloc+0x64>
 800b036:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b03a:	e00e      	b.n	800b05a <_Balloc+0x6e>
 800b03c:	2221      	movs	r2, #33	; 0x21
 800b03e:	2104      	movs	r1, #4
 800b040:	4620      	mov	r0, r4
 800b042:	f000 fb57 	bl	800b6f4 <_calloc_r>
 800b046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b048:	60f0      	str	r0, [r6, #12]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1e4      	bne.n	800b01a <_Balloc+0x2e>
 800b050:	2000      	movs	r0, #0
 800b052:	bd70      	pop	{r4, r5, r6, pc}
 800b054:	6802      	ldr	r2, [r0, #0]
 800b056:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b05a:	2300      	movs	r3, #0
 800b05c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b060:	e7f7      	b.n	800b052 <_Balloc+0x66>
 800b062:	bf00      	nop
 800b064:	0800c77a 	.word	0x0800c77a
 800b068:	0800c860 	.word	0x0800c860

0800b06c <_Bfree>:
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b070:	4605      	mov	r5, r0
 800b072:	460c      	mov	r4, r1
 800b074:	b976      	cbnz	r6, 800b094 <_Bfree+0x28>
 800b076:	2010      	movs	r0, #16
 800b078:	f7fd ff8e 	bl	8008f98 <malloc>
 800b07c:	4602      	mov	r2, r0
 800b07e:	6268      	str	r0, [r5, #36]	; 0x24
 800b080:	b920      	cbnz	r0, 800b08c <_Bfree+0x20>
 800b082:	4b09      	ldr	r3, [pc, #36]	; (800b0a8 <_Bfree+0x3c>)
 800b084:	4809      	ldr	r0, [pc, #36]	; (800b0ac <_Bfree+0x40>)
 800b086:	218a      	movs	r1, #138	; 0x8a
 800b088:	f000 fe56 	bl	800bd38 <__assert_func>
 800b08c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b090:	6006      	str	r6, [r0, #0]
 800b092:	60c6      	str	r6, [r0, #12]
 800b094:	b13c      	cbz	r4, 800b0a6 <_Bfree+0x3a>
 800b096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b098:	6862      	ldr	r2, [r4, #4]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0a0:	6021      	str	r1, [r4, #0]
 800b0a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0a6:	bd70      	pop	{r4, r5, r6, pc}
 800b0a8:	0800c77a 	.word	0x0800c77a
 800b0ac:	0800c860 	.word	0x0800c860

0800b0b0 <__multadd>:
 800b0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b4:	690d      	ldr	r5, [r1, #16]
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	460c      	mov	r4, r1
 800b0ba:	461e      	mov	r6, r3
 800b0bc:	f101 0c14 	add.w	ip, r1, #20
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	f8dc 3000 	ldr.w	r3, [ip]
 800b0c6:	b299      	uxth	r1, r3
 800b0c8:	fb02 6101 	mla	r1, r2, r1, r6
 800b0cc:	0c1e      	lsrs	r6, r3, #16
 800b0ce:	0c0b      	lsrs	r3, r1, #16
 800b0d0:	fb02 3306 	mla	r3, r2, r6, r3
 800b0d4:	b289      	uxth	r1, r1
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0dc:	4285      	cmp	r5, r0
 800b0de:	f84c 1b04 	str.w	r1, [ip], #4
 800b0e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0e6:	dcec      	bgt.n	800b0c2 <__multadd+0x12>
 800b0e8:	b30e      	cbz	r6, 800b12e <__multadd+0x7e>
 800b0ea:	68a3      	ldr	r3, [r4, #8]
 800b0ec:	42ab      	cmp	r3, r5
 800b0ee:	dc19      	bgt.n	800b124 <__multadd+0x74>
 800b0f0:	6861      	ldr	r1, [r4, #4]
 800b0f2:	4638      	mov	r0, r7
 800b0f4:	3101      	adds	r1, #1
 800b0f6:	f7ff ff79 	bl	800afec <_Balloc>
 800b0fa:	4680      	mov	r8, r0
 800b0fc:	b928      	cbnz	r0, 800b10a <__multadd+0x5a>
 800b0fe:	4602      	mov	r2, r0
 800b100:	4b0c      	ldr	r3, [pc, #48]	; (800b134 <__multadd+0x84>)
 800b102:	480d      	ldr	r0, [pc, #52]	; (800b138 <__multadd+0x88>)
 800b104:	21b5      	movs	r1, #181	; 0xb5
 800b106:	f000 fe17 	bl	800bd38 <__assert_func>
 800b10a:	6922      	ldr	r2, [r4, #16]
 800b10c:	3202      	adds	r2, #2
 800b10e:	f104 010c 	add.w	r1, r4, #12
 800b112:	0092      	lsls	r2, r2, #2
 800b114:	300c      	adds	r0, #12
 800b116:	f7fd ff47 	bl	8008fa8 <memcpy>
 800b11a:	4621      	mov	r1, r4
 800b11c:	4638      	mov	r0, r7
 800b11e:	f7ff ffa5 	bl	800b06c <_Bfree>
 800b122:	4644      	mov	r4, r8
 800b124:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b128:	3501      	adds	r5, #1
 800b12a:	615e      	str	r6, [r3, #20]
 800b12c:	6125      	str	r5, [r4, #16]
 800b12e:	4620      	mov	r0, r4
 800b130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b134:	0800c7ec 	.word	0x0800c7ec
 800b138:	0800c860 	.word	0x0800c860

0800b13c <__hi0bits>:
 800b13c:	0c03      	lsrs	r3, r0, #16
 800b13e:	041b      	lsls	r3, r3, #16
 800b140:	b9d3      	cbnz	r3, 800b178 <__hi0bits+0x3c>
 800b142:	0400      	lsls	r0, r0, #16
 800b144:	2310      	movs	r3, #16
 800b146:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b14a:	bf04      	itt	eq
 800b14c:	0200      	lsleq	r0, r0, #8
 800b14e:	3308      	addeq	r3, #8
 800b150:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b154:	bf04      	itt	eq
 800b156:	0100      	lsleq	r0, r0, #4
 800b158:	3304      	addeq	r3, #4
 800b15a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b15e:	bf04      	itt	eq
 800b160:	0080      	lsleq	r0, r0, #2
 800b162:	3302      	addeq	r3, #2
 800b164:	2800      	cmp	r0, #0
 800b166:	db05      	blt.n	800b174 <__hi0bits+0x38>
 800b168:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b16c:	f103 0301 	add.w	r3, r3, #1
 800b170:	bf08      	it	eq
 800b172:	2320      	moveq	r3, #32
 800b174:	4618      	mov	r0, r3
 800b176:	4770      	bx	lr
 800b178:	2300      	movs	r3, #0
 800b17a:	e7e4      	b.n	800b146 <__hi0bits+0xa>

0800b17c <__lo0bits>:
 800b17c:	6803      	ldr	r3, [r0, #0]
 800b17e:	f013 0207 	ands.w	r2, r3, #7
 800b182:	4601      	mov	r1, r0
 800b184:	d00b      	beq.n	800b19e <__lo0bits+0x22>
 800b186:	07da      	lsls	r2, r3, #31
 800b188:	d423      	bmi.n	800b1d2 <__lo0bits+0x56>
 800b18a:	0798      	lsls	r0, r3, #30
 800b18c:	bf49      	itett	mi
 800b18e:	085b      	lsrmi	r3, r3, #1
 800b190:	089b      	lsrpl	r3, r3, #2
 800b192:	2001      	movmi	r0, #1
 800b194:	600b      	strmi	r3, [r1, #0]
 800b196:	bf5c      	itt	pl
 800b198:	600b      	strpl	r3, [r1, #0]
 800b19a:	2002      	movpl	r0, #2
 800b19c:	4770      	bx	lr
 800b19e:	b298      	uxth	r0, r3
 800b1a0:	b9a8      	cbnz	r0, 800b1ce <__lo0bits+0x52>
 800b1a2:	0c1b      	lsrs	r3, r3, #16
 800b1a4:	2010      	movs	r0, #16
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	b90a      	cbnz	r2, 800b1ae <__lo0bits+0x32>
 800b1aa:	3008      	adds	r0, #8
 800b1ac:	0a1b      	lsrs	r3, r3, #8
 800b1ae:	071a      	lsls	r2, r3, #28
 800b1b0:	bf04      	itt	eq
 800b1b2:	091b      	lsreq	r3, r3, #4
 800b1b4:	3004      	addeq	r0, #4
 800b1b6:	079a      	lsls	r2, r3, #30
 800b1b8:	bf04      	itt	eq
 800b1ba:	089b      	lsreq	r3, r3, #2
 800b1bc:	3002      	addeq	r0, #2
 800b1be:	07da      	lsls	r2, r3, #31
 800b1c0:	d403      	bmi.n	800b1ca <__lo0bits+0x4e>
 800b1c2:	085b      	lsrs	r3, r3, #1
 800b1c4:	f100 0001 	add.w	r0, r0, #1
 800b1c8:	d005      	beq.n	800b1d6 <__lo0bits+0x5a>
 800b1ca:	600b      	str	r3, [r1, #0]
 800b1cc:	4770      	bx	lr
 800b1ce:	4610      	mov	r0, r2
 800b1d0:	e7e9      	b.n	800b1a6 <__lo0bits+0x2a>
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	4770      	bx	lr
 800b1d6:	2020      	movs	r0, #32
 800b1d8:	4770      	bx	lr
	...

0800b1dc <__i2b>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	460c      	mov	r4, r1
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	f7ff ff03 	bl	800afec <_Balloc>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	b928      	cbnz	r0, 800b1f6 <__i2b+0x1a>
 800b1ea:	4b05      	ldr	r3, [pc, #20]	; (800b200 <__i2b+0x24>)
 800b1ec:	4805      	ldr	r0, [pc, #20]	; (800b204 <__i2b+0x28>)
 800b1ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b1f2:	f000 fda1 	bl	800bd38 <__assert_func>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	6144      	str	r4, [r0, #20]
 800b1fa:	6103      	str	r3, [r0, #16]
 800b1fc:	bd10      	pop	{r4, pc}
 800b1fe:	bf00      	nop
 800b200:	0800c7ec 	.word	0x0800c7ec
 800b204:	0800c860 	.word	0x0800c860

0800b208 <__multiply>:
 800b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	4691      	mov	r9, r2
 800b20e:	690a      	ldr	r2, [r1, #16]
 800b210:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b214:	429a      	cmp	r2, r3
 800b216:	bfb8      	it	lt
 800b218:	460b      	movlt	r3, r1
 800b21a:	460c      	mov	r4, r1
 800b21c:	bfbc      	itt	lt
 800b21e:	464c      	movlt	r4, r9
 800b220:	4699      	movlt	r9, r3
 800b222:	6927      	ldr	r7, [r4, #16]
 800b224:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b228:	68a3      	ldr	r3, [r4, #8]
 800b22a:	6861      	ldr	r1, [r4, #4]
 800b22c:	eb07 060a 	add.w	r6, r7, sl
 800b230:	42b3      	cmp	r3, r6
 800b232:	b085      	sub	sp, #20
 800b234:	bfb8      	it	lt
 800b236:	3101      	addlt	r1, #1
 800b238:	f7ff fed8 	bl	800afec <_Balloc>
 800b23c:	b930      	cbnz	r0, 800b24c <__multiply+0x44>
 800b23e:	4602      	mov	r2, r0
 800b240:	4b44      	ldr	r3, [pc, #272]	; (800b354 <__multiply+0x14c>)
 800b242:	4845      	ldr	r0, [pc, #276]	; (800b358 <__multiply+0x150>)
 800b244:	f240 115d 	movw	r1, #349	; 0x15d
 800b248:	f000 fd76 	bl	800bd38 <__assert_func>
 800b24c:	f100 0514 	add.w	r5, r0, #20
 800b250:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b254:	462b      	mov	r3, r5
 800b256:	2200      	movs	r2, #0
 800b258:	4543      	cmp	r3, r8
 800b25a:	d321      	bcc.n	800b2a0 <__multiply+0x98>
 800b25c:	f104 0314 	add.w	r3, r4, #20
 800b260:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b264:	f109 0314 	add.w	r3, r9, #20
 800b268:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b26c:	9202      	str	r2, [sp, #8]
 800b26e:	1b3a      	subs	r2, r7, r4
 800b270:	3a15      	subs	r2, #21
 800b272:	f022 0203 	bic.w	r2, r2, #3
 800b276:	3204      	adds	r2, #4
 800b278:	f104 0115 	add.w	r1, r4, #21
 800b27c:	428f      	cmp	r7, r1
 800b27e:	bf38      	it	cc
 800b280:	2204      	movcc	r2, #4
 800b282:	9201      	str	r2, [sp, #4]
 800b284:	9a02      	ldr	r2, [sp, #8]
 800b286:	9303      	str	r3, [sp, #12]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d80c      	bhi.n	800b2a6 <__multiply+0x9e>
 800b28c:	2e00      	cmp	r6, #0
 800b28e:	dd03      	ble.n	800b298 <__multiply+0x90>
 800b290:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b294:	2b00      	cmp	r3, #0
 800b296:	d05a      	beq.n	800b34e <__multiply+0x146>
 800b298:	6106      	str	r6, [r0, #16]
 800b29a:	b005      	add	sp, #20
 800b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a0:	f843 2b04 	str.w	r2, [r3], #4
 800b2a4:	e7d8      	b.n	800b258 <__multiply+0x50>
 800b2a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2aa:	f1ba 0f00 	cmp.w	sl, #0
 800b2ae:	d024      	beq.n	800b2fa <__multiply+0xf2>
 800b2b0:	f104 0e14 	add.w	lr, r4, #20
 800b2b4:	46a9      	mov	r9, r5
 800b2b6:	f04f 0c00 	mov.w	ip, #0
 800b2ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2be:	f8d9 1000 	ldr.w	r1, [r9]
 800b2c2:	fa1f fb82 	uxth.w	fp, r2
 800b2c6:	b289      	uxth	r1, r1
 800b2c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b2cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b2d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b2d4:	4461      	add	r1, ip
 800b2d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2da:	fb0a c20b 	mla	r2, sl, fp, ip
 800b2de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2e2:	b289      	uxth	r1, r1
 800b2e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2e8:	4577      	cmp	r7, lr
 800b2ea:	f849 1b04 	str.w	r1, [r9], #4
 800b2ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2f2:	d8e2      	bhi.n	800b2ba <__multiply+0xb2>
 800b2f4:	9a01      	ldr	r2, [sp, #4]
 800b2f6:	f845 c002 	str.w	ip, [r5, r2]
 800b2fa:	9a03      	ldr	r2, [sp, #12]
 800b2fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b300:	3304      	adds	r3, #4
 800b302:	f1b9 0f00 	cmp.w	r9, #0
 800b306:	d020      	beq.n	800b34a <__multiply+0x142>
 800b308:	6829      	ldr	r1, [r5, #0]
 800b30a:	f104 0c14 	add.w	ip, r4, #20
 800b30e:	46ae      	mov	lr, r5
 800b310:	f04f 0a00 	mov.w	sl, #0
 800b314:	f8bc b000 	ldrh.w	fp, [ip]
 800b318:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b31c:	fb09 220b 	mla	r2, r9, fp, r2
 800b320:	4492      	add	sl, r2
 800b322:	b289      	uxth	r1, r1
 800b324:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b328:	f84e 1b04 	str.w	r1, [lr], #4
 800b32c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b330:	f8be 1000 	ldrh.w	r1, [lr]
 800b334:	0c12      	lsrs	r2, r2, #16
 800b336:	fb09 1102 	mla	r1, r9, r2, r1
 800b33a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b33e:	4567      	cmp	r7, ip
 800b340:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b344:	d8e6      	bhi.n	800b314 <__multiply+0x10c>
 800b346:	9a01      	ldr	r2, [sp, #4]
 800b348:	50a9      	str	r1, [r5, r2]
 800b34a:	3504      	adds	r5, #4
 800b34c:	e79a      	b.n	800b284 <__multiply+0x7c>
 800b34e:	3e01      	subs	r6, #1
 800b350:	e79c      	b.n	800b28c <__multiply+0x84>
 800b352:	bf00      	nop
 800b354:	0800c7ec 	.word	0x0800c7ec
 800b358:	0800c860 	.word	0x0800c860

0800b35c <__pow5mult>:
 800b35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b360:	4615      	mov	r5, r2
 800b362:	f012 0203 	ands.w	r2, r2, #3
 800b366:	4606      	mov	r6, r0
 800b368:	460f      	mov	r7, r1
 800b36a:	d007      	beq.n	800b37c <__pow5mult+0x20>
 800b36c:	4c25      	ldr	r4, [pc, #148]	; (800b404 <__pow5mult+0xa8>)
 800b36e:	3a01      	subs	r2, #1
 800b370:	2300      	movs	r3, #0
 800b372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b376:	f7ff fe9b 	bl	800b0b0 <__multadd>
 800b37a:	4607      	mov	r7, r0
 800b37c:	10ad      	asrs	r5, r5, #2
 800b37e:	d03d      	beq.n	800b3fc <__pow5mult+0xa0>
 800b380:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b382:	b97c      	cbnz	r4, 800b3a4 <__pow5mult+0x48>
 800b384:	2010      	movs	r0, #16
 800b386:	f7fd fe07 	bl	8008f98 <malloc>
 800b38a:	4602      	mov	r2, r0
 800b38c:	6270      	str	r0, [r6, #36]	; 0x24
 800b38e:	b928      	cbnz	r0, 800b39c <__pow5mult+0x40>
 800b390:	4b1d      	ldr	r3, [pc, #116]	; (800b408 <__pow5mult+0xac>)
 800b392:	481e      	ldr	r0, [pc, #120]	; (800b40c <__pow5mult+0xb0>)
 800b394:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b398:	f000 fcce 	bl	800bd38 <__assert_func>
 800b39c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3a0:	6004      	str	r4, [r0, #0]
 800b3a2:	60c4      	str	r4, [r0, #12]
 800b3a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3ac:	b94c      	cbnz	r4, 800b3c2 <__pow5mult+0x66>
 800b3ae:	f240 2171 	movw	r1, #625	; 0x271
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f7ff ff12 	bl	800b1dc <__i2b>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3be:	4604      	mov	r4, r0
 800b3c0:	6003      	str	r3, [r0, #0]
 800b3c2:	f04f 0900 	mov.w	r9, #0
 800b3c6:	07eb      	lsls	r3, r5, #31
 800b3c8:	d50a      	bpl.n	800b3e0 <__pow5mult+0x84>
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	f7ff ff1a 	bl	800b208 <__multiply>
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	4680      	mov	r8, r0
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7ff fe47 	bl	800b06c <_Bfree>
 800b3de:	4647      	mov	r7, r8
 800b3e0:	106d      	asrs	r5, r5, #1
 800b3e2:	d00b      	beq.n	800b3fc <__pow5mult+0xa0>
 800b3e4:	6820      	ldr	r0, [r4, #0]
 800b3e6:	b938      	cbnz	r0, 800b3f8 <__pow5mult+0x9c>
 800b3e8:	4622      	mov	r2, r4
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	f7ff ff0b 	bl	800b208 <__multiply>
 800b3f2:	6020      	str	r0, [r4, #0]
 800b3f4:	f8c0 9000 	str.w	r9, [r0]
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	e7e4      	b.n	800b3c6 <__pow5mult+0x6a>
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b402:	bf00      	nop
 800b404:	0800c9b0 	.word	0x0800c9b0
 800b408:	0800c77a 	.word	0x0800c77a
 800b40c:	0800c860 	.word	0x0800c860

0800b410 <__lshift>:
 800b410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b414:	460c      	mov	r4, r1
 800b416:	6849      	ldr	r1, [r1, #4]
 800b418:	6923      	ldr	r3, [r4, #16]
 800b41a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b41e:	68a3      	ldr	r3, [r4, #8]
 800b420:	4607      	mov	r7, r0
 800b422:	4691      	mov	r9, r2
 800b424:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b428:	f108 0601 	add.w	r6, r8, #1
 800b42c:	42b3      	cmp	r3, r6
 800b42e:	db0b      	blt.n	800b448 <__lshift+0x38>
 800b430:	4638      	mov	r0, r7
 800b432:	f7ff fddb 	bl	800afec <_Balloc>
 800b436:	4605      	mov	r5, r0
 800b438:	b948      	cbnz	r0, 800b44e <__lshift+0x3e>
 800b43a:	4602      	mov	r2, r0
 800b43c:	4b2a      	ldr	r3, [pc, #168]	; (800b4e8 <__lshift+0xd8>)
 800b43e:	482b      	ldr	r0, [pc, #172]	; (800b4ec <__lshift+0xdc>)
 800b440:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b444:	f000 fc78 	bl	800bd38 <__assert_func>
 800b448:	3101      	adds	r1, #1
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	e7ee      	b.n	800b42c <__lshift+0x1c>
 800b44e:	2300      	movs	r3, #0
 800b450:	f100 0114 	add.w	r1, r0, #20
 800b454:	f100 0210 	add.w	r2, r0, #16
 800b458:	4618      	mov	r0, r3
 800b45a:	4553      	cmp	r3, sl
 800b45c:	db37      	blt.n	800b4ce <__lshift+0xbe>
 800b45e:	6920      	ldr	r0, [r4, #16]
 800b460:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b464:	f104 0314 	add.w	r3, r4, #20
 800b468:	f019 091f 	ands.w	r9, r9, #31
 800b46c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b470:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b474:	d02f      	beq.n	800b4d6 <__lshift+0xc6>
 800b476:	f1c9 0e20 	rsb	lr, r9, #32
 800b47a:	468a      	mov	sl, r1
 800b47c:	f04f 0c00 	mov.w	ip, #0
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	fa02 f209 	lsl.w	r2, r2, r9
 800b486:	ea42 020c 	orr.w	r2, r2, ip
 800b48a:	f84a 2b04 	str.w	r2, [sl], #4
 800b48e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b492:	4298      	cmp	r0, r3
 800b494:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b498:	d8f2      	bhi.n	800b480 <__lshift+0x70>
 800b49a:	1b03      	subs	r3, r0, r4
 800b49c:	3b15      	subs	r3, #21
 800b49e:	f023 0303 	bic.w	r3, r3, #3
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	f104 0215 	add.w	r2, r4, #21
 800b4a8:	4290      	cmp	r0, r2
 800b4aa:	bf38      	it	cc
 800b4ac:	2304      	movcc	r3, #4
 800b4ae:	f841 c003 	str.w	ip, [r1, r3]
 800b4b2:	f1bc 0f00 	cmp.w	ip, #0
 800b4b6:	d001      	beq.n	800b4bc <__lshift+0xac>
 800b4b8:	f108 0602 	add.w	r6, r8, #2
 800b4bc:	3e01      	subs	r6, #1
 800b4be:	4638      	mov	r0, r7
 800b4c0:	612e      	str	r6, [r5, #16]
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	f7ff fdd2 	bl	800b06c <_Bfree>
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	e7c1      	b.n	800b45a <__lshift+0x4a>
 800b4d6:	3904      	subs	r1, #4
 800b4d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4e0:	4298      	cmp	r0, r3
 800b4e2:	d8f9      	bhi.n	800b4d8 <__lshift+0xc8>
 800b4e4:	e7ea      	b.n	800b4bc <__lshift+0xac>
 800b4e6:	bf00      	nop
 800b4e8:	0800c7ec 	.word	0x0800c7ec
 800b4ec:	0800c860 	.word	0x0800c860

0800b4f0 <__mcmp>:
 800b4f0:	b530      	push	{r4, r5, lr}
 800b4f2:	6902      	ldr	r2, [r0, #16]
 800b4f4:	690c      	ldr	r4, [r1, #16]
 800b4f6:	1b12      	subs	r2, r2, r4
 800b4f8:	d10e      	bne.n	800b518 <__mcmp+0x28>
 800b4fa:	f100 0314 	add.w	r3, r0, #20
 800b4fe:	3114      	adds	r1, #20
 800b500:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b504:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b508:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b50c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b510:	42a5      	cmp	r5, r4
 800b512:	d003      	beq.n	800b51c <__mcmp+0x2c>
 800b514:	d305      	bcc.n	800b522 <__mcmp+0x32>
 800b516:	2201      	movs	r2, #1
 800b518:	4610      	mov	r0, r2
 800b51a:	bd30      	pop	{r4, r5, pc}
 800b51c:	4283      	cmp	r3, r0
 800b51e:	d3f3      	bcc.n	800b508 <__mcmp+0x18>
 800b520:	e7fa      	b.n	800b518 <__mcmp+0x28>
 800b522:	f04f 32ff 	mov.w	r2, #4294967295
 800b526:	e7f7      	b.n	800b518 <__mcmp+0x28>

0800b528 <__mdiff>:
 800b528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	460c      	mov	r4, r1
 800b52e:	4606      	mov	r6, r0
 800b530:	4611      	mov	r1, r2
 800b532:	4620      	mov	r0, r4
 800b534:	4690      	mov	r8, r2
 800b536:	f7ff ffdb 	bl	800b4f0 <__mcmp>
 800b53a:	1e05      	subs	r5, r0, #0
 800b53c:	d110      	bne.n	800b560 <__mdiff+0x38>
 800b53e:	4629      	mov	r1, r5
 800b540:	4630      	mov	r0, r6
 800b542:	f7ff fd53 	bl	800afec <_Balloc>
 800b546:	b930      	cbnz	r0, 800b556 <__mdiff+0x2e>
 800b548:	4b3a      	ldr	r3, [pc, #232]	; (800b634 <__mdiff+0x10c>)
 800b54a:	4602      	mov	r2, r0
 800b54c:	f240 2132 	movw	r1, #562	; 0x232
 800b550:	4839      	ldr	r0, [pc, #228]	; (800b638 <__mdiff+0x110>)
 800b552:	f000 fbf1 	bl	800bd38 <__assert_func>
 800b556:	2301      	movs	r3, #1
 800b558:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b55c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b560:	bfa4      	itt	ge
 800b562:	4643      	movge	r3, r8
 800b564:	46a0      	movge	r8, r4
 800b566:	4630      	mov	r0, r6
 800b568:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b56c:	bfa6      	itte	ge
 800b56e:	461c      	movge	r4, r3
 800b570:	2500      	movge	r5, #0
 800b572:	2501      	movlt	r5, #1
 800b574:	f7ff fd3a 	bl	800afec <_Balloc>
 800b578:	b920      	cbnz	r0, 800b584 <__mdiff+0x5c>
 800b57a:	4b2e      	ldr	r3, [pc, #184]	; (800b634 <__mdiff+0x10c>)
 800b57c:	4602      	mov	r2, r0
 800b57e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b582:	e7e5      	b.n	800b550 <__mdiff+0x28>
 800b584:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b588:	6926      	ldr	r6, [r4, #16]
 800b58a:	60c5      	str	r5, [r0, #12]
 800b58c:	f104 0914 	add.w	r9, r4, #20
 800b590:	f108 0514 	add.w	r5, r8, #20
 800b594:	f100 0e14 	add.w	lr, r0, #20
 800b598:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b59c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5a0:	f108 0210 	add.w	r2, r8, #16
 800b5a4:	46f2      	mov	sl, lr
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5b0:	fa1f f883 	uxth.w	r8, r3
 800b5b4:	fa11 f18b 	uxtah	r1, r1, fp
 800b5b8:	0c1b      	lsrs	r3, r3, #16
 800b5ba:	eba1 0808 	sub.w	r8, r1, r8
 800b5be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5c6:	fa1f f888 	uxth.w	r8, r8
 800b5ca:	1419      	asrs	r1, r3, #16
 800b5cc:	454e      	cmp	r6, r9
 800b5ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b5d2:	f84a 3b04 	str.w	r3, [sl], #4
 800b5d6:	d8e7      	bhi.n	800b5a8 <__mdiff+0x80>
 800b5d8:	1b33      	subs	r3, r6, r4
 800b5da:	3b15      	subs	r3, #21
 800b5dc:	f023 0303 	bic.w	r3, r3, #3
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	3415      	adds	r4, #21
 800b5e4:	42a6      	cmp	r6, r4
 800b5e6:	bf38      	it	cc
 800b5e8:	2304      	movcc	r3, #4
 800b5ea:	441d      	add	r5, r3
 800b5ec:	4473      	add	r3, lr
 800b5ee:	469e      	mov	lr, r3
 800b5f0:	462e      	mov	r6, r5
 800b5f2:	4566      	cmp	r6, ip
 800b5f4:	d30e      	bcc.n	800b614 <__mdiff+0xec>
 800b5f6:	f10c 0203 	add.w	r2, ip, #3
 800b5fa:	1b52      	subs	r2, r2, r5
 800b5fc:	f022 0203 	bic.w	r2, r2, #3
 800b600:	3d03      	subs	r5, #3
 800b602:	45ac      	cmp	ip, r5
 800b604:	bf38      	it	cc
 800b606:	2200      	movcc	r2, #0
 800b608:	441a      	add	r2, r3
 800b60a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b60e:	b17b      	cbz	r3, 800b630 <__mdiff+0x108>
 800b610:	6107      	str	r7, [r0, #16]
 800b612:	e7a3      	b.n	800b55c <__mdiff+0x34>
 800b614:	f856 8b04 	ldr.w	r8, [r6], #4
 800b618:	fa11 f288 	uxtah	r2, r1, r8
 800b61c:	1414      	asrs	r4, r2, #16
 800b61e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b622:	b292      	uxth	r2, r2
 800b624:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b628:	f84e 2b04 	str.w	r2, [lr], #4
 800b62c:	1421      	asrs	r1, r4, #16
 800b62e:	e7e0      	b.n	800b5f2 <__mdiff+0xca>
 800b630:	3f01      	subs	r7, #1
 800b632:	e7ea      	b.n	800b60a <__mdiff+0xe2>
 800b634:	0800c7ec 	.word	0x0800c7ec
 800b638:	0800c860 	.word	0x0800c860

0800b63c <__d2b>:
 800b63c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b640:	4689      	mov	r9, r1
 800b642:	2101      	movs	r1, #1
 800b644:	ec57 6b10 	vmov	r6, r7, d0
 800b648:	4690      	mov	r8, r2
 800b64a:	f7ff fccf 	bl	800afec <_Balloc>
 800b64e:	4604      	mov	r4, r0
 800b650:	b930      	cbnz	r0, 800b660 <__d2b+0x24>
 800b652:	4602      	mov	r2, r0
 800b654:	4b25      	ldr	r3, [pc, #148]	; (800b6ec <__d2b+0xb0>)
 800b656:	4826      	ldr	r0, [pc, #152]	; (800b6f0 <__d2b+0xb4>)
 800b658:	f240 310a 	movw	r1, #778	; 0x30a
 800b65c:	f000 fb6c 	bl	800bd38 <__assert_func>
 800b660:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b664:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b668:	bb35      	cbnz	r5, 800b6b8 <__d2b+0x7c>
 800b66a:	2e00      	cmp	r6, #0
 800b66c:	9301      	str	r3, [sp, #4]
 800b66e:	d028      	beq.n	800b6c2 <__d2b+0x86>
 800b670:	4668      	mov	r0, sp
 800b672:	9600      	str	r6, [sp, #0]
 800b674:	f7ff fd82 	bl	800b17c <__lo0bits>
 800b678:	9900      	ldr	r1, [sp, #0]
 800b67a:	b300      	cbz	r0, 800b6be <__d2b+0x82>
 800b67c:	9a01      	ldr	r2, [sp, #4]
 800b67e:	f1c0 0320 	rsb	r3, r0, #32
 800b682:	fa02 f303 	lsl.w	r3, r2, r3
 800b686:	430b      	orrs	r3, r1
 800b688:	40c2      	lsrs	r2, r0
 800b68a:	6163      	str	r3, [r4, #20]
 800b68c:	9201      	str	r2, [sp, #4]
 800b68e:	9b01      	ldr	r3, [sp, #4]
 800b690:	61a3      	str	r3, [r4, #24]
 800b692:	2b00      	cmp	r3, #0
 800b694:	bf14      	ite	ne
 800b696:	2202      	movne	r2, #2
 800b698:	2201      	moveq	r2, #1
 800b69a:	6122      	str	r2, [r4, #16]
 800b69c:	b1d5      	cbz	r5, 800b6d4 <__d2b+0x98>
 800b69e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6a2:	4405      	add	r5, r0
 800b6a4:	f8c9 5000 	str.w	r5, [r9]
 800b6a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6ac:	f8c8 0000 	str.w	r0, [r8]
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	b003      	add	sp, #12
 800b6b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6bc:	e7d5      	b.n	800b66a <__d2b+0x2e>
 800b6be:	6161      	str	r1, [r4, #20]
 800b6c0:	e7e5      	b.n	800b68e <__d2b+0x52>
 800b6c2:	a801      	add	r0, sp, #4
 800b6c4:	f7ff fd5a 	bl	800b17c <__lo0bits>
 800b6c8:	9b01      	ldr	r3, [sp, #4]
 800b6ca:	6163      	str	r3, [r4, #20]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	6122      	str	r2, [r4, #16]
 800b6d0:	3020      	adds	r0, #32
 800b6d2:	e7e3      	b.n	800b69c <__d2b+0x60>
 800b6d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6dc:	f8c9 0000 	str.w	r0, [r9]
 800b6e0:	6918      	ldr	r0, [r3, #16]
 800b6e2:	f7ff fd2b 	bl	800b13c <__hi0bits>
 800b6e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6ea:	e7df      	b.n	800b6ac <__d2b+0x70>
 800b6ec:	0800c7ec 	.word	0x0800c7ec
 800b6f0:	0800c860 	.word	0x0800c860

0800b6f4 <_calloc_r>:
 800b6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6f6:	fba1 2402 	umull	r2, r4, r1, r2
 800b6fa:	b94c      	cbnz	r4, 800b710 <_calloc_r+0x1c>
 800b6fc:	4611      	mov	r1, r2
 800b6fe:	9201      	str	r2, [sp, #4]
 800b700:	f7fd fcd4 	bl	80090ac <_malloc_r>
 800b704:	9a01      	ldr	r2, [sp, #4]
 800b706:	4605      	mov	r5, r0
 800b708:	b930      	cbnz	r0, 800b718 <_calloc_r+0x24>
 800b70a:	4628      	mov	r0, r5
 800b70c:	b003      	add	sp, #12
 800b70e:	bd30      	pop	{r4, r5, pc}
 800b710:	220c      	movs	r2, #12
 800b712:	6002      	str	r2, [r0, #0]
 800b714:	2500      	movs	r5, #0
 800b716:	e7f8      	b.n	800b70a <_calloc_r+0x16>
 800b718:	4621      	mov	r1, r4
 800b71a:	f7fd fc53 	bl	8008fc4 <memset>
 800b71e:	e7f4      	b.n	800b70a <_calloc_r+0x16>

0800b720 <__ssputs_r>:
 800b720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b724:	688e      	ldr	r6, [r1, #8]
 800b726:	429e      	cmp	r6, r3
 800b728:	4682      	mov	sl, r0
 800b72a:	460c      	mov	r4, r1
 800b72c:	4690      	mov	r8, r2
 800b72e:	461f      	mov	r7, r3
 800b730:	d838      	bhi.n	800b7a4 <__ssputs_r+0x84>
 800b732:	898a      	ldrh	r2, [r1, #12]
 800b734:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b738:	d032      	beq.n	800b7a0 <__ssputs_r+0x80>
 800b73a:	6825      	ldr	r5, [r4, #0]
 800b73c:	6909      	ldr	r1, [r1, #16]
 800b73e:	eba5 0901 	sub.w	r9, r5, r1
 800b742:	6965      	ldr	r5, [r4, #20]
 800b744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b74c:	3301      	adds	r3, #1
 800b74e:	444b      	add	r3, r9
 800b750:	106d      	asrs	r5, r5, #1
 800b752:	429d      	cmp	r5, r3
 800b754:	bf38      	it	cc
 800b756:	461d      	movcc	r5, r3
 800b758:	0553      	lsls	r3, r2, #21
 800b75a:	d531      	bpl.n	800b7c0 <__ssputs_r+0xa0>
 800b75c:	4629      	mov	r1, r5
 800b75e:	f7fd fca5 	bl	80090ac <_malloc_r>
 800b762:	4606      	mov	r6, r0
 800b764:	b950      	cbnz	r0, 800b77c <__ssputs_r+0x5c>
 800b766:	230c      	movs	r3, #12
 800b768:	f8ca 3000 	str.w	r3, [sl]
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b772:	81a3      	strh	r3, [r4, #12]
 800b774:	f04f 30ff 	mov.w	r0, #4294967295
 800b778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b77c:	6921      	ldr	r1, [r4, #16]
 800b77e:	464a      	mov	r2, r9
 800b780:	f7fd fc12 	bl	8008fa8 <memcpy>
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b78a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b78e:	81a3      	strh	r3, [r4, #12]
 800b790:	6126      	str	r6, [r4, #16]
 800b792:	6165      	str	r5, [r4, #20]
 800b794:	444e      	add	r6, r9
 800b796:	eba5 0509 	sub.w	r5, r5, r9
 800b79a:	6026      	str	r6, [r4, #0]
 800b79c:	60a5      	str	r5, [r4, #8]
 800b79e:	463e      	mov	r6, r7
 800b7a0:	42be      	cmp	r6, r7
 800b7a2:	d900      	bls.n	800b7a6 <__ssputs_r+0x86>
 800b7a4:	463e      	mov	r6, r7
 800b7a6:	6820      	ldr	r0, [r4, #0]
 800b7a8:	4632      	mov	r2, r6
 800b7aa:	4641      	mov	r1, r8
 800b7ac:	f000 fb4a 	bl	800be44 <memmove>
 800b7b0:	68a3      	ldr	r3, [r4, #8]
 800b7b2:	1b9b      	subs	r3, r3, r6
 800b7b4:	60a3      	str	r3, [r4, #8]
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	4433      	add	r3, r6
 800b7ba:	6023      	str	r3, [r4, #0]
 800b7bc:	2000      	movs	r0, #0
 800b7be:	e7db      	b.n	800b778 <__ssputs_r+0x58>
 800b7c0:	462a      	mov	r2, r5
 800b7c2:	f000 fb59 	bl	800be78 <_realloc_r>
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d1e1      	bne.n	800b790 <__ssputs_r+0x70>
 800b7cc:	6921      	ldr	r1, [r4, #16]
 800b7ce:	4650      	mov	r0, sl
 800b7d0:	f7fd fc00 	bl	8008fd4 <_free_r>
 800b7d4:	e7c7      	b.n	800b766 <__ssputs_r+0x46>
	...

0800b7d8 <_svfiprintf_r>:
 800b7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7dc:	4698      	mov	r8, r3
 800b7de:	898b      	ldrh	r3, [r1, #12]
 800b7e0:	061b      	lsls	r3, r3, #24
 800b7e2:	b09d      	sub	sp, #116	; 0x74
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	460d      	mov	r5, r1
 800b7e8:	4614      	mov	r4, r2
 800b7ea:	d50e      	bpl.n	800b80a <_svfiprintf_r+0x32>
 800b7ec:	690b      	ldr	r3, [r1, #16]
 800b7ee:	b963      	cbnz	r3, 800b80a <_svfiprintf_r+0x32>
 800b7f0:	2140      	movs	r1, #64	; 0x40
 800b7f2:	f7fd fc5b 	bl	80090ac <_malloc_r>
 800b7f6:	6028      	str	r0, [r5, #0]
 800b7f8:	6128      	str	r0, [r5, #16]
 800b7fa:	b920      	cbnz	r0, 800b806 <_svfiprintf_r+0x2e>
 800b7fc:	230c      	movs	r3, #12
 800b7fe:	603b      	str	r3, [r7, #0]
 800b800:	f04f 30ff 	mov.w	r0, #4294967295
 800b804:	e0d1      	b.n	800b9aa <_svfiprintf_r+0x1d2>
 800b806:	2340      	movs	r3, #64	; 0x40
 800b808:	616b      	str	r3, [r5, #20]
 800b80a:	2300      	movs	r3, #0
 800b80c:	9309      	str	r3, [sp, #36]	; 0x24
 800b80e:	2320      	movs	r3, #32
 800b810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b814:	f8cd 800c 	str.w	r8, [sp, #12]
 800b818:	2330      	movs	r3, #48	; 0x30
 800b81a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9c4 <_svfiprintf_r+0x1ec>
 800b81e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b822:	f04f 0901 	mov.w	r9, #1
 800b826:	4623      	mov	r3, r4
 800b828:	469a      	mov	sl, r3
 800b82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b82e:	b10a      	cbz	r2, 800b834 <_svfiprintf_r+0x5c>
 800b830:	2a25      	cmp	r2, #37	; 0x25
 800b832:	d1f9      	bne.n	800b828 <_svfiprintf_r+0x50>
 800b834:	ebba 0b04 	subs.w	fp, sl, r4
 800b838:	d00b      	beq.n	800b852 <_svfiprintf_r+0x7a>
 800b83a:	465b      	mov	r3, fp
 800b83c:	4622      	mov	r2, r4
 800b83e:	4629      	mov	r1, r5
 800b840:	4638      	mov	r0, r7
 800b842:	f7ff ff6d 	bl	800b720 <__ssputs_r>
 800b846:	3001      	adds	r0, #1
 800b848:	f000 80aa 	beq.w	800b9a0 <_svfiprintf_r+0x1c8>
 800b84c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b84e:	445a      	add	r2, fp
 800b850:	9209      	str	r2, [sp, #36]	; 0x24
 800b852:	f89a 3000 	ldrb.w	r3, [sl]
 800b856:	2b00      	cmp	r3, #0
 800b858:	f000 80a2 	beq.w	800b9a0 <_svfiprintf_r+0x1c8>
 800b85c:	2300      	movs	r3, #0
 800b85e:	f04f 32ff 	mov.w	r2, #4294967295
 800b862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b866:	f10a 0a01 	add.w	sl, sl, #1
 800b86a:	9304      	str	r3, [sp, #16]
 800b86c:	9307      	str	r3, [sp, #28]
 800b86e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b872:	931a      	str	r3, [sp, #104]	; 0x68
 800b874:	4654      	mov	r4, sl
 800b876:	2205      	movs	r2, #5
 800b878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87c:	4851      	ldr	r0, [pc, #324]	; (800b9c4 <_svfiprintf_r+0x1ec>)
 800b87e:	f7f4 fc97 	bl	80001b0 <memchr>
 800b882:	9a04      	ldr	r2, [sp, #16]
 800b884:	b9d8      	cbnz	r0, 800b8be <_svfiprintf_r+0xe6>
 800b886:	06d0      	lsls	r0, r2, #27
 800b888:	bf44      	itt	mi
 800b88a:	2320      	movmi	r3, #32
 800b88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b890:	0711      	lsls	r1, r2, #28
 800b892:	bf44      	itt	mi
 800b894:	232b      	movmi	r3, #43	; 0x2b
 800b896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b89a:	f89a 3000 	ldrb.w	r3, [sl]
 800b89e:	2b2a      	cmp	r3, #42	; 0x2a
 800b8a0:	d015      	beq.n	800b8ce <_svfiprintf_r+0xf6>
 800b8a2:	9a07      	ldr	r2, [sp, #28]
 800b8a4:	4654      	mov	r4, sl
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	f04f 0c0a 	mov.w	ip, #10
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8b2:	3b30      	subs	r3, #48	; 0x30
 800b8b4:	2b09      	cmp	r3, #9
 800b8b6:	d94e      	bls.n	800b956 <_svfiprintf_r+0x17e>
 800b8b8:	b1b0      	cbz	r0, 800b8e8 <_svfiprintf_r+0x110>
 800b8ba:	9207      	str	r2, [sp, #28]
 800b8bc:	e014      	b.n	800b8e8 <_svfiprintf_r+0x110>
 800b8be:	eba0 0308 	sub.w	r3, r0, r8
 800b8c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	9304      	str	r3, [sp, #16]
 800b8ca:	46a2      	mov	sl, r4
 800b8cc:	e7d2      	b.n	800b874 <_svfiprintf_r+0x9c>
 800b8ce:	9b03      	ldr	r3, [sp, #12]
 800b8d0:	1d19      	adds	r1, r3, #4
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	9103      	str	r1, [sp, #12]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	bfbb      	ittet	lt
 800b8da:	425b      	neglt	r3, r3
 800b8dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b8e0:	9307      	strge	r3, [sp, #28]
 800b8e2:	9307      	strlt	r3, [sp, #28]
 800b8e4:	bfb8      	it	lt
 800b8e6:	9204      	strlt	r2, [sp, #16]
 800b8e8:	7823      	ldrb	r3, [r4, #0]
 800b8ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b8ec:	d10c      	bne.n	800b908 <_svfiprintf_r+0x130>
 800b8ee:	7863      	ldrb	r3, [r4, #1]
 800b8f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b8f2:	d135      	bne.n	800b960 <_svfiprintf_r+0x188>
 800b8f4:	9b03      	ldr	r3, [sp, #12]
 800b8f6:	1d1a      	adds	r2, r3, #4
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	9203      	str	r2, [sp, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	bfb8      	it	lt
 800b900:	f04f 33ff 	movlt.w	r3, #4294967295
 800b904:	3402      	adds	r4, #2
 800b906:	9305      	str	r3, [sp, #20]
 800b908:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9d4 <_svfiprintf_r+0x1fc>
 800b90c:	7821      	ldrb	r1, [r4, #0]
 800b90e:	2203      	movs	r2, #3
 800b910:	4650      	mov	r0, sl
 800b912:	f7f4 fc4d 	bl	80001b0 <memchr>
 800b916:	b140      	cbz	r0, 800b92a <_svfiprintf_r+0x152>
 800b918:	2340      	movs	r3, #64	; 0x40
 800b91a:	eba0 000a 	sub.w	r0, r0, sl
 800b91e:	fa03 f000 	lsl.w	r0, r3, r0
 800b922:	9b04      	ldr	r3, [sp, #16]
 800b924:	4303      	orrs	r3, r0
 800b926:	3401      	adds	r4, #1
 800b928:	9304      	str	r3, [sp, #16]
 800b92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b92e:	4826      	ldr	r0, [pc, #152]	; (800b9c8 <_svfiprintf_r+0x1f0>)
 800b930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b934:	2206      	movs	r2, #6
 800b936:	f7f4 fc3b 	bl	80001b0 <memchr>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d038      	beq.n	800b9b0 <_svfiprintf_r+0x1d8>
 800b93e:	4b23      	ldr	r3, [pc, #140]	; (800b9cc <_svfiprintf_r+0x1f4>)
 800b940:	bb1b      	cbnz	r3, 800b98a <_svfiprintf_r+0x1b2>
 800b942:	9b03      	ldr	r3, [sp, #12]
 800b944:	3307      	adds	r3, #7
 800b946:	f023 0307 	bic.w	r3, r3, #7
 800b94a:	3308      	adds	r3, #8
 800b94c:	9303      	str	r3, [sp, #12]
 800b94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b950:	4433      	add	r3, r6
 800b952:	9309      	str	r3, [sp, #36]	; 0x24
 800b954:	e767      	b.n	800b826 <_svfiprintf_r+0x4e>
 800b956:	fb0c 3202 	mla	r2, ip, r2, r3
 800b95a:	460c      	mov	r4, r1
 800b95c:	2001      	movs	r0, #1
 800b95e:	e7a5      	b.n	800b8ac <_svfiprintf_r+0xd4>
 800b960:	2300      	movs	r3, #0
 800b962:	3401      	adds	r4, #1
 800b964:	9305      	str	r3, [sp, #20]
 800b966:	4619      	mov	r1, r3
 800b968:	f04f 0c0a 	mov.w	ip, #10
 800b96c:	4620      	mov	r0, r4
 800b96e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b972:	3a30      	subs	r2, #48	; 0x30
 800b974:	2a09      	cmp	r2, #9
 800b976:	d903      	bls.n	800b980 <_svfiprintf_r+0x1a8>
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d0c5      	beq.n	800b908 <_svfiprintf_r+0x130>
 800b97c:	9105      	str	r1, [sp, #20]
 800b97e:	e7c3      	b.n	800b908 <_svfiprintf_r+0x130>
 800b980:	fb0c 2101 	mla	r1, ip, r1, r2
 800b984:	4604      	mov	r4, r0
 800b986:	2301      	movs	r3, #1
 800b988:	e7f0      	b.n	800b96c <_svfiprintf_r+0x194>
 800b98a:	ab03      	add	r3, sp, #12
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	462a      	mov	r2, r5
 800b990:	4b0f      	ldr	r3, [pc, #60]	; (800b9d0 <_svfiprintf_r+0x1f8>)
 800b992:	a904      	add	r1, sp, #16
 800b994:	4638      	mov	r0, r7
 800b996:	f7fd fc9d 	bl	80092d4 <_printf_float>
 800b99a:	1c42      	adds	r2, r0, #1
 800b99c:	4606      	mov	r6, r0
 800b99e:	d1d6      	bne.n	800b94e <_svfiprintf_r+0x176>
 800b9a0:	89ab      	ldrh	r3, [r5, #12]
 800b9a2:	065b      	lsls	r3, r3, #25
 800b9a4:	f53f af2c 	bmi.w	800b800 <_svfiprintf_r+0x28>
 800b9a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9aa:	b01d      	add	sp, #116	; 0x74
 800b9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b0:	ab03      	add	r3, sp, #12
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	462a      	mov	r2, r5
 800b9b6:	4b06      	ldr	r3, [pc, #24]	; (800b9d0 <_svfiprintf_r+0x1f8>)
 800b9b8:	a904      	add	r1, sp, #16
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	f7fd ff2e 	bl	800981c <_printf_i>
 800b9c0:	e7eb      	b.n	800b99a <_svfiprintf_r+0x1c2>
 800b9c2:	bf00      	nop
 800b9c4:	0800c9bc 	.word	0x0800c9bc
 800b9c8:	0800c9c6 	.word	0x0800c9c6
 800b9cc:	080092d5 	.word	0x080092d5
 800b9d0:	0800b721 	.word	0x0800b721
 800b9d4:	0800c9c2 	.word	0x0800c9c2

0800b9d8 <__sfputc_r>:
 800b9d8:	6893      	ldr	r3, [r2, #8]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	b410      	push	{r4}
 800b9e0:	6093      	str	r3, [r2, #8]
 800b9e2:	da08      	bge.n	800b9f6 <__sfputc_r+0x1e>
 800b9e4:	6994      	ldr	r4, [r2, #24]
 800b9e6:	42a3      	cmp	r3, r4
 800b9e8:	db01      	blt.n	800b9ee <__sfputc_r+0x16>
 800b9ea:	290a      	cmp	r1, #10
 800b9ec:	d103      	bne.n	800b9f6 <__sfputc_r+0x1e>
 800b9ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f2:	f7fe b991 	b.w	8009d18 <__swbuf_r>
 800b9f6:	6813      	ldr	r3, [r2, #0]
 800b9f8:	1c58      	adds	r0, r3, #1
 800b9fa:	6010      	str	r0, [r2, #0]
 800b9fc:	7019      	strb	r1, [r3, #0]
 800b9fe:	4608      	mov	r0, r1
 800ba00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba04:	4770      	bx	lr

0800ba06 <__sfputs_r>:
 800ba06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba08:	4606      	mov	r6, r0
 800ba0a:	460f      	mov	r7, r1
 800ba0c:	4614      	mov	r4, r2
 800ba0e:	18d5      	adds	r5, r2, r3
 800ba10:	42ac      	cmp	r4, r5
 800ba12:	d101      	bne.n	800ba18 <__sfputs_r+0x12>
 800ba14:	2000      	movs	r0, #0
 800ba16:	e007      	b.n	800ba28 <__sfputs_r+0x22>
 800ba18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba1c:	463a      	mov	r2, r7
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f7ff ffda 	bl	800b9d8 <__sfputc_r>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d1f3      	bne.n	800ba10 <__sfputs_r+0xa>
 800ba28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba2c <_vfiprintf_r>:
 800ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba30:	460d      	mov	r5, r1
 800ba32:	b09d      	sub	sp, #116	; 0x74
 800ba34:	4614      	mov	r4, r2
 800ba36:	4698      	mov	r8, r3
 800ba38:	4606      	mov	r6, r0
 800ba3a:	b118      	cbz	r0, 800ba44 <_vfiprintf_r+0x18>
 800ba3c:	6983      	ldr	r3, [r0, #24]
 800ba3e:	b90b      	cbnz	r3, 800ba44 <_vfiprintf_r+0x18>
 800ba40:	f7ff f9be 	bl	800adc0 <__sinit>
 800ba44:	4b89      	ldr	r3, [pc, #548]	; (800bc6c <_vfiprintf_r+0x240>)
 800ba46:	429d      	cmp	r5, r3
 800ba48:	d11b      	bne.n	800ba82 <_vfiprintf_r+0x56>
 800ba4a:	6875      	ldr	r5, [r6, #4]
 800ba4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba4e:	07d9      	lsls	r1, r3, #31
 800ba50:	d405      	bmi.n	800ba5e <_vfiprintf_r+0x32>
 800ba52:	89ab      	ldrh	r3, [r5, #12]
 800ba54:	059a      	lsls	r2, r3, #22
 800ba56:	d402      	bmi.n	800ba5e <_vfiprintf_r+0x32>
 800ba58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba5a:	f7ff fa54 	bl	800af06 <__retarget_lock_acquire_recursive>
 800ba5e:	89ab      	ldrh	r3, [r5, #12]
 800ba60:	071b      	lsls	r3, r3, #28
 800ba62:	d501      	bpl.n	800ba68 <_vfiprintf_r+0x3c>
 800ba64:	692b      	ldr	r3, [r5, #16]
 800ba66:	b9eb      	cbnz	r3, 800baa4 <_vfiprintf_r+0x78>
 800ba68:	4629      	mov	r1, r5
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7fe f9a6 	bl	8009dbc <__swsetup_r>
 800ba70:	b1c0      	cbz	r0, 800baa4 <_vfiprintf_r+0x78>
 800ba72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba74:	07dc      	lsls	r4, r3, #31
 800ba76:	d50e      	bpl.n	800ba96 <_vfiprintf_r+0x6a>
 800ba78:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7c:	b01d      	add	sp, #116	; 0x74
 800ba7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba82:	4b7b      	ldr	r3, [pc, #492]	; (800bc70 <_vfiprintf_r+0x244>)
 800ba84:	429d      	cmp	r5, r3
 800ba86:	d101      	bne.n	800ba8c <_vfiprintf_r+0x60>
 800ba88:	68b5      	ldr	r5, [r6, #8]
 800ba8a:	e7df      	b.n	800ba4c <_vfiprintf_r+0x20>
 800ba8c:	4b79      	ldr	r3, [pc, #484]	; (800bc74 <_vfiprintf_r+0x248>)
 800ba8e:	429d      	cmp	r5, r3
 800ba90:	bf08      	it	eq
 800ba92:	68f5      	ldreq	r5, [r6, #12]
 800ba94:	e7da      	b.n	800ba4c <_vfiprintf_r+0x20>
 800ba96:	89ab      	ldrh	r3, [r5, #12]
 800ba98:	0598      	lsls	r0, r3, #22
 800ba9a:	d4ed      	bmi.n	800ba78 <_vfiprintf_r+0x4c>
 800ba9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba9e:	f7ff fa33 	bl	800af08 <__retarget_lock_release_recursive>
 800baa2:	e7e9      	b.n	800ba78 <_vfiprintf_r+0x4c>
 800baa4:	2300      	movs	r3, #0
 800baa6:	9309      	str	r3, [sp, #36]	; 0x24
 800baa8:	2320      	movs	r3, #32
 800baaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baae:	f8cd 800c 	str.w	r8, [sp, #12]
 800bab2:	2330      	movs	r3, #48	; 0x30
 800bab4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc78 <_vfiprintf_r+0x24c>
 800bab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800babc:	f04f 0901 	mov.w	r9, #1
 800bac0:	4623      	mov	r3, r4
 800bac2:	469a      	mov	sl, r3
 800bac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bac8:	b10a      	cbz	r2, 800bace <_vfiprintf_r+0xa2>
 800baca:	2a25      	cmp	r2, #37	; 0x25
 800bacc:	d1f9      	bne.n	800bac2 <_vfiprintf_r+0x96>
 800bace:	ebba 0b04 	subs.w	fp, sl, r4
 800bad2:	d00b      	beq.n	800baec <_vfiprintf_r+0xc0>
 800bad4:	465b      	mov	r3, fp
 800bad6:	4622      	mov	r2, r4
 800bad8:	4629      	mov	r1, r5
 800bada:	4630      	mov	r0, r6
 800badc:	f7ff ff93 	bl	800ba06 <__sfputs_r>
 800bae0:	3001      	adds	r0, #1
 800bae2:	f000 80aa 	beq.w	800bc3a <_vfiprintf_r+0x20e>
 800bae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bae8:	445a      	add	r2, fp
 800baea:	9209      	str	r2, [sp, #36]	; 0x24
 800baec:	f89a 3000 	ldrb.w	r3, [sl]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f000 80a2 	beq.w	800bc3a <_vfiprintf_r+0x20e>
 800baf6:	2300      	movs	r3, #0
 800baf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb00:	f10a 0a01 	add.w	sl, sl, #1
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	9307      	str	r3, [sp, #28]
 800bb08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb0c:	931a      	str	r3, [sp, #104]	; 0x68
 800bb0e:	4654      	mov	r4, sl
 800bb10:	2205      	movs	r2, #5
 800bb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb16:	4858      	ldr	r0, [pc, #352]	; (800bc78 <_vfiprintf_r+0x24c>)
 800bb18:	f7f4 fb4a 	bl	80001b0 <memchr>
 800bb1c:	9a04      	ldr	r2, [sp, #16]
 800bb1e:	b9d8      	cbnz	r0, 800bb58 <_vfiprintf_r+0x12c>
 800bb20:	06d1      	lsls	r1, r2, #27
 800bb22:	bf44      	itt	mi
 800bb24:	2320      	movmi	r3, #32
 800bb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb2a:	0713      	lsls	r3, r2, #28
 800bb2c:	bf44      	itt	mi
 800bb2e:	232b      	movmi	r3, #43	; 0x2b
 800bb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb34:	f89a 3000 	ldrb.w	r3, [sl]
 800bb38:	2b2a      	cmp	r3, #42	; 0x2a
 800bb3a:	d015      	beq.n	800bb68 <_vfiprintf_r+0x13c>
 800bb3c:	9a07      	ldr	r2, [sp, #28]
 800bb3e:	4654      	mov	r4, sl
 800bb40:	2000      	movs	r0, #0
 800bb42:	f04f 0c0a 	mov.w	ip, #10
 800bb46:	4621      	mov	r1, r4
 800bb48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb4c:	3b30      	subs	r3, #48	; 0x30
 800bb4e:	2b09      	cmp	r3, #9
 800bb50:	d94e      	bls.n	800bbf0 <_vfiprintf_r+0x1c4>
 800bb52:	b1b0      	cbz	r0, 800bb82 <_vfiprintf_r+0x156>
 800bb54:	9207      	str	r2, [sp, #28]
 800bb56:	e014      	b.n	800bb82 <_vfiprintf_r+0x156>
 800bb58:	eba0 0308 	sub.w	r3, r0, r8
 800bb5c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb60:	4313      	orrs	r3, r2
 800bb62:	9304      	str	r3, [sp, #16]
 800bb64:	46a2      	mov	sl, r4
 800bb66:	e7d2      	b.n	800bb0e <_vfiprintf_r+0xe2>
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	1d19      	adds	r1, r3, #4
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	9103      	str	r1, [sp, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	bfbb      	ittet	lt
 800bb74:	425b      	neglt	r3, r3
 800bb76:	f042 0202 	orrlt.w	r2, r2, #2
 800bb7a:	9307      	strge	r3, [sp, #28]
 800bb7c:	9307      	strlt	r3, [sp, #28]
 800bb7e:	bfb8      	it	lt
 800bb80:	9204      	strlt	r2, [sp, #16]
 800bb82:	7823      	ldrb	r3, [r4, #0]
 800bb84:	2b2e      	cmp	r3, #46	; 0x2e
 800bb86:	d10c      	bne.n	800bba2 <_vfiprintf_r+0x176>
 800bb88:	7863      	ldrb	r3, [r4, #1]
 800bb8a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb8c:	d135      	bne.n	800bbfa <_vfiprintf_r+0x1ce>
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	1d1a      	adds	r2, r3, #4
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	9203      	str	r2, [sp, #12]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	bfb8      	it	lt
 800bb9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb9e:	3402      	adds	r4, #2
 800bba0:	9305      	str	r3, [sp, #20]
 800bba2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc88 <_vfiprintf_r+0x25c>
 800bba6:	7821      	ldrb	r1, [r4, #0]
 800bba8:	2203      	movs	r2, #3
 800bbaa:	4650      	mov	r0, sl
 800bbac:	f7f4 fb00 	bl	80001b0 <memchr>
 800bbb0:	b140      	cbz	r0, 800bbc4 <_vfiprintf_r+0x198>
 800bbb2:	2340      	movs	r3, #64	; 0x40
 800bbb4:	eba0 000a 	sub.w	r0, r0, sl
 800bbb8:	fa03 f000 	lsl.w	r0, r3, r0
 800bbbc:	9b04      	ldr	r3, [sp, #16]
 800bbbe:	4303      	orrs	r3, r0
 800bbc0:	3401      	adds	r4, #1
 800bbc2:	9304      	str	r3, [sp, #16]
 800bbc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbc8:	482c      	ldr	r0, [pc, #176]	; (800bc7c <_vfiprintf_r+0x250>)
 800bbca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbce:	2206      	movs	r2, #6
 800bbd0:	f7f4 faee 	bl	80001b0 <memchr>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d03f      	beq.n	800bc58 <_vfiprintf_r+0x22c>
 800bbd8:	4b29      	ldr	r3, [pc, #164]	; (800bc80 <_vfiprintf_r+0x254>)
 800bbda:	bb1b      	cbnz	r3, 800bc24 <_vfiprintf_r+0x1f8>
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	3307      	adds	r3, #7
 800bbe0:	f023 0307 	bic.w	r3, r3, #7
 800bbe4:	3308      	adds	r3, #8
 800bbe6:	9303      	str	r3, [sp, #12]
 800bbe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbea:	443b      	add	r3, r7
 800bbec:	9309      	str	r3, [sp, #36]	; 0x24
 800bbee:	e767      	b.n	800bac0 <_vfiprintf_r+0x94>
 800bbf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	2001      	movs	r0, #1
 800bbf8:	e7a5      	b.n	800bb46 <_vfiprintf_r+0x11a>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	3401      	adds	r4, #1
 800bbfe:	9305      	str	r3, [sp, #20]
 800bc00:	4619      	mov	r1, r3
 800bc02:	f04f 0c0a 	mov.w	ip, #10
 800bc06:	4620      	mov	r0, r4
 800bc08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc0c:	3a30      	subs	r2, #48	; 0x30
 800bc0e:	2a09      	cmp	r2, #9
 800bc10:	d903      	bls.n	800bc1a <_vfiprintf_r+0x1ee>
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d0c5      	beq.n	800bba2 <_vfiprintf_r+0x176>
 800bc16:	9105      	str	r1, [sp, #20]
 800bc18:	e7c3      	b.n	800bba2 <_vfiprintf_r+0x176>
 800bc1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc1e:	4604      	mov	r4, r0
 800bc20:	2301      	movs	r3, #1
 800bc22:	e7f0      	b.n	800bc06 <_vfiprintf_r+0x1da>
 800bc24:	ab03      	add	r3, sp, #12
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	462a      	mov	r2, r5
 800bc2a:	4b16      	ldr	r3, [pc, #88]	; (800bc84 <_vfiprintf_r+0x258>)
 800bc2c:	a904      	add	r1, sp, #16
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f7fd fb50 	bl	80092d4 <_printf_float>
 800bc34:	4607      	mov	r7, r0
 800bc36:	1c78      	adds	r0, r7, #1
 800bc38:	d1d6      	bne.n	800bbe8 <_vfiprintf_r+0x1bc>
 800bc3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc3c:	07d9      	lsls	r1, r3, #31
 800bc3e:	d405      	bmi.n	800bc4c <_vfiprintf_r+0x220>
 800bc40:	89ab      	ldrh	r3, [r5, #12]
 800bc42:	059a      	lsls	r2, r3, #22
 800bc44:	d402      	bmi.n	800bc4c <_vfiprintf_r+0x220>
 800bc46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc48:	f7ff f95e 	bl	800af08 <__retarget_lock_release_recursive>
 800bc4c:	89ab      	ldrh	r3, [r5, #12]
 800bc4e:	065b      	lsls	r3, r3, #25
 800bc50:	f53f af12 	bmi.w	800ba78 <_vfiprintf_r+0x4c>
 800bc54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc56:	e711      	b.n	800ba7c <_vfiprintf_r+0x50>
 800bc58:	ab03      	add	r3, sp, #12
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	462a      	mov	r2, r5
 800bc5e:	4b09      	ldr	r3, [pc, #36]	; (800bc84 <_vfiprintf_r+0x258>)
 800bc60:	a904      	add	r1, sp, #16
 800bc62:	4630      	mov	r0, r6
 800bc64:	f7fd fdda 	bl	800981c <_printf_i>
 800bc68:	e7e4      	b.n	800bc34 <_vfiprintf_r+0x208>
 800bc6a:	bf00      	nop
 800bc6c:	0800c820 	.word	0x0800c820
 800bc70:	0800c840 	.word	0x0800c840
 800bc74:	0800c800 	.word	0x0800c800
 800bc78:	0800c9bc 	.word	0x0800c9bc
 800bc7c:	0800c9c6 	.word	0x0800c9c6
 800bc80:	080092d5 	.word	0x080092d5
 800bc84:	0800ba07 	.word	0x0800ba07
 800bc88:	0800c9c2 	.word	0x0800c9c2

0800bc8c <__sread>:
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	460c      	mov	r4, r1
 800bc90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc94:	f000 f920 	bl	800bed8 <_read_r>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	bfab      	itete	ge
 800bc9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc9e:	89a3      	ldrhlt	r3, [r4, #12]
 800bca0:	181b      	addge	r3, r3, r0
 800bca2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bca6:	bfac      	ite	ge
 800bca8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcaa:	81a3      	strhlt	r3, [r4, #12]
 800bcac:	bd10      	pop	{r4, pc}

0800bcae <__swrite>:
 800bcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb2:	461f      	mov	r7, r3
 800bcb4:	898b      	ldrh	r3, [r1, #12]
 800bcb6:	05db      	lsls	r3, r3, #23
 800bcb8:	4605      	mov	r5, r0
 800bcba:	460c      	mov	r4, r1
 800bcbc:	4616      	mov	r6, r2
 800bcbe:	d505      	bpl.n	800bccc <__swrite+0x1e>
 800bcc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc4:	2302      	movs	r3, #2
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f000 f898 	bl	800bdfc <_lseek_r>
 800bccc:	89a3      	ldrh	r3, [r4, #12]
 800bcce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcd6:	81a3      	strh	r3, [r4, #12]
 800bcd8:	4632      	mov	r2, r6
 800bcda:	463b      	mov	r3, r7
 800bcdc:	4628      	mov	r0, r5
 800bcde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bce2:	f000 b817 	b.w	800bd14 <_write_r>

0800bce6 <__sseek>:
 800bce6:	b510      	push	{r4, lr}
 800bce8:	460c      	mov	r4, r1
 800bcea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcee:	f000 f885 	bl	800bdfc <_lseek_r>
 800bcf2:	1c43      	adds	r3, r0, #1
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	bf15      	itete	ne
 800bcf8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd02:	81a3      	strheq	r3, [r4, #12]
 800bd04:	bf18      	it	ne
 800bd06:	81a3      	strhne	r3, [r4, #12]
 800bd08:	bd10      	pop	{r4, pc}

0800bd0a <__sclose>:
 800bd0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd0e:	f000 b831 	b.w	800bd74 <_close_r>
	...

0800bd14 <_write_r>:
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	4d07      	ldr	r5, [pc, #28]	; (800bd34 <_write_r+0x20>)
 800bd18:	4604      	mov	r4, r0
 800bd1a:	4608      	mov	r0, r1
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	2200      	movs	r2, #0
 800bd20:	602a      	str	r2, [r5, #0]
 800bd22:	461a      	mov	r2, r3
 800bd24:	f7f5 fb51 	bl	80013ca <_write>
 800bd28:	1c43      	adds	r3, r0, #1
 800bd2a:	d102      	bne.n	800bd32 <_write_r+0x1e>
 800bd2c:	682b      	ldr	r3, [r5, #0]
 800bd2e:	b103      	cbz	r3, 800bd32 <_write_r+0x1e>
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	bd38      	pop	{r3, r4, r5, pc}
 800bd34:	2000053c 	.word	0x2000053c

0800bd38 <__assert_func>:
 800bd38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd3a:	4614      	mov	r4, r2
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <__assert_func+0x2c>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4605      	mov	r5, r0
 800bd44:	68d8      	ldr	r0, [r3, #12]
 800bd46:	b14c      	cbz	r4, 800bd5c <__assert_func+0x24>
 800bd48:	4b07      	ldr	r3, [pc, #28]	; (800bd68 <__assert_func+0x30>)
 800bd4a:	9100      	str	r1, [sp, #0]
 800bd4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd50:	4906      	ldr	r1, [pc, #24]	; (800bd6c <__assert_func+0x34>)
 800bd52:	462b      	mov	r3, r5
 800bd54:	f000 f81e 	bl	800bd94 <fiprintf>
 800bd58:	f000 f8dd 	bl	800bf16 <abort>
 800bd5c:	4b04      	ldr	r3, [pc, #16]	; (800bd70 <__assert_func+0x38>)
 800bd5e:	461c      	mov	r4, r3
 800bd60:	e7f3      	b.n	800bd4a <__assert_func+0x12>
 800bd62:	bf00      	nop
 800bd64:	20000010 	.word	0x20000010
 800bd68:	0800c9cd 	.word	0x0800c9cd
 800bd6c:	0800c9da 	.word	0x0800c9da
 800bd70:	0800ca08 	.word	0x0800ca08

0800bd74 <_close_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	4d06      	ldr	r5, [pc, #24]	; (800bd90 <_close_r+0x1c>)
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	4608      	mov	r0, r1
 800bd7e:	602b      	str	r3, [r5, #0]
 800bd80:	f7f6 f993 	bl	80020aa <_close>
 800bd84:	1c43      	adds	r3, r0, #1
 800bd86:	d102      	bne.n	800bd8e <_close_r+0x1a>
 800bd88:	682b      	ldr	r3, [r5, #0]
 800bd8a:	b103      	cbz	r3, 800bd8e <_close_r+0x1a>
 800bd8c:	6023      	str	r3, [r4, #0]
 800bd8e:	bd38      	pop	{r3, r4, r5, pc}
 800bd90:	2000053c 	.word	0x2000053c

0800bd94 <fiprintf>:
 800bd94:	b40e      	push	{r1, r2, r3}
 800bd96:	b503      	push	{r0, r1, lr}
 800bd98:	4601      	mov	r1, r0
 800bd9a:	ab03      	add	r3, sp, #12
 800bd9c:	4805      	ldr	r0, [pc, #20]	; (800bdb4 <fiprintf+0x20>)
 800bd9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda2:	6800      	ldr	r0, [r0, #0]
 800bda4:	9301      	str	r3, [sp, #4]
 800bda6:	f7ff fe41 	bl	800ba2c <_vfiprintf_r>
 800bdaa:	b002      	add	sp, #8
 800bdac:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdb0:	b003      	add	sp, #12
 800bdb2:	4770      	bx	lr
 800bdb4:	20000010 	.word	0x20000010

0800bdb8 <_fstat_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	4d07      	ldr	r5, [pc, #28]	; (800bdd8 <_fstat_r+0x20>)
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	4608      	mov	r0, r1
 800bdc2:	4611      	mov	r1, r2
 800bdc4:	602b      	str	r3, [r5, #0]
 800bdc6:	f7f6 f97c 	bl	80020c2 <_fstat>
 800bdca:	1c43      	adds	r3, r0, #1
 800bdcc:	d102      	bne.n	800bdd4 <_fstat_r+0x1c>
 800bdce:	682b      	ldr	r3, [r5, #0]
 800bdd0:	b103      	cbz	r3, 800bdd4 <_fstat_r+0x1c>
 800bdd2:	6023      	str	r3, [r4, #0]
 800bdd4:	bd38      	pop	{r3, r4, r5, pc}
 800bdd6:	bf00      	nop
 800bdd8:	2000053c 	.word	0x2000053c

0800bddc <_isatty_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	4d06      	ldr	r5, [pc, #24]	; (800bdf8 <_isatty_r+0x1c>)
 800bde0:	2300      	movs	r3, #0
 800bde2:	4604      	mov	r4, r0
 800bde4:	4608      	mov	r0, r1
 800bde6:	602b      	str	r3, [r5, #0]
 800bde8:	f7f6 f97b 	bl	80020e2 <_isatty>
 800bdec:	1c43      	adds	r3, r0, #1
 800bdee:	d102      	bne.n	800bdf6 <_isatty_r+0x1a>
 800bdf0:	682b      	ldr	r3, [r5, #0]
 800bdf2:	b103      	cbz	r3, 800bdf6 <_isatty_r+0x1a>
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	bd38      	pop	{r3, r4, r5, pc}
 800bdf8:	2000053c 	.word	0x2000053c

0800bdfc <_lseek_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d07      	ldr	r5, [pc, #28]	; (800be1c <_lseek_r+0x20>)
 800be00:	4604      	mov	r4, r0
 800be02:	4608      	mov	r0, r1
 800be04:	4611      	mov	r1, r2
 800be06:	2200      	movs	r2, #0
 800be08:	602a      	str	r2, [r5, #0]
 800be0a:	461a      	mov	r2, r3
 800be0c:	f7f6 f974 	bl	80020f8 <_lseek>
 800be10:	1c43      	adds	r3, r0, #1
 800be12:	d102      	bne.n	800be1a <_lseek_r+0x1e>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	b103      	cbz	r3, 800be1a <_lseek_r+0x1e>
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	2000053c 	.word	0x2000053c

0800be20 <__ascii_mbtowc>:
 800be20:	b082      	sub	sp, #8
 800be22:	b901      	cbnz	r1, 800be26 <__ascii_mbtowc+0x6>
 800be24:	a901      	add	r1, sp, #4
 800be26:	b142      	cbz	r2, 800be3a <__ascii_mbtowc+0x1a>
 800be28:	b14b      	cbz	r3, 800be3e <__ascii_mbtowc+0x1e>
 800be2a:	7813      	ldrb	r3, [r2, #0]
 800be2c:	600b      	str	r3, [r1, #0]
 800be2e:	7812      	ldrb	r2, [r2, #0]
 800be30:	1e10      	subs	r0, r2, #0
 800be32:	bf18      	it	ne
 800be34:	2001      	movne	r0, #1
 800be36:	b002      	add	sp, #8
 800be38:	4770      	bx	lr
 800be3a:	4610      	mov	r0, r2
 800be3c:	e7fb      	b.n	800be36 <__ascii_mbtowc+0x16>
 800be3e:	f06f 0001 	mvn.w	r0, #1
 800be42:	e7f8      	b.n	800be36 <__ascii_mbtowc+0x16>

0800be44 <memmove>:
 800be44:	4288      	cmp	r0, r1
 800be46:	b510      	push	{r4, lr}
 800be48:	eb01 0402 	add.w	r4, r1, r2
 800be4c:	d902      	bls.n	800be54 <memmove+0x10>
 800be4e:	4284      	cmp	r4, r0
 800be50:	4623      	mov	r3, r4
 800be52:	d807      	bhi.n	800be64 <memmove+0x20>
 800be54:	1e43      	subs	r3, r0, #1
 800be56:	42a1      	cmp	r1, r4
 800be58:	d008      	beq.n	800be6c <memmove+0x28>
 800be5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be62:	e7f8      	b.n	800be56 <memmove+0x12>
 800be64:	4402      	add	r2, r0
 800be66:	4601      	mov	r1, r0
 800be68:	428a      	cmp	r2, r1
 800be6a:	d100      	bne.n	800be6e <memmove+0x2a>
 800be6c:	bd10      	pop	{r4, pc}
 800be6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be76:	e7f7      	b.n	800be68 <memmove+0x24>

0800be78 <_realloc_r>:
 800be78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be7c:	4680      	mov	r8, r0
 800be7e:	4614      	mov	r4, r2
 800be80:	460e      	mov	r6, r1
 800be82:	b921      	cbnz	r1, 800be8e <_realloc_r+0x16>
 800be84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be88:	4611      	mov	r1, r2
 800be8a:	f7fd b90f 	b.w	80090ac <_malloc_r>
 800be8e:	b92a      	cbnz	r2, 800be9c <_realloc_r+0x24>
 800be90:	f7fd f8a0 	bl	8008fd4 <_free_r>
 800be94:	4625      	mov	r5, r4
 800be96:	4628      	mov	r0, r5
 800be98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be9c:	f000 f842 	bl	800bf24 <_malloc_usable_size_r>
 800bea0:	4284      	cmp	r4, r0
 800bea2:	4607      	mov	r7, r0
 800bea4:	d802      	bhi.n	800beac <_realloc_r+0x34>
 800bea6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800beaa:	d812      	bhi.n	800bed2 <_realloc_r+0x5a>
 800beac:	4621      	mov	r1, r4
 800beae:	4640      	mov	r0, r8
 800beb0:	f7fd f8fc 	bl	80090ac <_malloc_r>
 800beb4:	4605      	mov	r5, r0
 800beb6:	2800      	cmp	r0, #0
 800beb8:	d0ed      	beq.n	800be96 <_realloc_r+0x1e>
 800beba:	42bc      	cmp	r4, r7
 800bebc:	4622      	mov	r2, r4
 800bebe:	4631      	mov	r1, r6
 800bec0:	bf28      	it	cs
 800bec2:	463a      	movcs	r2, r7
 800bec4:	f7fd f870 	bl	8008fa8 <memcpy>
 800bec8:	4631      	mov	r1, r6
 800beca:	4640      	mov	r0, r8
 800becc:	f7fd f882 	bl	8008fd4 <_free_r>
 800bed0:	e7e1      	b.n	800be96 <_realloc_r+0x1e>
 800bed2:	4635      	mov	r5, r6
 800bed4:	e7df      	b.n	800be96 <_realloc_r+0x1e>
	...

0800bed8 <_read_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4d07      	ldr	r5, [pc, #28]	; (800bef8 <_read_r+0x20>)
 800bedc:	4604      	mov	r4, r0
 800bede:	4608      	mov	r0, r1
 800bee0:	4611      	mov	r1, r2
 800bee2:	2200      	movs	r2, #0
 800bee4:	602a      	str	r2, [r5, #0]
 800bee6:	461a      	mov	r2, r3
 800bee8:	f7f6 f8c2 	bl	8002070 <_read>
 800beec:	1c43      	adds	r3, r0, #1
 800beee:	d102      	bne.n	800bef6 <_read_r+0x1e>
 800bef0:	682b      	ldr	r3, [r5, #0]
 800bef2:	b103      	cbz	r3, 800bef6 <_read_r+0x1e>
 800bef4:	6023      	str	r3, [r4, #0]
 800bef6:	bd38      	pop	{r3, r4, r5, pc}
 800bef8:	2000053c 	.word	0x2000053c

0800befc <__ascii_wctomb>:
 800befc:	b149      	cbz	r1, 800bf12 <__ascii_wctomb+0x16>
 800befe:	2aff      	cmp	r2, #255	; 0xff
 800bf00:	bf85      	ittet	hi
 800bf02:	238a      	movhi	r3, #138	; 0x8a
 800bf04:	6003      	strhi	r3, [r0, #0]
 800bf06:	700a      	strbls	r2, [r1, #0]
 800bf08:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf0c:	bf98      	it	ls
 800bf0e:	2001      	movls	r0, #1
 800bf10:	4770      	bx	lr
 800bf12:	4608      	mov	r0, r1
 800bf14:	4770      	bx	lr

0800bf16 <abort>:
 800bf16:	b508      	push	{r3, lr}
 800bf18:	2006      	movs	r0, #6
 800bf1a:	f000 f833 	bl	800bf84 <raise>
 800bf1e:	2001      	movs	r0, #1
 800bf20:	f7f6 f89c 	bl	800205c <_exit>

0800bf24 <_malloc_usable_size_r>:
 800bf24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf28:	1f18      	subs	r0, r3, #4
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	bfbc      	itt	lt
 800bf2e:	580b      	ldrlt	r3, [r1, r0]
 800bf30:	18c0      	addlt	r0, r0, r3
 800bf32:	4770      	bx	lr

0800bf34 <_raise_r>:
 800bf34:	291f      	cmp	r1, #31
 800bf36:	b538      	push	{r3, r4, r5, lr}
 800bf38:	4604      	mov	r4, r0
 800bf3a:	460d      	mov	r5, r1
 800bf3c:	d904      	bls.n	800bf48 <_raise_r+0x14>
 800bf3e:	2316      	movs	r3, #22
 800bf40:	6003      	str	r3, [r0, #0]
 800bf42:	f04f 30ff 	mov.w	r0, #4294967295
 800bf46:	bd38      	pop	{r3, r4, r5, pc}
 800bf48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf4a:	b112      	cbz	r2, 800bf52 <_raise_r+0x1e>
 800bf4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf50:	b94b      	cbnz	r3, 800bf66 <_raise_r+0x32>
 800bf52:	4620      	mov	r0, r4
 800bf54:	f000 f830 	bl	800bfb8 <_getpid_r>
 800bf58:	462a      	mov	r2, r5
 800bf5a:	4601      	mov	r1, r0
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf62:	f000 b817 	b.w	800bf94 <_kill_r>
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d00a      	beq.n	800bf80 <_raise_r+0x4c>
 800bf6a:	1c59      	adds	r1, r3, #1
 800bf6c:	d103      	bne.n	800bf76 <_raise_r+0x42>
 800bf6e:	2316      	movs	r3, #22
 800bf70:	6003      	str	r3, [r0, #0]
 800bf72:	2001      	movs	r0, #1
 800bf74:	e7e7      	b.n	800bf46 <_raise_r+0x12>
 800bf76:	2400      	movs	r4, #0
 800bf78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	4798      	blx	r3
 800bf80:	2000      	movs	r0, #0
 800bf82:	e7e0      	b.n	800bf46 <_raise_r+0x12>

0800bf84 <raise>:
 800bf84:	4b02      	ldr	r3, [pc, #8]	; (800bf90 <raise+0xc>)
 800bf86:	4601      	mov	r1, r0
 800bf88:	6818      	ldr	r0, [r3, #0]
 800bf8a:	f7ff bfd3 	b.w	800bf34 <_raise_r>
 800bf8e:	bf00      	nop
 800bf90:	20000010 	.word	0x20000010

0800bf94 <_kill_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4d07      	ldr	r5, [pc, #28]	; (800bfb4 <_kill_r+0x20>)
 800bf98:	2300      	movs	r3, #0
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	602b      	str	r3, [r5, #0]
 800bfa2:	f7f6 f84b 	bl	800203c <_kill>
 800bfa6:	1c43      	adds	r3, r0, #1
 800bfa8:	d102      	bne.n	800bfb0 <_kill_r+0x1c>
 800bfaa:	682b      	ldr	r3, [r5, #0]
 800bfac:	b103      	cbz	r3, 800bfb0 <_kill_r+0x1c>
 800bfae:	6023      	str	r3, [r4, #0]
 800bfb0:	bd38      	pop	{r3, r4, r5, pc}
 800bfb2:	bf00      	nop
 800bfb4:	2000053c 	.word	0x2000053c

0800bfb8 <_getpid_r>:
 800bfb8:	f7f6 b838 	b.w	800202c <_getpid>
 800bfbc:	0000      	movs	r0, r0
	...

0800bfc0 <log>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	ed2d 8b02 	vpush	{d8}
 800bfc6:	ec55 4b10 	vmov	r4, r5, d0
 800bfca:	f000 f839 	bl	800c040 <__ieee754_log>
 800bfce:	4622      	mov	r2, r4
 800bfd0:	462b      	mov	r3, r5
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	4629      	mov	r1, r5
 800bfd6:	eeb0 8a40 	vmov.f32	s16, s0
 800bfda:	eef0 8a60 	vmov.f32	s17, s1
 800bfde:	f7f4 fd8d 	bl	8000afc <__aeabi_dcmpun>
 800bfe2:	b998      	cbnz	r0, 800c00c <log+0x4c>
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	4620      	mov	r0, r4
 800bfea:	4629      	mov	r1, r5
 800bfec:	f7f4 fd7c 	bl	8000ae8 <__aeabi_dcmpgt>
 800bff0:	b960      	cbnz	r0, 800c00c <log+0x4c>
 800bff2:	2200      	movs	r2, #0
 800bff4:	2300      	movs	r3, #0
 800bff6:	4620      	mov	r0, r4
 800bff8:	4629      	mov	r1, r5
 800bffa:	f7f4 fd4d 	bl	8000a98 <__aeabi_dcmpeq>
 800bffe:	b160      	cbz	r0, 800c01a <log+0x5a>
 800c000:	f7fc ffa0 	bl	8008f44 <__errno>
 800c004:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800c030 <log+0x70>
 800c008:	2322      	movs	r3, #34	; 0x22
 800c00a:	6003      	str	r3, [r0, #0]
 800c00c:	eeb0 0a48 	vmov.f32	s0, s16
 800c010:	eef0 0a68 	vmov.f32	s1, s17
 800c014:	ecbd 8b02 	vpop	{d8}
 800c018:	bd38      	pop	{r3, r4, r5, pc}
 800c01a:	f7fc ff93 	bl	8008f44 <__errno>
 800c01e:	ecbd 8b02 	vpop	{d8}
 800c022:	2321      	movs	r3, #33	; 0x21
 800c024:	6003      	str	r3, [r0, #0]
 800c026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c02a:	4803      	ldr	r0, [pc, #12]	; (800c038 <log+0x78>)
 800c02c:	f000 b9c4 	b.w	800c3b8 <nan>
 800c030:	00000000 	.word	0x00000000
 800c034:	fff00000 	.word	0xfff00000
 800c038:	0800ca08 	.word	0x0800ca08
 800c03c:	00000000 	.word	0x00000000

0800c040 <__ieee754_log>:
 800c040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c044:	ec51 0b10 	vmov	r0, r1, d0
 800c048:	ed2d 8b04 	vpush	{d8-d9}
 800c04c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c050:	b083      	sub	sp, #12
 800c052:	460d      	mov	r5, r1
 800c054:	da29      	bge.n	800c0aa <__ieee754_log+0x6a>
 800c056:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c05a:	4303      	orrs	r3, r0
 800c05c:	ee10 2a10 	vmov	r2, s0
 800c060:	d10c      	bne.n	800c07c <__ieee754_log+0x3c>
 800c062:	49cf      	ldr	r1, [pc, #828]	; (800c3a0 <__ieee754_log+0x360>)
 800c064:	2200      	movs	r2, #0
 800c066:	2300      	movs	r3, #0
 800c068:	2000      	movs	r0, #0
 800c06a:	f7f4 fbd7 	bl	800081c <__aeabi_ddiv>
 800c06e:	ec41 0b10 	vmov	d0, r0, r1
 800c072:	b003      	add	sp, #12
 800c074:	ecbd 8b04 	vpop	{d8-d9}
 800c078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07c:	2900      	cmp	r1, #0
 800c07e:	da05      	bge.n	800c08c <__ieee754_log+0x4c>
 800c080:	460b      	mov	r3, r1
 800c082:	f7f4 f8e9 	bl	8000258 <__aeabi_dsub>
 800c086:	2200      	movs	r2, #0
 800c088:	2300      	movs	r3, #0
 800c08a:	e7ee      	b.n	800c06a <__ieee754_log+0x2a>
 800c08c:	4bc5      	ldr	r3, [pc, #788]	; (800c3a4 <__ieee754_log+0x364>)
 800c08e:	2200      	movs	r2, #0
 800c090:	f7f4 fa9a 	bl	80005c8 <__aeabi_dmul>
 800c094:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c098:	460d      	mov	r5, r1
 800c09a:	4ac3      	ldr	r2, [pc, #780]	; (800c3a8 <__ieee754_log+0x368>)
 800c09c:	4295      	cmp	r5, r2
 800c09e:	dd06      	ble.n	800c0ae <__ieee754_log+0x6e>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	f7f4 f8da 	bl	800025c <__adddf3>
 800c0a8:	e7e1      	b.n	800c06e <__ieee754_log+0x2e>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	e7f5      	b.n	800c09a <__ieee754_log+0x5a>
 800c0ae:	152c      	asrs	r4, r5, #20
 800c0b0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c0b4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c0b8:	441c      	add	r4, r3
 800c0ba:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c0be:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c0c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c0c6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c0ca:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c0ce:	ea42 0105 	orr.w	r1, r2, r5
 800c0d2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	4bb4      	ldr	r3, [pc, #720]	; (800c3ac <__ieee754_log+0x36c>)
 800c0da:	f7f4 f8bd 	bl	8000258 <__aeabi_dsub>
 800c0de:	1cab      	adds	r3, r5, #2
 800c0e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	4682      	mov	sl, r0
 800c0e8:	468b      	mov	fp, r1
 800c0ea:	f04f 0200 	mov.w	r2, #0
 800c0ee:	dc53      	bgt.n	800c198 <__ieee754_log+0x158>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	f7f4 fcd1 	bl	8000a98 <__aeabi_dcmpeq>
 800c0f6:	b1d0      	cbz	r0, 800c12e <__ieee754_log+0xee>
 800c0f8:	2c00      	cmp	r4, #0
 800c0fa:	f000 8122 	beq.w	800c342 <__ieee754_log+0x302>
 800c0fe:	4620      	mov	r0, r4
 800c100:	f7f4 f9f8 	bl	80004f4 <__aeabi_i2d>
 800c104:	a390      	add	r3, pc, #576	; (adr r3, 800c348 <__ieee754_log+0x308>)
 800c106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10a:	4606      	mov	r6, r0
 800c10c:	460f      	mov	r7, r1
 800c10e:	f7f4 fa5b 	bl	80005c8 <__aeabi_dmul>
 800c112:	a38f      	add	r3, pc, #572	; (adr r3, 800c350 <__ieee754_log+0x310>)
 800c114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c118:	4604      	mov	r4, r0
 800c11a:	460d      	mov	r5, r1
 800c11c:	4630      	mov	r0, r6
 800c11e:	4639      	mov	r1, r7
 800c120:	f7f4 fa52 	bl	80005c8 <__aeabi_dmul>
 800c124:	4602      	mov	r2, r0
 800c126:	460b      	mov	r3, r1
 800c128:	4620      	mov	r0, r4
 800c12a:	4629      	mov	r1, r5
 800c12c:	e7ba      	b.n	800c0a4 <__ieee754_log+0x64>
 800c12e:	a38a      	add	r3, pc, #552	; (adr r3, 800c358 <__ieee754_log+0x318>)
 800c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c134:	4650      	mov	r0, sl
 800c136:	4659      	mov	r1, fp
 800c138:	f7f4 fa46 	bl	80005c8 <__aeabi_dmul>
 800c13c:	4602      	mov	r2, r0
 800c13e:	460b      	mov	r3, r1
 800c140:	2000      	movs	r0, #0
 800c142:	499b      	ldr	r1, [pc, #620]	; (800c3b0 <__ieee754_log+0x370>)
 800c144:	f7f4 f888 	bl	8000258 <__aeabi_dsub>
 800c148:	4652      	mov	r2, sl
 800c14a:	4606      	mov	r6, r0
 800c14c:	460f      	mov	r7, r1
 800c14e:	465b      	mov	r3, fp
 800c150:	4650      	mov	r0, sl
 800c152:	4659      	mov	r1, fp
 800c154:	f7f4 fa38 	bl	80005c8 <__aeabi_dmul>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4630      	mov	r0, r6
 800c15e:	4639      	mov	r1, r7
 800c160:	f7f4 fa32 	bl	80005c8 <__aeabi_dmul>
 800c164:	4606      	mov	r6, r0
 800c166:	460f      	mov	r7, r1
 800c168:	b914      	cbnz	r4, 800c170 <__ieee754_log+0x130>
 800c16a:	4632      	mov	r2, r6
 800c16c:	463b      	mov	r3, r7
 800c16e:	e0a2      	b.n	800c2b6 <__ieee754_log+0x276>
 800c170:	4620      	mov	r0, r4
 800c172:	f7f4 f9bf 	bl	80004f4 <__aeabi_i2d>
 800c176:	a374      	add	r3, pc, #464	; (adr r3, 800c348 <__ieee754_log+0x308>)
 800c178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17c:	4680      	mov	r8, r0
 800c17e:	4689      	mov	r9, r1
 800c180:	f7f4 fa22 	bl	80005c8 <__aeabi_dmul>
 800c184:	a372      	add	r3, pc, #456	; (adr r3, 800c350 <__ieee754_log+0x310>)
 800c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18a:	4604      	mov	r4, r0
 800c18c:	460d      	mov	r5, r1
 800c18e:	4640      	mov	r0, r8
 800c190:	4649      	mov	r1, r9
 800c192:	f7f4 fa19 	bl	80005c8 <__aeabi_dmul>
 800c196:	e0a7      	b.n	800c2e8 <__ieee754_log+0x2a8>
 800c198:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c19c:	f7f4 f85e 	bl	800025c <__adddf3>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4650      	mov	r0, sl
 800c1a6:	4659      	mov	r1, fp
 800c1a8:	f7f4 fb38 	bl	800081c <__aeabi_ddiv>
 800c1ac:	ec41 0b18 	vmov	d8, r0, r1
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f7f4 f99f 	bl	80004f4 <__aeabi_i2d>
 800c1b6:	ec53 2b18 	vmov	r2, r3, d8
 800c1ba:	ec41 0b19 	vmov	d9, r0, r1
 800c1be:	ec51 0b18 	vmov	r0, r1, d8
 800c1c2:	f7f4 fa01 	bl	80005c8 <__aeabi_dmul>
 800c1c6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c1ca:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c1ce:	9301      	str	r3, [sp, #4]
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4680      	mov	r8, r0
 800c1d6:	4689      	mov	r9, r1
 800c1d8:	f7f4 f9f6 	bl	80005c8 <__aeabi_dmul>
 800c1dc:	a360      	add	r3, pc, #384	; (adr r3, 800c360 <__ieee754_log+0x320>)
 800c1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e2:	4606      	mov	r6, r0
 800c1e4:	460f      	mov	r7, r1
 800c1e6:	f7f4 f9ef 	bl	80005c8 <__aeabi_dmul>
 800c1ea:	a35f      	add	r3, pc, #380	; (adr r3, 800c368 <__ieee754_log+0x328>)
 800c1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f0:	f7f4 f834 	bl	800025c <__adddf3>
 800c1f4:	4632      	mov	r2, r6
 800c1f6:	463b      	mov	r3, r7
 800c1f8:	f7f4 f9e6 	bl	80005c8 <__aeabi_dmul>
 800c1fc:	a35c      	add	r3, pc, #368	; (adr r3, 800c370 <__ieee754_log+0x330>)
 800c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c202:	f7f4 f82b 	bl	800025c <__adddf3>
 800c206:	4632      	mov	r2, r6
 800c208:	463b      	mov	r3, r7
 800c20a:	f7f4 f9dd 	bl	80005c8 <__aeabi_dmul>
 800c20e:	a35a      	add	r3, pc, #360	; (adr r3, 800c378 <__ieee754_log+0x338>)
 800c210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c214:	f7f4 f822 	bl	800025c <__adddf3>
 800c218:	4642      	mov	r2, r8
 800c21a:	464b      	mov	r3, r9
 800c21c:	f7f4 f9d4 	bl	80005c8 <__aeabi_dmul>
 800c220:	a357      	add	r3, pc, #348	; (adr r3, 800c380 <__ieee754_log+0x340>)
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	4680      	mov	r8, r0
 800c228:	4689      	mov	r9, r1
 800c22a:	4630      	mov	r0, r6
 800c22c:	4639      	mov	r1, r7
 800c22e:	f7f4 f9cb 	bl	80005c8 <__aeabi_dmul>
 800c232:	a355      	add	r3, pc, #340	; (adr r3, 800c388 <__ieee754_log+0x348>)
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	f7f4 f810 	bl	800025c <__adddf3>
 800c23c:	4632      	mov	r2, r6
 800c23e:	463b      	mov	r3, r7
 800c240:	f7f4 f9c2 	bl	80005c8 <__aeabi_dmul>
 800c244:	a352      	add	r3, pc, #328	; (adr r3, 800c390 <__ieee754_log+0x350>)
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	f7f4 f807 	bl	800025c <__adddf3>
 800c24e:	4632      	mov	r2, r6
 800c250:	463b      	mov	r3, r7
 800c252:	f7f4 f9b9 	bl	80005c8 <__aeabi_dmul>
 800c256:	460b      	mov	r3, r1
 800c258:	4602      	mov	r2, r0
 800c25a:	4649      	mov	r1, r9
 800c25c:	4640      	mov	r0, r8
 800c25e:	f7f3 fffd 	bl	800025c <__adddf3>
 800c262:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c266:	9b01      	ldr	r3, [sp, #4]
 800c268:	3551      	adds	r5, #81	; 0x51
 800c26a:	431d      	orrs	r5, r3
 800c26c:	2d00      	cmp	r5, #0
 800c26e:	4680      	mov	r8, r0
 800c270:	4689      	mov	r9, r1
 800c272:	dd48      	ble.n	800c306 <__ieee754_log+0x2c6>
 800c274:	4b4e      	ldr	r3, [pc, #312]	; (800c3b0 <__ieee754_log+0x370>)
 800c276:	2200      	movs	r2, #0
 800c278:	4650      	mov	r0, sl
 800c27a:	4659      	mov	r1, fp
 800c27c:	f7f4 f9a4 	bl	80005c8 <__aeabi_dmul>
 800c280:	4652      	mov	r2, sl
 800c282:	465b      	mov	r3, fp
 800c284:	f7f4 f9a0 	bl	80005c8 <__aeabi_dmul>
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	4606      	mov	r6, r0
 800c28e:	460f      	mov	r7, r1
 800c290:	4640      	mov	r0, r8
 800c292:	4649      	mov	r1, r9
 800c294:	f7f3 ffe2 	bl	800025c <__adddf3>
 800c298:	ec53 2b18 	vmov	r2, r3, d8
 800c29c:	f7f4 f994 	bl	80005c8 <__aeabi_dmul>
 800c2a0:	4680      	mov	r8, r0
 800c2a2:	4689      	mov	r9, r1
 800c2a4:	b964      	cbnz	r4, 800c2c0 <__ieee754_log+0x280>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	4639      	mov	r1, r7
 800c2ae:	f7f3 ffd3 	bl	8000258 <__aeabi_dsub>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4650      	mov	r0, sl
 800c2b8:	4659      	mov	r1, fp
 800c2ba:	f7f3 ffcd 	bl	8000258 <__aeabi_dsub>
 800c2be:	e6d6      	b.n	800c06e <__ieee754_log+0x2e>
 800c2c0:	a321      	add	r3, pc, #132	; (adr r3, 800c348 <__ieee754_log+0x308>)
 800c2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c6:	ec51 0b19 	vmov	r0, r1, d9
 800c2ca:	f7f4 f97d 	bl	80005c8 <__aeabi_dmul>
 800c2ce:	a320      	add	r3, pc, #128	; (adr r3, 800c350 <__ieee754_log+0x310>)
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	460d      	mov	r5, r1
 800c2d8:	ec51 0b19 	vmov	r0, r1, d9
 800c2dc:	f7f4 f974 	bl	80005c8 <__aeabi_dmul>
 800c2e0:	4642      	mov	r2, r8
 800c2e2:	464b      	mov	r3, r9
 800c2e4:	f7f3 ffba 	bl	800025c <__adddf3>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	f7f3 ffb2 	bl	8000258 <__aeabi_dsub>
 800c2f4:	4652      	mov	r2, sl
 800c2f6:	465b      	mov	r3, fp
 800c2f8:	f7f3 ffae 	bl	8000258 <__aeabi_dsub>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	4620      	mov	r0, r4
 800c302:	4629      	mov	r1, r5
 800c304:	e7d9      	b.n	800c2ba <__ieee754_log+0x27a>
 800c306:	4602      	mov	r2, r0
 800c308:	460b      	mov	r3, r1
 800c30a:	4650      	mov	r0, sl
 800c30c:	4659      	mov	r1, fp
 800c30e:	f7f3 ffa3 	bl	8000258 <__aeabi_dsub>
 800c312:	ec53 2b18 	vmov	r2, r3, d8
 800c316:	f7f4 f957 	bl	80005c8 <__aeabi_dmul>
 800c31a:	4606      	mov	r6, r0
 800c31c:	460f      	mov	r7, r1
 800c31e:	2c00      	cmp	r4, #0
 800c320:	f43f af23 	beq.w	800c16a <__ieee754_log+0x12a>
 800c324:	a308      	add	r3, pc, #32	; (adr r3, 800c348 <__ieee754_log+0x308>)
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	ec51 0b19 	vmov	r0, r1, d9
 800c32e:	f7f4 f94b 	bl	80005c8 <__aeabi_dmul>
 800c332:	a307      	add	r3, pc, #28	; (adr r3, 800c350 <__ieee754_log+0x310>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	4604      	mov	r4, r0
 800c33a:	460d      	mov	r5, r1
 800c33c:	ec51 0b19 	vmov	r0, r1, d9
 800c340:	e727      	b.n	800c192 <__ieee754_log+0x152>
 800c342:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800c398 <__ieee754_log+0x358>
 800c346:	e694      	b.n	800c072 <__ieee754_log+0x32>
 800c348:	fee00000 	.word	0xfee00000
 800c34c:	3fe62e42 	.word	0x3fe62e42
 800c350:	35793c76 	.word	0x35793c76
 800c354:	3dea39ef 	.word	0x3dea39ef
 800c358:	55555555 	.word	0x55555555
 800c35c:	3fd55555 	.word	0x3fd55555
 800c360:	df3e5244 	.word	0xdf3e5244
 800c364:	3fc2f112 	.word	0x3fc2f112
 800c368:	96cb03de 	.word	0x96cb03de
 800c36c:	3fc74664 	.word	0x3fc74664
 800c370:	94229359 	.word	0x94229359
 800c374:	3fd24924 	.word	0x3fd24924
 800c378:	55555593 	.word	0x55555593
 800c37c:	3fe55555 	.word	0x3fe55555
 800c380:	d078c69f 	.word	0xd078c69f
 800c384:	3fc39a09 	.word	0x3fc39a09
 800c388:	1d8e78af 	.word	0x1d8e78af
 800c38c:	3fcc71c5 	.word	0x3fcc71c5
 800c390:	9997fa04 	.word	0x9997fa04
 800c394:	3fd99999 	.word	0x3fd99999
	...
 800c3a0:	c3500000 	.word	0xc3500000
 800c3a4:	43500000 	.word	0x43500000
 800c3a8:	7fefffff 	.word	0x7fefffff
 800c3ac:	3ff00000 	.word	0x3ff00000
 800c3b0:	3fe00000 	.word	0x3fe00000
 800c3b4:	00000000 	.word	0x00000000

0800c3b8 <nan>:
 800c3b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c3c0 <nan+0x8>
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	00000000 	.word	0x00000000
 800c3c4:	7ff80000 	.word	0x7ff80000

0800c3c8 <_init>:
 800c3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ca:	bf00      	nop
 800c3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ce:	bc08      	pop	{r3}
 800c3d0:	469e      	mov	lr, r3
 800c3d2:	4770      	bx	lr

0800c3d4 <_fini>:
 800c3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d6:	bf00      	nop
 800c3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3da:	bc08      	pop	{r3}
 800c3dc:	469e      	mov	lr, r3
 800c3de:	4770      	bx	lr

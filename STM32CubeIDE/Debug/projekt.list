
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb48  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800cc88  0800cc88  0001cc88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d328  0800d328  0001d328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d32c  0800d32c  0001d32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  20000004  0800d330  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000040c  200001e8  0800d514  000201e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200005f4  0800d514  000205f4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e63a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000428a  00000000  00000000  0003e852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001b60  00000000  00000000  00042ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001a08  00000000  00000000  00044640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000218f6  00000000  00000000  00046048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f603  00000000  00000000  0006793e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ceb7b  00000000  00000000  00086f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00155abc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000089f0  00000000  00000000  00155b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cc70 	.word	0x0800cc70

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	0800cc70 	.word	0x0800cc70

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c64:	4a2f      	ldr	r2, [pc, #188]	; (8000d24 <MX_ADC1_Init+0xd8>)
 8000c66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c82:	2204      	movs	r2, #4
 8000c84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cc4:	221c      	movs	r2, #28
 8000cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cda:	4811      	ldr	r0, [pc, #68]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cdc:	f001 ffb4 	bl	8002c48 <HAL_ADC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000ce6:	f000 fcef 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_ADC1_Init+0xdc>)
 8000cec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf6:	237f      	movs	r3, #127	; 0x7f
 8000cf8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000d08:	f002 fa0c 	bl	8003124 <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000d12:	f000 fcd9 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000204 	.word	0x20000204
 8000d24:	50040000 	.word	0x50040000
 8000d28:	14f00020 	.word	0x14f00020

08000d2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	2224      	movs	r2, #36	; 0x24
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f008 fab3 	bl	80092b8 <memset>
  if(adcHandle->Instance==ADC1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <HAL_ADC_MspInit+0x80>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d123      	bne.n	8000da4 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d60:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL;
 8000d62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d66:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f005 f86d 	bl	8005e4c <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d78:	f000 fca6 	bl	80016c8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d80:	f7ff ff4a 	bl	8000c18 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff ff47 	bl	8000c18 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f003 fb30 	bl	8004404 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000da4:	bf00      	nop
 8000da6:	3740      	adds	r7, #64	; 0x40
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	50040000 	.word	0x50040000

08000db0 <read_raw>:
	 voltage =raw*VDDA/4095;
	 //printf("voltage in adc_control %.5f\n", voltage);
	 return voltage;
}

uint16_t read_raw(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
		 HAL_ADC_Start(&hadc1);
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <read_raw+0x30>)
 8000db8:	f002 f892 	bl	8002ee0 <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <read_raw+0x30>)
 8000dc2:	f002 f914 	bl	8002fee <HAL_ADC_PollForConversion>
		 uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <read_raw+0x30>)
 8000dc8:	f002 f99e 	bl	8003108 <HAL_ADC_GetValue>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	80fb      	strh	r3, [r7, #6]
		 HAL_ADC_Stop(&hadc1);
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <read_raw+0x30>)
 8000dd2:	f002 f8d9 	bl	8002f88 <HAL_ADC_Stop>
		 //printf("voltage in adc_control %.5f\n", voltage);
		 return raw;
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000204 	.word	0x20000204

08000de4 <process_arguments>:
#include <string.h>
#include "main.h"
#include "command_processor.h"


void process_arguments(char* args, uint32_t* global_args){
 8000de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000de8:	b08b      	sub	sp, #44	; 0x2c
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
	uint32_t size = strlen(args);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff f9cf 	bl	8000194 <strlen>
 8000df6:	61b8      	str	r0, [r7, #24]
	uint32_t global_i = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
	// '()' is minimum string, if not return
	if (size<2){
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d978      	bls.n	8000ef4 <process_arguments+0x110>
		return;
	}
	// if first char is not (, something is wrong
	if (args[0] != '('){
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b28      	cmp	r3, #40	; 0x28
 8000e08:	d176      	bne.n	8000ef8 <process_arguments+0x114>
		return;
	}
	// last separation symbol
	uint32_t last_symbol_i = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
	// main loop, go char by char and add to args
	for (uint32_t i=1; i<size; i++){
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	e06a      	b.n	8000eea <process_arguments+0x106>
		// if closing parenthessis ) is found, return
		uint8_t c = args[i];
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	75fb      	strb	r3, [r7, #23]

		// parse int
		if (c == ',' || c == ')'){
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	2b2c      	cmp	r3, #44	; 0x2c
 8000e22:	d002      	beq.n	8000e2a <process_arguments+0x46>
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b29      	cmp	r3, #41	; 0x29
 8000e28:	d159      	bne.n	8000ede <process_arguments+0xfa>
 8000e2a:	466b      	mov	r3, sp
 8000e2c:	461e      	mov	r6, r3
			// if not long enough string is found, e.g. (,,)
			if (i-last_symbol_i-1 <= 0){
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d103      	bne.n	8000e40 <process_arguments+0x5c>
				last_symbol_i = i;
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	46b5      	mov	sp, r6
 8000e3e:	e051      	b.n	8000ee4 <process_arguments+0x100>
				continue;
			}
			char arg_as_str[i - last_symbol_i];
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	1ad1      	subs	r1, r2, r3
 8000e46:	460b      	mov	r3, r1
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	461d      	mov	r5, r3
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	00eb      	lsls	r3, r5, #3
 8000e5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e60:	00e2      	lsls	r2, r4, #3
 8000e62:	2300      	movs	r3, #0
 8000e64:	4688      	mov	r8, r1
 8000e66:	4699      	mov	r9, r3
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e7c:	1dcb      	adds	r3, r1, #7
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	ebad 0d03 	sub.w	sp, sp, r3
 8000e86:	466b      	mov	r3, sp
 8000e88:	3300      	adds	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
			// add delimiting symbol
			arg_as_str[i - last_symbol_i-1] = '\0';
 8000e8c:	69fa      	ldr	r2, [r7, #28]
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	3b01      	subs	r3, #1
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	2100      	movs	r1, #0
 8000e98:	54d1      	strb	r1, [r2, r3]
			memcpy(arg_as_str, args+last_symbol_i+1, i - last_symbol_i-1);
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	18d1      	adds	r1, r2, r3
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f008 f9f5 	bl	800929c <memcpy>
			last_symbol_i = i;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	623b      	str	r3, [r7, #32]
			// add to global_args
			uint32_t parsed_int = atoi(arg_as_str);
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f008 f9ba 	bl	8009230 <atoi>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60bb      	str	r3, [r7, #8]
			global_args[global_i] = parsed_int;
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	601a      	str	r2, [r3, #0]
			global_i++;
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	3301      	adds	r3, #1
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
			if (global_i > MAX_ARG_LEN){
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	2b0a      	cmp	r3, #10
 8000ed6:	d901      	bls.n	8000edc <process_arguments+0xf8>
 8000ed8:	46b5      	mov	sp, r6
 8000eda:	e010      	b.n	8000efe <process_arguments+0x11a>
 8000edc:	46b5      	mov	sp, r6
				return;
			}
		}
		if (c == ')'){
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
 8000ee0:	2b29      	cmp	r3, #41	; 0x29
 8000ee2:	d00b      	beq.n	8000efc <process_arguments+0x118>
	for (uint32_t i=1; i<size; i++){
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d390      	bcc.n	8000e14 <process_arguments+0x30>
 8000ef2:	e004      	b.n	8000efe <process_arguments+0x11a>
		return;
 8000ef4:	bf00      	nop
 8000ef6:	e002      	b.n	8000efe <process_arguments+0x11a>
		return;
 8000ef8:	bf00      	nop
 8000efa:	e000      	b.n	8000efe <process_arguments+0x11a>
					return;
 8000efc:	bf00      	nop
		}
	}
}
 8000efe:	372c      	adds	r7, #44	; 0x2c
 8000f00:	46bd      	mov	sp, r7
 8000f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000f08 <process_command_string>:

// Process string commands
void process_command_string(char* string, command_t* global_command, uint32_t* global_args){
 8000f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f0c:	b08f      	sub	sp, #60	; 0x3c
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6178      	str	r0, [r7, #20]
 8000f12:	6139      	str	r1, [r7, #16]
 8000f14:	60fa      	str	r2, [r7, #12]
 8000f16:	466b      	mov	r3, sp
 8000f18:	461e      	mov	r6, r3
	char AMS_substr[4];
	AMS_substr[3] = '\0';
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	77fb      	strb	r3, [r7, #31]
	memcpy(AMS_substr, &string[0], 3);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	2203      	movs	r2, #3
 8000f24:	6979      	ldr	r1, [r7, #20]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f008 f9b8 	bl	800929c <memcpy>
	// If command doesnt begin with AMS set global_command to NONE and return
	if (strcmp(AMS_substr, "AMS") != 0){
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4986      	ldr	r1, [pc, #536]	; (800114c <process_command_string+0x244>)
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f924 	bl	8000180 <strcmp>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <process_command_string+0x40>
		*global_command = AMS_NONE;
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	46b5      	mov	sp, r6
 8000f46:	e0fc      	b.n	8001142 <process_command_string+0x23a>
		return;
	}
	// find string between _ and (
	uint8_t start_index = strchr(string, '_') - string;
 8000f48:	215f      	movs	r1, #95	; 0x5f
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f008 ffc4 	bl	8009ed8 <strchr>
 8000f50:	4602      	mov	r2, r0
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t end_index = strchr(string, '(') - string;
 8000f5a:	2128      	movs	r1, #40	; 0x28
 8000f5c:	6978      	ldr	r0, [r7, #20]
 8000f5e:	f008 ffbb 	bl	8009ed8 <strchr>
 8000f62:	4602      	mov	r2, r0
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	char command[end_index - start_index];
 8000f6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000f70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f74:	1ad1      	subs	r1, r2, r3
 8000f76:	1e4b      	subs	r3, r1, #1
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
 8000f7a:	460a      	mov	r2, r1
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	603a      	str	r2, [r7, #0]
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	00c3      	lsls	r3, r0, #3
 8000f8e:	6838      	ldr	r0, [r7, #0]
 8000f90:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f94:	6838      	ldr	r0, [r7, #0]
 8000f96:	00c2      	lsls	r2, r0, #3
 8000f98:	460a      	mov	r2, r1
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	4692      	mov	sl, r2
 8000f9e:	469b      	mov	fp, r3
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	3307      	adds	r3, #7
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	ebad 0d03 	sub.w	sp, sp, r3
 8000fc0:	466b      	mov	r3, sp
 8000fc2:	3300      	adds	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	command[end_index - start_index - 1] = '\0';
 8000fc6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000fca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	54d1      	strb	r1, [r2, r3]
	memcpy(command, &string[start_index+1], end_index-start_index-1);
 8000fd8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fdc:	3301      	adds	r3, #1
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	18d1      	adds	r1, r2, r3
 8000fe2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000fe6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	3b01      	subs	r3, #1
 8000fee:	461a      	mov	r2, r3
 8000ff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ff2:	f008 f953 	bl	800929c <memcpy>
	// set command based on string

	if (strcmp(command, "VERSION") == 0){
 8000ff6:	4956      	ldr	r1, [pc, #344]	; (8001150 <process_command_string+0x248>)
 8000ff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ffa:	f7ff f8c1 	bl	8000180 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d103      	bne.n	800100c <process_command_string+0x104>
		*global_command = AMS_VERSION;
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2203      	movs	r2, #3
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e03c      	b.n	8001086 <process_command_string+0x17e>
	}else if (strcmp(command, "SWEEP") == 0){
 800100c:	4951      	ldr	r1, [pc, #324]	; (8001154 <process_command_string+0x24c>)
 800100e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001010:	f7ff f8b6 	bl	8000180 <strcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <process_command_string+0x120>
		*global_command = AMS_SWEEP;
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
		printf("SETTING\n");
 8001020:	484d      	ldr	r0, [pc, #308]	; (8001158 <process_command_string+0x250>)
 8001022:	f008 ff21 	bl	8009e68 <puts>
 8001026:	e02e      	b.n	8001086 <process_command_string+0x17e>
	}else if (strcmp(command, "REGISTER")== 0){
 8001028:	494c      	ldr	r1, [pc, #304]	; (800115c <process_command_string+0x254>)
 800102a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800102c:	f7ff f8a8 	bl	8000180 <strcmp>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d103      	bne.n	800103e <process_command_string+0x136>
		*global_command = AMS_REGISTER;
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2202      	movs	r2, #2
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e023      	b.n	8001086 <process_command_string+0x17e>
	}else if (strcmp(command, "SINGLE")== 0){
 800103e:	4948      	ldr	r1, [pc, #288]	; (8001160 <process_command_string+0x258>)
 8001040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001042:	f7ff f89d 	bl	8000180 <strcmp>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d103      	bne.n	8001054 <process_command_string+0x14c>
		*global_command = AMS_SINGLE;
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	2204      	movs	r2, #4
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	e018      	b.n	8001086 <process_command_string+0x17e>
	}else if (strcmp(command, "HOWAREYOU")== 0){
 8001054:	4943      	ldr	r1, [pc, #268]	; (8001164 <process_command_string+0x25c>)
 8001056:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001058:	f7ff f892 	bl	8000180 <strcmp>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <process_command_string+0x162>
		*global_command = AMS_HOWAREYOU;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2205      	movs	r2, #5
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e00d      	b.n	8001086 <process_command_string+0x17e>
	}else if (strcmp(command, "STOp")== 0){
 800106a:	493f      	ldr	r1, [pc, #252]	; (8001168 <process_command_string+0x260>)
 800106c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800106e:	f7ff f887 	bl	8000180 <strcmp>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <process_command_string+0x178>
		*global_command = AMS_STOP;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	2206      	movs	r2, #6
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e002      	b.n	8001086 <process_command_string+0x17e>
	}else{
		*global_command = AMS_NONE;
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
	}
	// process arguments (max length is 10)
	memcpy(command, &string[start_index], end_index-start_index+1);
 8001086:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	18d1      	adds	r1, r2, r3
 800108e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001092:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	3301      	adds	r3, #1
 800109a:	461a      	mov	r2, r3
 800109c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800109e:	f008 f8fd 	bl	800929c <memcpy>
	uint8_t total_end_index = strchr(string, ')') - string;
 80010a2:	2129      	movs	r1, #41	; 0x29
 80010a4:	6978      	ldr	r0, [r7, #20]
 80010a6:	f008 ff17 	bl	8009ed8 <strchr>
 80010aa:	4602      	mov	r2, r0
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	char args[total_end_index - end_index + 2];
 80010b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	1c99      	adds	r1, r3, #2
 80010c0:	1e4b      	subs	r3, r1, #1
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
 80010c4:	460a      	mov	r2, r1
 80010c6:	2300      	movs	r3, #0
 80010c8:	4690      	mov	r8, r2
 80010ca:	4699      	mov	r9, r3
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010e0:	460a      	mov	r2, r1
 80010e2:	2300      	movs	r3, #0
 80010e4:	4614      	mov	r4, r2
 80010e6:	461d      	mov	r5, r3
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	00eb      	lsls	r3, r5, #3
 80010f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010f6:	00e2      	lsls	r2, r4, #3
 80010f8:	460b      	mov	r3, r1
 80010fa:	3307      	adds	r3, #7
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	ebad 0d03 	sub.w	sp, sp, r3
 8001104:	466b      	mov	r3, sp
 8001106:	3300      	adds	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
	args[total_end_index - end_index + 1] = '\0';
 800110a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800110e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	3301      	adds	r3, #1
 8001116:	6a3a      	ldr	r2, [r7, #32]
 8001118:	2100      	movs	r1, #0
 800111a:	54d1      	strb	r1, [r2, r3]
	memcpy(args, &string[end_index], total_end_index-end_index+1);
 800111c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	18d1      	adds	r1, r2, r3
 8001124:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001128:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	3301      	adds	r3, #1
 8001130:	461a      	mov	r2, r3
 8001132:	6a38      	ldr	r0, [r7, #32]
 8001134:	f008 f8b2 	bl	800929c <memcpy>

	process_arguments(args, global_args);
 8001138:	68f9      	ldr	r1, [r7, #12]
 800113a:	6a38      	ldr	r0, [r7, #32]
 800113c:	f7ff fe52 	bl	8000de4 <process_arguments>
 8001140:	46b5      	mov	sp, r6
}
 8001142:	373c      	adds	r7, #60	; 0x3c
 8001144:	46bd      	mov	sp, r7
 8001146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800114a:	bf00      	nop
 800114c:	0800cc88 	.word	0x0800cc88
 8001150:	0800cc8c 	.word	0x0800cc8c
 8001154:	0800cc94 	.word	0x0800cc94
 8001158:	0800cc9c 	.word	0x0800cc9c
 800115c:	0800cca4 	.word	0x0800cca4
 8001160:	0800ccb0 	.word	0x0800ccb0
 8001164:	0800ccb8 	.word	0x0800ccb8
 8001168:	0800ccc4 	.word	0x0800ccc4

0800116c <LL_AHB1_GRP1_EnableClock>:
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001178:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800117a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4313      	orrs	r3, r2
 8001182:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001190:	68fb      	ldr	r3, [r7, #12]
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011a2:	2004      	movs	r0, #4
 80011a4:	f7ff ffe2 	bl	800116c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff ffdf 	bl	800116c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	200b      	movs	r0, #11
 80011b4:	f002 fded 	bl	8003d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011b8:	200b      	movs	r0, #11
 80011ba:	f002 fe04 	bl	8003dc6 <HAL_NVIC_EnableIRQ>

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <LL_AHB2_GRP1_EnableClock>:
{
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4013      	ands	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff ffda 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	2002      	movs	r0, #2
 8001210:	f7ff ffd7 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11
 8001214:	2200      	movs	r2, #0
 8001216:	f641 011c 	movw	r1, #6172	; 0x181c
 800121a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121e:	f003 fa71 	bl	8004704 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	2102      	movs	r1, #2
 8001226:	4825      	ldr	r0, [pc, #148]	; (80012bc <MX_GPIO_Init+0xc8>)
 8001228:	f003 fa6c 	bl	8004704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2130      	movs	r1, #48	; 0x30
 8001230:	4822      	ldr	r0, [pc, #136]	; (80012bc <MX_GPIO_Init+0xc8>)
 8001232:	f003 fa67 	bl	8004704 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11
 8001236:	f641 031c 	movw	r3, #6172	; 0x181c
 800123a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f003 f8d8 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001254:	2340      	movs	r3, #64	; 0x40
 8001256:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f003 f8cc 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800126c:	2304      	movs	r3, #4
 800126e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	480f      	ldr	r0, [pc, #60]	; (80012bc <MX_GPIO_Init+0xc8>)
 800127e:	f003 f8c1 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001282:	2301      	movs	r3, #1
 8001284:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128a:	2301      	movs	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	480a      	ldr	r0, [pc, #40]	; (80012bc <MX_GPIO_Init+0xc8>)
 8001294:	f003 f8b6 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001298:	2332      	movs	r3, #50	; 0x32
 800129a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <MX_GPIO_Init+0xc8>)
 80012ae:	f003 f8a9 	bl	8004404 <HAL_GPIO_Init>

}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	48000400 	.word	0x48000400

080012c0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e4:	68fb      	ldr	r3, [r7, #12]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_IPCC_Init+0x20>)
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <MX_IPCC_Init+0x24>)
 80012fc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_IPCC_Init+0x20>)
 8001300:	f003 fa32 	bl	8004768 <HAL_IPCC_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800130a:	f000 f9dd 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000268 	.word	0x20000268
 8001318:	58000c00 	.word	0x58000c00

0800131c <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <HAL_IPCC_MspInit+0x44>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d113      	bne.n	8001356 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800132e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001332:	f7ff ffc5 	bl	80012c0 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	202c      	movs	r0, #44	; 0x2c
 800133c:	f002 fd29 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001340:	202c      	movs	r0, #44	; 0x2c
 8001342:	f002 fd40 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	202d      	movs	r0, #45	; 0x2d
 800134c:	f002 fd21 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001350:	202d      	movs	r0, #45	; 0x2d
 8001352:	f002 fd38 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	58000c00 	.word	0x58000c00

08001364 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

extern void initialise_monitor_handles(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001374:	d101      	bne.n	800137a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		SoftUartHandler();
 8001376:	f000 fe19 	bl	8001fac <SoftUartHandler>
	}
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <do_commands>:
char RxBuffer[RX_BFR_SIZE];
command_t global_command = AMS_NONE;
uint32_t global_args[MAX_ARG_LEN];

char strbuf[64];
void do_commands(){
 8001384:	b5b0      	push	{r4, r5, r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
	// check if there is command and if is, then process it
	if (global_command == AMS_SWEEP){
 800138a:	4b51      	ldr	r3, [pc, #324]	; (80014d0 <do_commands+0x14c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d15d      	bne.n	800144e <do_commands+0xca>
		uint32_t from = global_args[0];
 8001392:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <do_commands+0x150>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	613b      	str	r3, [r7, #16]
		uint32_t to = global_args[1];
 8001398:	4b4e      	ldr	r3, [pc, #312]	; (80014d4 <do_commands+0x150>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	60fb      	str	r3, [r7, #12]
		uint32_t step = global_args[2];
 800139e:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <do_commands+0x150>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	60bb      	str	r3, [r7, #8]
		uint32_t i;
		for (i=from; i<=to; i+=step){
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	e022      	b.n	80013f0 <do_commands+0x6c>
			  //printf("setting %d MHz\n", i);
			  if (global_command==AMS_STOP)
 80013aa:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <do_commands+0x14c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	f000 8089 	beq.w	80014c6 <do_commands+0x142>
				  return;
			  set_requested_frequency(i);
 80013b4:	6978      	ldr	r0, [r7, #20]
 80013b6:	f000 fae3 	bl	8001980 <set_requested_frequency>
			  HAL_Delay(1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f001 fa0a 	bl	80027d4 <HAL_Delay>
			  uint16_t raw = read_raw();
 80013c0:	f7ff fcf6 	bl	8000db0 <read_raw>
 80013c4:	4603      	mov	r3, r0
 80013c6:	80bb      	strh	r3, [r7, #4]
			  sprintf(strbuf, "{%d, %d}", i, raw);
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4942      	ldr	r1, [pc, #264]	; (80014d8 <do_commands+0x154>)
 80013ce:	4843      	ldr	r0, [pc, #268]	; (80014dc <do_commands+0x158>)
 80013d0:	f008 fd62 	bl	8009e98 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)&strbuf, strlen(strbuf), 100);
 80013d4:	4841      	ldr	r0, [pc, #260]	; (80014dc <do_commands+0x158>)
 80013d6:	f7fe fedd 	bl	8000194 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	b29a      	uxth	r2, r3
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	493e      	ldr	r1, [pc, #248]	; (80014dc <do_commands+0x158>)
 80013e2:	483f      	ldr	r0, [pc, #252]	; (80014e0 <do_commands+0x15c>)
 80013e4:	f005 fdee 	bl	8006fc4 <HAL_UART_Transmit>
		for (i=from; i<=to; i+=step){
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	4413      	add	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d9d8      	bls.n	80013aa <do_commands+0x26>
		 }
		// send last frequency
		if (i!=to){
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d019      	beq.n	8001434 <do_commands+0xb0>
			set_requested_frequency(to);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 fabd 	bl	8001980 <set_requested_frequency>
			HAL_Delay(1);
 8001406:	2001      	movs	r0, #1
 8001408:	f001 f9e4 	bl	80027d4 <HAL_Delay>
			uint16_t raw = read_raw();
 800140c:	f7ff fcd0 	bl	8000db0 <read_raw>
 8001410:	4603      	mov	r3, r0
 8001412:	80fb      	strh	r3, [r7, #6]
			sprintf(strbuf, "{%d, %d}", to, raw);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	492f      	ldr	r1, [pc, #188]	; (80014d8 <do_commands+0x154>)
 800141a:	4830      	ldr	r0, [pc, #192]	; (80014dc <do_commands+0x158>)
 800141c:	f008 fd3c 	bl	8009e98 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)&strbuf, strlen(strbuf), 100);
 8001420:	482e      	ldr	r0, [pc, #184]	; (80014dc <do_commands+0x158>)
 8001422:	f7fe feb7 	bl	8000194 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	2364      	movs	r3, #100	; 0x64
 800142c:	492b      	ldr	r1, [pc, #172]	; (80014dc <do_commands+0x158>)
 800142e:	482c      	ldr	r0, [pc, #176]	; (80014e0 <do_commands+0x15c>)
 8001430:	f005 fdc8 	bl	8006fc4 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)"]", 2, 100);
 8001434:	2364      	movs	r3, #100	; 0x64
 8001436:	2202      	movs	r2, #2
 8001438:	492a      	ldr	r1, [pc, #168]	; (80014e4 <do_commands+0x160>)
 800143a:	4829      	ldr	r0, [pc, #164]	; (80014e0 <do_commands+0x15c>)
 800143c:	f005 fdc2 	bl	8006fc4 <HAL_UART_Transmit>
		printf("Done\n");
 8001440:	4829      	ldr	r0, [pc, #164]	; (80014e8 <do_commands+0x164>)
 8001442:	f008 fd11 	bl	8009e68 <puts>
		global_command = AMS_NONE;
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <do_commands+0x14c>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	e03c      	b.n	80014c8 <do_commands+0x144>
	}else if (global_command == AMS_VERSION){
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <do_commands+0x14c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d11d      	bne.n	8001492 <do_commands+0x10e>
		strcpy(strbuf, "Antenna Measurement System Version 0.1");
 8001456:	4a21      	ldr	r2, [pc, #132]	; (80014dc <do_commands+0x158>)
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <do_commands+0x168>)
 800145a:	4614      	mov	r4, r2
 800145c:	461d      	mov	r5, r3
 800145e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001466:	e895 0003 	ldmia.w	r5, {r0, r1}
 800146a:	6020      	str	r0, [r4, #0]
 800146c:	3404      	adds	r4, #4
 800146e:	8021      	strh	r1, [r4, #0]
 8001470:	3402      	adds	r4, #2
 8001472:	0c0b      	lsrs	r3, r1, #16
 8001474:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 8001476:	4819      	ldr	r0, [pc, #100]	; (80014dc <do_commands+0x158>)
 8001478:	f7fe fe8c 	bl	8000194 <strlen>
 800147c:	4603      	mov	r3, r0
 800147e:	b29b      	uxth	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	4916      	ldr	r1, [pc, #88]	; (80014dc <do_commands+0x158>)
 8001484:	4816      	ldr	r0, [pc, #88]	; (80014e0 <do_commands+0x15c>)
 8001486:	f005 fe2b 	bl	80070e0 <HAL_UART_Transmit_IT>
		global_command = AMS_NONE;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <do_commands+0x14c>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e01a      	b.n	80014c8 <do_commands+0x144>
	}else if (global_command == AMS_HOWAREYOU){
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <do_commands+0x14c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b05      	cmp	r3, #5
 8001498:	d116      	bne.n	80014c8 <do_commands+0x144>
		strcpy(strbuf, "I am fine and working. So far so good.\n I feel bit exhausted, but ya know, that's life.");
 800149a:	4a10      	ldr	r2, [pc, #64]	; (80014dc <do_commands+0x158>)
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <do_commands+0x16c>)
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	2358      	movs	r3, #88	; 0x58
 80014a4:	461a      	mov	r2, r3
 80014a6:	f007 fef9 	bl	800929c <memcpy>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 80014aa:	480c      	ldr	r0, [pc, #48]	; (80014dc <do_commands+0x158>)
 80014ac:	f7fe fe72 	bl	8000194 <strlen>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	4909      	ldr	r1, [pc, #36]	; (80014dc <do_commands+0x158>)
 80014b8:	4809      	ldr	r0, [pc, #36]	; (80014e0 <do_commands+0x15c>)
 80014ba:	f005 fe11 	bl	80070e0 <HAL_UART_Transmit_IT>
		global_command = AMS_NONE;
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <do_commands+0x14c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	e000      	b.n	80014c8 <do_commands+0x144>
				  return;
 80014c6:	bf00      	nop
	}
}
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bdb0      	pop	{r4, r5, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002e4 	.word	0x200002e4
 80014d4:	200002e8 	.word	0x200002e8
 80014d8:	0800cccc 	.word	0x0800cccc
 80014dc:	20000310 	.word	0x20000310
 80014e0:	200004a0 	.word	0x200004a0
 80014e4:	0800ccd8 	.word	0x0800ccd8
 80014e8:	0800ccdc 	.word	0x0800ccdc
 80014ec:	0800cce4 	.word	0x0800cce4
 80014f0:	0800cd0c 	.word	0x0800cd0c

080014f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
   initialise_monitor_handles();
 80014fa:	f00b f90f 	bl	800c71c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fe:	f001 f8e3 	bl	80026c8 <HAL_Init>
  // REMOVE ON DEBUG

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001502:	f000 f85d 	bl	80015c0 <SystemClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001506:	f7ff fef5 	bl	80012f4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150a:	f7ff fe73 	bl	80011f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800150e:	f7ff fe46 	bl	800119e <MX_DMA_Init>
  MX_SPI1_Init();
 8001512:	f000 fdd3 	bl	80020bc <MX_SPI1_Init>
  MX_ADC1_Init();
 8001516:	f7ff fb99 	bl	8000c4c <MX_ADC1_Init>
  MX_TIM2_Init();
 800151a:	f000 ff1f 	bl	800235c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800151e:	f000 ffb3 	bl	8002488 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *) RxBuffer, RX_BFR_SIZE);
 8001522:	2240      	movs	r2, #64	; 0x40
 8001524:	491e      	ldr	r1, [pc, #120]	; (80015a0 <main+0xac>)
 8001526:	481f      	ldr	r0, [pc, #124]	; (80015a4 <main+0xb0>)
 8001528:	f007 fddf 	bl	80090ea <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting STM32\n");
 800152c:	481e      	ldr	r0, [pc, #120]	; (80015a8 <main+0xb4>)
 800152e:	f008 fc9b 	bl	8009e68 <puts>
  printf("Starting MAX\n");
 8001532:	481e      	ldr	r0, [pc, #120]	; (80015ac <main+0xb8>)
 8001534:	f008 fc98 	bl	8009e68 <puts>
  EnableChip();
 8001538:	f000 f8cb 	bl	80016d2 <EnableChip>

  //printf("Init Max\n");
  init_PLL();
 800153c:	f000 fa8e 	bl	8001a5c <init_PLL>

  //printf("write regs custom \n");
  write_regs_SOFT();
 8001540:	f000 fad8 	bl	8001af4 <write_regs_SOFT>
  setIntegerMode();
 8001544:	f000 fa0e 	bl	8001964 <setIntegerMode>

  printf("EnablingRFOUT\n");
 8001548:	4819      	ldr	r0, [pc, #100]	; (80015b0 <main+0xbc>)
 800154a:	f008 fc8d 	bl	8009e68 <puts>
  EnableRFOutput();
 800154e:	f000 f8ca 	bl	80016e6 <EnableRFOutput>

  printf("Initialization done\n");
 8001552:	4818      	ldr	r0, [pc, #96]	; (80015b4 <main+0xc0>)
 8001554:	f008 fc88 	bl	8009e68 <puts>
  print_registers();
 8001558:	f000 f8d0 	bl	80016fc <print_registers>
	  HAL_Delay(20);
	  printf(" ");
  }*/

  //calibrate();
  for (int i=0; i<4; i++){
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	e00b      	b.n	800157a <main+0x86>
	  printf("RFA PWR: %d\n", i);
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4814      	ldr	r0, [pc, #80]	; (80015b8 <main+0xc4>)
 8001566:	f008 fbf9 	bl	8009d5c <iprintf>
	  setRFA_PWR(i);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f998 	bl	80018a0 <setRFA_PWR>
	  program_PLL();
 8001570:	f000 fb48 	bl	8001c04 <program_PLL>
  for (int i=0; i<4; i++){
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3301      	adds	r3, #1
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b03      	cmp	r3, #3
 800157e:	ddf0      	ble.n	8001562 <main+0x6e>
	  //HAL_Delay(1);
  }
  //print_registers();
  printf("Start\n");
 8001580:	480e      	ldr	r0, [pc, #56]	; (80015bc <main+0xc8>)
 8001582:	f008 fc71 	bl	8009e68 <puts>
  set_requested_frequency(65);
 8001586:	2041      	movs	r0, #65	; 0x41
 8001588:	f000 f9fa 	bl	8001980 <set_requested_frequency>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 800158c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001594:	f003 f8ce 	bl	8004734 <HAL_GPIO_TogglePin>
	  do_commands();
 8001598:	f7ff fef4 	bl	8001384 <do_commands>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 800159c:	e7f6      	b.n	800158c <main+0x98>
 800159e:	bf00      	nop
 80015a0:	200002a4 	.word	0x200002a4
 80015a4:	200004a0 	.word	0x200004a0
 80015a8:	0800cd64 	.word	0x0800cd64
 80015ac:	0800cd74 	.word	0x0800cd74
 80015b0:	0800cd84 	.word	0x0800cd84
 80015b4:	0800cd94 	.word	0x0800cd94
 80015b8:	0800cda8 	.word	0x0800cda8
 80015bc:	0800cdb8 	.word	0x0800cdb8

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b09a      	sub	sp, #104	; 0x68
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	2248      	movs	r2, #72	; 0x48
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f007 fe72 	bl	80092b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80015e6:	2322      	movs	r3, #34	; 0x22
 80015e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015f0:	2301      	movs	r3, #1
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f4:	2340      	movs	r3, #64	; 0x40
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015fc:	2360      	movs	r3, #96	; 0x60
 80015fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001600:	2302      	movs	r3, #2
 8001602:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001604:	2301      	movs	r3, #1
 8001606:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 64;
 800160c:	2340      	movs	r3, #64	; 0x40
 800160e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001610:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001614:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8001616:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800161a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800161c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001620:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001622:	f107 0320 	add.w	r3, r7, #32
 8001626:	4618      	mov	r0, r3
 8001628:	f003 fd38 	bl	800509c <HAL_RCC_OscConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001632:	f000 f849 	bl	80016c8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001636:	236f      	movs	r3, #111	; 0x6f
 8001638:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163a:	2303      	movs	r3, #3
 800163c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2101      	movs	r1, #1
 8001656:	4618      	mov	r0, r3
 8001658:	f004 f88a 	bl	8005770 <HAL_RCC_ClockConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001662:	f000 f831 	bl	80016c8 <Error_Handler>
  }
}
 8001666:	bf00      	nop
 8001668:	3768      	adds	r7, #104	; 0x68
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]

		/* start the DMA again */
		printf("Size %d\n", Size);
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	4619      	mov	r1, r3
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <HAL_UARTEx_RxEventCallback+0x40>)
 8001682:	f008 fb6b 	bl	8009d5c <iprintf>
		printf(RxBuffer);
 8001686:	480b      	ldr	r0, [pc, #44]	; (80016b4 <HAL_UARTEx_RxEventCallback+0x44>)
 8001688:	f008 fb68 	bl	8009d5c <iprintf>
		printf("Received\n");
 800168c:	480a      	ldr	r0, [pc, #40]	; (80016b8 <HAL_UARTEx_RxEventCallback+0x48>)
 800168e:	f008 fbeb 	bl	8009e68 <puts>
		process_command_string(RxBuffer, &global_command, global_args);
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <HAL_UARTEx_RxEventCallback+0x4c>)
 8001694:	490a      	ldr	r1, [pc, #40]	; (80016c0 <HAL_UARTEx_RxEventCallback+0x50>)
 8001696:	4807      	ldr	r0, [pc, #28]	; (80016b4 <HAL_UARTEx_RxEventCallback+0x44>)
 8001698:	f7ff fc36 	bl	8000f08 <process_command_string>
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *) RxBuffer, RX_BFR_SIZE);
 800169c:	2240      	movs	r2, #64	; 0x40
 800169e:	4905      	ldr	r1, [pc, #20]	; (80016b4 <HAL_UARTEx_RxEventCallback+0x44>)
 80016a0:	4808      	ldr	r0, [pc, #32]	; (80016c4 <HAL_UARTEx_RxEventCallback+0x54>)
 80016a2:	f007 fd22 	bl	80090ea <HAL_UARTEx_ReceiveToIdle_IT>
		//__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);

}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	0800cdc0 	.word	0x0800cdc0
 80016b4:	200002a4 	.word	0x200002a4
 80016b8:	0800cdcc 	.word	0x0800cdcc
 80016bc:	200002e8 	.word	0x200002e8
 80016c0:	200002e4 	.word	0x200002e4
 80016c4:	200004a0 	.word	0x200004a0

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <Error_Handler+0x8>

080016d2 <EnableChip>:
/**
  * @brief Turn MAX2870 PLL on
  * By setting CE pin high
  * @retval
  */
void EnableChip(){
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	2104      	movs	r1, #4
 80016da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016de:	f003 f811 	bl	8004704 <HAL_GPIO_WritePin>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <EnableRFOutput>:

void DisableChip(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
}

void EnableRFOutput(){
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2108      	movs	r1, #8
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f003 f807 	bl	8004704 <HAL_GPIO_WritePin>
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <print_registers>:

void DisableRFOutput(){
 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}

void print_registers(){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	printf("reg0: %x\n", reg0);
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <print_registers+0x50>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	4812      	ldr	r0, [pc, #72]	; (8001750 <print_registers+0x54>)
 8001708:	f008 fb28 	bl	8009d5c <iprintf>
	printf("reg1: %x\n", reg1);
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <print_registers+0x58>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	4811      	ldr	r0, [pc, #68]	; (8001758 <print_registers+0x5c>)
 8001714:	f008 fb22 	bl	8009d5c <iprintf>
	printf("reg2: %x\n", reg2);
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <print_registers+0x60>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	4810      	ldr	r0, [pc, #64]	; (8001760 <print_registers+0x64>)
 8001720:	f008 fb1c 	bl	8009d5c <iprintf>
	printf("reg3: %x\n", reg3);
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <print_registers+0x68>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	480f      	ldr	r0, [pc, #60]	; (8001768 <print_registers+0x6c>)
 800172c:	f008 fb16 	bl	8009d5c <iprintf>
	printf("reg4: %x\n", reg4);
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <print_registers+0x70>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <print_registers+0x74>)
 8001738:	f008 fb10 	bl	8009d5c <iprintf>
	printf("reg5: %x\n", reg5);
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <print_registers+0x78>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <print_registers+0x7c>)
 8001744:	f008 fb0a 	bl	8009d5c <iprintf>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000350 	.word	0x20000350
 8001750:	0800cdd8 	.word	0x0800cdd8
 8001754:	20000354 	.word	0x20000354
 8001758:	0800cde4 	.word	0x0800cde4
 800175c:	20000358 	.word	0x20000358
 8001760:	0800cdf0 	.word	0x0800cdf0
 8001764:	2000035c 	.word	0x2000035c
 8001768:	0800cdfc 	.word	0x0800cdfc
 800176c:	20000360 	.word	0x20000360
 8001770:	0800ce08 	.word	0x0800ce08
 8001774:	20000364 	.word	0x20000364
 8001778:	0800ce14 	.word	0x0800ce14

0800177c <setDIVA>:
	uint32_t SHDN_BIT = 1 << 5;
	write_reg(reg2 & ~(SHDN_BIT));
}

// permitted n values: 1, 2, 4, 8, 16, 32, 64, 128
void setDIVA(uint8_t n){
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
	uint32_t diva_value = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
	//sets DIVA to 111
	switch (n){
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b80      	cmp	r3, #128	; 0x80
 800178e:	d04e      	beq.n	800182e <setDIVA+0xb2>
 8001790:	2b80      	cmp	r3, #128	; 0x80
 8001792:	dc7e      	bgt.n	8001892 <setDIVA+0x116>
 8001794:	2b20      	cmp	r3, #32
 8001796:	dc47      	bgt.n	8001828 <setDIVA+0xac>
 8001798:	2b00      	cmp	r3, #0
 800179a:	dd7a      	ble.n	8001892 <setDIVA+0x116>
 800179c:	3b01      	subs	r3, #1
 800179e:	2b1f      	cmp	r3, #31
 80017a0:	d877      	bhi.n	8001892 <setDIVA+0x116>
 80017a2:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <setDIVA+0x2c>)
 80017a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a8:	08001867 	.word	0x08001867
 80017ac:	0800185f 	.word	0x0800185f
 80017b0:	08001893 	.word	0x08001893
 80017b4:	08001857 	.word	0x08001857
 80017b8:	08001893 	.word	0x08001893
 80017bc:	08001893 	.word	0x08001893
 80017c0:	08001893 	.word	0x08001893
 80017c4:	0800184f 	.word	0x0800184f
 80017c8:	08001893 	.word	0x08001893
 80017cc:	08001893 	.word	0x08001893
 80017d0:	08001893 	.word	0x08001893
 80017d4:	08001893 	.word	0x08001893
 80017d8:	08001893 	.word	0x08001893
 80017dc:	08001893 	.word	0x08001893
 80017e0:	08001893 	.word	0x08001893
 80017e4:	08001847 	.word	0x08001847
 80017e8:	08001893 	.word	0x08001893
 80017ec:	08001893 	.word	0x08001893
 80017f0:	08001893 	.word	0x08001893
 80017f4:	08001893 	.word	0x08001893
 80017f8:	08001893 	.word	0x08001893
 80017fc:	08001893 	.word	0x08001893
 8001800:	08001893 	.word	0x08001893
 8001804:	08001893 	.word	0x08001893
 8001808:	08001893 	.word	0x08001893
 800180c:	08001893 	.word	0x08001893
 8001810:	08001893 	.word	0x08001893
 8001814:	08001893 	.word	0x08001893
 8001818:	08001893 	.word	0x08001893
 800181c:	08001893 	.word	0x08001893
 8001820:	08001893 	.word	0x08001893
 8001824:	0800183f 	.word	0x0800183f
 8001828:	2b40      	cmp	r3, #64	; 0x40
 800182a:	d004      	beq.n	8001836 <setDIVA+0xba>
		case 1:
			diva_value = 0b000 << 20;
			break;
		default:
			// do not set diva mask
			return;
 800182c:	e031      	b.n	8001892 <setDIVA+0x116>
			diva_value = 0b111 << 20;
 800182e:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8001832:	617b      	str	r3, [r7, #20]
			break;
 8001834:	e01a      	b.n	800186c <setDIVA+0xf0>
			diva_value = 0b110 << 20;
 8001836:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
 800183a:	617b      	str	r3, [r7, #20]
			break;
 800183c:	e016      	b.n	800186c <setDIVA+0xf0>
			diva_value = 0b101 << 20;
 800183e:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
 8001842:	617b      	str	r3, [r7, #20]
			break;
 8001844:	e012      	b.n	800186c <setDIVA+0xf0>
			diva_value = 0b100 << 20;
 8001846:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800184a:	617b      	str	r3, [r7, #20]
			break;
 800184c:	e00e      	b.n	800186c <setDIVA+0xf0>
			diva_value = 0b011 << 20;
 800184e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001852:	617b      	str	r3, [r7, #20]
			break;
 8001854:	e00a      	b.n	800186c <setDIVA+0xf0>
			diva_value = 0b010 << 20;
 8001856:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800185a:	617b      	str	r3, [r7, #20]
			break;
 800185c:	e006      	b.n	800186c <setDIVA+0xf0>
			diva_value = 0b001 << 20;
 800185e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001862:	617b      	str	r3, [r7, #20]
			break;
 8001864:	e002      	b.n	800186c <setDIVA+0xf0>
			diva_value = 0b000 << 20;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
			break;
 800186a:	bf00      	nop
			break;
	}
	uint32_t DIVA_MASK = 0b111 << 20;
 800186c:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8001870:	613b      	str	r3, [r7, #16]
	uint32_t new_reg4 = reg4 & ~(DIVA_MASK);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43da      	mvns	r2, r3
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <setDIVA+0x120>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4013      	ands	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
	uint32_t newnewreg4 = new_reg4 | ((diva_value)&DIVA_MASK);
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	60bb      	str	r3, [r7, #8]
	write_reg(newnewreg4);
 800188a:	68b8      	ldr	r0, [r7, #8]
 800188c:	f000 f974 	bl	8001b78 <write_reg>
 8001890:	e000      	b.n	8001894 <setDIVA+0x118>
			return;
 8001892:	bf00      	nop
}
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000360 	.word	0x20000360

080018a0 <setRFA_PWR>:

//00, 01, 02, 03
void setRFA_PWR(uint8_t rfa_pwr){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	if (rfa_pwr > 4 || rfa_pwr < 0){
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d813      	bhi.n	80018d8 <setRFA_PWR+0x38>
		return;//invalid value
	}
	// bits 4 and 3
	uint32_t RFA_PWR_MASK = 0b11 << 3;
 80018b0:	2318      	movs	r3, #24
 80018b2:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg4 = reg4 & ~(RFA_PWR_MASK);
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	43da      	mvns	r2, r3
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <setRFA_PWR+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
	uint32_t newnewreg4 = newreg4 | ((rfa_pwr << 3)&RFA_PWR_MASK);
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	461a      	mov	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	4013      	ands	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg4);
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f951 	bl	8001b78 <write_reg>
 80018d6:	e000      	b.n	80018da <setRFA_PWR+0x3a>
		return;//invalid value
 80018d8:	bf00      	nop
}
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000360 	.word	0x20000360

080018e4 <setN>:

void setN(uint16_t N){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
	// bits 4 and 3
	uint32_t N_MASK = 0xFFFF << 15;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <setN+0x38>)
 80018f0:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg0 = reg0 & ~(N_MASK);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	43da      	mvns	r2, r3
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <setN+0x3c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
	uint32_t newnewreg0 = newreg0 | ((N << 15)&N_MASK);
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	03db      	lsls	r3, r3, #15
 8001902:	461a      	mov	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	4013      	ands	r3, r2
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg0);
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 f932 	bl	8001b78 <write_reg>
}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	7fff8000 	.word	0x7fff8000
 8001920:	20000350 	.word	0x20000350

08001924 <setR>:

void setR(uint16_t R){
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
	// bits 4 and 3
	uint32_t R_MASK = 0xFFC << 12;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <setR+0x38>)
 8001930:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg2 = reg2 & ~(R_MASK);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	43da      	mvns	r2, r3
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <setR+0x3c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
	uint32_t newnewreg2 = newreg2 | ((R << 14)&R_MASK);
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	039b      	lsls	r3, r3, #14
 8001942:	461a      	mov	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	4013      	ands	r3, r2
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg2);
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f912 	bl	8001b78 <write_reg>
}
 8001954:	bf00      	nop
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	00ffc000 	.word	0x00ffc000
 8001960:	20000358 	.word	0x20000358

08001964 <setIntegerMode>:

void enableRFA(){
	write_reg(reg4 | (1<<5));
}

void setIntegerMode(){
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	write_reg(reg0 | (1<<31));
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <setIntegerMode+0x18>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f901 	bl	8001b78 <write_reg>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000350 	.word	0x20000350

08001980 <set_requested_frequency>:
	DIVA/=2;
	sweep_N(1500, 3000, 1);
}

// freq is in MHz
void set_requested_frequency(uint32_t freq){
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	// first determine required DIVA value
	float divided_by_235 = freq/23.5;
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7fe fda3 	bl	80004d4 <__aeabi_ui2d>
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <set_requested_frequency+0xd8>)
 8001994:	f7fe ff42 	bl	800081c <__aeabi_ddiv>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f7ff f8ea 	bl	8000b78 <__aeabi_d2f>
 80019a4:	4603      	mov	r3, r0
 80019a6:	61fb      	str	r3, [r7, #28]
	float band = log2(divided_by_235);
 80019a8:	69f8      	ldr	r0, [r7, #28]
 80019aa:	f7fe fdb5 	bl	8000518 <__aeabi_f2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	ec43 2b10 	vmov	d0, r2, r3
 80019b6:	f00a ff57 	bl	800c868 <log>
 80019ba:	ec51 0b10 	vmov	r0, r1, d0
 80019be:	a324      	add	r3, pc, #144	; (adr r3, 8001a50 <set_requested_frequency+0xd0>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe ff2a 	bl	800081c <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f8d2 	bl	8000b78 <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	61bb      	str	r3, [r7, #24]
	uint32_t band_i = band;
 80019d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e0:	ee17 3a90 	vmov	r3, s15
 80019e4:	617b      	str	r3, [r7, #20]
	uint32_t DIVA_caluclated = 128>>band_i;
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa42 f303 	asr.w	r3, r2, r3
 80019ee:	613b      	str	r3, [r7, #16]

	uint32_t R_value = 1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t N_1MHZ_step = 1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	623b      	str	r3, [r7, #32]
	if (DIVA_caluclated<32){
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	2b1f      	cmp	r3, #31
 80019fc:	d804      	bhi.n	8001a08 <set_requested_frequency+0x88>
		R_value = 32/DIVA_caluclated;
 80019fe:	2220      	movs	r2, #32
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (DIVA_caluclated>32){
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d902      	bls.n	8001a14 <set_requested_frequency+0x94>
		N_1MHZ_step = DIVA_caluclated/32;
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	623b      	str	r3, [r7, #32]
	}
	uint32_t N_value = N_1MHZ_step * freq;
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	60fb      	str	r3, [r7, #12]
	//printf("%d\n", DIVA_caluclated);
	//printf("R: %d\n", R_value);
	//printf("N: %d\n", N_value);
	setN(N_value);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff ff5e 	bl	80018e4 <setN>
	setDIVA(DIVA_caluclated);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fea5 	bl	800177c <setDIVA>
	setR(R_value);
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff74 	bl	8001924 <setR>
	program_PLL();
 8001a3c:	f000 f8e2 	bl	8001c04 <program_PLL>
	// give time to allow PLL to lock into frequency
	HAL_Delay(1);
 8001a40:	2001      	movs	r0, #1
 8001a42:	f000 fec7 	bl	80027d4 <HAL_Delay>
}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	; 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	fefa39ef 	.word	0xfefa39ef
 8001a54:	3fe62e42 	.word	0x3fe62e42
 8001a58:	40378000 	.word	0x40378000

08001a5c <init_PLL>:
}
/**
  * @brief Initialize chip as specified in datasheet
  * @retval GPIO_PinState Lock Detect
  */
void init_PLL(){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	// Zapis registrov default hodnotami
	write_reg(default_reg5);
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <init_PLL+0x8c>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f888 	bl	8001b78 <write_reg>
	// disable RF outputs
	write_reg(default_reg4 & ~((1 << 5) | (1<<8)));
 8001a68:	4b20      	ldr	r3, [pc, #128]	; (8001aec <init_PLL+0x90>)
 8001a6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f882 	bl	8001b78 <write_reg>
	write_reg(default_reg3);
 8001a74:	230b      	movs	r3, #11
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f87e 	bl	8001b78 <write_reg>
	write_reg(default_reg2);
 8001a7c:	f244 0342 	movw	r3, #16450	; 0x4042
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f879 	bl	8001b78 <write_reg>
	write_reg(default_reg1);
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <init_PLL+0x94>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f875 	bl	8001b78 <write_reg>
	write_reg(default_reg0);
 8001a8e:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f870 	bl	8001b78 <write_reg>
	program_PLL();
 8001a98:	f000 f8b4 	bl	8001c04 <program_PLL>
	// 20 ms between writes as specified in datasheet
	HAL_Delay(20);
 8001a9c:	2014      	movs	r0, #20
 8001a9e:	f000 fe99 	bl	80027d4 <HAL_Delay>
	write_reg(default_reg5);
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <init_PLL+0x8c>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f867 	bl	8001b78 <write_reg>
	write_reg(default_reg4 & ~((1 << 5) | (1<<8)));
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <init_PLL+0x90>)
 8001aac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 f861 	bl	8001b78 <write_reg>
	write_reg(default_reg3);
 8001ab6:	230b      	movs	r3, #11
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 f85d 	bl	8001b78 <write_reg>
	write_reg(default_reg2);
 8001abe:	f244 0342 	movw	r3, #16450	; 0x4042
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f858 	bl	8001b78 <write_reg>
	write_reg(default_reg1);
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <init_PLL+0x94>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f854 	bl	8001b78 <write_reg>
	write_reg(default_reg0);
 8001ad0:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 f84f 	bl	8001b78 <write_reg>
	program_PLL();
 8001ada:	f000 f893 	bl	8001c04 <program_PLL>
	HAL_Delay(20);
 8001ade:	2014      	movs	r0, #20
 8001ae0:	f000 fe78 	bl	80027d4 <HAL_Delay>
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	00400005 	.word	0x00400005
 8001aec:	6180b23c 	.word	0x6180b23c
 8001af0:	2000fff9 	.word	0x2000fff9

08001af4 <write_regs_SOFT>:

void write_regs_SOFT(){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
	//write registers as specified in MAX emulator
	uint32_t reg0 = 0x80320000;
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <write_regs_SOFT+0x50>)
 8001afc:	617b      	str	r3, [r7, #20]
	uint32_t reg1 = 0x80033E81;
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <write_regs_SOFT+0x54>)
 8001b00:	613b      	str	r3, [r7, #16]
	uint32_t reg2 = 0x0C004042;
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <write_regs_SOFT+0x58>)
 8001b04:	60fb      	str	r3, [r7, #12]
	uint32_t reg3 = 0x00000133;
 8001b06:	f240 1333 	movw	r3, #307	; 0x133
 8001b0a:	60bb      	str	r3, [r7, #8]
	uint32_t reg4 = 0x629802FC;
 8001b0c:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <write_regs_SOFT+0x5c>)
 8001b0e:	607b      	str	r3, [r7, #4]
	uint32_t reg5 = 0x00400005;
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <write_regs_SOFT+0x60>)
 8001b12:	603b      	str	r3, [r7, #0]
	write_reg(reg5);
 8001b14:	6838      	ldr	r0, [r7, #0]
 8001b16:	f000 f82f 	bl	8001b78 <write_reg>
	write_reg(reg4);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f82c 	bl	8001b78 <write_reg>
	write_reg(reg3);
 8001b20:	68b8      	ldr	r0, [r7, #8]
 8001b22:	f000 f829 	bl	8001b78 <write_reg>
	write_reg(reg2);
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 f826 	bl	8001b78 <write_reg>
	write_reg(reg1);
 8001b2c:	6938      	ldr	r0, [r7, #16]
 8001b2e:	f000 f823 	bl	8001b78 <write_reg>
	write_reg(reg0);
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f000 f820 	bl	8001b78 <write_reg>
	program_PLL();
 8001b38:	f000 f864 	bl	8001c04 <program_PLL>
}
 8001b3c:	bf00      	nop
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	80320000 	.word	0x80320000
 8001b48:	80033e81 	.word	0x80033e81
 8001b4c:	0c004042 	.word	0x0c004042
 8001b50:	629802fc 	.word	0x629802fc
 8001b54:	00400005 	.word	0x00400005

08001b58 <swap_words>:

// big endian to little endian for 32bits
uint32_t swap_words(uint32_t rozumne){
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	uint32_t swapped = (rozumne >> 16) | (rozumne << 16);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001b66:	60fb      	str	r3, [r7, #12]
	return swapped;
 8001b68:	68fb      	ldr	r3, [r7, #12]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <write_reg>:

// preforms write to register
uint8_t write_reg(uint32_t data){
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	// determine register address
	uint32_t reg_addr = data & 0b111;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	60fb      	str	r3, [r7, #12]

	switch (reg_addr){
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d826      	bhi.n	8001bdc <write_reg+0x64>
 8001b8e:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <write_reg+0x1c>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001bad 	.word	0x08001bad
 8001b98:	08001bb5 	.word	0x08001bb5
 8001b9c:	08001bbd 	.word	0x08001bbd
 8001ba0:	08001bc5 	.word	0x08001bc5
 8001ba4:	08001bcd 	.word	0x08001bcd
 8001ba8:	08001bd5 	.word	0x08001bd5
			case 0:
				reg0 = data;
 8001bac:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <write_reg+0x74>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
				break;
 8001bb2:	e015      	b.n	8001be0 <write_reg+0x68>
			case 1:
				reg1 = data;
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <write_reg+0x78>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
				break;
 8001bba:	e011      	b.n	8001be0 <write_reg+0x68>
			case 2:
				reg2 = data;
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <write_reg+0x7c>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
				break;
 8001bc2:	e00d      	b.n	8001be0 <write_reg+0x68>
			case 3:
				reg3 = data;
 8001bc4:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <write_reg+0x80>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
				break;
 8001bca:	e009      	b.n	8001be0 <write_reg+0x68>
			case 4:
				reg4 = data;
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <write_reg+0x84>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
				break;
 8001bd2:	e005      	b.n	8001be0 <write_reg+0x68>
			case 5:
				reg5 = data;
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <write_reg+0x88>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
				break;
 8001bda:	e001      	b.n	8001be0 <write_reg+0x68>
			default:
				// invalid address
				return 1;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e7ff      	b.n	8001be0 <write_reg+0x68>
				break;
	}
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	20000350 	.word	0x20000350
 8001bf0:	20000354 	.word	0x20000354
 8001bf4:	20000358 	.word	0x20000358
 8001bf8:	2000035c 	.word	0x2000035c
 8001bfc:	20000360 	.word	0x20000360
 8001c00:	20000364 	.word	0x20000364

08001c04 <program_PLL>:

// sends all registers to PLL
void program_PLL(){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	write_to_PLL(reg5);
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <program_PLL+0x44>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f827 	bl	8001c60 <write_to_PLL>
	write_to_PLL(reg4);
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <program_PLL+0x48>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f822 	bl	8001c60 <write_to_PLL>
	write_to_PLL(reg3);
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <program_PLL+0x4c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f81d 	bl	8001c60 <write_to_PLL>
	write_to_PLL(reg2);
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <program_PLL+0x50>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f818 	bl	8001c60 <write_to_PLL>
	write_to_PLL(reg1);
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <program_PLL+0x54>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f813 	bl	8001c60 <write_to_PLL>
	write_to_PLL(reg0);
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <program_PLL+0x58>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f80e 	bl	8001c60 <write_to_PLL>
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000364 	.word	0x20000364
 8001c4c:	20000360 	.word	0x20000360
 8001c50:	2000035c 	.word	0x2000035c
 8001c54:	20000358 	.word	0x20000358
 8001c58:	20000354 	.word	0x20000354
 8001c5c:	20000350 	.word	0x20000350

08001c60 <write_to_PLL>:

uint8_t write_to_PLL(uint32_t data){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	// endianness swap
	uint32_t swapped_data = swap_words(data);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff75 	bl	8001b58 <swap_words>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	60bb      	str	r3, [r7, #8]
	uint16_t* pData = (uint16_t*)&swapped_data;
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2110      	movs	r1, #16
 8001c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c80:	f002 fd40 	bl	8004704 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c84:	2001      	movs	r0, #1
 8001c86:	f000 fda5 	bl	80027d4 <HAL_Delay>
	//HAL_StatusTypeDef result =  HAL_SPI_Transmit(&hspi1, (uint8_t*)pData, 2, 1000);
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)pData, 2);
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	68f9      	ldr	r1, [r7, #12]
 8001c8e:	4808      	ldr	r0, [pc, #32]	; (8001cb0 <write_to_PLL+0x50>)
 8001c90:	f004 fa5a 	bl	8006148 <HAL_SPI_Transmit_DMA>
	//printf("SPI Transmit result: %x\n", result);
	HAL_Delay(1);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f000 fd9d 	bl	80027d4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	2110      	movs	r1, #16
 8001c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca2:	f002 fd2f 	bl	8004704 <HAL_GPIO_WritePin>

	return 0;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	2000038c 	.word	0x2000038c

08001cb4 <SoftUartGpioReadPin>:
// For timing division
__IO  uint8_t 		SU_Timer=0;

// Read RX single Pin Value
GPIO_PinState SoftUartGpioReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx,GPIO_Pin);
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f002 fd05 	bl	80046d4 <HAL_GPIO_ReadPin>
 8001cca:	4603      	mov	r3, r0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <SoftUartGpioWritePin>:

// Write TX single Pin Value
void SoftUartGpioWritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx,GPIO_Pin,PinState);
 8001ce4:	787a      	ldrb	r2, [r7, #1]
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f002 fd0a 	bl	8004704 <HAL_GPIO_WritePin>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <SoftUartTransmitBit>:
	return SoftUart_OK;
}

// Send one bit to TX pin
void SoftUartTransmitBit(SoftUart_S *SU,uint8_t Bit0_1)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
	SoftUartGpioWritePin(SU->TxPort,SU->TxPin,(GPIO_PinState)Bit0_1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6918      	ldr	r0, [r3, #16]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	8a9b      	ldrh	r3, [r3, #20]
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7ff ffe0 	bl	8001cd4 <SoftUartGpioWritePin>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <SoftUartTxProcess>:
	return SoftUart_OK;
}

// Soft Uart Transmit Data Process
void SoftUartTxProcess(SoftUart_S *SU)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	if(SU->TxEnable)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d066      	beq.n	8001dfa <SoftUartTxProcess+0xde>
	{
		// Start
		if(SU->TxBitCounter==0)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	791b      	ldrb	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d110      	bne.n	8001d56 <SoftUartTxProcess+0x3a>
		{
			SU->TxNComplated=1;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
			SU->TxBitShift=0;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	70da      	strb	r2, [r3, #3]
			SoftUartTransmitBit(SU,0);
 8001d40:	2100      	movs	r1, #0
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffd8 	bl	8001cf8 <SoftUartTransmitBit>
			SU->TxBitCounter++;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	791b      	ldrb	r3, [r3, #4]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	711a      	strb	r2, [r3, #4]
				SU->TxNComplated=0;
				SU->TxEnable=0;
			}
		}
	}
}
 8001d54:	e051      	b.n	8001dfa <SoftUartTxProcess+0xde>
		else if(SU->TxBitCounter<SoftUart_DATA_LEN_C1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	791b      	ldrb	r3, [r3, #4]
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d81e      	bhi.n	8001d9c <SoftUartTxProcess+0x80>
			SoftUartTransmitBit(SU,((SU->Buffer->Tx[SU->TxIndex])>>(SU->TxBitShift))&0x01);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	79d2      	ldrb	r2, [r2, #7]
 8001d66:	5c9b      	ldrb	r3, [r3, r2]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	78db      	ldrb	r3, [r3, #3]
 8001d6e:	fa42 f303 	asr.w	r3, r2, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ffbb 	bl	8001cf8 <SoftUartTransmitBit>
			SU->TxBitCounter++;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	791b      	ldrb	r3, [r3, #4]
 8001d86:	3301      	adds	r3, #1
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	711a      	strb	r2, [r3, #4]
			SU->TxBitShift++;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	78db      	ldrb	r3, [r3, #3]
 8001d92:	3301      	adds	r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	70da      	strb	r2, [r3, #3]
}
 8001d9a:	e02e      	b.n	8001dfa <SoftUartTxProcess+0xde>
		else if(SU->TxBitCounter==SoftUart_DATA_LEN_C1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	791b      	ldrb	r3, [r3, #4]
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d10a      	bne.n	8001dba <SoftUartTxProcess+0x9e>
			SoftUartTransmitBit(SU,1);
 8001da4:	2101      	movs	r1, #1
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa6 	bl	8001cf8 <SoftUartTransmitBit>
			SU->TxBitCounter++;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	3301      	adds	r3, #1
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	711a      	strb	r2, [r3, #4]
}
 8001db8:	e01f      	b.n	8001dfa <SoftUartTxProcess+0xde>
		else if(SU->TxBitCounter==SoftUart_DATA_LEN_C2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	791b      	ldrb	r3, [r3, #4]
 8001dbe:	2b0a      	cmp	r3, #10
 8001dc0:	d11b      	bne.n	8001dfa <SoftUartTxProcess+0xde>
			SU->TxBitCounter=0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	711a      	strb	r2, [r3, #4]
			SU->TxIndex++;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	79db      	ldrb	r3, [r3, #7]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	71da      	strb	r2, [r3, #7]
			if(SU->TxSize > SU->TxIndex)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7a1a      	ldrb	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	79db      	ldrb	r3, [r3, #7]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d906      	bls.n	8001dee <SoftUartTxProcess+0xd2>
				SU->TxNComplated=1;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
				SU->TxEnable=1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	705a      	strb	r2, [r3, #1]
}
 8001dec:	e005      	b.n	8001dfa <SoftUartTxProcess+0xde>
				SU->TxNComplated=0;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
				SU->TxEnable=0;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	705a      	strb	r2, [r3, #1]
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <SoftUartRxDataBitProcess>:

// Soft Uart Receive Data Process
void SoftUartRxDataBitProcess(SoftUart_S *SU,uint8_t B0_1)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	70fb      	strb	r3, [r7, #3]
	if(SU->RxEnable)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	789b      	ldrb	r3, [r3, #2]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d05c      	beq.n	8001ed0 <SoftUartRxDataBitProcess+0xce>
	{
		// Start
		if(SU->RxBitCounter==0)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	799b      	ldrb	r3, [r3, #6]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d114      	bne.n	8001e48 <SoftUartRxDataBitProcess+0x46>
		{
			// Start Bit is 0
			if(B0_1)return;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d154      	bne.n	8001ece <SoftUartRxDataBitProcess+0xcc>

			SU->RxBitShift=0;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	715a      	strb	r2, [r3, #5]
			SU->RxBitCounter++;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	799b      	ldrb	r3, [r3, #6]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	719a      	strb	r2, [r3, #6]
			SU->Buffer->Rx[SU->RxIndex]=0;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	7a52      	ldrb	r2, [r2, #9]
 8001e3e:	4413      	add	r3, r2
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2020 	strb.w	r2, [r3, #32]
 8001e46:	e043      	b.n	8001ed0 <SoftUartRxDataBitProcess+0xce>
		}
		// Data
		else if(SU->RxBitCounter<SoftUart_DATA_LEN_C1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	799b      	ldrb	r3, [r3, #6]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d826      	bhi.n	8001e9e <SoftUartRxDataBitProcess+0x9c>
		{
			SU->Buffer->Rx[SU->RxIndex]|=((B0_1&0x01)<<SU->RxBitShift);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	7a52      	ldrb	r2, [r2, #9]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5e:	b25a      	sxtb	r2, r3
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	7949      	ldrb	r1, [r1, #5]
 8001e6a:	408b      	lsls	r3, r1
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b258      	sxtb	r0, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	7a52      	ldrb	r2, [r2, #9]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	b2c2      	uxtb	r2, r0
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2020 	strb.w	r2, [r3, #32]
			SU->RxBitCounter++;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	799b      	ldrb	r3, [r3, #6]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	719a      	strb	r2, [r3, #6]
			SU->RxBitShift++;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	795b      	ldrb	r3, [r3, #5]
 8001e94:	3301      	adds	r3, #1
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	715a      	strb	r2, [r3, #5]
 8001e9c:	e018      	b.n	8001ed0 <SoftUartRxDataBitProcess+0xce>
		}
		// Stop and Complete
		else if(SU->RxBitCounter==SoftUart_DATA_LEN_C1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	799b      	ldrb	r3, [r3, #6]
 8001ea2:	2b09      	cmp	r3, #9
 8001ea4:	d114      	bne.n	8001ed0 <SoftUartRxDataBitProcess+0xce>
		{
			SU->RxBitCounter=0;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	719a      	strb	r2, [r3, #6]
			SU->RxTimingFlag=0;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	779a      	strb	r2, [r3, #30]

			//Stop Bit must be 1
			if(B0_1)
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00b      	beq.n	8001ed0 <SoftUartRxDataBitProcess+0xce>
			{
				// Received successfully
				// Change RX Buffer Index
				if((SU->RxIndex)<(SoftUartRxBufferSize-1))(SU->RxIndex)++;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7a5b      	ldrb	r3, [r3, #9]
 8001ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8001ebe:	d807      	bhi.n	8001ed0 <SoftUartRxDataBitProcess+0xce>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7a5b      	ldrb	r3, [r3, #9]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	725a      	strb	r2, [r3, #9]
 8001ecc:	e000      	b.n	8001ed0 <SoftUartRxDataBitProcess+0xce>
			if(B0_1)return;
 8001ece:	bf00      	nop
			}
			// if not : ERROR -> Overwrite data
		}
	}
}
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <SoftUartScanRxPorts>:
	return SoftUart_OK;
}

// Capture RX and Get BitOffset
uint8_t SoftUartScanRxPorts(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
	int i;
	uint8_t Buffer=0x00,Bit;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	70fb      	strb	r3, [r7, #3]

	for(i=0;i<Number_Of_SoftUarts;i++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	e050      	b.n	8001f8e <SoftUartScanRxPorts+0xb2>
	{
		// Read RX GPIO Value
		Bit=SoftUartGpioReadPin(SUart[i].RxPort,SUart[i].RxPin);
 8001eec:	4a2c      	ldr	r2, [pc, #176]	; (8001fa0 <SoftUartScanRxPorts+0xc4>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	015b      	lsls	r3, r3, #5
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3318      	adds	r3, #24
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4929      	ldr	r1, [pc, #164]	; (8001fa0 <SoftUartScanRxPorts+0xc4>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	015b      	lsls	r3, r3, #5
 8001efe:	440b      	add	r3, r1
 8001f00:	331c      	adds	r3, #28
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f7ff fed4 	bl	8001cb4 <SoftUartGpioReadPin>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	70bb      	strb	r3, [r7, #2]

		// Starting conditions
		if(!SUart[i].RxBitCounter && !SUart[i].RxTimingFlag && !Bit)
 8001f10:	4a23      	ldr	r2, [pc, #140]	; (8001fa0 <SoftUartScanRxPorts+0xc4>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	015b      	lsls	r3, r3, #5
 8001f16:	4413      	add	r3, r2
 8001f18:	3306      	adds	r3, #6
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d127      	bne.n	8001f70 <SoftUartScanRxPorts+0x94>
 8001f20:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <SoftUartScanRxPorts+0xc4>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	015b      	lsls	r3, r3, #5
 8001f26:	4413      	add	r3, r2
 8001f28:	331e      	adds	r3, #30
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d11f      	bne.n	8001f70 <SoftUartScanRxPorts+0x94>
 8001f30:	78bb      	ldrb	r3, [r7, #2]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d11c      	bne.n	8001f70 <SoftUartScanRxPorts+0x94>
		{
			// Save RX Bit Offset
			// Calculate middle position of data puls
			SUart[i].RxBitOffset=((SU_Timer+2)%5);
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <SoftUartScanRxPorts+0xc8>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	1c9a      	adds	r2, r3, #2
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <SoftUartScanRxPorts+0xcc>)
 8001f40:	fb83 1302 	smull	r1, r3, r3, r2
 8001f44:	1059      	asrs	r1, r3, #1
 8001f46:	17d3      	asrs	r3, r2, #31
 8001f48:	1ac9      	subs	r1, r1, r3
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	1ad1      	subs	r1, r2, r3
 8001f52:	b2c9      	uxtb	r1, r1
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <SoftUartScanRxPorts+0xc4>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	015b      	lsls	r3, r3, #5
 8001f5a:	4413      	add	r3, r2
 8001f5c:	331f      	adds	r3, #31
 8001f5e:	460a      	mov	r2, r1
 8001f60:	701a      	strb	r2, [r3, #0]

			// Timing Offset is Set
			SUart[i].RxTimingFlag=1;
 8001f62:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <SoftUartScanRxPorts+0xc4>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	015b      	lsls	r3, r3, #5
 8001f68:	4413      	add	r3, r2
 8001f6a:	331e      	adds	r3, #30
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
		}

		// Add all RX GPIO State to Buffer
		Buffer|=((Bit&0x01)<<i);
 8001f70:	78bb      	ldrb	r3, [r7, #2]
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	b25a      	sxtb	r2, r3
 8001f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	b25b      	sxtb	r3, r3
 8001f86:	70fb      	strb	r3, [r7, #3]
	for(i=0;i<Number_Of_SoftUarts;i++)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	ddab      	ble.n	8001eec <SoftUartScanRxPorts+0x10>
	}
	return Buffer;
 8001f94:	78fb      	ldrb	r3, [r7, #3]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000368 	.word	0x20000368
 8001fa4:	20000388 	.word	0x20000388
 8001fa8:	66666667 	.word	0x66666667

08001fac <SoftUartHandler>:

// SoftUartHandler must call in interrupt every 0.2*(1/BR)
// if BR=9600 then 0.2*(1/9600)=20.8333333 uS
void SoftUartHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
	int     	i;
	uint8_t 	SU_DBuffer;

	// Capture RX and Get BitOffset
	SU_DBuffer = SoftUartScanRxPorts();
 8001fb2:	f7ff ff93 	bl	8001edc <SoftUartScanRxPorts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	70fb      	strb	r3, [r7, #3]

	for(i=0;i < Number_Of_SoftUarts;i++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	e01c      	b.n	8001ffa <SoftUartHandler+0x4e>
	{
		// Receive Data if we in middle data pulse position
		if(SUart[i].RxBitOffset == SU_Timer)
 8001fc0:	4a23      	ldr	r2, [pc, #140]	; (8002050 <SoftUartHandler+0xa4>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	015b      	lsls	r3, r3, #5
 8001fc6:	4413      	add	r3, r2
 8001fc8:	331f      	adds	r3, #31
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <SoftUartHandler+0xa8>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d10e      	bne.n	8001ff4 <SoftUartHandler+0x48>
		{
			SoftUartRxDataBitProcess(&SUart[i],((SU_DBuffer>>i)&0x01));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	015b      	lsls	r3, r3, #5
 8001fda:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <SoftUartHandler+0xa4>)
 8001fdc:	1898      	adds	r0, r3, r2
 8001fde:	78fa      	ldrb	r2, [r7, #3]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	fa42 f303 	asr.w	r3, r2, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7ff ff07 	bl	8001e02 <SoftUartRxDataBitProcess>
	for(i=0;i < Number_Of_SoftUarts;i++)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	dddf      	ble.n	8001fc0 <SoftUartHandler+0x14>
		}
	}

	// Sending always happens in the first time slot
	if(SU_Timer==0)
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <SoftUartHandler+0xa8>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <SoftUartHandler+0x7e>
	{
		// Transmit Data
		for(i=0;i < Number_Of_SoftUarts;i++)
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	e009      	b.n	8002024 <SoftUartHandler+0x78>
		{
			SoftUartTxProcess(&SUart[i]);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	015b      	lsls	r3, r3, #5
 8002014:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <SoftUartHandler+0xa4>)
 8002016:	4413      	add	r3, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fe7f 	bl	8001d1c <SoftUartTxProcess>
		for(i=0;i < Number_Of_SoftUarts;i++)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3301      	adds	r3, #1
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	ddf2      	ble.n	8002010 <SoftUartHandler+0x64>
		}
	}

	// Timing process
	SU_Timer++;
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <SoftUartHandler+0xa8>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <SoftUartHandler+0xa8>)
 8002036:	701a      	strb	r2, [r3, #0]
	if(SU_Timer >= 5)SU_Timer=0;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <SoftUartHandler+0xa8>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b04      	cmp	r3, #4
 8002040:	d902      	bls.n	8002048 <SoftUartHandler+0x9c>
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SoftUartHandler+0xa8>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000368 	.word	0x20000368
 8002054:	20000388 	.word	0x20000388

08002058 <LL_AHB2_GRP1_EnableClock>:
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4313      	orrs	r3, r2
 800206e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002074:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800207c:	68fb      	ldr	r3, [r7, #12]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002096:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4013      	ands	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <MX_SPI1_Init+0x74>)
 80020c2:	4a1c      	ldr	r2, [pc, #112]	; (8002134 <MX_SPI1_Init+0x78>)
 80020c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <MX_SPI1_Init+0x74>)
 80020c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <MX_SPI1_Init+0x74>)
 80020d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <MX_SPI1_Init+0x74>)
 80020d8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80020dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <MX_SPI1_Init+0x74>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <MX_SPI1_Init+0x74>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <MX_SPI1_Init+0x74>)
 80020ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <MX_SPI1_Init+0x74>)
 80020f4:	2238      	movs	r2, #56	; 0x38
 80020f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <MX_SPI1_Init+0x74>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <MX_SPI1_Init+0x74>)
 8002100:	2200      	movs	r2, #0
 8002102:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <MX_SPI1_Init+0x74>)
 8002106:	2200      	movs	r2, #0
 8002108:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <MX_SPI1_Init+0x74>)
 800210c:	2207      	movs	r2, #7
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <MX_SPI1_Init+0x74>)
 8002112:	2200      	movs	r2, #0
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <MX_SPI1_Init+0x74>)
 8002118:	2208      	movs	r2, #8
 800211a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800211c:	4804      	ldr	r0, [pc, #16]	; (8002130 <MX_SPI1_Init+0x74>)
 800211e:	f003 ff70 	bl	8006002 <HAL_SPI_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8002128:	f7ff face 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	2000038c 	.word	0x2000038c
 8002134:	40013000 	.word	0x40013000

08002138 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <HAL_SPI_MspInit+0xb0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d142      	bne.n	80021e0 <HAL_SPI_MspInit+0xa8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800215a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800215e:	f7ff ff94 	bl	800208a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff ff78 	bl	8002058 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002168:	23a0      	movs	r3, #160	; 0xa0
 800216a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002178:	2305      	movs	r3, #5
 800217a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	4619      	mov	r1, r3
 8002182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002186:	f002 f93d 	bl	8004404 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_SPI_MspInit+0xb4>)
 800218c:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_SPI_MspInit+0xb8>)
 800218e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_SPI_MspInit+0xb4>)
 8002192:	2207      	movs	r2, #7
 8002194:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_SPI_MspInit+0xb4>)
 8002198:	2210      	movs	r2, #16
 800219a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_SPI_MspInit+0xb4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_SPI_MspInit+0xb4>)
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_SPI_MspInit+0xb4>)
 80021aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_SPI_MspInit+0xb4>)
 80021b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021b6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_SPI_MspInit+0xb4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_SPI_MspInit+0xb4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80021c4:	4809      	ldr	r0, [pc, #36]	; (80021ec <HAL_SPI_MspInit+0xb4>)
 80021c6:	f001 fe19 	bl	8003dfc <HAL_DMA_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_SPI_MspInit+0x9c>
    {
      Error_Handler();
 80021d0:	f7ff fa7a 	bl	80016c8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <HAL_SPI_MspInit+0xb4>)
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
 80021da:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_SPI_MspInit+0xb4>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80021e0:	bf00      	nop
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40013000 	.word	0x40013000
 80021ec:	200003f0 	.word	0x200003f0
 80021f0:	40020008 	.word	0x40020008

080021f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <NMI_Handler+0x4>

08002208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <HardFault_Handler+0x4>

0800220e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <MemManage_Handler+0x4>

08002214 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <BusFault_Handler+0x4>

0800221a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <UsageFault_Handler+0x4>

08002220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224e:	f000 fa95 	bl	800277c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <DMA1_Channel1_IRQHandler+0x10>)
 800225e:	f001 ff92 	bl	8004186 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200003f0 	.word	0x200003f0

0800226c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM2_IRQHandler+0x10>)
 8002272:	f004 fab8 	bl	80067e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000454 	.word	0x20000454

08002280 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <USART1_IRQHandler+0x10>)
 8002286:	f004 ffbf 	bl	8007208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200004a0 	.word	0x200004a0

08002294 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <IPCC_C1_RX_IRQHandler+0x10>)
 800229a:	f002 fae5 	bl	8004868 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000268 	.word	0x20000268

080022a8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <IPCC_C1_TX_IRQHandler+0x10>)
 80022ae:	f002 fa8d 	bl	80047cc <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000268 	.word	0x20000268

080022bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <_sbrk+0x5c>)
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <_sbrk+0x60>)
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <_sbrk+0x64>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <_sbrk+0x64>)
 80022da:	4a12      	ldr	r2, [pc, #72]	; (8002324 <_sbrk+0x68>)
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d207      	bcs.n	80022fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ec:	f006 ffa4 	bl	8009238 <__errno>
 80022f0:	4603      	mov	r3, r0
 80022f2:	220c      	movs	r2, #12
 80022f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	e009      	b.n	8002310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <_sbrk+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <_sbrk+0x64>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <_sbrk+0x64>)
 800230c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230e:	68fb      	ldr	r3, [r7, #12]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20010000 	.word	0x20010000
 800231c:	00000400 	.word	0x00000400
 8002320:	20000450 	.word	0x20000450
 8002324:	200005f8 	.word	0x200005f8

08002328 <LL_APB1_GRP1_EnableClock>:
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002334:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4313      	orrs	r3, r2
 800233e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002362:	f107 0310 	add.w	r3, r7, #16
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <MX_TIM2_Init+0x94>)
 800237c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002380:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <MX_TIM2_Init+0x94>)
 8002384:	2210      	movs	r2, #16
 8002386:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <MX_TIM2_Init+0x94>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 38;
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <MX_TIM2_Init+0x94>)
 8002390:	2226      	movs	r2, #38	; 0x26
 8002392:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002394:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <MX_TIM2_Init+0x94>)
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <MX_TIM2_Init+0x94>)
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023a0:	4813      	ldr	r0, [pc, #76]	; (80023f0 <MX_TIM2_Init+0x94>)
 80023a2:	f004 f9c9 	bl	8006738 <HAL_TIM_Base_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023ac:	f7ff f98c 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023b6:	f107 0310 	add.w	r3, r7, #16
 80023ba:	4619      	mov	r1, r3
 80023bc:	480c      	ldr	r0, [pc, #48]	; (80023f0 <MX_TIM2_Init+0x94>)
 80023be:	f004 fb31 	bl	8006a24 <HAL_TIM_ConfigClockSource>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80023c8:	f7ff f97e 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023cc:	2300      	movs	r3, #0
 80023ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	4805      	ldr	r0, [pc, #20]	; (80023f0 <MX_TIM2_Init+0x94>)
 80023da:	f004 fd15 	bl	8006e08 <HAL_TIMEx_MasterConfigSynchronization>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023e4:	f7ff f970 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023e8:	bf00      	nop
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000454 	.word	0x20000454

080023f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002404:	d10a      	bne.n	800241c <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002406:	2001      	movs	r0, #1
 8002408:	f7ff ff8e 	bl	8002328 <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	201c      	movs	r0, #28
 8002412:	f001 fcbe 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002416:	201c      	movs	r0, #28
 8002418:	f001 fcd5 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <LL_AHB2_GRP1_EnableClock>:
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800242c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4313      	orrs	r3, r2
 800243a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002448:	68fb      	ldr	r3, [r7, #12]
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_APB2_GRP1_EnableClock>:
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002462:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4313      	orrs	r3, r2
 800246c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002472:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4013      	ands	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <MX_USART1_UART_Init+0x90>)
 800248e:	4a23      	ldr	r2, [pc, #140]	; (800251c <MX_USART1_UART_Init+0x94>)
 8002490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <MX_USART1_UART_Init+0x90>)
 8002494:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <MX_USART1_UART_Init+0x90>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <MX_USART1_UART_Init+0x90>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024a6:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <MX_USART1_UART_Init+0x90>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024ac:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <MX_USART1_UART_Init+0x90>)
 80024ae:	220c      	movs	r2, #12
 80024b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <MX_USART1_UART_Init+0x90>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b8:	4b17      	ldr	r3, [pc, #92]	; (8002518 <MX_USART1_UART_Init+0x90>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <MX_USART1_UART_Init+0x90>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_USART1_UART_Init+0x90>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <MX_USART1_UART_Init+0x90>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024d0:	4811      	ldr	r0, [pc, #68]	; (8002518 <MX_USART1_UART_Init+0x90>)
 80024d2:	f004 fd27 	bl	8006f24 <HAL_UART_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80024dc:	f7ff f8f4 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e0:	2100      	movs	r1, #0
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <MX_USART1_UART_Init+0x90>)
 80024e4:	f006 fd85 	bl	8008ff2 <HAL_UARTEx_SetTxFifoThreshold>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80024ee:	f7ff f8eb 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024f2:	2100      	movs	r1, #0
 80024f4:	4808      	ldr	r0, [pc, #32]	; (8002518 <MX_USART1_UART_Init+0x90>)
 80024f6:	f006 fdba 	bl	800906e <HAL_UARTEx_SetRxFifoThreshold>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002500:	f7ff f8e2 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002504:	4804      	ldr	r0, [pc, #16]	; (8002518 <MX_USART1_UART_Init+0x90>)
 8002506:	f006 fd3b 	bl	8008f80 <HAL_UARTEx_DisableFifoMode>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002510:	f7ff f8da 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	200004a0 	.word	0x200004a0
 800251c:	40013800 	.word	0x40013800

08002520 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b090      	sub	sp, #64	; 0x40
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002538:	f107 0308 	add.w	r3, r7, #8
 800253c:	2224      	movs	r2, #36	; 0x24
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f006 feb9 	bl	80092b8 <memset>
  if(uartHandle->Instance==USART1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1a      	ldr	r2, [pc, #104]	; (80025b4 <HAL_UART_MspInit+0x94>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d12c      	bne.n	80025aa <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002550:	2301      	movs	r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002558:	f107 0308 	add.w	r3, r7, #8
 800255c:	4618      	mov	r0, r3
 800255e:	f003 fc75 	bl	8005e4c <HAL_RCCEx_PeriphCLKConfig>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002568:	f7ff f8ae 	bl	80016c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800256c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002570:	f7ff ff71 	bl	8002456 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002574:	2002      	movs	r0, #2
 8002576:	f7ff ff55 	bl	8002424 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800257a:	23c0      	movs	r3, #192	; 0xc0
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800258a:	2307      	movs	r3, #7
 800258c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002592:	4619      	mov	r1, r3
 8002594:	4808      	ldr	r0, [pc, #32]	; (80025b8 <HAL_UART_MspInit+0x98>)
 8002596:	f001 ff35 	bl	8004404 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2024      	movs	r0, #36	; 0x24
 80025a0:	f001 fbf7 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025a4:	2024      	movs	r0, #36	; 0x24
 80025a6:	f001 fc0e 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025aa:	bf00      	nop
 80025ac:	3740      	adds	r7, #64	; 0x40
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40013800 	.word	0x40013800
 80025b8:	48000400 	.word	0x48000400

080025bc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80025bc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025be:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025c0:	3304      	adds	r3, #4

080025c2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80025c6:	d3f9      	bcc.n	80025bc <CopyDataInit>
  bx lr
 80025c8:	4770      	bx	lr

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80025ca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80025cc:	3004      	adds	r0, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80025ce:	4288      	cmp	r0, r1
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>
  bx lr
 80025d2:	4770      	bx	lr

080025d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 80025d4:	480c      	ldr	r0, [pc, #48]	; (8002608 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80025d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025d8:	f000 f828 	bl	800262c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80025dc:	480b      	ldr	r0, [pc, #44]	; (800260c <LoopForever+0x8>)
 80025de:	490c      	ldr	r1, [pc, #48]	; (8002610 <LoopForever+0xc>)
 80025e0:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <LoopForever+0x10>)
 80025e2:	2300      	movs	r3, #0
 80025e4:	f7ff ffed 	bl	80025c2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80025e8:	480b      	ldr	r0, [pc, #44]	; (8002618 <LoopForever+0x14>)
 80025ea:	490c      	ldr	r1, [pc, #48]	; (800261c <LoopForever+0x18>)
 80025ec:	2300      	movs	r3, #0
 80025ee:	f7ff ffee 	bl	80025ce <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80025f2:	480b      	ldr	r0, [pc, #44]	; (8002620 <LoopForever+0x1c>)
 80025f4:	490b      	ldr	r1, [pc, #44]	; (8002624 <LoopForever+0x20>)
 80025f6:	2300      	movs	r3, #0
 80025f8:	f7ff ffe9 	bl	80025ce <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025fc:	f006 fe22 	bl	8009244 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002600:	f7fe ff78 	bl	80014f4 <main>

08002604 <LoopForever>:

LoopForever:
  b LoopForever
 8002604:	e7fe      	b.n	8002604 <LoopForever>
 8002606:	0000      	.short	0x0000
   ldr   r0, =_estack
 8002608:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 800260c:	20000004 	.word	0x20000004
 8002610:	200001e8 	.word	0x200001e8
 8002614:	0800d330 	.word	0x0800d330
  INIT_BSS _sbss, _ebss
 8002618:	200001e8 	.word	0x200001e8
 800261c:	200005f4 	.word	0x200005f4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002620:	20030000 	.word	0x20030000
 8002624:	20030000 	.word	0x20030000

08002628 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC1_IRQHandler>
	...

0800262c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <SystemInit+0x90>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	4a21      	ldr	r2, [pc, #132]	; (80026bc <SystemInit+0x90>)
 8002638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800263c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002654:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002658:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800265a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <SystemInit+0x94>)
 8002666:	4013      	ands	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800266a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002676:	f023 0305 	bic.w	r3, r3, #5
 800267a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002696:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <SystemInit+0x98>)
 8002698:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00
 80026c0:	faf6fefb 	.word	0xfaf6fefb
 80026c4:	22041000 	.word	0x22041000

080026c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <HAL_Init+0x3c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_Init+0x3c>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026de:	2003      	movs	r0, #3
 80026e0:	f001 fb4c 	bl	8003d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026e4:	2000      	movs	r0, #0
 80026e6:	f000 f80f 	bl	8002708 <HAL_InitTick>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	71fb      	strb	r3, [r7, #7]
 80026f4:	e001      	b.n	80026fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026f6:	f7ff fd7d 	bl	80021f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026fa:	79fb      	ldrb	r3, [r7, #7]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	58004000 	.word	0x58004000

08002708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_InitTick+0x6c>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d024      	beq.n	8002766 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800271c:	f003 f9d4 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_InitTick+0x6c>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800272c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	4618      	mov	r0, r3
 8002736:	f001 fb54 	bl	8003de2 <HAL_SYSTICK_Config>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10f      	bne.n	8002760 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b0f      	cmp	r3, #15
 8002744:	d809      	bhi.n	800275a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002746:	2200      	movs	r2, #0
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	f04f 30ff 	mov.w	r0, #4294967295
 800274e:	f001 fb20 	bl	8003d92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_InitTick+0x70>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e007      	b.n	800276a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	e004      	b.n	800276a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e001      	b.n	800276a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	2000000c 	.word	0x2000000c
 8002778:	20000008 	.word	0x20000008

0800277c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_IncTick+0x20>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_IncTick+0x24>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_IncTick+0x24>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	2000000c 	.word	0x2000000c
 80027a0:	20000534 	.word	0x20000534

080027a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return uwTick;
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <HAL_GetTick+0x14>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000534 	.word	0x20000534

080027bc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_GetTickPrio+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000008 	.word	0x20000008

080027d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff ffe2 	bl	80027a4 <HAL_GetTick>
 80027e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d005      	beq.n	80027fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_Delay+0x44>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fa:	bf00      	nop
 80027fc:	f7ff ffd2 	bl	80027a4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	429a      	cmp	r2, r3
 800280a:	d8f7      	bhi.n	80027fc <HAL_Delay+0x28>
  {
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	2000000c 	.word	0x2000000c

0800281c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	609a      	str	r2, [r3, #8]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3360      	adds	r3, #96	; 0x60
 8002896:	461a      	mov	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <LL_ADC_SetOffset+0x44>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	03fff000 	.word	0x03fff000

080028cc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3360      	adds	r3, #96	; 0x60
 80028da:	461a      	mov	r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3360      	adds	r3, #96	; 0x60
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	431a      	orrs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002946:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3330      	adds	r3, #48	; 0x30
 8002964:	461a      	mov	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	4413      	add	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 031f 	and.w	r3, r3, #31
 800297e:	211f      	movs	r1, #31
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	0e9b      	lsrs	r3, r3, #26
 800298c:	f003 011f 	and.w	r1, r3, #31
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	431a      	orrs	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80029a0:	bf00      	nop
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3314      	adds	r3, #20
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	0e5b      	lsrs	r3, r3, #25
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	4413      	add	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	0d1b      	lsrs	r3, r3, #20
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	2107      	movs	r1, #7
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	401a      	ands	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	0d1b      	lsrs	r3, r3, #20
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	431a      	orrs	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	401a      	ands	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0318 	and.w	r3, r3, #24
 8002a26:	4908      	ldr	r1, [pc, #32]	; (8002a48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a28:	40d9      	lsrs	r1, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	400b      	ands	r3, r1
 8002a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a32:	431a      	orrs	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	0007ffff 	.word	0x0007ffff

08002a4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6093      	str	r3, [r2, #8]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a84:	d101      	bne.n	8002a8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002aa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad4:	d101      	bne.n	8002ada <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b24:	f043 0202 	orr.w	r2, r3, #2
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <LL_ADC_IsEnabled+0x18>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <LL_ADC_IsEnabled+0x1a>
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d101      	bne.n	8002b76 <LL_ADC_IsDisableOngoing+0x18>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <LL_ADC_IsDisableOngoing+0x1a>
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b98:	f043 0204 	orr.w	r2, r3, #4
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc0:	f043 0210 	orr.w	r2, r3, #16
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d101      	bne.n	8002bec <LL_ADC_REG_IsConversionOngoing+0x18>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c0e:	f043 0220 	orr.w	r2, r3, #32
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d101      	bne.n	8002c3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e12e      	b.n	8002ec4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7fe f859 	bl	8000d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff feef 	bl	8002a70 <LL_ADC_IsDeepPowerDownEnabled>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fed5 	bl	8002a4c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff0a 	bl	8002ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d115      	bne.n	8002cde <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff feee 	bl	8002a98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cbc:	4b83      	ldr	r3, [pc, #524]	; (8002ecc <HAL_ADC_Init+0x284>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	4a83      	ldr	r2, [pc, #524]	; (8002ed0 <HAL_ADC_Init+0x288>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	3301      	adds	r3, #1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cd0:	e002      	b.n	8002cd8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f9      	bne.n	8002cd2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff feec 	bl	8002ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10d      	bne.n	8002d0a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf2:	f043 0210 	orr.w	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	f043 0201 	orr.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff60 	bl	8002bd4 <LL_ADC_REG_IsConversionOngoing>
 8002d14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 80c7 	bne.w	8002eb2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 80c3 	bne.w	8002eb2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d34:	f043 0202 	orr.w	r2, r3, #2
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fef9 	bl	8002b38 <LL_ADC_IsEnabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d4c:	4861      	ldr	r0, [pc, #388]	; (8002ed4 <HAL_ADC_Init+0x28c>)
 8002d4e:	f7ff fef3 	bl	8002b38 <LL_ADC_IsEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	485e      	ldr	r0, [pc, #376]	; (8002ed8 <HAL_ADC_Init+0x290>)
 8002d60:	f7ff fd5c 	bl	800281c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7e5b      	ldrb	r3, [r3, #25]
 8002d68:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d6e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d74:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d7a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d82:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002d84:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d106      	bne.n	8002da4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	045b      	lsls	r3, r3, #17
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	4b45      	ldr	r3, [pc, #276]	; (8002edc <HAL_ADC_Init+0x294>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	69b9      	ldr	r1, [r7, #24]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fefb 	bl	8002bd4 <LL_ADC_REG_IsConversionOngoing>
 8002dde:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff1c 	bl	8002c22 <LL_ADC_INJ_IsConversionOngoing>
 8002dea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d13d      	bne.n	8002e6e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d13a      	bne.n	8002e6e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dfc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e04:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e14:	f023 0302 	bic.w	r3, r3, #2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	69b9      	ldr	r1, [r7, #24]
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d118      	bne.n	8002e5e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e36:	f023 0304 	bic.w	r3, r3, #4
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	611a      	str	r2, [r3, #16]
 8002e5c:	e007      	b.n	8002e6e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10c      	bne.n	8002e90 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	f023 010f 	bic.w	r1, r3, #15
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	1e5a      	subs	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8e:	e007      	b.n	8002ea0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 020f 	bic.w	r2, r2, #15
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	f023 0303 	bic.w	r3, r3, #3
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
 8002eb0:	e007      	b.n	8002ec2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f043 0210 	orr.w	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000004 	.word	0x20000004
 8002ed0:	053e2d63 	.word	0x053e2d63
 8002ed4:	50040000 	.word	0x50040000
 8002ed8:	50040300 	.word	0x50040300
 8002edc:	fff0c007 	.word	0xfff0c007

08002ee0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fe71 	bl	8002bd4 <LL_ADC_REG_IsConversionOngoing>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d140      	bne.n	8002f7a <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_Start+0x26>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e03c      	b.n	8002f80 <HAL_ADC_Start+0xa0>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fd8a 	bl	8003a28 <ADC_Enable>
 8002f14:	4603      	mov	r3, r0
 8002f16:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d128      	bne.n	8002f70 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3e:	d106      	bne.n	8002f4e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	f023 0206 	bic.w	r2, r3, #6
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	659a      	str	r2, [r3, #88]	; 0x58
 8002f4c:	e002      	b.n	8002f54 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	221c      	movs	r2, #28
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fe0b 	bl	8002b84 <LL_ADC_REG_StartConversion>
 8002f6e:	e006      	b.n	8002f7e <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002f78:	e001      	b.n	8002f7e <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_Stop+0x16>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e023      	b.n	8002fe6 <HAL_ADC_Stop+0x5e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002fa6:	2103      	movs	r1, #3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fc81 	bl	80038b0 <ADC_ConversionStop>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d111      	bne.n	8002fdc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fdaf 	bl	8003b1c <ADC_Disable>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	f043 0201 	orr.w	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d102      	bne.n	8003006 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003000:	2308      	movs	r3, #8
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e010      	b.n	8003028 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e06d      	b.n	8003100 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003024:	2304      	movs	r3, #4
 8003026:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003028:	f7ff fbbc 	bl	80027a4 <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800302e:	e021      	b.n	8003074 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d01d      	beq.n	8003074 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003038:	f7ff fbb4 	bl	80027a4 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d302      	bcc.n	800304e <HAL_ADC_PollForConversion+0x60>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d112      	bne.n	8003074 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10b      	bne.n	8003074 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	f043 0204 	orr.w	r2, r3, #4
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e045      	b.n	8003100 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0d6      	beq.n	8003030 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fc4b 	bl	800292e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01c      	beq.n	80030d8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7e5b      	ldrb	r3, [r3, #25]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d118      	bne.n	80030d8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d111      	bne.n	80030d8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d104      	bne.n	80030e8 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2208      	movs	r2, #8
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e00a      	b.n	80030fe <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d103      	bne.n	80030fe <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	220c      	movs	r2, #12
 80030fc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b0b6      	sub	sp, #216	; 0xd8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x22>
 8003142:	2302      	movs	r3, #2
 8003144:	e39f      	b.n	8003886 <HAL_ADC_ConfigChannel+0x762>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fd3e 	bl	8002bd4 <LL_ADC_REG_IsConversionOngoing>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 8384 	bne.w	8003868 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	f7ff fbf1 	bl	8002954 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fd2c 	bl	8002bd4 <LL_ADC_REG_IsConversionOngoing>
 800317c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fd4c 	bl	8002c22 <LL_ADC_INJ_IsConversionOngoing>
 800318a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800318e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 81a6 	bne.w	80034e4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800319c:	2b00      	cmp	r3, #0
 800319e:	f040 81a1 	bne.w	80034e4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6819      	ldr	r1, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f7ff fbfc 	bl	80029ac <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	08db      	lsrs	r3, r3, #3
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d00a      	beq.n	80031ec <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6919      	ldr	r1, [r3, #16]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031e6:	f7ff fb4d 	bl	8002884 <LL_ADC_SetOffset>
 80031ea:	e17b      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fb6a 	bl	80028cc <LL_ADC_GetOffsetChannel>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <HAL_ADC_ConfigChannel+0xf4>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fb5f 	bl	80028cc <LL_ADC_GetOffsetChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	0e9b      	lsrs	r3, r3, #26
 8003212:	f003 021f 	and.w	r2, r3, #31
 8003216:	e01e      	b.n	8003256 <HAL_ADC_ConfigChannel+0x132>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fb54 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003224:	4603      	mov	r3, r0
 8003226:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800323a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800323e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8003246:	2320      	movs	r3, #32
 8003248:	e004      	b.n	8003254 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800324a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <HAL_ADC_ConfigChannel+0x14a>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	0e9b      	lsrs	r3, r3, #26
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	e018      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x17c>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800328a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003292:	2320      	movs	r3, #32
 8003294:	e004      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d106      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2200      	movs	r2, #0
 80032aa:	2100      	movs	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fb23 	bl	80028f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2101      	movs	r1, #1
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fb07 	bl	80028cc <LL_ADC_GetOffsetChannel>
 80032be:	4603      	mov	r3, r0
 80032c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <HAL_ADC_ConfigChannel+0x1ba>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2101      	movs	r1, #1
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fafc 	bl	80028cc <LL_ADC_GetOffsetChannel>
 80032d4:	4603      	mov	r3, r0
 80032d6:	0e9b      	lsrs	r3, r3, #26
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	e01e      	b.n	800331c <HAL_ADC_ConfigChannel+0x1f8>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2101      	movs	r1, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff faf1 	bl	80028cc <LL_ADC_GetOffsetChannel>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800330c:	2320      	movs	r3, #32
 800330e:	e004      	b.n	800331a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x210>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	0e9b      	lsrs	r3, r3, #26
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	e018      	b.n	8003366 <HAL_ADC_ConfigChannel+0x242>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003348:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800334c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e004      	b.n	8003366 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800335c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	429a      	cmp	r2, r3
 8003368:	d106      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	2101      	movs	r1, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fac0 	bl	80028f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2102      	movs	r1, #2
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff faa4 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x280>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2102      	movs	r1, #2
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fa99 	bl	80028cc <LL_ADC_GetOffsetChannel>
 800339a:	4603      	mov	r3, r0
 800339c:	0e9b      	lsrs	r3, r3, #26
 800339e:	f003 021f 	and.w	r2, r3, #31
 80033a2:	e01e      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x2be>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2102      	movs	r1, #2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fa8e 	bl	80028cc <LL_ADC_GetOffsetChannel>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80033d2:	2320      	movs	r3, #32
 80033d4:	e004      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80033d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d105      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x2d6>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	0e9b      	lsrs	r3, r3, #26
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	e016      	b.n	8003428 <HAL_ADC_ConfigChannel+0x304>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800340c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800340e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003412:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800341a:	2320      	movs	r3, #32
 800341c:	e004      	b.n	8003428 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800341e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	429a      	cmp	r2, r3
 800342a:	d106      	bne.n	800343a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	2102      	movs	r1, #2
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fa5f 	bl	80028f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2103      	movs	r1, #3
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fa43 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003446:	4603      	mov	r3, r0
 8003448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x342>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2103      	movs	r1, #3
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fa38 	bl	80028cc <LL_ADC_GetOffsetChannel>
 800345c:	4603      	mov	r3, r0
 800345e:	0e9b      	lsrs	r3, r3, #26
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	e017      	b.n	8003496 <HAL_ADC_ConfigChannel+0x372>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2103      	movs	r1, #3
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fa2d 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003472:	4603      	mov	r3, r0
 8003474:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800347e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003480:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003488:	2320      	movs	r3, #32
 800348a:	e003      	b.n	8003494 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800348c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d105      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x38a>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	0e9b      	lsrs	r3, r3, #26
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	e011      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x3ae>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80034c6:	2320      	movs	r3, #32
 80034c8:	e003      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80034ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d106      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2200      	movs	r2, #0
 80034dc:	2103      	movs	r1, #3
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fa0a 	bl	80028f8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fb25 	bl	8002b38 <LL_ADC_IsEnabled>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f040 81c2 	bne.w	800387a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	461a      	mov	r2, r3
 8003504:	f7ff fa7e 	bl	8002a04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a8e      	ldr	r2, [pc, #568]	; (8003748 <HAL_ADC_ConfigChannel+0x624>)
 800350e:	4293      	cmp	r3, r2
 8003510:	f040 8130 	bne.w	8003774 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10b      	bne.n	800353c <HAL_ADC_ConfigChannel+0x418>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	3301      	adds	r3, #1
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2b09      	cmp	r3, #9
 8003532:	bf94      	ite	ls
 8003534:	2301      	movls	r3, #1
 8003536:	2300      	movhi	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e019      	b.n	8003570 <HAL_ADC_ConfigChannel+0x44c>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800354a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800354c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800354e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003554:	2320      	movs	r3, #32
 8003556:	e003      	b.n	8003560 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3301      	adds	r3, #1
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	2b09      	cmp	r3, #9
 8003568:	bf94      	ite	ls
 800356a:	2301      	movls	r3, #1
 800356c:	2300      	movhi	r3, #0
 800356e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003570:	2b00      	cmp	r3, #0
 8003572:	d079      	beq.n	8003668 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357c:	2b00      	cmp	r3, #0
 800357e:	d107      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x46c>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0e9b      	lsrs	r3, r3, #26
 8003586:	3301      	adds	r3, #1
 8003588:	069b      	lsls	r3, r3, #26
 800358a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800358e:	e015      	b.n	80035bc <HAL_ADC_ConfigChannel+0x498>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800359e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80035a8:	2320      	movs	r3, #32
 80035aa:	e003      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80035ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	3301      	adds	r3, #1
 80035b6:	069b      	lsls	r3, r3, #26
 80035b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d109      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x4b8>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0e9b      	lsrs	r3, r3, #26
 80035ce:	3301      	adds	r3, #1
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2101      	movs	r1, #1
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	e017      	b.n	800360c <HAL_ADC_ConfigChannel+0x4e8>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80035f4:	2320      	movs	r3, #32
 80035f6:	e003      	b.n	8003600 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80035f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	3301      	adds	r3, #1
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	2101      	movs	r1, #1
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	ea42 0103 	orr.w	r1, r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x50e>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	0e9b      	lsrs	r3, r3, #26
 8003622:	3301      	adds	r3, #1
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	051b      	lsls	r3, r3, #20
 8003630:	e018      	b.n	8003664 <HAL_ADC_ConfigChannel+0x540>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003642:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800364a:	2320      	movs	r3, #32
 800364c:	e003      	b.n	8003656 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800364e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	3301      	adds	r3, #1
 8003658:	f003 021f 	and.w	r2, r3, #31
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003664:	430b      	orrs	r3, r1
 8003666:	e080      	b.n	800376a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x560>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	0e9b      	lsrs	r3, r3, #26
 800367a:	3301      	adds	r3, #1
 800367c:	069b      	lsls	r3, r3, #26
 800367e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003682:	e015      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x58c>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800369c:	2320      	movs	r3, #32
 800369e:	e003      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	069b      	lsls	r3, r3, #26
 80036ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x5ac>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0e9b      	lsrs	r3, r3, #26
 80036c2:	3301      	adds	r3, #1
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2101      	movs	r1, #1
 80036ca:	fa01 f303 	lsl.w	r3, r1, r3
 80036ce:	e017      	b.n	8003700 <HAL_ADC_ConfigChannel+0x5dc>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	61fb      	str	r3, [r7, #28]
  return result;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80036e8:	2320      	movs	r3, #32
 80036ea:	e003      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2101      	movs	r1, #1
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	ea42 0103 	orr.w	r1, r2, r3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10d      	bne.n	800372c <HAL_ADC_ConfigChannel+0x608>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	0e9b      	lsrs	r3, r3, #26
 8003716:	3301      	adds	r3, #1
 8003718:	f003 021f 	and.w	r2, r3, #31
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	3b1e      	subs	r3, #30
 8003724:	051b      	lsls	r3, r3, #20
 8003726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800372a:	e01d      	b.n	8003768 <HAL_ADC_ConfigChannel+0x644>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	613b      	str	r3, [r7, #16]
  return result;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003744:	2320      	movs	r3, #32
 8003746:	e005      	b.n	8003754 <HAL_ADC_ConfigChannel+0x630>
 8003748:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	3301      	adds	r3, #1
 8003756:	f003 021f 	and.w	r2, r3, #31
 800375a:	4613      	mov	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	3b1e      	subs	r3, #30
 8003762:	051b      	lsls	r3, r3, #20
 8003764:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003768:	430b      	orrs	r3, r1
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	6892      	ldr	r2, [r2, #8]
 800376e:	4619      	mov	r1, r3
 8003770:	f7ff f91c 	bl	80029ac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b45      	ldr	r3, [pc, #276]	; (8003890 <HAL_ADC_ConfigChannel+0x76c>)
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d07c      	beq.n	800387a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003780:	4844      	ldr	r0, [pc, #272]	; (8003894 <HAL_ADC_ConfigChannel+0x770>)
 8003782:	f7ff f871 	bl	8002868 <LL_ADC_GetCommonPathInternalCh>
 8003786:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800378a:	4843      	ldr	r0, [pc, #268]	; (8003898 <HAL_ADC_ConfigChannel+0x774>)
 800378c:	f7ff f9d4 	bl	8002b38 <LL_ADC_IsEnabled>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d15e      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a40      	ldr	r2, [pc, #256]	; (800389c <HAL_ADC_ConfigChannel+0x778>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d127      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x6cc>
 80037a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d121      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a39      	ldr	r2, [pc, #228]	; (8003898 <HAL_ADC_ConfigChannel+0x774>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d161      	bne.n	800387a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80037b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037be:	4619      	mov	r1, r3
 80037c0:	4834      	ldr	r0, [pc, #208]	; (8003894 <HAL_ADC_ConfigChannel+0x770>)
 80037c2:	f7ff f83e 	bl	8002842 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037c6:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_ADC_ConfigChannel+0x77c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	4a35      	ldr	r2, [pc, #212]	; (80038a4 <HAL_ADC_ConfigChannel+0x780>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80037e0:	e002      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f9      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037ee:	e044      	b.n	800387a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a2c      	ldr	r2, [pc, #176]	; (80038a8 <HAL_ADC_ConfigChannel+0x784>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d113      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x6fe>
 80037fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10d      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a23      	ldr	r2, [pc, #140]	; (8003898 <HAL_ADC_ConfigChannel+0x774>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d134      	bne.n	800387a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003818:	4619      	mov	r1, r3
 800381a:	481e      	ldr	r0, [pc, #120]	; (8003894 <HAL_ADC_ConfigChannel+0x770>)
 800381c:	f7ff f811 	bl	8002842 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003820:	e02b      	b.n	800387a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a21      	ldr	r2, [pc, #132]	; (80038ac <HAL_ADC_ConfigChannel+0x788>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d126      	bne.n	800387a <HAL_ADC_ConfigChannel+0x756>
 800382c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d120      	bne.n	800387a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a16      	ldr	r2, [pc, #88]	; (8003898 <HAL_ADC_ConfigChannel+0x774>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d11b      	bne.n	800387a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800384a:	4619      	mov	r1, r3
 800384c:	4811      	ldr	r0, [pc, #68]	; (8003894 <HAL_ADC_ConfigChannel+0x770>)
 800384e:	f7fe fff8 	bl	8002842 <LL_ADC_SetCommonPathInternalCh>
 8003852:	e012      	b.n	800387a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003866:	e008      	b.n	800387a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	f043 0220 	orr.w	r2, r3, #32
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003882:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003886:	4618      	mov	r0, r3
 8003888:	37d8      	adds	r7, #216	; 0xd8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	80080000 	.word	0x80080000
 8003894:	50040300 	.word	0x50040300
 8003898:	50040000 	.word	0x50040000
 800389c:	c7520000 	.word	0xc7520000
 80038a0:	20000004 	.word	0x20000004
 80038a4:	053e2d63 	.word	0x053e2d63
 80038a8:	cb840000 	.word	0xcb840000
 80038ac:	80000001 	.word	0x80000001

080038b0 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff f984 	bl	8002bd4 <LL_ADC_REG_IsConversionOngoing>
 80038cc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff f9a5 	bl	8002c22 <LL_ADC_INJ_IsConversionOngoing>
 80038d8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d103      	bne.n	80038e8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8098 	beq.w	8003a18 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d02a      	beq.n	800394c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	7e5b      	ldrb	r3, [r3, #25]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d126      	bne.n	800394c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	7e1b      	ldrb	r3, [r3, #24]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d122      	bne.n	800394c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003906:	2301      	movs	r3, #1
 8003908:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800390a:	e014      	b.n	8003936 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	4a45      	ldr	r2, [pc, #276]	; (8003a24 <ADC_ConversionStop+0x174>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d90d      	bls.n	8003930 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	f043 0210 	orr.w	r2, r3, #16
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e074      	b.n	8003a1a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	3301      	adds	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d1e3      	bne.n	800390c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2240      	movs	r2, #64	; 0x40
 800394a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d014      	beq.n	800397c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff f93c 	bl	8002bd4 <LL_ADC_REG_IsConversionOngoing>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff f8f9 	bl	8002b5e <LL_ADC_IsDisableOngoing>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff f918 	bl	8002bac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d014      	beq.n	80039ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f94b 	bl	8002c22 <LL_ADC_INJ_IsConversionOngoing>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00c      	beq.n	80039ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff f8e1 	bl	8002b5e <LL_ADC_IsDisableOngoing>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d104      	bne.n	80039ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff f927 	bl	8002bfa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d005      	beq.n	80039be <ADC_ConversionStop+0x10e>
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d105      	bne.n	80039c4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80039b8:	230c      	movs	r3, #12
 80039ba:	617b      	str	r3, [r7, #20]
        break;
 80039bc:	e005      	b.n	80039ca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80039be:	2308      	movs	r3, #8
 80039c0:	617b      	str	r3, [r7, #20]
        break;
 80039c2:	e002      	b.n	80039ca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80039c4:	2304      	movs	r3, #4
 80039c6:	617b      	str	r3, [r7, #20]
        break;
 80039c8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80039ca:	f7fe feeb 	bl	80027a4 <HAL_GetTick>
 80039ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039d0:	e01b      	b.n	8003a0a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80039d2:	f7fe fee7 	bl	80027a4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d914      	bls.n	8003a0a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00d      	beq.n	8003a0a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	f043 0210 	orr.w	r2, r3, #16
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e007      	b.n	8003a1a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1dc      	bne.n	80039d2 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	a33fffff 	.word	0xa33fffff

08003a28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff f87d 	bl	8002b38 <LL_ADC_IsEnabled>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d15e      	bne.n	8003b02 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	4b30      	ldr	r3, [pc, #192]	; (8003b0c <ADC_Enable+0xe4>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a56:	f043 0210 	orr.w	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e04a      	b.n	8003b04 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff f838 	bl	8002ae8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a78:	4825      	ldr	r0, [pc, #148]	; (8003b10 <ADC_Enable+0xe8>)
 8003a7a:	f7fe fef5 	bl	8002868 <LL_ADC_GetCommonPathInternalCh>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00f      	beq.n	8003aa8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a88:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <ADC_Enable+0xec>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	4a22      	ldr	r2, [pc, #136]	; (8003b18 <ADC_Enable+0xf0>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	3301      	adds	r3, #1
 8003a98:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003a9a:	e002      	b.n	8003aa2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f9      	bne.n	8003a9c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003aa8:	f7fe fe7c 	bl	80027a4 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aae:	e021      	b.n	8003af4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff f83f 	bl	8002b38 <LL_ADC_IsEnabled>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d104      	bne.n	8003aca <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff f80f 	bl	8002ae8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003aca:	f7fe fe6b 	bl	80027a4 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d90d      	bls.n	8003af4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	f043 0210 	orr.w	r2, r3, #16
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e007      	b.n	8003b04 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d1d6      	bne.n	8003ab0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	8000003f 	.word	0x8000003f
 8003b10:	50040300 	.word	0x50040300
 8003b14:	20000004 	.word	0x20000004
 8003b18:	053e2d63 	.word	0x053e2d63

08003b1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff f818 	bl	8002b5e <LL_ADC_IsDisableOngoing>
 8003b2e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe ffff 	bl	8002b38 <LL_ADC_IsEnabled>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d047      	beq.n	8003bd0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d144      	bne.n	8003bd0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030d 	and.w	r3, r3, #13
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10c      	bne.n	8003b6e <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe ffd9 	bl	8002b10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2203      	movs	r2, #3
 8003b64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b66:	f7fe fe1d 	bl	80027a4 <HAL_GetTick>
 8003b6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b6c:	e029      	b.n	8003bc2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	f043 0210 	orr.w	r2, r3, #16
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e023      	b.n	8003bd2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b8a:	f7fe fe0b 	bl	80027a4 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d914      	bls.n	8003bc2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00d      	beq.n	8003bc2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	f043 0210 	orr.w	r2, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e007      	b.n	8003bd2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1dc      	bne.n	8003b8a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c0e:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	60d3      	str	r3, [r2, #12]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <__NVIC_GetPriorityGrouping+0x18>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	f003 0307 	and.w	r3, r3, #7
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	db0b      	blt.n	8003c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	f003 021f 	and.w	r2, r3, #31
 8003c58:	4907      	ldr	r1, [pc, #28]	; (8003c78 <__NVIC_EnableIRQ+0x38>)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	2001      	movs	r0, #1
 8003c62:	fa00 f202 	lsl.w	r2, r0, r2
 8003c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000e100 	.word	0xe000e100

08003c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	db0a      	blt.n	8003ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	490c      	ldr	r1, [pc, #48]	; (8003cc8 <__NVIC_SetPriority+0x4c>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca4:	e00a      	b.n	8003cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4908      	ldr	r1, [pc, #32]	; (8003ccc <__NVIC_SetPriority+0x50>)
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3b04      	subs	r3, #4
 8003cb4:	0112      	lsls	r2, r2, #4
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	440b      	add	r3, r1
 8003cba:	761a      	strb	r2, [r3, #24]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000e100 	.word	0xe000e100
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f1c3 0307 	rsb	r3, r3, #7
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	bf28      	it	cs
 8003cee:	2304      	movcs	r3, #4
 8003cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d902      	bls.n	8003d00 <NVIC_EncodePriority+0x30>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3b03      	subs	r3, #3
 8003cfe:	e000      	b.n	8003d02 <NVIC_EncodePriority+0x32>
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	401a      	ands	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d18:	f04f 31ff 	mov.w	r1, #4294967295
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43d9      	mvns	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	4313      	orrs	r3, r2
         );
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d48:	d301      	bcc.n	8003d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e00f      	b.n	8003d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <SysTick_Config+0x40>)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d56:	210f      	movs	r1, #15
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	f7ff ff8e 	bl	8003c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <SysTick_Config+0x40>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d66:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <SysTick_Config+0x40>)
 8003d68:	2207      	movs	r2, #7
 8003d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	e000e010 	.word	0xe000e010

08003d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ff29 	bl	8003bdc <__NVIC_SetPriorityGrouping>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	4603      	mov	r3, r0
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003da0:	f7ff ff40 	bl	8003c24 <__NVIC_GetPriorityGrouping>
 8003da4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	6978      	ldr	r0, [r7, #20]
 8003dac:	f7ff ff90 	bl	8003cd0 <NVIC_EncodePriority>
 8003db0:	4602      	mov	r2, r0
 8003db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff5f 	bl	8003c7c <__NVIC_SetPriority>
}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	4603      	mov	r3, r0
 8003dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff ff33 	bl	8003c40 <__NVIC_EnableIRQ>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff ffa4 	bl	8003d38 <SysTick_Config>
 8003df0:	4603      	mov	r3, r0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e078      	b.n	8003f00 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	4b3c      	ldr	r3, [pc, #240]	; (8003f08 <HAL_DMA_Init+0x10c>)
 8003e16:	4413      	add	r3, r2
 8003e18:	4a3c      	ldr	r2, [pc, #240]	; (8003f0c <HAL_DMA_Init+0x110>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	091b      	lsrs	r3, r3, #4
 8003e20:	009a      	lsls	r2, r3, #2
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a39      	ldr	r2, [pc, #228]	; (8003f10 <HAL_DMA_Init+0x114>)
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fa6e 	bl	8004360 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e8c:	d102      	bne.n	8003e94 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003ea0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003eaa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d010      	beq.n	8003ed6 <HAL_DMA_Init+0xda>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d80c      	bhi.n	8003ed6 <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fa7b 	bl	80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ed2:	605a      	str	r2, [r3, #4]
 8003ed4:	e008      	b.n	8003ee8 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	bffdfff8 	.word	0xbffdfff8
 8003f0c:	cccccccd 	.word	0xcccccccd
 8003f10:	40020000 	.word	0x40020000

08003f14 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_Start_IT+0x20>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e066      	b.n	8004002 <HAL_DMA_Start_IT+0xee>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d155      	bne.n	8003ff4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f9b9 	bl	80042e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 020e 	orr.w	r2, r2, #14
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e00f      	b.n	8003fac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0204 	bic.w	r2, r2, #4
 8003f9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 020a 	orr.w	r2, r2, #10
 8003faa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e005      	b.n	8004000 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004000:	7dfb      	ldrb	r3, [r7, #23]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e04f      	b.n	80040bc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d008      	beq.n	800403a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2204      	movs	r2, #4
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e040      	b.n	80040bc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 020e 	bic.w	r2, r2, #14
 8004048:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004058:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	f003 021c 	and.w	r2, r3, #28
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	2101      	movs	r1, #1
 8004078:	fa01 f202 	lsl.w	r2, r1, r2
 800407c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004086:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00c      	beq.n	80040aa <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800409e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d005      	beq.n	80040ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2204      	movs	r2, #4
 80040e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
 80040ea:	e047      	b.n	800417c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 020e 	bic.w	r2, r2, #14
 80040fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800411a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	f003 021c 	and.w	r2, r3, #28
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	2101      	movs	r1, #1
 800412a:	fa01 f202 	lsl.w	r2, r1, r2
 800412e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004138:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00c      	beq.n	800415c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004150:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800415a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4798      	blx	r3
    }
  }
  return status;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	f003 031c 	and.w	r3, r3, #28
 80041a6:	2204      	movs	r2, #4
 80041a8:	409a      	lsls	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d026      	beq.n	8004200 <HAL_DMA_IRQHandler+0x7a>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d021      	beq.n	8004200 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0204 	bic.w	r2, r2, #4
 80041d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	f003 021c 	and.w	r2, r3, #28
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	2104      	movs	r1, #4
 80041e8:	fa01 f202 	lsl.w	r2, r1, r2
 80041ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d071      	beq.n	80042da <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80041fe:	e06c      	b.n	80042da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	f003 031c 	and.w	r3, r3, #28
 8004208:	2202      	movs	r2, #2
 800420a:	409a      	lsls	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4013      	ands	r3, r2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d02e      	beq.n	8004272 <HAL_DMA_IRQHandler+0xec>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d029      	beq.n	8004272 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 020a 	bic.w	r2, r2, #10
 800423a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004248:	f003 021c 	and.w	r2, r3, #28
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	2102      	movs	r1, #2
 8004252:	fa01 f202 	lsl.w	r2, r1, r2
 8004256:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d038      	beq.n	80042da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004270:	e033      	b.n	80042da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	f003 031c 	and.w	r3, r3, #28
 800427a:	2208      	movs	r2, #8
 800427c:	409a      	lsls	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d02a      	beq.n	80042dc <HAL_DMA_IRQHandler+0x156>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d025      	beq.n	80042dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 020e 	bic.w	r2, r2, #14
 800429e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a4:	f003 021c 	and.w	r2, r3, #28
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	2101      	movs	r1, #1
 80042ae:	fa01 f202 	lsl.w	r2, r1, r2
 80042b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d004      	beq.n	80042dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
}
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	2b00      	cmp	r3, #0
 8004302:	d004      	beq.n	800430e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800430c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	f003 021c 	and.w	r2, r3, #28
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2101      	movs	r1, #1
 800431c:	fa01 f202 	lsl.w	r2, r1, r2
 8004320:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b10      	cmp	r3, #16
 8004330:	d108      	bne.n	8004344 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004342:	e007      	b.n	8004354 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	60da      	str	r2, [r3, #12]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004374:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	3b08      	subs	r3, #8
 8004384:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004392:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	2201      	movs	r2, #1
 800439c:	409a      	lsls	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	cccccccd 	.word	0xcccccccd
 80043b4:	40020880 	.word	0x40020880

080043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	461a      	mov	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a09      	ldr	r2, [pc, #36]	; (8004400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80043dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2201      	movs	r2, #1
 80043e8:	409a      	lsls	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	1000823f 	.word	0x1000823f
 8004400:	40020940 	.word	0x40020940

08004404 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004412:	e146      	b.n	80046a2 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2101      	movs	r1, #1
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	4013      	ands	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8138 	beq.w	800469c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d005      	beq.n	8004444 <HAL_GPIO_Init+0x40>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d130      	bne.n	80044a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	2203      	movs	r2, #3
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800447a:	2201      	movs	r2, #1
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	f003 0201 	and.w	r2, r3, #1
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d017      	beq.n	80044e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	2203      	movs	r2, #3
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d123      	bne.n	8004536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	08da      	lsrs	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3208      	adds	r2, #8
 80044f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	220f      	movs	r2, #15
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	08da      	lsrs	r2, r3, #3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3208      	adds	r2, #8
 8004530:	6939      	ldr	r1, [r7, #16]
 8004532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	2203      	movs	r2, #3
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0203 	and.w	r2, r3, #3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8092 	beq.w	800469c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004578:	4a51      	ldr	r2, [pc, #324]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	089b      	lsrs	r3, r3, #2
 800457e:	3302      	adds	r3, #2
 8004580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	220f      	movs	r2, #15
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4013      	ands	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045a2:	d013      	beq.n	80045cc <HAL_GPIO_Init+0x1c8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a47      	ldr	r2, [pc, #284]	; (80046c4 <HAL_GPIO_Init+0x2c0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00d      	beq.n	80045c8 <HAL_GPIO_Init+0x1c4>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a46      	ldr	r2, [pc, #280]	; (80046c8 <HAL_GPIO_Init+0x2c4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <HAL_GPIO_Init+0x1c0>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a45      	ldr	r2, [pc, #276]	; (80046cc <HAL_GPIO_Init+0x2c8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d101      	bne.n	80045c0 <HAL_GPIO_Init+0x1bc>
 80045bc:	2304      	movs	r3, #4
 80045be:	e006      	b.n	80045ce <HAL_GPIO_Init+0x1ca>
 80045c0:	2307      	movs	r3, #7
 80045c2:	e004      	b.n	80045ce <HAL_GPIO_Init+0x1ca>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e002      	b.n	80045ce <HAL_GPIO_Init+0x1ca>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <HAL_GPIO_Init+0x1ca>
 80045cc:	2300      	movs	r3, #0
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	f002 0203 	and.w	r2, r2, #3
 80045d4:	0092      	lsls	r2, r2, #2
 80045d6:	4093      	lsls	r3, r2
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045de:	4938      	ldr	r1, [pc, #224]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	3302      	adds	r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045ec:	4b38      	ldr	r3, [pc, #224]	; (80046d0 <HAL_GPIO_Init+0x2cc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004610:	4a2f      	ldr	r2, [pc, #188]	; (80046d0 <HAL_GPIO_Init+0x2cc>)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004616:	4b2e      	ldr	r3, [pc, #184]	; (80046d0 <HAL_GPIO_Init+0x2cc>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	43db      	mvns	r3, r3
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4013      	ands	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800463a:	4a25      	ldr	r2, [pc, #148]	; (80046d0 <HAL_GPIO_Init+0x2cc>)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004640:	4b23      	ldr	r3, [pc, #140]	; (80046d0 <HAL_GPIO_Init+0x2cc>)
 8004642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	43db      	mvns	r3, r3
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4013      	ands	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004666:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <HAL_GPIO_Init+0x2cc>)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800466e:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <HAL_GPIO_Init+0x2cc>)
 8004670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	43db      	mvns	r3, r3
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4013      	ands	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004694:	4a0e      	ldr	r2, [pc, #56]	; (80046d0 <HAL_GPIO_Init+0x2cc>)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	3301      	adds	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f47f aeb1 	bne.w	8004414 <HAL_GPIO_Init+0x10>
  }
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40010000 	.word	0x40010000
 80046c4:	48000400 	.word	0x48000400
 80046c8:	48000800 	.word	0x48000800
 80046cc:	48001000 	.word	0x48001000
 80046d0:	58000800 	.word	0x58000800

080046d4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	887b      	ldrh	r3, [r7, #2]
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	e001      	b.n	80046f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	807b      	strh	r3, [r7, #2]
 8004710:	4613      	mov	r3, r2
 8004712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004714:	787b      	ldrb	r3, [r7, #1]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800471a:	887a      	ldrh	r2, [r7, #2]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004720:	e002      	b.n	8004728 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004722:	887a      	ldrh	r2, [r7, #2]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004746:	887a      	ldrh	r2, [r7, #2]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4013      	ands	r3, r2
 800474c:	041a      	lsls	r2, r3, #16
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	43d9      	mvns	r1, r3
 8004752:	887b      	ldrh	r3, [r7, #2]
 8004754:	400b      	ands	r3, r1
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	619a      	str	r2, [r3, #24]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01e      	beq.n	80047b8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800477a:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <HAL_IPCC_Init+0x60>)
 800477c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fc fdc6 	bl	800131c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004790:	68b8      	ldr	r0, [r7, #8]
 8004792:	f000 f8f5 	bl	8004980 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f8c6 	bl	8004934 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80047b6:	e001      	b.n	80047bc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	58000c00 	.word	0x58000c00

080047cc <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80047d8:	4b22      	ldr	r3, [pc, #136]	; (8004864 <HAL_IPCC_TX_IRQHandler+0x98>)
 80047da:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80047e6:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	43db      	mvns	r3, r3
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4013      	ands	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80047f6:	e02c      	b.n	8004852 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	3310      	adds	r3, #16
 8004800:	2201      	movs	r2, #1
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d01c      	beq.n	800484c <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	431a      	orrs	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	3306      	adds	r3, #6
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	3306      	adds	r3, #6
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	6939      	ldr	r1, [r7, #16]
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	43db      	mvns	r3, r3
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4013      	ands	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	3301      	adds	r3, #1
 8004850:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1cf      	bne.n	80047f8 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	58000c00 	.word	0x58000c00

08004868 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004874:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <HAL_IPCC_RX_IRQHandler+0x90>)
 8004876:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 8004878:	4b20      	ldr	r3, [pc, #128]	; (80048fc <HAL_IPCC_RX_IRQHandler+0x94>)
 800487a:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	43db      	mvns	r3, r3
 8004882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004886:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	4013      	ands	r3, r2
 8004890:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8004892:	e029      	b.n	80048e8 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	2201      	movs	r2, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01a      	beq.n	80048e2 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d008      	beq.n	80048d8 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	69b9      	ldr	r1, [r7, #24]
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	43db      	mvns	r3, r3
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	4013      	ands	r3, r2
 80048e0:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	3301      	adds	r3, #1
 80048e6:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1d2      	bne.n	8004894 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	58000c00 	.word	0x58000c00
 80048fc:	58000c10 	.word	0x58000c10

08004900 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	4613      	mov	r3, r2
 8004926:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e00f      	b.n	8004962 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <IPCC_SetDefaultCallbacks+0x44>)
 800494c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3306      	adds	r3, #6
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	4a08      	ldr	r2, [pc, #32]	; (800497c <IPCC_SetDefaultCallbacks+0x48>)
 800495a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b05      	cmp	r3, #5
 8004966:	d9ec      	bls.n	8004942 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	08004901 	.word	0x08004901
 800497c:	0800491b 	.word	0x0800491b

08004980 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004994:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	223f      	movs	r2, #63	; 0x3f
 800499a:	609a      	str	r2, [r3, #8]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b6:	6013      	str	r3, [r2, #0]
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	58000400 	.word	0x58000400

080049c8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049da:	d101      	bne.n	80049e0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80049f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fe:	6013      	str	r3, [r2, #0]
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a3a:	d101      	bne.n	8004a40 <LL_RCC_HSE_IsReady+0x18>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <LL_RCC_HSE_IsReady+0x1a>
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5e:	6013      	str	r3, [r2, #0]
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a7c:	6013      	str	r3, [r2, #0]
}
 8004a7e:	bf00      	nop
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9a:	d101      	bne.n	8004aa0 <LL_RCC_HSI_IsReady+0x18>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <LL_RCC_HSI_IsReady+0x1a>
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	604b      	str	r3, [r1, #4]
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004aee:	bf00      	nop
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d101      	bne.n	8004b32 <LL_RCC_HSI48_IsReady+0x18>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <LL_RCC_HSI48_IsReady+0x1a>
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b56:	bf00      	nop
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b78:	bf00      	nop
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004b82:	b480      	push	{r7}
 8004b84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b92:	f043 0304 	orr.w	r3, r3, #4
 8004b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b9a:	bf00      	nop
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bbc:	bf00      	nop
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d101      	bne.n	8004bde <LL_RCC_LSE_IsReady+0x18>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <LL_RCC_LSE_IsReady+0x1a>
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004bea:	b480      	push	{r7}
 8004bec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c02:	bf00      	nop
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d101      	bne.n	8004c46 <LL_RCC_LSI1_IsReady+0x18>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <LL_RCC_LSI1_IsReady+0x1a>
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004c52:	b480      	push	{r7}
 8004c54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c62:	f043 0304 	orr.w	r3, r3, #4
 8004c66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c6a:	bf00      	nop
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c84:	f023 0304 	bic.w	r3, r3, #4
 8004c88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c8c:	bf00      	nop
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004c96:	b480      	push	{r7}
 8004c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d101      	bne.n	8004cae <LL_RCC_LSI2_IsReady+0x18>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <LL_RCC_LSI2_IsReady+0x1a>
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	6013      	str	r3, [r2, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004d06:	b480      	push	{r7}
 8004d08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	6013      	str	r3, [r2, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d101      	bne.n	8004d3a <LL_RCC_MSI_IsReady+0x16>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <LL_RCC_MSI_IsReady+0x18>
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d7e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2bb0      	cmp	r3, #176	; 0xb0
 8004d84:	d901      	bls.n	8004d8a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004d86:	23b0      	movs	r3, #176	; 0xb0
 8004d88:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004d8a:	687b      	ldr	r3, [r7, #4]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004db2:	4313      	orrs	r3, r2
 8004db4:	604b      	str	r3, [r1, #4]
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f023 0203 	bic.w	r2, r3, #3
 8004dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004dea:	b480      	push	{r7}
 8004dec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 030c 	and.w	r3, r3, #12
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e66:	f023 020f 	bic.w	r2, r3, #15
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	608b      	str	r3, [r1, #8]
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	608b      	str	r3, [r1, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f32:	6013      	str	r3, [r2, #0]
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f50:	6013      	str	r3, [r2, #0]
}
 8004f52:	bf00      	nop
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f6e:	d101      	bne.n	8004f74 <LL_RCC_PLL_IsReady+0x18>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <LL_RCC_PLL_IsReady+0x1a>
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0303 	and.w	r3, r3, #3
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff4:	d101      	bne.n	8004ffa <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005006:	b480      	push	{r7}
 8005008:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800500a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800501a:	d101      	bne.n	8005020 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005034:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d101      	bne.n	8005046 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005052:	b480      	push	{r7}
 8005054:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005064:	d101      	bne.n	800506a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005076:	b480      	push	{r7}
 8005078:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800507a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005084:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005088:	d101      	bne.n	800508e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b08d      	sub	sp, #52	; 0x34
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e35c      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 808d 	beq.w	80051d6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050bc:	f7ff fe95 	bl	8004dea <LL_RCC_GetSysClkSource>
 80050c0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050c2:	f7ff ff82 	bl	8004fca <LL_RCC_PLL_GetMainSource>
 80050c6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80050c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_RCC_OscConfig+0x3e>
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	d147      	bne.n	8005164 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d144      	bne.n	8005164 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e340      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80050ea:	f7ff fe40 	bl	8004d6e <LL_RCC_MSI_GetRange>
 80050ee:	4603      	mov	r3, r0
 80050f0:	429c      	cmp	r4, r3
 80050f2:	d914      	bls.n	800511e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fd0f 	bl	8005b1c <RCC_SetFlashLatencyFromMSIRange>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e32f      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff fe1a 	bl	8004d46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fe3e 	bl	8004d98 <LL_RCC_MSI_SetCalibTrimming>
 800511c:	e013      	b.n	8005146 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff fe0f 	bl	8004d46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fe33 	bl	8004d98 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fcf0 	bl	8005b1c <RCC_SetFlashLatencyFromMSIRange>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e310      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005146:	f000 fcbf 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 800514a:	4603      	mov	r3, r0
 800514c:	4aa4      	ldr	r2, [pc, #656]	; (80053e0 <HAL_RCC_OscConfig+0x344>)
 800514e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005150:	4ba4      	ldr	r3, [pc, #656]	; (80053e4 <HAL_RCC_OscConfig+0x348>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f7fd fad7 	bl	8002708 <HAL_InitTick>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d039      	beq.n	80051d4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e301      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01e      	beq.n	80051aa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800516c:	f7ff fdbc 	bl	8004ce8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005170:	f7fd fb18 	bl	80027a4 <HAL_GetTick>
 8005174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005178:	f7fd fb14 	bl	80027a4 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e2ee      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() == 0U)
 800518a:	f7ff fdcb 	bl	8004d24 <LL_RCC_MSI_IsReady>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f1      	beq.n	8005178 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fdd4 	bl	8004d46 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fdf8 	bl	8004d98 <LL_RCC_MSI_SetCalibTrimming>
 80051a8:	e015      	b.n	80051d6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051aa:	f7ff fdac 	bl	8004d06 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051ae:	f7fd faf9 	bl	80027a4 <HAL_GetTick>
 80051b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051b6:	f7fd faf5 	bl	80027a4 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e2cf      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() != 0U)
 80051c8:	f7ff fdac 	bl	8004d24 <LL_RCC_MSI_IsReady>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f1      	bne.n	80051b6 <HAL_RCC_OscConfig+0x11a>
 80051d2:	e000      	b.n	80051d6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80051d4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d047      	beq.n	8005272 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e2:	f7ff fe02 	bl	8004dea <LL_RCC_GetSysClkSource>
 80051e6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051e8:	f7ff feef 	bl	8004fca <LL_RCC_PLL_GetMainSource>
 80051ec:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d005      	beq.n	8005200 <HAL_RCC_OscConfig+0x164>
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	2b0c      	cmp	r3, #12
 80051f8:	d108      	bne.n	800520c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d105      	bne.n	800520c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d134      	bne.n	8005272 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e2ad      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005214:	d102      	bne.n	800521c <HAL_RCC_OscConfig+0x180>
 8005216:	f7ff fbe9 	bl	80049ec <LL_RCC_HSE_Enable>
 800521a:	e001      	b.n	8005220 <HAL_RCC_OscConfig+0x184>
 800521c:	f7ff fbf5 	bl	8004a0a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d012      	beq.n	800524e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fd fabc 	bl	80027a4 <HAL_GetTick>
 800522c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005230:	f7fd fab8 	bl	80027a4 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b64      	cmp	r3, #100	; 0x64
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e292      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005242:	f7ff fbf1 	bl	8004a28 <LL_RCC_HSE_IsReady>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f1      	beq.n	8005230 <HAL_RCC_OscConfig+0x194>
 800524c:	e011      	b.n	8005272 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524e:	f7fd faa9 	bl	80027a4 <HAL_GetTick>
 8005252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005256:	f7fd faa5 	bl	80027a4 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b64      	cmp	r3, #100	; 0x64
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e27f      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005268:	f7ff fbde 	bl	8004a28 <LL_RCC_HSE_IsReady>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f1      	bne.n	8005256 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d04c      	beq.n	8005318 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800527e:	f7ff fdb4 	bl	8004dea <LL_RCC_GetSysClkSource>
 8005282:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005284:	f7ff fea1 	bl	8004fca <LL_RCC_PLL_GetMainSource>
 8005288:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b04      	cmp	r3, #4
 800528e:	d005      	beq.n	800529c <HAL_RCC_OscConfig+0x200>
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b0c      	cmp	r3, #12
 8005294:	d10e      	bne.n	80052b4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d10b      	bne.n	80052b4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e25f      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fbfd 	bl	8004aac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80052b2:	e031      	b.n	8005318 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d019      	beq.n	80052f0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052bc:	f7ff fbc6 	bl	8004a4c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c0:	f7fd fa70 	bl	80027a4 <HAL_GetTick>
 80052c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c8:	f7fd fa6c 	bl	80027a4 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e246      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() == 0U)
 80052da:	f7ff fbd5 	bl	8004a88 <LL_RCC_HSI_IsReady>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f1      	beq.n	80052c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff fbdf 	bl	8004aac <LL_RCC_HSI_SetCalibTrimming>
 80052ee:	e013      	b.n	8005318 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052f0:	f7ff fbbb 	bl	8004a6a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f4:	f7fd fa56 	bl	80027a4 <HAL_GetTick>
 80052f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052fc:	f7fd fa52 	bl	80027a4 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e22c      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() != 0U)
 800530e:	f7ff fbbb 	bl	8004a88 <LL_RCC_HSI_IsReady>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f1      	bne.n	80052fc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d106      	bne.n	8005332 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80a3 	beq.w	8005478 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d076      	beq.n	8005428 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b00      	cmp	r3, #0
 8005344:	d046      	beq.n	80053d4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005346:	f7ff fc72 	bl	8004c2e <LL_RCC_LSI1_IsReady>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d113      	bne.n	8005378 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005350:	f7ff fc4b 	bl	8004bea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005354:	f7fd fa26 	bl	80027a4 <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800535c:	f7fd fa22 	bl	80027a4 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e1fc      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800536e:	f7ff fc5e 	bl	8004c2e <LL_RCC_LSI1_IsReady>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0f1      	beq.n	800535c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005378:	f7ff fc6b 	bl	8004c52 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fd fa12 	bl	80027a4 <HAL_GetTick>
 8005380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005384:	f7fd fa0e 	bl	80027a4 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b03      	cmp	r3, #3
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e1e8      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005396:	f7ff fc7e 	bl	8004c96 <LL_RCC_LSI2_IsReady>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f1      	beq.n	8005384 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff fc88 	bl	8004cba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80053aa:	f7ff fc2f 	bl	8004c0c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ae:	f7fd f9f9 	bl	80027a4 <HAL_GetTick>
 80053b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80053b6:	f7fd f9f5 	bl	80027a4 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e1cf      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80053c8:	f7ff fc31 	bl	8004c2e <LL_RCC_LSI1_IsReady>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f1      	bne.n	80053b6 <HAL_RCC_OscConfig+0x31a>
 80053d2:	e051      	b.n	8005478 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80053d4:	f7ff fc09 	bl	8004bea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d8:	f7fd f9e4 	bl	80027a4 <HAL_GetTick>
 80053dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80053de:	e00c      	b.n	80053fa <HAL_RCC_OscConfig+0x35e>
 80053e0:	20000004 	.word	0x20000004
 80053e4:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80053e8:	f7fd f9dc 	bl	80027a4 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e1b6      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80053fa:	f7ff fc18 	bl	8004c2e <LL_RCC_LSI1_IsReady>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f1      	beq.n	80053e8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005404:	f7ff fc36 	bl	8004c74 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800540a:	f7fd f9cb 	bl	80027a4 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b03      	cmp	r3, #3
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e1a5      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800541c:	f7ff fc3b 	bl	8004c96 <LL_RCC_LSI2_IsReady>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f1      	bne.n	800540a <HAL_RCC_OscConfig+0x36e>
 8005426:	e027      	b.n	8005478 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005428:	f7ff fc24 	bl	8004c74 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542c:	f7fd f9ba 	bl	80027a4 <HAL_GetTick>
 8005430:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005434:	f7fd f9b6 	bl	80027a4 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b03      	cmp	r3, #3
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e190      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005446:	f7ff fc26 	bl	8004c96 <LL_RCC_LSI2_IsReady>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f1      	bne.n	8005434 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005450:	f7ff fbdc 	bl	8004c0c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005454:	f7fd f9a6 	bl	80027a4 <HAL_GetTick>
 8005458:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800545c:	f7fd f9a2 	bl	80027a4 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e17c      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800546e:	f7ff fbde 	bl	8004c2e <LL_RCC_LSI1_IsReady>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f1      	bne.n	800545c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d05b      	beq.n	800553c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005484:	4ba7      	ldr	r3, [pc, #668]	; (8005724 <HAL_RCC_OscConfig+0x688>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d114      	bne.n	80054ba <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005490:	f7ff fa8a 	bl	80049a8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005494:	f7fd f986 	bl	80027a4 <HAL_GetTick>
 8005498:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549c:	f7fd f982 	bl	80027a4 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e15c      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ae:	4b9d      	ldr	r3, [pc, #628]	; (8005724 <HAL_RCC_OscConfig+0x688>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d102      	bne.n	80054c8 <HAL_RCC_OscConfig+0x42c>
 80054c2:	f7ff fb3c 	bl	8004b3e <LL_RCC_LSE_Enable>
 80054c6:	e00c      	b.n	80054e2 <HAL_RCC_OscConfig+0x446>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b05      	cmp	r3, #5
 80054ce:	d104      	bne.n	80054da <HAL_RCC_OscConfig+0x43e>
 80054d0:	f7ff fb57 	bl	8004b82 <LL_RCC_LSE_EnableBypass>
 80054d4:	f7ff fb33 	bl	8004b3e <LL_RCC_LSE_Enable>
 80054d8:	e003      	b.n	80054e2 <HAL_RCC_OscConfig+0x446>
 80054da:	f7ff fb41 	bl	8004b60 <LL_RCC_LSE_Disable>
 80054de:	f7ff fb61 	bl	8004ba4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d014      	beq.n	8005514 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ea:	f7fd f95b 	bl	80027a4 <HAL_GetTick>
 80054ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80054f0:	e00a      	b.n	8005508 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f2:	f7fd f957 	bl	80027a4 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005500:	4293      	cmp	r3, r2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e12f      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005508:	f7ff fb5d 	bl	8004bc6 <LL_RCC_LSE_IsReady>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0ef      	beq.n	80054f2 <HAL_RCC_OscConfig+0x456>
 8005512:	e013      	b.n	800553c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005514:	f7fd f946 	bl	80027a4 <HAL_GetTick>
 8005518:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800551a:	e00a      	b.n	8005532 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551c:	f7fd f942 	bl	80027a4 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e11a      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005532:	f7ff fb48 	bl	8004bc6 <LL_RCC_LSE_IsReady>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1ef      	bne.n	800551c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d02c      	beq.n	80055a2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	2b00      	cmp	r3, #0
 800554e:	d014      	beq.n	800557a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005550:	f7ff fac1 	bl	8004ad6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005554:	f7fd f926 	bl	80027a4 <HAL_GetTick>
 8005558:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800555c:	f7fd f922 	bl	80027a4 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e0fc      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800556e:	f7ff fad4 	bl	8004b1a <LL_RCC_HSI48_IsReady>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f1      	beq.n	800555c <HAL_RCC_OscConfig+0x4c0>
 8005578:	e013      	b.n	80055a2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800557a:	f7ff fabd 	bl	8004af8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557e:	f7fd f911 	bl	80027a4 <HAL_GetTick>
 8005582:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005586:	f7fd f90d 	bl	80027a4 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e0e7      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005598:	f7ff fabf 	bl	8004b1a <LL_RCC_HSI48_IsReady>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f1      	bne.n	8005586 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80dd 	beq.w	8005766 <HAL_RCC_OscConfig+0x6ca>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ac:	f7ff fc1d 	bl	8004dea <LL_RCC_GetSysClkSource>
 80055b0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80055b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	2b02      	cmp	r3, #2
 80055c0:	f040 80a6 	bne.w	8005710 <HAL_RCC_OscConfig+0x674>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0203 	and.w	r2, r3, #3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d123      	bne.n	800561a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055dc:	429a      	cmp	r2, r3
 80055de:	d11c      	bne.n	800561a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d114      	bne.n	800561a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d10d      	bne.n	800561a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005608:	429a      	cmp	r2, r3
 800560a:	d106      	bne.n	800561a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005616:	429a      	cmp	r2, r3
 8005618:	d054      	beq.n	80056c4 <HAL_RCC_OscConfig+0x628>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	2b0c      	cmp	r3, #12
 800561e:	d04f      	beq.n	80056c0 <HAL_RCC_OscConfig+0x624>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005620:	f7ff fc8d 	bl	8004f3e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005624:	f7fd f8be 	bl	80027a4 <HAL_GetTick>
 8005628:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x5a2>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800562c:	f7fd f8ba 	bl	80027a4 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x5a2>
              {
                return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e094      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800563e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1ef      	bne.n	800562c <HAL_RCC_OscConfig+0x590>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800564c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	4b35      	ldr	r3, [pc, #212]	; (8005728 <HAL_RCC_OscConfig+0x68c>)
 8005654:	4013      	ands	r3, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800565e:	4311      	orrs	r1, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005664:	0212      	lsls	r2, r2, #8
 8005666:	4311      	orrs	r1, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800566c:	4311      	orrs	r1, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005672:	4311      	orrs	r1, r2
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005678:	430a      	orrs	r2, r1
 800567a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800567e:	4313      	orrs	r3, r2
 8005680:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005682:	f7ff fc4d 	bl	8004f20 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005694:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005696:	f7fd f885 	bl	80027a4 <HAL_GetTick>
 800569a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x614>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800569e:	f7fd f881 	bl	80027a4 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x614>
              {
                return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e05b      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0ef      	beq.n	800569e <HAL_RCC_OscConfig+0x602>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056be:	e052      	b.n	8005766 <HAL_RCC_OscConfig+0x6ca>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e051      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d149      	bne.n	8005766 <HAL_RCC_OscConfig+0x6ca>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056d2:	f7ff fc25 	bl	8004f20 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056e6:	f7fd f85d 	bl	80027a4 <HAL_GetTick>
 80056ea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x664>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ee:	f7fd f859 	bl	80027a4 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x664>
            {
              return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e033      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0ef      	beq.n	80056ee <HAL_RCC_OscConfig+0x652>
 800570e:	e02a      	b.n	8005766 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	2b0c      	cmp	r3, #12
 8005714:	d025      	beq.n	8005762 <HAL_RCC_OscConfig+0x6c6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005716:	f7ff fc12 	bl	8004f3e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571a:	f7fd f843 	bl	80027a4 <HAL_GetTick>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005720:	e00d      	b.n	800573e <HAL_RCC_OscConfig+0x6a2>
 8005722:	bf00      	nop
 8005724:	58000400 	.word	0x58000400
 8005728:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800572c:	f7fd f83a 	bl	80027a4 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x6a2>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e014      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800573e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ef      	bne.n	800572c <HAL_RCC_OscConfig+0x690>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 800574c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	60d3      	str	r3, [r2, #12]
 8005760:	e001      	b.n	8005766 <HAL_RCC_OscConfig+0x6ca>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <HAL_RCC_OscConfig+0x6cc>
      }
    }
  }
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3734      	adds	r7, #52	; 0x34
 800576c:	46bd      	mov	sp, r7
 800576e:	bd90      	pop	{r4, r7, pc}

08005770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e12d      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005784:	4b98      	ldr	r3, [pc, #608]	; (80059e8 <HAL_RCC_ClockConfig+0x278>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d91b      	bls.n	80057ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005792:	4b95      	ldr	r3, [pc, #596]	; (80059e8 <HAL_RCC_ClockConfig+0x278>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f023 0207 	bic.w	r2, r3, #7
 800579a:	4993      	ldr	r1, [pc, #588]	; (80059e8 <HAL_RCC_ClockConfig+0x278>)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	4313      	orrs	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057a2:	f7fc ffff 	bl	80027a4 <HAL_GetTick>
 80057a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057aa:	f7fc fffb 	bl	80027a4 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e111      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057bc:	4b8a      	ldr	r3, [pc, #552]	; (80059e8 <HAL_RCC_ClockConfig+0x278>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d1ef      	bne.n	80057aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff fb11 	bl	8004e02 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057e0:	f7fc ffe0 	bl	80027a4 <HAL_GetTick>
 80057e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057e8:	f7fc ffdc 	bl	80027a4 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e0f2      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057fa:	f7ff fbf2 	bl	8004fe2 <LL_RCC_IsActiveFlag_HPRE>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0f1      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d016      	beq.n	800583e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fb08 	bl	8004e2a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800581a:	f7fc ffc3 	bl	80027a4 <HAL_GetTick>
 800581e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005820:	e008      	b.n	8005834 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005822:	f7fc ffbf 	bl	80027a4 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e0d5      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005834:	f7ff fbe7 	bl	8005006 <LL_RCC_IsActiveFlag_C2HPRE>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f1      	beq.n	8005822 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff fb01 	bl	8004e56 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005854:	f7fc ffa6 	bl	80027a4 <HAL_GetTick>
 8005858:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800585a:	e008      	b.n	800586e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800585c:	f7fc ffa2 	bl	80027a4 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e0b8      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800586e:	f7ff fbdd 	bl	800502c <LL_RCC_IsActiveFlag_SHDHPRE>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f1      	beq.n	800585c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d016      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff fafb 	bl	8004e84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800588e:	f7fc ff89 	bl	80027a4 <HAL_GetTick>
 8005892:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005896:	f7fc ff85 	bl	80027a4 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e09b      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80058a8:	f7ff fbd3 	bl	8005052 <LL_RCC_IsActiveFlag_PPRE1>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f1      	beq.n	8005896 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d017      	beq.n	80058ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff faf1 	bl	8004eac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80058ca:	f7fc ff6b 	bl	80027a4 <HAL_GetTick>
 80058ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80058d2:	f7fc ff67 	bl	80027a4 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e07d      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80058e4:	f7ff fbc7 	bl	8005076 <LL_RCC_IsActiveFlag_PPRE2>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f1      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d043      	beq.n	8005982 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d106      	bne.n	8005910 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005902:	f7ff f891 	bl	8004a28 <LL_RCC_HSE_IsReady>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11e      	bne.n	800594a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e067      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b03      	cmp	r3, #3
 8005916:	d106      	bne.n	8005926 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005918:	f7ff fb20 	bl	8004f5c <LL_RCC_PLL_IsReady>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d113      	bne.n	800594a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e05c      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800592e:	f7ff f9f9 	bl	8004d24 <LL_RCC_MSI_IsReady>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d108      	bne.n	800594a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e051      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800593c:	f7ff f8a4 	bl	8004a88 <LL_RCC_HSI_IsReady>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e04a      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff fa37 	bl	8004dc2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005954:	f7fc ff26 	bl	80027a4 <HAL_GetTick>
 8005958:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595a:	e00a      	b.n	8005972 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595c:	f7fc ff22 	bl	80027a4 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	; 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e036      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005972:	f7ff fa3a 	bl	8004dea <LL_RCC_GetSysClkSource>
 8005976:	4602      	mov	r2, r0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	429a      	cmp	r2, r3
 8005980:	d1ec      	bne.n	800595c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005982:	4b19      	ldr	r3, [pc, #100]	; (80059e8 <HAL_RCC_ClockConfig+0x278>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d21b      	bcs.n	80059c8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005990:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <HAL_RCC_ClockConfig+0x278>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f023 0207 	bic.w	r2, r3, #7
 8005998:	4913      	ldr	r1, [pc, #76]	; (80059e8 <HAL_RCC_ClockConfig+0x278>)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	4313      	orrs	r3, r2
 800599e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a0:	f7fc ff00 	bl	80027a4 <HAL_GetTick>
 80059a4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80059a8:	f7fc fefc 	bl	80027a4 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e012      	b.n	80059e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ba:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <HAL_RCC_ClockConfig+0x278>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d1ef      	bne.n	80059a8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80059c8:	f000 f87e 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 80059cc:	4603      	mov	r3, r0
 80059ce:	4a07      	ldr	r2, [pc, #28]	; (80059ec <HAL_RCC_ClockConfig+0x27c>)
 80059d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80059d2:	f7fc fef3 	bl	80027bc <HAL_GetTickPrio>
 80059d6:	4603      	mov	r3, r0
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fc fe95 	bl	8002708 <HAL_InitTick>
 80059de:	4603      	mov	r3, r0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	58004000 	.word	0x58004000
 80059ec:	20000004 	.word	0x20000004

080059f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f0:	b590      	push	{r4, r7, lr}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059f6:	f7ff f9f8 	bl	8004dea <LL_RCC_GetSysClkSource>
 80059fa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a02:	f7ff f9b4 	bl	8004d6e <LL_RCC_MSI_GetRange>
 8005a06:	4603      	mov	r3, r0
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	4a2b      	ldr	r2, [pc, #172]	; (8005abc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	e04b      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d102      	bne.n	8005a24 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a1e:	4b28      	ldr	r3, [pc, #160]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	e045      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d10a      	bne.n	8005a40 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a2a:	f7fe ffcd 	bl	80049c8 <LL_RCC_HSE_IsEnabledDiv2>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d102      	bne.n	8005a3a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005a34:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e03a      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005a3a:	4b22      	ldr	r3, [pc, #136]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	e037      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005a40:	f7ff fac3 	bl	8004fca <LL_RCC_PLL_GetMainSource>
 8005a44:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d003      	beq.n	8005a54 <HAL_RCC_GetSysClockFreq+0x64>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d003      	beq.n	8005a5a <HAL_RCC_GetSysClockFreq+0x6a>
 8005a52:	e00d      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005a54:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a56:	60bb      	str	r3, [r7, #8]
        break;
 8005a58:	e015      	b.n	8005a86 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a5a:	f7fe ffb5 	bl	80049c8 <LL_RCC_HSE_IsEnabledDiv2>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d102      	bne.n	8005a6a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005a64:	4b16      	ldr	r3, [pc, #88]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a66:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005a68:	e00d      	b.n	8005a86 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005a6a:	4b16      	ldr	r3, [pc, #88]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a6c:	60bb      	str	r3, [r7, #8]
        break;
 8005a6e:	e00a      	b.n	8005a86 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a70:	f7ff f97d 	bl	8004d6e <LL_RCC_MSI_GetRange>
 8005a74:	4603      	mov	r3, r0
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	4a0f      	ldr	r2, [pc, #60]	; (8005abc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a82:	60bb      	str	r3, [r7, #8]
        break;
 8005a84:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005a86:	f7ff fa7b 	bl	8004f80 <LL_RCC_PLL_GetN>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	fb03 f402 	mul.w	r4, r3, r2
 8005a92:	f7ff fa8e 	bl	8004fb2 <LL_RCC_PLL_GetDivider>
 8005a96:	4603      	mov	r3, r0
 8005a98:	091b      	lsrs	r3, r3, #4
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005aa0:	f7ff fa7b 	bl	8004f9a <LL_RCC_PLL_GetR>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	0f5b      	lsrs	r3, r3, #29
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	fbb4 f3f3 	udiv	r3, r4, r3
 8005aae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd90      	pop	{r4, r7, pc}
 8005aba:	bf00      	nop
 8005abc:	0800cec8 	.word	0x0800cec8
 8005ac0:	00f42400 	.word	0x00f42400
 8005ac4:	01e84800 	.word	0x01e84800

08005ac8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac8:	b598      	push	{r3, r4, r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005acc:	f7ff ff90 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	f7ff f9ff 	bl	8004ed4 <LL_RCC_GetAHBPrescaler>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	4a03      	ldr	r2, [pc, #12]	; (8005aec <HAL_RCC_GetHCLKFreq+0x24>)
 8005ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	bd98      	pop	{r3, r4, r7, pc}
 8005aec:	0800ce68 	.word	0x0800ce68

08005af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af0:	b598      	push	{r3, r4, r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005af4:	f7ff ffe8 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8005af8:	4604      	mov	r4, r0
 8005afa:	f7ff fa05 	bl	8004f08 <LL_RCC_GetAPB2Prescaler>
 8005afe:	4603      	mov	r3, r0
 8005b00:	0adb      	lsrs	r3, r3, #11
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd98      	pop	{r3, r4, r7, pc}
 8005b18:	0800cea8 	.word	0x0800cea8

08005b1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2bb0      	cmp	r3, #176	; 0xb0
 8005b28:	d903      	bls.n	8005b32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005b2a:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e007      	b.n	8005b42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	4a10      	ldr	r2, [pc, #64]	; (8005b7c <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005b42:	f7ff f9d3 	bl	8004eec <LL_RCC_GetAHB4Prescaler>
 8005b46:	4603      	mov	r3, r0
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	4a0c      	ldr	r2, [pc, #48]	; (8005b80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005b60:	fba2 2303 	umull	r2, r3, r2, r3
 8005b64:	0c9b      	lsrs	r3, r3, #18
 8005b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f80c 	bl	8005b88 <RCC_SetFlashLatency>
 8005b70:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	0800cec8 	.word	0x0800cec8
 8005b80:	0800ce68 	.word	0x0800ce68
 8005b84:	431bde83 	.word	0x431bde83

08005b88 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005b88:	b590      	push	{r4, r7, lr}
 8005b8a:	b08f      	sub	sp, #60	; 0x3c
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005b92:	4b24      	ldr	r3, [pc, #144]	; (8005c24 <RCC_SetFlashLatency+0x9c>)
 8005b94:	f107 041c 	add.w	r4, r7, #28
 8005b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005b9e:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <RCC_SetFlashLatency+0xa0>)
 8005ba0:	f107 040c 	add.w	r4, r7, #12
 8005ba4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005baa:	2300      	movs	r3, #0
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005bae:	2300      	movs	r3, #0
 8005bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb2:	e013      	b.n	8005bdc <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	3338      	adds	r3, #56	; 0x38
 8005bba:	443b      	add	r3, r7
 8005bbc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d807      	bhi.n	8005bd6 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	3338      	adds	r3, #56	; 0x38
 8005bcc:	443b      	add	r3, r7
 8005bce:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005bd2:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005bd4:	e005      	b.n	8005be2 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	3301      	adds	r3, #1
 8005bda:	633b      	str	r3, [r7, #48]	; 0x30
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d9e8      	bls.n	8005bb4 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005be2:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <RCC_SetFlashLatency+0xa4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f023 0207 	bic.w	r2, r3, #7
 8005bea:	4910      	ldr	r1, [pc, #64]	; (8005c2c <RCC_SetFlashLatency+0xa4>)
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bf2:	f7fc fdd7 	bl	80027a4 <HAL_GetTick>
 8005bf6:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005bf8:	e008      	b.n	8005c0c <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005bfa:	f7fc fdd3 	bl	80027a4 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e007      	b.n	8005c1c <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c0c:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <RCC_SetFlashLatency+0xa4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d1ef      	bne.n	8005bfa <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	373c      	adds	r7, #60	; 0x3c
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd90      	pop	{r4, r7, pc}
 8005c24:	0800ce48 	.word	0x0800ce48
 8005c28:	0800ce58 	.word	0x0800ce58
 8005c2c:	58004000 	.word	0x58004000

08005c30 <LL_RCC_LSE_IsEnabled>:
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <LL_RCC_LSE_IsEnabled+0x18>
 8005c44:	2301      	movs	r3, #1
 8005c46:	e000      	b.n	8005c4a <LL_RCC_LSE_IsEnabled+0x1a>
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <LL_RCC_LSE_IsReady>:
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d101      	bne.n	8005c6c <LL_RCC_LSE_IsReady+0x18>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <LL_RCC_LSE_IsReady+0x1a>
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <LL_RCC_SetRFWKPClockSource>:
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <LL_RCC_SetUSARTClockSource>:
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb4:	f023 0203 	bic.w	r2, r3, #3
 8005cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <LL_RCC_SetI2CClockSource>:
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	091b      	lsrs	r3, r3, #4
 8005ce4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	401a      	ands	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <LL_RCC_SetLPTIMClockSource>:
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	43db      	mvns	r3, r3
 8005d22:	401a      	ands	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <LL_RCC_SetRNGClockSource>:
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <LL_RCC_SetCLK48ClockSource>:
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <LL_RCC_SetADCClockSource>:
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <LL_RCC_SetRTCClockSource>:
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <LL_RCC_GetRTCClockSource>:
{
 8005dee:	b480      	push	{r7}
 8005df0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <LL_RCC_ForceBackupDomainReset>:
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e20:	bf00      	nop
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <LL_RCC_ReleaseBackupDomainReset>:
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005e54:	2300      	movs	r3, #0
 8005e56:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d046      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005e68:	f7ff ffc1 	bl	8005dee <LL_RCC_GetRTCClockSource>
 8005e6c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d03c      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005e78:	f7fe fd96 	bl	80049a8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d105      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff ff9b 	bl	8005dc2 <LL_RCC_SetRTCClockSource>
 8005e8c:	e02e      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005e98:	f7ff ffb6 	bl	8005e08 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005e9c:	f7ff ffc5 	bl	8005e2a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005eb8:	f7ff feba 	bl	8005c30 <LL_RCC_LSE_IsEnabled>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d114      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ec2:	f7fc fc6f 	bl	80027a4 <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ec8:	e00b      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eca:	f7fc fc6b 	bl	80027a4 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d902      	bls.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	77fb      	strb	r3, [r7, #31]
              break;
 8005ee0:	e004      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ee2:	f7ff feb7 	bl	8005c54 <LL_RCC_LSE_IsReady>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d1ee      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005eec:	7ffb      	ldrb	r3, [r7, #31]
 8005eee:	77bb      	strb	r3, [r7, #30]
 8005ef0:	e001      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef2:	7ffb      	ldrb	r3, [r7, #31]
 8005ef4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d004      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fecc 	bl	8005ca4 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fef4 	bl	8005d0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d004      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fee9 	bl	8005d0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff fec1 	bl	8005cd0 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d02b      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f62:	d008      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f6c:	d003      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d105      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff fedf 	bl	8005d3e <LL_RCC_SetRNGClockSource>
 8005f80:	e00a      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	f7ff fed6 	bl	8005d3e <LL_RCC_SetRNGClockSource>
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7ff fee9 	bl	8005d6a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005fa0:	d107      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fb0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d011      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff fee7 	bl	8005d96 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fd0:	d107      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe0:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fe40 	bl	8005c78 <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005ff8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e095      	b.n	8006140 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	2b00      	cmp	r3, #0
 800601a:	d108      	bne.n	800602e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006024:	d009      	beq.n	800603a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	61da      	str	r2, [r3, #28]
 800602c:	e005      	b.n	800603a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7fc f86f 	bl	8002138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006070:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800607a:	d902      	bls.n	8006082 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	e002      	b.n	8006088 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006086:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006090:	d007      	beq.n	80060a2 <HAL_SPI_Init+0xa0>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800609a:	d002      	beq.n	80060a2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e4:	ea42 0103 	orr.w	r1, r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	f003 0204 	and.w	r2, r3, #4
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800611e:	ea42 0103 	orr.w	r1, r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_SPI_Transmit_DMA+0x20>
 8006164:	2302      	movs	r3, #2
 8006166:	e0d8      	b.n	800631a <HAL_SPI_Transmit_DMA+0x1d2>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b01      	cmp	r3, #1
 800617a:	d002      	beq.n	8006182 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800617c:	2302      	movs	r3, #2
 800617e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006180:	e0c6      	b.n	8006310 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_SPI_Transmit_DMA+0x46>
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006192:	e0bd      	b.n	8006310 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2203      	movs	r2, #3
 8006198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	88fa      	ldrh	r2, [r7, #6]
 80061ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061de:	d10f      	bne.n	8006200 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006204:	4a47      	ldr	r2, [pc, #284]	; (8006324 <HAL_SPI_Transmit_DMA+0x1dc>)
 8006206:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620c:	4a46      	ldr	r2, [pc, #280]	; (8006328 <HAL_SPI_Transmit_DMA+0x1e0>)
 800620e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006214:	4a45      	ldr	r2, [pc, #276]	; (800632c <HAL_SPI_Transmit_DMA+0x1e4>)
 8006216:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	2200      	movs	r2, #0
 800621e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800622e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006238:	d82d      	bhi.n	8006296 <HAL_SPI_Transmit_DMA+0x14e>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006244:	d127      	bne.n	8006296 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800624a:	b29b      	uxth	r3, r3
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10f      	bne.n	8006274 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006262:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006268:	b29b      	uxth	r3, r3
 800626a:	085b      	lsrs	r3, r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006272:	e010      	b.n	8006296 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006282:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006288:	b29b      	uxth	r3, r3
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	b29b      	uxth	r3, r3
 800628e:	3301      	adds	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	4619      	mov	r1, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	330c      	adds	r3, #12
 80062a6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ac:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80062ae:	f7fd fe31 	bl	8003f14 <HAL_DMA_Start_IT>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00c      	beq.n	80062d2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062bc:	f043 0210 	orr.w	r2, r3, #16
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80062d0:	e01e      	b.n	8006310 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d007      	beq.n	80062f0 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ee:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0220 	orr.w	r2, r2, #32
 80062fe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0202 	orr.w	r2, r2, #2
 800630e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	08006413 	.word	0x08006413
 8006328:	0800636d 	.word	0x0800636d
 800632c:	0800642f 	.word	0x0800642f

08006330 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800637a:	f7fc fa13 	bl	80027a4 <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b20      	cmp	r3, #32
 800638c:	d03b      	beq.n	8006406 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0220 	bic.w	r2, r2, #32
 800639c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0202 	bic.w	r2, r2, #2
 80063ac:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	2164      	movs	r1, #100	; 0x64
 80063b2:	6978      	ldr	r0, [r7, #20]
 80063b4:	f000 f97a 	bl	80066ac <SPI_EndRxTxTransaction>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c2:	f043 0220 	orr.w	r2, r3, #32
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2200      	movs	r2, #0
 80063ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80063fe:	6978      	ldr	r0, [r7, #20]
 8006400:	f7ff ffaa 	bl	8006358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006404:	e002      	b.n	800640c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006406:	6978      	ldr	r0, [r7, #20]
 8006408:	f7ff ff92 	bl	8006330 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f7ff ff8f 	bl	8006344 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006426:	bf00      	nop
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0203 	bic.w	r2, r2, #3
 800644a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006450:	f043 0210 	orr.w	r2, r3, #16
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7ff ff79 	bl	8006358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006480:	f7fc f990 	bl	80027a4 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	4413      	add	r3, r2
 800648e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006490:	f7fc f988 	bl	80027a4 <HAL_GetTick>
 8006494:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006496:	4b39      	ldr	r3, [pc, #228]	; (800657c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	015b      	lsls	r3, r3, #5
 800649c:	0d1b      	lsrs	r3, r3, #20
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	fb02 f303 	mul.w	r3, r2, r3
 80064a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064a6:	e054      	b.n	8006552 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d050      	beq.n	8006552 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064b0:	f7fc f978 	bl	80027a4 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d902      	bls.n	80064c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d13d      	bne.n	8006542 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064de:	d111      	bne.n	8006504 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e8:	d004      	beq.n	80064f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f2:	d107      	bne.n	8006504 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006502:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650c:	d10f      	bne.n	800652e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800652c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e017      	b.n	8006572 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	3b01      	subs	r3, #1
 8006550:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4013      	ands	r3, r2
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	429a      	cmp	r2, r3
 8006560:	bf0c      	ite	eq
 8006562:	2301      	moveq	r3, #1
 8006564:	2300      	movne	r3, #0
 8006566:	b2db      	uxtb	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	429a      	cmp	r2, r3
 800656e:	d19b      	bne.n	80064a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3720      	adds	r7, #32
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20000004 	.word	0x20000004

08006580 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08a      	sub	sp, #40	; 0x28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006592:	f7fc f907 	bl	80027a4 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	1a9b      	subs	r3, r3, r2
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	4413      	add	r3, r2
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80065a2:	f7fc f8ff 	bl	80027a4 <HAL_GetTick>
 80065a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80065b0:	4b3d      	ldr	r3, [pc, #244]	; (80066a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	00da      	lsls	r2, r3, #3
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	0d1b      	lsrs	r3, r3, #20
 80065c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80065c8:	e060      	b.n	800668c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80065d0:	d107      	bne.n	80065e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d050      	beq.n	800668c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065ea:	f7fc f8db 	bl	80027a4 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d902      	bls.n	8006600 <SPI_WaitFifoStateUntilTimeout+0x80>
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d13d      	bne.n	800667c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800660e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006618:	d111      	bne.n	800663e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006622:	d004      	beq.n	800662e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800662c:	d107      	bne.n	800663e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800663c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006646:	d10f      	bne.n	8006668 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006666:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e010      	b.n	800669e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	3b01      	subs	r3, #1
 800668a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4013      	ands	r3, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	429a      	cmp	r2, r3
 800669a:	d196      	bne.n	80065ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3728      	adds	r7, #40	; 0x28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000004 	.word	0x20000004

080066ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2200      	movs	r2, #0
 80066c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff ff5b 	bl	8006580 <SPI_WaitFifoStateUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d007      	beq.n	80066e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d4:	f043 0220 	orr.w	r2, r3, #32
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e027      	b.n	8006730 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2200      	movs	r2, #0
 80066e8:	2180      	movs	r1, #128	; 0x80
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff fec0 	bl	8006470 <SPI_WaitFlagStateUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e014      	b.n	8006730 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2200      	movs	r2, #0
 800670e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7ff ff34 	bl	8006580 <SPI_WaitFifoStateUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d007      	beq.n	800672e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006722:	f043 0220 	orr.w	r2, r3, #32
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e000      	b.n	8006730 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e049      	b.n	80067de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fb fe48 	bl	80023f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3304      	adds	r3, #4
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f000 fa46 	bl	8006c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d122      	bne.n	8006842 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b02      	cmp	r3, #2
 8006808:	d11b      	bne.n	8006842 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f06f 0202 	mvn.w	r2, #2
 8006812:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f9ce 	bl	8006bca <HAL_TIM_IC_CaptureCallback>
 800682e:	e005      	b.n	800683c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f9c0 	bl	8006bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f9d1 	bl	8006bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b04      	cmp	r3, #4
 800684e:	d122      	bne.n	8006896 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b04      	cmp	r3, #4
 800685c:	d11b      	bne.n	8006896 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f06f 0204 	mvn.w	r2, #4
 8006866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f9a4 	bl	8006bca <HAL_TIM_IC_CaptureCallback>
 8006882:	e005      	b.n	8006890 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f996 	bl	8006bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f9a7 	bl	8006bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d122      	bne.n	80068ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d11b      	bne.n	80068ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f06f 0208 	mvn.w	r2, #8
 80068ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2204      	movs	r2, #4
 80068c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	f003 0303 	and.w	r3, r3, #3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f97a 	bl	8006bca <HAL_TIM_IC_CaptureCallback>
 80068d6:	e005      	b.n	80068e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f96c 	bl	8006bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f97d 	bl	8006bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d122      	bne.n	800693e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b10      	cmp	r3, #16
 8006904:	d11b      	bne.n	800693e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f06f 0210 	mvn.w	r2, #16
 800690e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2208      	movs	r2, #8
 8006914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f950 	bl	8006bca <HAL_TIM_IC_CaptureCallback>
 800692a:	e005      	b.n	8006938 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f942 	bl	8006bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f953 	bl	8006bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b01      	cmp	r3, #1
 800694a:	d10e      	bne.n	800696a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b01      	cmp	r3, #1
 8006958:	d107      	bne.n	800696a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f06f 0201 	mvn.w	r2, #1
 8006962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7fa fcfd 	bl	8001364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006974:	2b80      	cmp	r3, #128	; 0x80
 8006976:	d10e      	bne.n	8006996 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b80      	cmp	r3, #128	; 0x80
 8006984:	d107      	bne.n	8006996 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800698e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 faa3 	bl	8006edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a4:	d10e      	bne.n	80069c4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b0:	2b80      	cmp	r3, #128	; 0x80
 80069b2:	d107      	bne.n	80069c4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fa96 	bl	8006ef0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d10e      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069dc:	2b40      	cmp	r3, #64	; 0x40
 80069de:	d107      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f901 	bl	8006bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d10e      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d107      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f06f 0220 	mvn.w	r2, #32
 8006a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa56 	bl	8006ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a1c:	bf00      	nop
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_TIM_ConfigClockSource+0x1c>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e0b6      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x18a>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006a5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7c:	d03e      	beq.n	8006afc <HAL_TIM_ConfigClockSource+0xd8>
 8006a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a82:	f200 8087 	bhi.w	8006b94 <HAL_TIM_ConfigClockSource+0x170>
 8006a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a8a:	f000 8086 	beq.w	8006b9a <HAL_TIM_ConfigClockSource+0x176>
 8006a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a92:	d87f      	bhi.n	8006b94 <HAL_TIM_ConfigClockSource+0x170>
 8006a94:	2b70      	cmp	r3, #112	; 0x70
 8006a96:	d01a      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0xaa>
 8006a98:	2b70      	cmp	r3, #112	; 0x70
 8006a9a:	d87b      	bhi.n	8006b94 <HAL_TIM_ConfigClockSource+0x170>
 8006a9c:	2b60      	cmp	r3, #96	; 0x60
 8006a9e:	d050      	beq.n	8006b42 <HAL_TIM_ConfigClockSource+0x11e>
 8006aa0:	2b60      	cmp	r3, #96	; 0x60
 8006aa2:	d877      	bhi.n	8006b94 <HAL_TIM_ConfigClockSource+0x170>
 8006aa4:	2b50      	cmp	r3, #80	; 0x50
 8006aa6:	d03c      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0xfe>
 8006aa8:	2b50      	cmp	r3, #80	; 0x50
 8006aaa:	d873      	bhi.n	8006b94 <HAL_TIM_ConfigClockSource+0x170>
 8006aac:	2b40      	cmp	r3, #64	; 0x40
 8006aae:	d058      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x13e>
 8006ab0:	2b40      	cmp	r3, #64	; 0x40
 8006ab2:	d86f      	bhi.n	8006b94 <HAL_TIM_ConfigClockSource+0x170>
 8006ab4:	2b30      	cmp	r3, #48	; 0x30
 8006ab6:	d064      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0x15e>
 8006ab8:	2b30      	cmp	r3, #48	; 0x30
 8006aba:	d86b      	bhi.n	8006b94 <HAL_TIM_ConfigClockSource+0x170>
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d060      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0x15e>
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	d867      	bhi.n	8006b94 <HAL_TIM_ConfigClockSource+0x170>
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d05c      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0x15e>
 8006ac8:	2b10      	cmp	r3, #16
 8006aca:	d05a      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0x15e>
 8006acc:	e062      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6899      	ldr	r1, [r3, #8]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f000 f973 	bl	8006dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006af0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	609a      	str	r2, [r3, #8]
      break;
 8006afa:	e04f      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	6899      	ldr	r1, [r3, #8]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f000 f95c 	bl	8006dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b1e:	609a      	str	r2, [r3, #8]
      break;
 8006b20:	e03c      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	6859      	ldr	r1, [r3, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f000 f8ce 	bl	8006cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2150      	movs	r1, #80	; 0x50
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 f927 	bl	8006d8e <TIM_ITRx_SetConfig>
      break;
 8006b40:	e02c      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	6859      	ldr	r1, [r3, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f000 f8ed 	bl	8006d2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2160      	movs	r1, #96	; 0x60
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f917 	bl	8006d8e <TIM_ITRx_SetConfig>
      break;
 8006b60:	e01c      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	6859      	ldr	r1, [r3, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f000 f8ae 	bl	8006cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2140      	movs	r1, #64	; 0x40
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 f907 	bl	8006d8e <TIM_ITRx_SetConfig>
      break;
 8006b80:	e00c      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	f000 f8fe 	bl	8006d8e <TIM_ITRx_SetConfig>
      break;
 8006b92:	e003      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	73fb      	strb	r3, [r7, #15]
      break;
 8006b98:	e000      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a2a      	ldr	r2, [pc, #168]	; (8006cc4 <TIM_Base_SetConfig+0xbc>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d003      	beq.n	8006c28 <TIM_Base_SetConfig+0x20>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c26:	d108      	bne.n	8006c3a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a21      	ldr	r2, [pc, #132]	; (8006cc4 <TIM_Base_SetConfig+0xbc>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00b      	beq.n	8006c5a <TIM_Base_SetConfig+0x52>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c48:	d007      	beq.n	8006c5a <TIM_Base_SetConfig+0x52>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a1e      	ldr	r2, [pc, #120]	; (8006cc8 <TIM_Base_SetConfig+0xc0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d003      	beq.n	8006c5a <TIM_Base_SetConfig+0x52>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1d      	ldr	r2, [pc, #116]	; (8006ccc <TIM_Base_SetConfig+0xc4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d108      	bne.n	8006c6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a0c      	ldr	r2, [pc, #48]	; (8006cc4 <TIM_Base_SetConfig+0xbc>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d007      	beq.n	8006ca8 <TIM_Base_SetConfig+0xa0>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a0b      	ldr	r2, [pc, #44]	; (8006cc8 <TIM_Base_SetConfig+0xc0>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d003      	beq.n	8006ca8 <TIM_Base_SetConfig+0xa0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a0a      	ldr	r2, [pc, #40]	; (8006ccc <TIM_Base_SetConfig+0xc4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d103      	bne.n	8006cb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	615a      	str	r2, [r3, #20]
}
 8006cb6:	bf00      	nop
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40014400 	.word	0x40014400
 8006ccc:	40014800 	.word	0x40014800

08006cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f023 0201 	bic.w	r2, r3, #1
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f023 030a 	bic.w	r3, r3, #10
 8006d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	621a      	str	r2, [r3, #32]
}
 8006d22:	bf00      	nop
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b087      	sub	sp, #28
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f023 0210 	bic.w	r2, r3, #16
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	031b      	lsls	r3, r3, #12
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	621a      	str	r2, [r3, #32]
}
 8006d82:	bf00      	nop
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f043 0307 	orr.w	r3, r3, #7
 8006db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	609a      	str	r2, [r3, #8]
}
 8006dbc:	bf00      	nop
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	021a      	lsls	r2, r3, #8
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	609a      	str	r2, [r3, #8]
}
 8006dfc:	bf00      	nop
 8006dfe:	371c      	adds	r7, #28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e04a      	b.n	8006eb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a1f      	ldr	r2, [pc, #124]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d108      	bne.n	8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a12      	ldr	r2, [pc, #72]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d004      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e88:	d10c      	bne.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40012c00 	.word	0x40012c00

08006ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <LL_RCC_GetUSARTClockSource>:
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4013      	ands	r3, r2
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e042      	b.n	8006fbc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d106      	bne.n	8006f4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7fb fae9 	bl	8002520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2224      	movs	r2, #36	; 0x24
 8006f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0201 	bic.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fc90 	bl	800788c <UART_SetConfig>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d101      	bne.n	8006f76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e022      	b.n	8006fbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fdc0 	bl	8007b04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fe47 	bl	8007c48 <UART_CheckIdleState>
 8006fba:	4603      	mov	r3, r0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08a      	sub	sp, #40	; 0x28
 8006fc8:	af02      	add	r7, sp, #8
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fda:	2b20      	cmp	r3, #32
 8006fdc:	d17b      	bne.n	80070d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <HAL_UART_Transmit+0x26>
 8006fe4:	88fb      	ldrh	r3, [r7, #6]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e074      	b.n	80070d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2221      	movs	r2, #33	; 0x21
 8006ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ffe:	f7fb fbd1 	bl	80027a4 <HAL_GetTick>
 8007002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	88fa      	ldrh	r2, [r7, #6]
 8007008:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	88fa      	ldrh	r2, [r7, #6]
 8007010:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701c:	d108      	bne.n	8007030 <HAL_UART_Transmit+0x6c>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d104      	bne.n	8007030 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	e003      	b.n	8007038 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007034:	2300      	movs	r3, #0
 8007036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007038:	e030      	b.n	800709c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2200      	movs	r2, #0
 8007042:	2180      	movs	r1, #128	; 0x80
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 fea9 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e03d      	b.n	80070d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10b      	bne.n	800707a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007070:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	3302      	adds	r3, #2
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	e007      	b.n	800708a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	3301      	adds	r3, #1
 8007088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1c8      	bne.n	800703a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2200      	movs	r2, #0
 80070b0:	2140      	movs	r1, #64	; 0x40
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fe72 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e006      	b.n	80070d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e000      	b.n	80070d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80070d6:	2302      	movs	r3, #2
  }
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3720      	adds	r7, #32
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b091      	sub	sp, #68	; 0x44
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	4613      	mov	r3, r2
 80070ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d178      	bne.n	80071ea <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <HAL_UART_Transmit_IT+0x24>
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e071      	b.n	80071ec <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	88fa      	ldrh	r2, [r7, #6]
 8007112:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	88fa      	ldrh	r2, [r7, #6]
 800711a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2221      	movs	r2, #33	; 0x21
 8007130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800713c:	d12a      	bne.n	8007194 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007146:	d107      	bne.n	8007158 <HAL_UART_Transmit_IT+0x78>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d103      	bne.n	8007158 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4a29      	ldr	r2, [pc, #164]	; (80071f8 <HAL_UART_Transmit_IT+0x118>)
 8007154:	679a      	str	r2, [r3, #120]	; 0x78
 8007156:	e002      	b.n	800715e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4a28      	ldr	r2, [pc, #160]	; (80071fc <HAL_UART_Transmit_IT+0x11c>)
 800715c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3308      	adds	r3, #8
 8007164:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007174:	63bb      	str	r3, [r7, #56]	; 0x38
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3308      	adds	r3, #8
 800717c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800717e:	637a      	str	r2, [r7, #52]	; 0x34
 8007180:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e5      	bne.n	800715e <HAL_UART_Transmit_IT+0x7e>
 8007192:	e028      	b.n	80071e6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800719c:	d107      	bne.n	80071ae <HAL_UART_Transmit_IT+0xce>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d103      	bne.n	80071ae <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4a15      	ldr	r2, [pc, #84]	; (8007200 <HAL_UART_Transmit_IT+0x120>)
 80071aa:	679a      	str	r2, [r3, #120]	; 0x78
 80071ac:	e002      	b.n	80071b4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4a14      	ldr	r2, [pc, #80]	; (8007204 <HAL_UART_Transmit_IT+0x124>)
 80071b2:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	613b      	str	r3, [r7, #16]
   return(result);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d2:	623b      	str	r3, [r7, #32]
 80071d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	69f9      	ldr	r1, [r7, #28]
 80071d8:	6a3a      	ldr	r2, [r7, #32]
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	61bb      	str	r3, [r7, #24]
   return(result);
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e6      	bne.n	80071b4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	e000      	b.n	80071ec <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80071ea:	2302      	movs	r3, #2
  }
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3744      	adds	r7, #68	; 0x44
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	08008403 	.word	0x08008403
 80071fc:	08008323 	.word	0x08008323
 8007200:	08008261 	.word	0x08008261
 8007204:	080081a9 	.word	0x080081a9

08007208 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b0ba      	sub	sp, #232	; 0xe8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800722e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007232:	f640 030f 	movw	r3, #2063	; 0x80f
 8007236:	4013      	ands	r3, r2
 8007238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800723c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d11b      	bne.n	800727c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d015      	beq.n	800727c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b00      	cmp	r3, #0
 800725a:	d105      	bne.n	8007268 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800725c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d009      	beq.n	800727c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 82e3 	beq.w	8007838 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	4798      	blx	r3
      }
      return;
 800727a:	e2dd      	b.n	8007838 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800727c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 8123 	beq.w	80074cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007286:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800728a:	4b8d      	ldr	r3, [pc, #564]	; (80074c0 <HAL_UART_IRQHandler+0x2b8>)
 800728c:	4013      	ands	r3, r2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007292:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007296:	4b8b      	ldr	r3, [pc, #556]	; (80074c4 <HAL_UART_IRQHandler+0x2bc>)
 8007298:	4013      	ands	r3, r2
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 8116 	beq.w	80074cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d011      	beq.n	80072d0 <HAL_UART_IRQHandler+0xc8>
 80072ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00b      	beq.n	80072d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2201      	movs	r2, #1
 80072be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c6:	f043 0201 	orr.w	r2, r3, #1
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d011      	beq.n	8007300 <HAL_UART_IRQHandler+0xf8>
 80072dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00b      	beq.n	8007300 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2202      	movs	r2, #2
 80072ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f6:	f043 0204 	orr.w	r2, r3, #4
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d011      	beq.n	8007330 <HAL_UART_IRQHandler+0x128>
 800730c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2204      	movs	r2, #4
 800731e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007326:	f043 0202 	orr.w	r2, r3, #2
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b00      	cmp	r3, #0
 800733a:	d017      	beq.n	800736c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800733c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d105      	bne.n	8007354 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007348:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800734c:	4b5c      	ldr	r3, [pc, #368]	; (80074c0 <HAL_UART_IRQHandler+0x2b8>)
 800734e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00b      	beq.n	800736c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2208      	movs	r2, #8
 800735a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007362:	f043 0208 	orr.w	r2, r3, #8
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800736c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007374:	2b00      	cmp	r3, #0
 8007376:	d012      	beq.n	800739e <HAL_UART_IRQHandler+0x196>
 8007378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00c      	beq.n	800739e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800738c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007394:	f043 0220 	orr.w	r2, r3, #32
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8249 	beq.w	800783c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d013      	beq.n	80073de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d105      	bne.n	80073ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d007      	beq.n	80073de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f2:	2b40      	cmp	r3, #64	; 0x40
 80073f4:	d005      	beq.n	8007402 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d054      	beq.n	80074ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fe54 	bl	80080b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007412:	2b40      	cmp	r3, #64	; 0x40
 8007414:	d146      	bne.n	80074a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3308      	adds	r3, #8
 800741c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800742c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3308      	adds	r3, #8
 800743e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007442:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800744e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800745a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1d9      	bne.n	8007416 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007468:	2b00      	cmp	r3, #0
 800746a:	d017      	beq.n	800749c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007472:	4a15      	ldr	r2, [pc, #84]	; (80074c8 <HAL_UART_IRQHandler+0x2c0>)
 8007474:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800747c:	4618      	mov	r0, r3
 800747e:	f7fc fe23 	bl	80040c8 <HAL_DMA_Abort_IT>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d019      	beq.n	80074bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007496:	4610      	mov	r0, r2
 8007498:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749a:	e00f      	b.n	80074bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f9eb 	bl	8007878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a2:	e00b      	b.n	80074bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f9e7 	bl	8007878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074aa:	e007      	b.n	80074bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f9e3 	bl	8007878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80074ba:	e1bf      	b.n	800783c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074bc:	bf00      	nop
    return;
 80074be:	e1bd      	b.n	800783c <HAL_UART_IRQHandler+0x634>
 80074c0:	10000001 	.word	0x10000001
 80074c4:	04000120 	.word	0x04000120
 80074c8:	0800817d 	.word	0x0800817d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	f040 8153 	bne.w	800777c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80074d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074da:	f003 0310 	and.w	r3, r3, #16
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 814c 	beq.w	800777c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e8:	f003 0310 	and.w	r3, r3, #16
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8145 	beq.w	800777c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2210      	movs	r2, #16
 80074f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007504:	2b40      	cmp	r3, #64	; 0x40
 8007506:	f040 80bb 	bne.w	8007680 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007518:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 818f 	beq.w	8007840 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007528:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800752c:	429a      	cmp	r2, r3
 800752e:	f080 8187 	bcs.w	8007840 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007538:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b00      	cmp	r3, #0
 800754c:	f040 8087 	bne.w	800765e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800756c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800757a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800757e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007586:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800758a:	e841 2300 	strex	r3, r2, [r1]
 800758e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1da      	bne.n	8007550 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3308      	adds	r3, #8
 80075a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075ac:	f023 0301 	bic.w	r3, r3, #1
 80075b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3308      	adds	r3, #8
 80075ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e1      	bne.n	800759a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3308      	adds	r3, #8
 80075dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3308      	adds	r3, #8
 80075f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007600:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e3      	bne.n	80075d6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2220      	movs	r2, #32
 8007612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800762a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800762c:	f023 0310 	bic.w	r3, r3, #16
 8007630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800763e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007640:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007644:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800764c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e4      	bne.n	800761c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007658:	4618      	mov	r0, r3
 800765a:	f7fc fcd6 	bl	800400a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2202      	movs	r2, #2
 8007662:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007670:	b29b      	uxth	r3, r3
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	b29b      	uxth	r3, r3
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7f9 fff9 	bl	8001670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800767e:	e0df      	b.n	8007840 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800768c:	b29b      	uxth	r3, r3
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800769a:	b29b      	uxth	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 80d1 	beq.w	8007844 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80076a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 80cc 	beq.w	8007844 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076ce:	647b      	str	r3, [r7, #68]	; 0x44
 80076d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e4      	bne.n	80076ac <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3308      	adds	r3, #8
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	623b      	str	r3, [r7, #32]
   return(result);
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3308      	adds	r3, #8
 8007706:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800770a:	633a      	str	r2, [r7, #48]	; 0x30
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e1      	bne.n	80076e2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0310 	bic.w	r3, r3, #16
 8007746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007754:	61fb      	str	r3, [r7, #28]
 8007756:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007758:	69b9      	ldr	r1, [r7, #24]
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	617b      	str	r3, [r7, #20]
   return(result);
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e4      	bne.n	8007732 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800776e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7f9 ff7b 	bl	8001670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800777a:	e063      	b.n	8007844 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800777c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00e      	beq.n	80077a6 <HAL_UART_IRQHandler+0x59e>
 8007788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800778c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d008      	beq.n	80077a6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800779c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 fbd0 	bl	8008f44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077a4:	e051      	b.n	800784a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80077a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d014      	beq.n	80077dc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80077b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d105      	bne.n	80077ca <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80077be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d03a      	beq.n	8007848 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	4798      	blx	r3
    }
    return;
 80077da:	e035      	b.n	8007848 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80077dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d009      	beq.n	80077fc <HAL_UART_IRQHandler+0x5f4>
 80077e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fe79 	bl	80084ec <UART_EndTransmit_IT>
    return;
 80077fa:	e026      	b.n	800784a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80077fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d009      	beq.n	800781c <HAL_UART_IRQHandler+0x614>
 8007808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800780c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 fba9 	bl	8008f6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800781a:	e016      	b.n	800784a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800781c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d010      	beq.n	800784a <HAL_UART_IRQHandler+0x642>
 8007828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782c:	2b00      	cmp	r3, #0
 800782e:	da0c      	bge.n	800784a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f001 fb91 	bl	8008f58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007836:	e008      	b.n	800784a <HAL_UART_IRQHandler+0x642>
      return;
 8007838:	bf00      	nop
 800783a:	e006      	b.n	800784a <HAL_UART_IRQHandler+0x642>
    return;
 800783c:	bf00      	nop
 800783e:	e004      	b.n	800784a <HAL_UART_IRQHandler+0x642>
      return;
 8007840:	bf00      	nop
 8007842:	e002      	b.n	800784a <HAL_UART_IRQHandler+0x642>
      return;
 8007844:	bf00      	nop
 8007846:	e000      	b.n	800784a <HAL_UART_IRQHandler+0x642>
    return;
 8007848:	bf00      	nop
  }
}
 800784a:	37e8      	adds	r7, #232	; 0xe8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	4b8f      	ldr	r3, [pc, #572]	; (8007af4 <UART_SetConfig+0x268>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6812      	ldr	r2, [r2, #0]
 80078be:	6979      	ldr	r1, [r7, #20]
 80078c0:	430b      	orrs	r3, r1
 80078c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	617b      	str	r3, [r7, #20]
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80078f4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6812      	ldr	r2, [r2, #0]
 80078fc:	6979      	ldr	r1, [r7, #20]
 80078fe:	430b      	orrs	r3, r1
 8007900:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	f023 010f 	bic.w	r1, r3, #15
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a76      	ldr	r2, [pc, #472]	; (8007af8 <UART_SetConfig+0x26c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d11f      	bne.n	8007962 <UART_SetConfig+0xd6>
 8007922:	2003      	movs	r0, #3
 8007924:	f7ff faee 	bl	8006f04 <LL_RCC_GetUSARTClockSource>
 8007928:	4603      	mov	r3, r0
 800792a:	2b03      	cmp	r3, #3
 800792c:	d816      	bhi.n	800795c <UART_SetConfig+0xd0>
 800792e:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <UART_SetConfig+0xa8>)
 8007930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007934:	08007945 	.word	0x08007945
 8007938:	08007951 	.word	0x08007951
 800793c:	0800794b 	.word	0x0800794b
 8007940:	08007957 	.word	0x08007957
 8007944:	2301      	movs	r3, #1
 8007946:	77fb      	strb	r3, [r7, #31]
 8007948:	e00d      	b.n	8007966 <UART_SetConfig+0xda>
 800794a:	2302      	movs	r3, #2
 800794c:	77fb      	strb	r3, [r7, #31]
 800794e:	e00a      	b.n	8007966 <UART_SetConfig+0xda>
 8007950:	2304      	movs	r3, #4
 8007952:	77fb      	strb	r3, [r7, #31]
 8007954:	e007      	b.n	8007966 <UART_SetConfig+0xda>
 8007956:	2308      	movs	r3, #8
 8007958:	77fb      	strb	r3, [r7, #31]
 800795a:	e004      	b.n	8007966 <UART_SetConfig+0xda>
 800795c:	2310      	movs	r3, #16
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e001      	b.n	8007966 <UART_SetConfig+0xda>
 8007962:	2310      	movs	r3, #16
 8007964:	77fb      	strb	r3, [r7, #31]
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800796e:	d15e      	bne.n	8007a2e <UART_SetConfig+0x1a2>
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007970:	7ffb      	ldrb	r3, [r7, #31]
 8007972:	3b01      	subs	r3, #1
 8007974:	2b07      	cmp	r3, #7
 8007976:	d822      	bhi.n	80079be <UART_SetConfig+0x132>
 8007978:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <UART_SetConfig+0xf4>)
 800797a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797e:	bf00      	nop
 8007980:	080079a1 	.word	0x080079a1
 8007984:	080079a9 	.word	0x080079a9
 8007988:	080079bf 	.word	0x080079bf
 800798c:	080079af 	.word	0x080079af
 8007990:	080079bf 	.word	0x080079bf
 8007994:	080079bf 	.word	0x080079bf
 8007998:	080079bf 	.word	0x080079bf
 800799c:	080079b7 	.word	0x080079b7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079a0:	f7fe f8a6 	bl	8005af0 <HAL_RCC_GetPCLK2Freq>
 80079a4:	61b8      	str	r0, [r7, #24]
        break;
 80079a6:	e00f      	b.n	80079c8 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079a8:	4b54      	ldr	r3, [pc, #336]	; (8007afc <UART_SetConfig+0x270>)
 80079aa:	61bb      	str	r3, [r7, #24]
        break;
 80079ac:	e00c      	b.n	80079c8 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ae:	f7fe f81f 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 80079b2:	61b8      	str	r0, [r7, #24]
        break;
 80079b4:	e008      	b.n	80079c8 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ba:	61bb      	str	r3, [r7, #24]
        break;
 80079bc:	e004      	b.n	80079c8 <UART_SetConfig+0x13c>
      default:
        pclk = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	77bb      	strb	r3, [r7, #30]
        break;
 80079c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d07e      	beq.n	8007acc <UART_SetConfig+0x240>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	4a4b      	ldr	r2, [pc, #300]	; (8007b00 <UART_SetConfig+0x274>)
 80079d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079d8:	461a      	mov	r2, r3
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80079e0:	005a      	lsls	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	085b      	lsrs	r3, r3, #1
 80079e8:	441a      	add	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b0f      	cmp	r3, #15
 80079f8:	d916      	bls.n	8007a28 <UART_SetConfig+0x19c>
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a00:	d212      	bcs.n	8007a28 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	f023 030f 	bic.w	r3, r3, #15
 8007a0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	085b      	lsrs	r3, r3, #1
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	89fb      	ldrh	r3, [r7, #14]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	89fa      	ldrh	r2, [r7, #14]
 8007a24:	60da      	str	r2, [r3, #12]
 8007a26:	e051      	b.n	8007acc <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	77bb      	strb	r3, [r7, #30]
 8007a2c:	e04e      	b.n	8007acc <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a2e:	7ffb      	ldrb	r3, [r7, #31]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	2b07      	cmp	r3, #7
 8007a34:	d821      	bhi.n	8007a7a <UART_SetConfig+0x1ee>
 8007a36:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <UART_SetConfig+0x1b0>)
 8007a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3c:	08007a5d 	.word	0x08007a5d
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007a7b 	.word	0x08007a7b
 8007a48:	08007a6b 	.word	0x08007a6b
 8007a4c:	08007a7b 	.word	0x08007a7b
 8007a50:	08007a7b 	.word	0x08007a7b
 8007a54:	08007a7b 	.word	0x08007a7b
 8007a58:	08007a73 	.word	0x08007a73
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a5c:	f7fe f848 	bl	8005af0 <HAL_RCC_GetPCLK2Freq>
 8007a60:	61b8      	str	r0, [r7, #24]
        break;
 8007a62:	e00f      	b.n	8007a84 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a64:	4b25      	ldr	r3, [pc, #148]	; (8007afc <UART_SetConfig+0x270>)
 8007a66:	61bb      	str	r3, [r7, #24]
        break;
 8007a68:	e00c      	b.n	8007a84 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a6a:	f7fd ffc1 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 8007a6e:	61b8      	str	r0, [r7, #24]
        break;
 8007a70:	e008      	b.n	8007a84 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a76:	61bb      	str	r3, [r7, #24]
        break;
 8007a78:	e004      	b.n	8007a84 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	77bb      	strb	r3, [r7, #30]
        break;
 8007a82:	bf00      	nop
    }

    if (pclk != 0U)
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d020      	beq.n	8007acc <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	4a1c      	ldr	r2, [pc, #112]	; (8007b00 <UART_SetConfig+0x274>)
 8007a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a94:	461a      	mov	r2, r3
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	085b      	lsrs	r3, r3, #1
 8007aa2:	441a      	add	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b0f      	cmp	r3, #15
 8007ab2:	d909      	bls.n	8007ac8 <UART_SetConfig+0x23c>
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aba:	d205      	bcs.n	8007ac8 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	e001      	b.n	8007acc <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007ae8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3720      	adds	r7, #32
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	cfff69f3 	.word	0xcfff69f3
 8007af8:	40013800 	.word	0x40013800
 8007afc:	00f42400 	.word	0x00f42400
 8007b00:	0800cf08 	.word	0x0800cf08

08007b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00a      	beq.n	8007b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00a      	beq.n	8007b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01a      	beq.n	8007c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c02:	d10a      	bne.n	8007c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b098      	sub	sp, #96	; 0x60
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c58:	f7fa fda4 	bl	80027a4 <HAL_GetTick>
 8007c5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0308 	and.w	r3, r3, #8
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d12f      	bne.n	8007ccc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c74:	2200      	movs	r2, #0
 8007c76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f88e 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d022      	beq.n	8007ccc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ca6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e6      	bne.n	8007c86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e063      	b.n	8007d94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d149      	bne.n	8007d6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f857 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d03c      	beq.n	8007d6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	623b      	str	r3, [r7, #32]
   return(result);
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d12:	633b      	str	r3, [r7, #48]	; 0x30
 8007d14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e6      	bne.n	8007cf4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f023 0301 	bic.w	r3, r3, #1
 8007d3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d46:	61fa      	str	r2, [r7, #28]
 8007d48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	69b9      	ldr	r1, [r7, #24]
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	617b      	str	r3, [r7, #20]
   return(result);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e5      	bne.n	8007d26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e012      	b.n	8007d94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3758      	adds	r7, #88	; 0x58
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dac:	e049      	b.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db4:	d045      	beq.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db6:	f7fa fcf5 	bl	80027a4 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d302      	bcc.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e048      	b.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d031      	beq.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d110      	bne.n	8007e0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2208      	movs	r2, #8
 8007df2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 f95b 	bl	80080b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2208      	movs	r2, #8
 8007dfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e029      	b.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69db      	ldr	r3, [r3, #28]
 8007e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e1c:	d111      	bne.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 f941 	bl	80080b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e00f      	b.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69da      	ldr	r2, [r3, #28]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	bf0c      	ite	eq
 8007e52:	2301      	moveq	r3, #1
 8007e54:	2300      	movne	r3, #0
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	79fb      	ldrb	r3, [r7, #7]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d0a6      	beq.n	8007dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b0a3      	sub	sp, #140	; 0x8c
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	88fa      	ldrh	r2, [r7, #6]
 8007e84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	88fa      	ldrh	r2, [r7, #6]
 8007e8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9e:	d10e      	bne.n	8007ebe <UART_Start_Receive_IT+0x52>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d105      	bne.n	8007eb4 <UART_Start_Receive_IT+0x48>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007eae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007eb2:	e02d      	b.n	8007f10 <UART_Start_Receive_IT+0xa4>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	22ff      	movs	r2, #255	; 0xff
 8007eb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ebc:	e028      	b.n	8007f10 <UART_Start_Receive_IT+0xa4>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10d      	bne.n	8007ee2 <UART_Start_Receive_IT+0x76>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d104      	bne.n	8007ed8 <UART_Start_Receive_IT+0x6c>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	22ff      	movs	r2, #255	; 0xff
 8007ed2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ed6:	e01b      	b.n	8007f10 <UART_Start_Receive_IT+0xa4>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	227f      	movs	r2, #127	; 0x7f
 8007edc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ee0:	e016      	b.n	8007f10 <UART_Start_Receive_IT+0xa4>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eea:	d10d      	bne.n	8007f08 <UART_Start_Receive_IT+0x9c>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <UART_Start_Receive_IT+0x92>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	227f      	movs	r2, #127	; 0x7f
 8007ef8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007efc:	e008      	b.n	8007f10 <UART_Start_Receive_IT+0xa4>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	223f      	movs	r2, #63	; 0x3f
 8007f02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f06:	e003      	b.n	8007f10 <UART_Start_Receive_IT+0xa4>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2222      	movs	r2, #34	; 0x22
 8007f1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3308      	adds	r3, #8
 8007f40:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007f44:	673a      	str	r2, [r7, #112]	; 0x70
 8007f46:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007f4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f4c:	e841 2300 	strex	r3, r2, [r1]
 8007f50:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e3      	bne.n	8007f20 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f60:	d14f      	bne.n	8008002 <UART_Start_Receive_IT+0x196>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f68:	88fa      	ldrh	r2, [r7, #6]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d349      	bcc.n	8008002 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f76:	d107      	bne.n	8007f88 <UART_Start_Receive_IT+0x11c>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d103      	bne.n	8007f88 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a47      	ldr	r2, [pc, #284]	; (80080a0 <UART_Start_Receive_IT+0x234>)
 8007f84:	675a      	str	r2, [r3, #116]	; 0x74
 8007f86:	e002      	b.n	8007f8e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4a46      	ldr	r2, [pc, #280]	; (80080a4 <UART_Start_Receive_IT+0x238>)
 8007f8c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d01a      	beq.n	8007fcc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007faa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e4      	bne.n	8007f96 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007fec:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e5      	bne.n	8007fcc <UART_Start_Receive_IT+0x160>
 8008000:	e046      	b.n	8008090 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800a:	d107      	bne.n	800801c <UART_Start_Receive_IT+0x1b0>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d103      	bne.n	800801c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4a24      	ldr	r2, [pc, #144]	; (80080a8 <UART_Start_Receive_IT+0x23c>)
 8008018:	675a      	str	r2, [r3, #116]	; 0x74
 800801a:	e002      	b.n	8008022 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4a23      	ldr	r2, [pc, #140]	; (80080ac <UART_Start_Receive_IT+0x240>)
 8008020:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d019      	beq.n	800805e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800803e:	677b      	str	r3, [r7, #116]	; 0x74
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
 800804a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800804e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e6      	bne.n	800802a <UART_Start_Receive_IT+0x1be>
 800805c:	e018      	b.n	8008090 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	613b      	str	r3, [r7, #16]
   return(result);
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	f043 0320 	orr.w	r3, r3, #32
 8008072:	67bb      	str	r3, [r7, #120]	; 0x78
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800807c:	623b      	str	r3, [r7, #32]
 800807e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	69f9      	ldr	r1, [r7, #28]
 8008082:	6a3a      	ldr	r2, [r7, #32]
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	61bb      	str	r3, [r7, #24]
   return(result);
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e6      	bne.n	800805e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	378c      	adds	r7, #140	; 0x8c
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	08008be9 	.word	0x08008be9
 80080a4:	08008895 	.word	0x08008895
 80080a8:	080086eb 	.word	0x080086eb
 80080ac:	08008543 	.word	0x08008543

080080b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b095      	sub	sp, #84	; 0x54
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d6:	643b      	str	r3, [r7, #64]	; 0x40
 80080d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e6      	bne.n	80080b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3308      	adds	r3, #8
 80080f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008100:	f023 0301 	bic.w	r3, r3, #1
 8008104:	64bb      	str	r3, [r7, #72]	; 0x48
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3308      	adds	r3, #8
 800810c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800810e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008110:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e3      	bne.n	80080ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008126:	2b01      	cmp	r3, #1
 8008128:	d118      	bne.n	800815c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	e853 3f00 	ldrex	r3, [r3]
 8008136:	60bb      	str	r3, [r7, #8]
   return(result);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f023 0310 	bic.w	r3, r3, #16
 800813e:	647b      	str	r3, [r7, #68]	; 0x44
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6979      	ldr	r1, [r7, #20]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	613b      	str	r3, [r7, #16]
   return(result);
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e6      	bne.n	800812a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008170:	bf00      	nop
 8008172:	3754      	adds	r7, #84	; 0x54
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008188:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff fb6c 	bl	8007878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081a0:	bf00      	nop
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b08f      	sub	sp, #60	; 0x3c
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b6:	2b21      	cmp	r3, #33	; 0x21
 80081b8:	d14c      	bne.n	8008254 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d132      	bne.n	800822c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	e853 3f00 	ldrex	r3, [r3]
 80081d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081da:	637b      	str	r3, [r7, #52]	; 0x34
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	461a      	mov	r2, r3
 80081e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e6      	bne.n	80081c6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	e853 3f00 	ldrex	r3, [r3]
 8008204:	60bb      	str	r3, [r7, #8]
   return(result);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800820c:	633b      	str	r3, [r7, #48]	; 0x30
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	61bb      	str	r3, [r7, #24]
 8008218:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	6979      	ldr	r1, [r7, #20]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	613b      	str	r3, [r7, #16]
   return(result);
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e6      	bne.n	80081f8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800822a:	e013      	b.n	8008254 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008230:	781a      	ldrb	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800823c:	1c5a      	adds	r2, r3, #1
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b01      	subs	r3, #1
 800824c:	b29a      	uxth	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008254:	bf00      	nop
 8008256:	373c      	adds	r7, #60	; 0x3c
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b091      	sub	sp, #68	; 0x44
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826e:	2b21      	cmp	r3, #33	; 0x21
 8008270:	d151      	bne.n	8008316 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008278:	b29b      	uxth	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d132      	bne.n	80082e4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	e853 3f00 	ldrex	r3, [r3]
 800828a:	623b      	str	r3, [r7, #32]
   return(result);
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008292:	63bb      	str	r3, [r7, #56]	; 0x38
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	461a      	mov	r2, r3
 800829a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829c:	633b      	str	r3, [r7, #48]	; 0x30
 800829e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e6      	bne.n	800827e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082c4:	637b      	str	r3, [r7, #52]	; 0x34
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ce:	61fb      	str	r3, [r7, #28]
 80082d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	69b9      	ldr	r1, [r7, #24]
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	617b      	str	r3, [r7, #20]
   return(result);
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e6      	bne.n	80082b0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80082e2:	e018      	b.n	8008316 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80082ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082f8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fe:	1c9a      	adds	r2, r3, #2
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800830a:	b29b      	uxth	r3, r3
 800830c:	3b01      	subs	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008316:	bf00      	nop
 8008318:	3744      	adds	r7, #68	; 0x44
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008322:	b480      	push	{r7}
 8008324:	b091      	sub	sp, #68	; 0x44
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008330:	2b21      	cmp	r3, #33	; 0x21
 8008332:	d160      	bne.n	80083f6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800833a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800833c:	e057      	b.n	80083ee <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008344:	b29b      	uxth	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d133      	bne.n	80083b2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3308      	adds	r3, #8
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	e853 3f00 	ldrex	r3, [r3]
 8008358:	623b      	str	r3, [r7, #32]
   return(result);
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008360:	63bb      	str	r3, [r7, #56]	; 0x38
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3308      	adds	r3, #8
 8008368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800836a:	633a      	str	r2, [r7, #48]	; 0x30
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e5      	bne.n	800834a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	60fb      	str	r3, [r7, #12]
   return(result);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008392:	637b      	str	r3, [r7, #52]	; 0x34
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	69b9      	ldr	r1, [r7, #24]
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	617b      	str	r3, [r7, #20]
   return(result);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e6      	bne.n	800837e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80083b0:	e021      	b.n	80083f6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d013      	beq.n	80083e8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c4:	781a      	ldrb	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083dc:	b29b      	uxth	r3, r3
 80083de:	3b01      	subs	r3, #1
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80083e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80083ea:	3b01      	subs	r3, #1
 80083ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80083ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1a4      	bne.n	800833e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80083f4:	e7ff      	b.n	80083f6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80083f6:	bf00      	nop
 80083f8:	3744      	adds	r7, #68	; 0x44
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008402:	b480      	push	{r7}
 8008404:	b091      	sub	sp, #68	; 0x44
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008410:	2b21      	cmp	r3, #33	; 0x21
 8008412:	d165      	bne.n	80084e0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800841a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800841c:	e05c      	b.n	80084d8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008424:	b29b      	uxth	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d133      	bne.n	8008492 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3308      	adds	r3, #8
 8008430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	e853 3f00 	ldrex	r3, [r3]
 8008438:	61fb      	str	r3, [r7, #28]
   return(result);
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3308      	adds	r3, #8
 8008448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800844a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800844c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1e5      	bne.n	800842a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	60bb      	str	r3, [r7, #8]
   return(result);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008472:	633b      	str	r3, [r7, #48]	; 0x30
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	61bb      	str	r3, [r7, #24]
 800847e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6979      	ldr	r1, [r7, #20]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	613b      	str	r3, [r7, #16]
   return(result);
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e6      	bne.n	800845e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008490:	e026      	b.n	80084e0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800849c:	2b00      	cmp	r3, #0
 800849e:	d018      	beq.n	80084d2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80084a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a8:	881b      	ldrh	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084b4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ba:	1c9a      	adds	r2, r3, #2
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80084d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80084d4:	3b01      	subs	r3, #1
 80084d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80084d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d19f      	bne.n	800841e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80084de:	e7ff      	b.n	80084e0 <UART_TxISR_16BIT_FIFOEN+0xde>
 80084e0:	bf00      	nop
 80084e2:	3744      	adds	r7, #68	; 0x44
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	60bb      	str	r3, [r7, #8]
   return(result);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008508:	61fb      	str	r3, [r7, #28]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	61bb      	str	r3, [r7, #24]
 8008514:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	6979      	ldr	r1, [r7, #20]
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	613b      	str	r3, [r7, #16]
   return(result);
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e6      	bne.n	80084f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7ff f98b 	bl	8007850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800853a:	bf00      	nop
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b09c      	sub	sp, #112	; 0x70
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008550:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800855a:	2b22      	cmp	r3, #34	; 0x22
 800855c:	f040 80b9 	bne.w	80086d2 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800856a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800856e:	b2d9      	uxtb	r1, r3
 8008570:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008574:	b2da      	uxtb	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857a:	400a      	ands	r2, r1
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008590:	b29b      	uxth	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	b29a      	uxth	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f040 809c 	bne.w	80086e2 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085be:	66bb      	str	r3, [r7, #104]	; 0x68
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80085ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e6      	bne.n	80085aa <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3308      	adds	r3, #8
 80085e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ee:	f023 0301 	bic.w	r3, r3, #1
 80085f2:	667b      	str	r3, [r7, #100]	; 0x64
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3308      	adds	r3, #8
 80085fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085fc:	647a      	str	r2, [r7, #68]	; 0x44
 80085fe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800860a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e5      	bne.n	80085dc <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2220      	movs	r2, #32
 8008614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	671a      	str	r2, [r3, #112]	; 0x70
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
        }
      }
#else
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d018      	beq.n	8008664 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	e853 3f00 	ldrex	r3, [r3]
 800863e:	623b      	str	r3, [r7, #32]
   return(result);
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008646:	663b      	str	r3, [r7, #96]	; 0x60
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008650:	633b      	str	r3, [r7, #48]	; 0x30
 8008652:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008654:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008658:	e841 2300 	strex	r3, r2, [r1]
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e6      	bne.n	8008632 <UART_RxISR_8BIT+0xf0>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008668:	2b01      	cmp	r3, #1
 800866a:	d12e      	bne.n	80086ca <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	e853 3f00 	ldrex	r3, [r3]
 800867e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f023 0310 	bic.w	r3, r3, #16
 8008686:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008690:	61fb      	str	r3, [r7, #28]
 8008692:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008694:	69b9      	ldr	r1, [r7, #24]
 8008696:	69fa      	ldr	r2, [r7, #28]
 8008698:	e841 2300 	strex	r3, r2, [r1]
 800869c:	617b      	str	r3, [r7, #20]
   return(result);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1e6      	bne.n	8008672 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	f003 0310 	and.w	r3, r3, #16
 80086ae:	2b10      	cmp	r3, #16
 80086b0:	d103      	bne.n	80086ba <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2210      	movs	r2, #16
 80086b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7f8 ffd4 	bl	8001670 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086c8:	e00b      	b.n	80086e2 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7ff f8ca 	bl	8007864 <HAL_UART_RxCpltCallback>
}
 80086d0:	e007      	b.n	80086e2 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	699a      	ldr	r2, [r3, #24]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f042 0208 	orr.w	r2, r2, #8
 80086e0:	619a      	str	r2, [r3, #24]
}
 80086e2:	bf00      	nop
 80086e4:	3770      	adds	r7, #112	; 0x70
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b09c      	sub	sp, #112	; 0x70
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086f8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008702:	2b22      	cmp	r3, #34	; 0x22
 8008704:	f040 80b9 	bne.w	800887a <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008716:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008718:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800871c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008720:	4013      	ands	r3, r2
 8008722:	b29a      	uxth	r2, r3
 8008724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008726:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800872c:	1c9a      	adds	r2, r3, #2
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008738:	b29b      	uxth	r3, r3
 800873a:	3b01      	subs	r3, #1
 800873c:	b29a      	uxth	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	f040 809c 	bne.w	800888a <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800875a:	e853 3f00 	ldrex	r3, [r3]
 800875e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008762:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008766:	667b      	str	r3, [r7, #100]	; 0x64
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	461a      	mov	r2, r3
 800876e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008770:	657b      	str	r3, [r7, #84]	; 0x54
 8008772:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008774:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008776:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008778:	e841 2300 	strex	r3, r2, [r1]
 800877c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800877e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1e6      	bne.n	8008752 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3308      	adds	r3, #8
 800878a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878e:	e853 3f00 	ldrex	r3, [r3]
 8008792:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	f023 0301 	bic.w	r3, r3, #1
 800879a:	663b      	str	r3, [r7, #96]	; 0x60
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3308      	adds	r3, #8
 80087a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087a4:	643a      	str	r2, [r7, #64]	; 0x40
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087ac:	e841 2300 	strex	r3, r2, [r1]
 80087b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1e5      	bne.n	8008784 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	671a      	str	r2, [r3, #112]	; 0x70
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
        }
      }
#else
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d018      	beq.n	800880c <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e6      	bne.n	80087da <UART_RxISR_16BIT+0xf0>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008810:	2b01      	cmp	r3, #1
 8008812:	d12e      	bne.n	8008872 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	e853 3f00 	ldrex	r3, [r3]
 8008826:	60bb      	str	r3, [r7, #8]
   return(result);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f023 0310 	bic.w	r3, r3, #16
 800882e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	461a      	mov	r2, r3
 8008836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008838:	61bb      	str	r3, [r7, #24]
 800883a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	6979      	ldr	r1, [r7, #20]
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	e841 2300 	strex	r3, r2, [r1]
 8008844:	613b      	str	r3, [r7, #16]
   return(result);
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e6      	bne.n	800881a <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	f003 0310 	and.w	r3, r3, #16
 8008856:	2b10      	cmp	r3, #16
 8008858:	d103      	bne.n	8008862 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2210      	movs	r2, #16
 8008860:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7f8 ff00 	bl	8001670 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008870:	e00b      	b.n	800888a <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7fe fff6 	bl	8007864 <HAL_UART_RxCpltCallback>
}
 8008878:	e007      	b.n	800888a <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	699a      	ldr	r2, [r3, #24]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0208 	orr.w	r2, r2, #8
 8008888:	619a      	str	r2, [r3, #24]
}
 800888a:	bf00      	nop
 800888c:	3770      	adds	r7, #112	; 0x70
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b0ac      	sub	sp, #176	; 0xb0
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80088a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ca:	2b22      	cmp	r3, #34	; 0x22
 80088cc:	f040 817d 	bne.w	8008bca <UART_RxISR_8BIT_FIFOEN+0x336>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088d6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088da:	e120      	b.n	8008b1e <UART_RxISR_8BIT_FIFOEN+0x28a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80088e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80088ea:	b2d9      	uxtb	r1, r3
 80088ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f6:	400a      	ands	r2, r1
 80088f8:	b2d2      	uxtb	r2, r2
 80088fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800890c:	b29b      	uxth	r3, r3
 800890e:	3b01      	subs	r3, #1
 8008910:	b29a      	uxth	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	2b00      	cmp	r3, #0
 800892c:	d053      	beq.n	80089d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800892e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d011      	beq.n	800895e <UART_RxISR_8BIT_FIFOEN+0xca>
 800893a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800893e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2201      	movs	r2, #1
 800894c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008954:	f043 0201 	orr.w	r2, r3, #1
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800895e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d011      	beq.n	800898e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800896a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00b      	beq.n	800898e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2202      	movs	r2, #2
 800897c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008984:	f043 0204 	orr.w	r2, r3, #4
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800898e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008992:	f003 0304 	and.w	r3, r3, #4
 8008996:	2b00      	cmp	r3, #0
 8008998:	d011      	beq.n	80089be <UART_RxISR_8BIT_FIFOEN+0x12a>
 800899a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00b      	beq.n	80089be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2204      	movs	r2, #4
 80089ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b4:	f043 0202 	orr.w	r2, r3, #2
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d006      	beq.n	80089d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7fe ff55 	bl	8007878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089dc:	b29b      	uxth	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f040 809d 	bne.w	8008b1e <UART_RxISR_8BIT_FIFOEN+0x28a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089ec:	e853 3f00 	ldrex	r3, [r3]
 80089f0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80089f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a08:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008a0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008a0e:	e841 2300 	strex	r3, r2, [r1]
 8008a12:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1e4      	bne.n	80089e4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a30:	f023 0301 	bic.w	r3, r3, #1
 8008a34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a42:	66ba      	str	r2, [r7, #104]	; 0x68
 8008a44:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008a48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e1      	bne.n	8008a1a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	671a      	str	r2, [r3, #112]	; 0x70
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
          }
        }
#else
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d01a      	beq.n	8008aae <UART_RxISR_8BIT_FIFOEN+0x21a>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	461a      	mov	r2, r3
 8008a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a9c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008aa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e4      	bne.n	8008a78 <UART_RxISR_8BIT_FIFOEN+0x1e4>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d130      	bne.n	8008b18 <UART_RxISR_8BIT_FIFOEN+0x284>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	f023 0310 	bic.w	r3, r3, #16
 8008ad0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ade:	643b      	str	r3, [r7, #64]	; 0x40
 8008ae0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e4      	bne.n	8008abc <UART_RxISR_8BIT_FIFOEN+0x228>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	f003 0310 	and.w	r3, r3, #16
 8008afc:	2b10      	cmp	r3, #16
 8008afe:	d103      	bne.n	8008b08 <UART_RxISR_8BIT_FIFOEN+0x274>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2210      	movs	r2, #16
 8008b06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7f8 fdad 	bl	8001670 <HAL_UARTEx_RxEventCallback>
 8008b16:	e002      	b.n	8008b1e <UART_RxISR_8BIT_FIFOEN+0x28a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7fe fea3 	bl	8007864 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b1e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d006      	beq.n	8008b34 <UART_RxISR_8BIT_FIFOEN+0x2a0>
 8008b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b2a:	f003 0320 	and.w	r3, r3, #32
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f47f aed4 	bne.w	80088dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b3a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d049      	beq.n	8008bda <UART_RxISR_8BIT_FIFOEN+0x346>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b4c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d242      	bcs.n	8008bda <UART_RxISR_8BIT_FIFOEN+0x346>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3308      	adds	r3, #8
 8008b5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	e853 3f00 	ldrex	r3, [r3]
 8008b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3308      	adds	r3, #8
 8008b74:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008b78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b80:	e841 2300 	strex	r3, r2, [r1]
 8008b84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e3      	bne.n	8008b54 <UART_RxISR_8BIT_FIFOEN+0x2c0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a15      	ldr	r2, [pc, #84]	; (8008be4 <UART_RxISR_8BIT_FIFOEN+0x350>)
 8008b90:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f043 0320 	orr.w	r3, r3, #32
 8008ba6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008bb4:	61bb      	str	r3, [r7, #24]
 8008bb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	6979      	ldr	r1, [r7, #20]
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	e841 2300 	strex	r3, r2, [r1]
 8008bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e4      	bne.n	8008b92 <UART_RxISR_8BIT_FIFOEN+0x2fe>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bc8:	e007      	b.n	8008bda <UART_RxISR_8BIT_FIFOEN+0x346>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	699a      	ldr	r2, [r3, #24]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f042 0208 	orr.w	r2, r2, #8
 8008bd8:	619a      	str	r2, [r3, #24]
}
 8008bda:	bf00      	nop
 8008bdc:	37b0      	adds	r7, #176	; 0xb0
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	08008543 	.word	0x08008543

08008be8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b0ae      	sub	sp, #184	; 0xb8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008bf6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c1e:	2b22      	cmp	r3, #34	; 0x22
 8008c20:	f040 8181 	bne.w	8008f26 <UART_RxISR_16BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c2a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c2e:	e124      	b.n	8008e7a <UART_RxISR_16BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008c42:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008c46:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c58:	1c9a      	adds	r2, r3, #2
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	3b01      	subs	r3, #1
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d053      	beq.n	8008d2e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d011      	beq.n	8008cb6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00b      	beq.n	8008cb6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cac:	f043 0201 	orr.w	r2, r3, #1
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008cba:	f003 0302 	and.w	r3, r3, #2
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d011      	beq.n	8008ce6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00b      	beq.n	8008ce6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cdc:	f043 0204 	orr.w	r2, r3, #4
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ce6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008cea:	f003 0304 	and.w	r3, r3, #4
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d011      	beq.n	8008d16 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008cf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00b      	beq.n	8008d16 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2204      	movs	r2, #4
 8008d04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d0c:	f043 0202 	orr.w	r2, r3, #2
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d006      	beq.n	8008d2e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7fe fda9 	bl	8007878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f040 809f 	bne.w	8008e7a <UART_RxISR_16BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d62:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d6a:	e841 2300 	strex	r3, r2, [r1]
 8008d6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1e2      	bne.n	8008d3c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d80:	e853 3f00 	ldrex	r3, [r3]
 8008d84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d8c:	f023 0301 	bic.w	r3, r3, #1
 8008d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3308      	adds	r3, #8
 8008d9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008d9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008da0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008da4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e1      	bne.n	8008d76 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	671a      	str	r2, [r3, #112]	; 0x70
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
          }
        }
#else
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d01a      	beq.n	8008e0a <UART_RxISR_16BIT_FIFOEN+0x222>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ddc:	e853 3f00 	ldrex	r3, [r3]
 8008de0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008de4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008de8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	461a      	mov	r2, r3
 8008df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008df6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008df8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008dfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e4      	bne.n	8008dd4 <UART_RxISR_16BIT_FIFOEN+0x1ec>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d130      	bne.n	8008e74 <UART_RxISR_16BIT_FIFOEN+0x28c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e28:	f023 0310 	bic.w	r3, r3, #16
 8008e2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e4      	bne.n	8008e18 <UART_RxISR_16BIT_FIFOEN+0x230>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	f003 0310 	and.w	r3, r3, #16
 8008e58:	2b10      	cmp	r3, #16
 8008e5a:	d103      	bne.n	8008e64 <UART_RxISR_16BIT_FIFOEN+0x27c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2210      	movs	r2, #16
 8008e62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7f8 fbff 	bl	8001670 <HAL_UARTEx_RxEventCallback>
 8008e72:	e002      	b.n	8008e7a <UART_RxISR_16BIT_FIFOEN+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7fe fcf5 	bl	8007864 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e7a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d006      	beq.n	8008e90 <UART_RxISR_16BIT_FIFOEN+0x2a8>
 8008e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f47f aed0 	bne.w	8008c30 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e96:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e9a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d049      	beq.n	8008f36 <UART_RxISR_16BIT_FIFOEN+0x34e>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ea8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d242      	bcs.n	8008f36 <UART_RxISR_16BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	e853 3f00 	ldrex	r3, [r3]
 8008ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ec6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008ed4:	633a      	str	r2, [r7, #48]	; 0x30
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e3      	bne.n	8008eb0 <UART_RxISR_16BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a15      	ldr	r2, [pc, #84]	; (8008f40 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8008eec:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	e853 3f00 	ldrex	r3, [r3]
 8008efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f043 0320 	orr.w	r3, r3, #32
 8008f02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f10:	61fb      	str	r3, [r7, #28]
 8008f12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	69b9      	ldr	r1, [r7, #24]
 8008f16:	69fa      	ldr	r2, [r7, #28]
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e4      	bne.n	8008eee <UART_RxISR_16BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f24:	e007      	b.n	8008f36 <UART_RxISR_16BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	699a      	ldr	r2, [r3, #24]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f042 0208 	orr.w	r2, r2, #8
 8008f34:	619a      	str	r2, [r3, #24]
}
 8008f36:	bf00      	nop
 8008f38:	37b8      	adds	r7, #184	; 0xb8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	080086eb 	.word	0x080086eb

08008f44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d101      	bne.n	8008f96 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e027      	b.n	8008fe6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2224      	movs	r2, #36	; 0x24
 8008fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 0201 	bic.w	r2, r2, #1
 8008fbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008fc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009002:	2b01      	cmp	r3, #1
 8009004:	d101      	bne.n	800900a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009006:	2302      	movs	r3, #2
 8009008:	e02d      	b.n	8009066 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2224      	movs	r2, #36	; 0x24
 8009016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0201 	bic.w	r2, r2, #1
 8009030:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f8a4 	bl	8009194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2220      	movs	r2, #32
 8009058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800907e:	2b01      	cmp	r3, #1
 8009080:	d101      	bne.n	8009086 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009082:	2302      	movs	r3, #2
 8009084:	e02d      	b.n	80090e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2224      	movs	r2, #36	; 0x24
 8009092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 0201 	bic.w	r2, r2, #1
 80090ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f866 	bl	8009194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b08c      	sub	sp, #48	; 0x30
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	60b9      	str	r1, [r7, #8]
 80090f4:	4613      	mov	r3, r2
 80090f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090fe:	2b20      	cmp	r3, #32
 8009100:	d142      	bne.n	8009188 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8009108:	88fb      	ldrh	r3, [r7, #6]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e03b      	b.n	800918a <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2201      	movs	r2, #1
 8009116:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800911e:	88fb      	ldrh	r3, [r7, #6]
 8009120:	461a      	mov	r2, r3
 8009122:	68b9      	ldr	r1, [r7, #8]
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f7fe fea1 	bl	8007e6c <UART_Start_Receive_IT>
 800912a:	4603      	mov	r3, r0
 800912c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009130:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009134:	2b00      	cmp	r3, #0
 8009136:	d124      	bne.n	8009182 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913c:	2b01      	cmp	r3, #1
 800913e:	d11d      	bne.n	800917c <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2210      	movs	r2, #16
 8009146:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	617b      	str	r3, [r7, #20]
   return(result);
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f043 0310 	orr.w	r3, r3, #16
 800915c:	62bb      	str	r3, [r7, #40]	; 0x28
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009166:	627b      	str	r3, [r7, #36]	; 0x24
 8009168:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	6a39      	ldr	r1, [r7, #32]
 800916c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	61fb      	str	r3, [r7, #28]
   return(result);
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e6      	bne.n	8009148 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 800917a:	e002      	b.n	8009182 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009186:	e000      	b.n	800918a <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009188:	2302      	movs	r3, #2
  }
}
 800918a:	4618      	mov	r0, r3
 800918c:	3730      	adds	r7, #48	; 0x30
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d108      	bne.n	80091b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80091b4:	e031      	b.n	800921a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80091b6:	2308      	movs	r3, #8
 80091b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80091ba:	2308      	movs	r3, #8
 80091bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	0e5b      	lsrs	r3, r3, #25
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	f003 0307 	and.w	r3, r3, #7
 80091cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	0f5b      	lsrs	r3, r3, #29
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	f003 0307 	and.w	r3, r3, #7
 80091dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091de:	7bbb      	ldrb	r3, [r7, #14]
 80091e0:	7b3a      	ldrb	r2, [r7, #12]
 80091e2:	4911      	ldr	r1, [pc, #68]	; (8009228 <UARTEx_SetNbDataToProcess+0x94>)
 80091e4:	5c8a      	ldrb	r2, [r1, r2]
 80091e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091ea:	7b3a      	ldrb	r2, [r7, #12]
 80091ec:	490f      	ldr	r1, [pc, #60]	; (800922c <UARTEx_SetNbDataToProcess+0x98>)
 80091ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	7b7a      	ldrb	r2, [r7, #13]
 8009200:	4909      	ldr	r1, [pc, #36]	; (8009228 <UARTEx_SetNbDataToProcess+0x94>)
 8009202:	5c8a      	ldrb	r2, [r1, r2]
 8009204:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009208:	7b7a      	ldrb	r2, [r7, #13]
 800920a:	4908      	ldr	r1, [pc, #32]	; (800922c <UARTEx_SetNbDataToProcess+0x98>)
 800920c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800920e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009212:	b29a      	uxth	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800921a:	bf00      	nop
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	0800cf20 	.word	0x0800cf20
 800922c:	0800cf28 	.word	0x0800cf28

08009230 <atoi>:
 8009230:	220a      	movs	r2, #10
 8009232:	2100      	movs	r1, #0
 8009234:	f000 bee0 	b.w	8009ff8 <strtol>

08009238 <__errno>:
 8009238:	4b01      	ldr	r3, [pc, #4]	; (8009240 <__errno+0x8>)
 800923a:	6818      	ldr	r0, [r3, #0]
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	20000010 	.word	0x20000010

08009244 <__libc_init_array>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	4d0d      	ldr	r5, [pc, #52]	; (800927c <__libc_init_array+0x38>)
 8009248:	4c0d      	ldr	r4, [pc, #52]	; (8009280 <__libc_init_array+0x3c>)
 800924a:	1b64      	subs	r4, r4, r5
 800924c:	10a4      	asrs	r4, r4, #2
 800924e:	2600      	movs	r6, #0
 8009250:	42a6      	cmp	r6, r4
 8009252:	d109      	bne.n	8009268 <__libc_init_array+0x24>
 8009254:	4d0b      	ldr	r5, [pc, #44]	; (8009284 <__libc_init_array+0x40>)
 8009256:	4c0c      	ldr	r4, [pc, #48]	; (8009288 <__libc_init_array+0x44>)
 8009258:	f003 fd0a 	bl	800cc70 <_init>
 800925c:	1b64      	subs	r4, r4, r5
 800925e:	10a4      	asrs	r4, r4, #2
 8009260:	2600      	movs	r6, #0
 8009262:	42a6      	cmp	r6, r4
 8009264:	d105      	bne.n	8009272 <__libc_init_array+0x2e>
 8009266:	bd70      	pop	{r4, r5, r6, pc}
 8009268:	f855 3b04 	ldr.w	r3, [r5], #4
 800926c:	4798      	blx	r3
 800926e:	3601      	adds	r6, #1
 8009270:	e7ee      	b.n	8009250 <__libc_init_array+0xc>
 8009272:	f855 3b04 	ldr.w	r3, [r5], #4
 8009276:	4798      	blx	r3
 8009278:	3601      	adds	r6, #1
 800927a:	e7f2      	b.n	8009262 <__libc_init_array+0x1e>
 800927c:	0800d328 	.word	0x0800d328
 8009280:	0800d328 	.word	0x0800d328
 8009284:	0800d328 	.word	0x0800d328
 8009288:	0800d32c 	.word	0x0800d32c

0800928c <malloc>:
 800928c:	4b02      	ldr	r3, [pc, #8]	; (8009298 <malloc+0xc>)
 800928e:	4601      	mov	r1, r0
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	f000 b885 	b.w	80093a0 <_malloc_r>
 8009296:	bf00      	nop
 8009298:	20000010 	.word	0x20000010

0800929c <memcpy>:
 800929c:	440a      	add	r2, r1
 800929e:	4291      	cmp	r1, r2
 80092a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80092a4:	d100      	bne.n	80092a8 <memcpy+0xc>
 80092a6:	4770      	bx	lr
 80092a8:	b510      	push	{r4, lr}
 80092aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092b2:	4291      	cmp	r1, r2
 80092b4:	d1f9      	bne.n	80092aa <memcpy+0xe>
 80092b6:	bd10      	pop	{r4, pc}

080092b8 <memset>:
 80092b8:	4402      	add	r2, r0
 80092ba:	4603      	mov	r3, r0
 80092bc:	4293      	cmp	r3, r2
 80092be:	d100      	bne.n	80092c2 <memset+0xa>
 80092c0:	4770      	bx	lr
 80092c2:	f803 1b01 	strb.w	r1, [r3], #1
 80092c6:	e7f9      	b.n	80092bc <memset+0x4>

080092c8 <_free_r>:
 80092c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092ca:	2900      	cmp	r1, #0
 80092cc:	d044      	beq.n	8009358 <_free_r+0x90>
 80092ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092d2:	9001      	str	r0, [sp, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f1a1 0404 	sub.w	r4, r1, #4
 80092da:	bfb8      	it	lt
 80092dc:	18e4      	addlt	r4, r4, r3
 80092de:	f001 fff5 	bl	800b2cc <__malloc_lock>
 80092e2:	4a1e      	ldr	r2, [pc, #120]	; (800935c <_free_r+0x94>)
 80092e4:	9801      	ldr	r0, [sp, #4]
 80092e6:	6813      	ldr	r3, [r2, #0]
 80092e8:	b933      	cbnz	r3, 80092f8 <_free_r+0x30>
 80092ea:	6063      	str	r3, [r4, #4]
 80092ec:	6014      	str	r4, [r2, #0]
 80092ee:	b003      	add	sp, #12
 80092f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092f4:	f001 bff0 	b.w	800b2d8 <__malloc_unlock>
 80092f8:	42a3      	cmp	r3, r4
 80092fa:	d908      	bls.n	800930e <_free_r+0x46>
 80092fc:	6825      	ldr	r5, [r4, #0]
 80092fe:	1961      	adds	r1, r4, r5
 8009300:	428b      	cmp	r3, r1
 8009302:	bf01      	itttt	eq
 8009304:	6819      	ldreq	r1, [r3, #0]
 8009306:	685b      	ldreq	r3, [r3, #4]
 8009308:	1949      	addeq	r1, r1, r5
 800930a:	6021      	streq	r1, [r4, #0]
 800930c:	e7ed      	b.n	80092ea <_free_r+0x22>
 800930e:	461a      	mov	r2, r3
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	b10b      	cbz	r3, 8009318 <_free_r+0x50>
 8009314:	42a3      	cmp	r3, r4
 8009316:	d9fa      	bls.n	800930e <_free_r+0x46>
 8009318:	6811      	ldr	r1, [r2, #0]
 800931a:	1855      	adds	r5, r2, r1
 800931c:	42a5      	cmp	r5, r4
 800931e:	d10b      	bne.n	8009338 <_free_r+0x70>
 8009320:	6824      	ldr	r4, [r4, #0]
 8009322:	4421      	add	r1, r4
 8009324:	1854      	adds	r4, r2, r1
 8009326:	42a3      	cmp	r3, r4
 8009328:	6011      	str	r1, [r2, #0]
 800932a:	d1e0      	bne.n	80092ee <_free_r+0x26>
 800932c:	681c      	ldr	r4, [r3, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	6053      	str	r3, [r2, #4]
 8009332:	4421      	add	r1, r4
 8009334:	6011      	str	r1, [r2, #0]
 8009336:	e7da      	b.n	80092ee <_free_r+0x26>
 8009338:	d902      	bls.n	8009340 <_free_r+0x78>
 800933a:	230c      	movs	r3, #12
 800933c:	6003      	str	r3, [r0, #0]
 800933e:	e7d6      	b.n	80092ee <_free_r+0x26>
 8009340:	6825      	ldr	r5, [r4, #0]
 8009342:	1961      	adds	r1, r4, r5
 8009344:	428b      	cmp	r3, r1
 8009346:	bf04      	itt	eq
 8009348:	6819      	ldreq	r1, [r3, #0]
 800934a:	685b      	ldreq	r3, [r3, #4]
 800934c:	6063      	str	r3, [r4, #4]
 800934e:	bf04      	itt	eq
 8009350:	1949      	addeq	r1, r1, r5
 8009352:	6021      	streq	r1, [r4, #0]
 8009354:	6054      	str	r4, [r2, #4]
 8009356:	e7ca      	b.n	80092ee <_free_r+0x26>
 8009358:	b003      	add	sp, #12
 800935a:	bd30      	pop	{r4, r5, pc}
 800935c:	20000538 	.word	0x20000538

08009360 <sbrk_aligned>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	4e0e      	ldr	r6, [pc, #56]	; (800939c <sbrk_aligned+0x3c>)
 8009364:	460c      	mov	r4, r1
 8009366:	6831      	ldr	r1, [r6, #0]
 8009368:	4605      	mov	r5, r0
 800936a:	b911      	cbnz	r1, 8009372 <sbrk_aligned+0x12>
 800936c:	f000 fd84 	bl	8009e78 <_sbrk_r>
 8009370:	6030      	str	r0, [r6, #0]
 8009372:	4621      	mov	r1, r4
 8009374:	4628      	mov	r0, r5
 8009376:	f000 fd7f 	bl	8009e78 <_sbrk_r>
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	d00a      	beq.n	8009394 <sbrk_aligned+0x34>
 800937e:	1cc4      	adds	r4, r0, #3
 8009380:	f024 0403 	bic.w	r4, r4, #3
 8009384:	42a0      	cmp	r0, r4
 8009386:	d007      	beq.n	8009398 <sbrk_aligned+0x38>
 8009388:	1a21      	subs	r1, r4, r0
 800938a:	4628      	mov	r0, r5
 800938c:	f000 fd74 	bl	8009e78 <_sbrk_r>
 8009390:	3001      	adds	r0, #1
 8009392:	d101      	bne.n	8009398 <sbrk_aligned+0x38>
 8009394:	f04f 34ff 	mov.w	r4, #4294967295
 8009398:	4620      	mov	r0, r4
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	2000053c 	.word	0x2000053c

080093a0 <_malloc_r>:
 80093a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a4:	1ccd      	adds	r5, r1, #3
 80093a6:	f025 0503 	bic.w	r5, r5, #3
 80093aa:	3508      	adds	r5, #8
 80093ac:	2d0c      	cmp	r5, #12
 80093ae:	bf38      	it	cc
 80093b0:	250c      	movcc	r5, #12
 80093b2:	2d00      	cmp	r5, #0
 80093b4:	4607      	mov	r7, r0
 80093b6:	db01      	blt.n	80093bc <_malloc_r+0x1c>
 80093b8:	42a9      	cmp	r1, r5
 80093ba:	d905      	bls.n	80093c8 <_malloc_r+0x28>
 80093bc:	230c      	movs	r3, #12
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	2600      	movs	r6, #0
 80093c2:	4630      	mov	r0, r6
 80093c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c8:	4e2e      	ldr	r6, [pc, #184]	; (8009484 <_malloc_r+0xe4>)
 80093ca:	f001 ff7f 	bl	800b2cc <__malloc_lock>
 80093ce:	6833      	ldr	r3, [r6, #0]
 80093d0:	461c      	mov	r4, r3
 80093d2:	bb34      	cbnz	r4, 8009422 <_malloc_r+0x82>
 80093d4:	4629      	mov	r1, r5
 80093d6:	4638      	mov	r0, r7
 80093d8:	f7ff ffc2 	bl	8009360 <sbrk_aligned>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	4604      	mov	r4, r0
 80093e0:	d14d      	bne.n	800947e <_malloc_r+0xde>
 80093e2:	6834      	ldr	r4, [r6, #0]
 80093e4:	4626      	mov	r6, r4
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	d140      	bne.n	800946c <_malloc_r+0xcc>
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	4631      	mov	r1, r6
 80093ee:	4638      	mov	r0, r7
 80093f0:	eb04 0803 	add.w	r8, r4, r3
 80093f4:	f000 fd40 	bl	8009e78 <_sbrk_r>
 80093f8:	4580      	cmp	r8, r0
 80093fa:	d13a      	bne.n	8009472 <_malloc_r+0xd2>
 80093fc:	6821      	ldr	r1, [r4, #0]
 80093fe:	3503      	adds	r5, #3
 8009400:	1a6d      	subs	r5, r5, r1
 8009402:	f025 0503 	bic.w	r5, r5, #3
 8009406:	3508      	adds	r5, #8
 8009408:	2d0c      	cmp	r5, #12
 800940a:	bf38      	it	cc
 800940c:	250c      	movcc	r5, #12
 800940e:	4629      	mov	r1, r5
 8009410:	4638      	mov	r0, r7
 8009412:	f7ff ffa5 	bl	8009360 <sbrk_aligned>
 8009416:	3001      	adds	r0, #1
 8009418:	d02b      	beq.n	8009472 <_malloc_r+0xd2>
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	442b      	add	r3, r5
 800941e:	6023      	str	r3, [r4, #0]
 8009420:	e00e      	b.n	8009440 <_malloc_r+0xa0>
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	1b52      	subs	r2, r2, r5
 8009426:	d41e      	bmi.n	8009466 <_malloc_r+0xc6>
 8009428:	2a0b      	cmp	r2, #11
 800942a:	d916      	bls.n	800945a <_malloc_r+0xba>
 800942c:	1961      	adds	r1, r4, r5
 800942e:	42a3      	cmp	r3, r4
 8009430:	6025      	str	r5, [r4, #0]
 8009432:	bf18      	it	ne
 8009434:	6059      	strne	r1, [r3, #4]
 8009436:	6863      	ldr	r3, [r4, #4]
 8009438:	bf08      	it	eq
 800943a:	6031      	streq	r1, [r6, #0]
 800943c:	5162      	str	r2, [r4, r5]
 800943e:	604b      	str	r3, [r1, #4]
 8009440:	4638      	mov	r0, r7
 8009442:	f104 060b 	add.w	r6, r4, #11
 8009446:	f001 ff47 	bl	800b2d8 <__malloc_unlock>
 800944a:	f026 0607 	bic.w	r6, r6, #7
 800944e:	1d23      	adds	r3, r4, #4
 8009450:	1af2      	subs	r2, r6, r3
 8009452:	d0b6      	beq.n	80093c2 <_malloc_r+0x22>
 8009454:	1b9b      	subs	r3, r3, r6
 8009456:	50a3      	str	r3, [r4, r2]
 8009458:	e7b3      	b.n	80093c2 <_malloc_r+0x22>
 800945a:	6862      	ldr	r2, [r4, #4]
 800945c:	42a3      	cmp	r3, r4
 800945e:	bf0c      	ite	eq
 8009460:	6032      	streq	r2, [r6, #0]
 8009462:	605a      	strne	r2, [r3, #4]
 8009464:	e7ec      	b.n	8009440 <_malloc_r+0xa0>
 8009466:	4623      	mov	r3, r4
 8009468:	6864      	ldr	r4, [r4, #4]
 800946a:	e7b2      	b.n	80093d2 <_malloc_r+0x32>
 800946c:	4634      	mov	r4, r6
 800946e:	6876      	ldr	r6, [r6, #4]
 8009470:	e7b9      	b.n	80093e6 <_malloc_r+0x46>
 8009472:	230c      	movs	r3, #12
 8009474:	603b      	str	r3, [r7, #0]
 8009476:	4638      	mov	r0, r7
 8009478:	f001 ff2e 	bl	800b2d8 <__malloc_unlock>
 800947c:	e7a1      	b.n	80093c2 <_malloc_r+0x22>
 800947e:	6025      	str	r5, [r4, #0]
 8009480:	e7de      	b.n	8009440 <_malloc_r+0xa0>
 8009482:	bf00      	nop
 8009484:	20000538 	.word	0x20000538

08009488 <__cvt>:
 8009488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800948c:	ec55 4b10 	vmov	r4, r5, d0
 8009490:	2d00      	cmp	r5, #0
 8009492:	460e      	mov	r6, r1
 8009494:	4619      	mov	r1, r3
 8009496:	462b      	mov	r3, r5
 8009498:	bfbb      	ittet	lt
 800949a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800949e:	461d      	movlt	r5, r3
 80094a0:	2300      	movge	r3, #0
 80094a2:	232d      	movlt	r3, #45	; 0x2d
 80094a4:	700b      	strb	r3, [r1, #0]
 80094a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80094ac:	4691      	mov	r9, r2
 80094ae:	f023 0820 	bic.w	r8, r3, #32
 80094b2:	bfbc      	itt	lt
 80094b4:	4622      	movlt	r2, r4
 80094b6:	4614      	movlt	r4, r2
 80094b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094bc:	d005      	beq.n	80094ca <__cvt+0x42>
 80094be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80094c2:	d100      	bne.n	80094c6 <__cvt+0x3e>
 80094c4:	3601      	adds	r6, #1
 80094c6:	2102      	movs	r1, #2
 80094c8:	e000      	b.n	80094cc <__cvt+0x44>
 80094ca:	2103      	movs	r1, #3
 80094cc:	ab03      	add	r3, sp, #12
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	ab02      	add	r3, sp, #8
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	ec45 4b10 	vmov	d0, r4, r5
 80094d8:	4653      	mov	r3, sl
 80094da:	4632      	mov	r2, r6
 80094dc:	f000 fee4 	bl	800a2a8 <_dtoa_r>
 80094e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80094e4:	4607      	mov	r7, r0
 80094e6:	d102      	bne.n	80094ee <__cvt+0x66>
 80094e8:	f019 0f01 	tst.w	r9, #1
 80094ec:	d022      	beq.n	8009534 <__cvt+0xac>
 80094ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094f2:	eb07 0906 	add.w	r9, r7, r6
 80094f6:	d110      	bne.n	800951a <__cvt+0x92>
 80094f8:	783b      	ldrb	r3, [r7, #0]
 80094fa:	2b30      	cmp	r3, #48	; 0x30
 80094fc:	d10a      	bne.n	8009514 <__cvt+0x8c>
 80094fe:	2200      	movs	r2, #0
 8009500:	2300      	movs	r3, #0
 8009502:	4620      	mov	r0, r4
 8009504:	4629      	mov	r1, r5
 8009506:	f7f7 fac7 	bl	8000a98 <__aeabi_dcmpeq>
 800950a:	b918      	cbnz	r0, 8009514 <__cvt+0x8c>
 800950c:	f1c6 0601 	rsb	r6, r6, #1
 8009510:	f8ca 6000 	str.w	r6, [sl]
 8009514:	f8da 3000 	ldr.w	r3, [sl]
 8009518:	4499      	add	r9, r3
 800951a:	2200      	movs	r2, #0
 800951c:	2300      	movs	r3, #0
 800951e:	4620      	mov	r0, r4
 8009520:	4629      	mov	r1, r5
 8009522:	f7f7 fab9 	bl	8000a98 <__aeabi_dcmpeq>
 8009526:	b108      	cbz	r0, 800952c <__cvt+0xa4>
 8009528:	f8cd 900c 	str.w	r9, [sp, #12]
 800952c:	2230      	movs	r2, #48	; 0x30
 800952e:	9b03      	ldr	r3, [sp, #12]
 8009530:	454b      	cmp	r3, r9
 8009532:	d307      	bcc.n	8009544 <__cvt+0xbc>
 8009534:	9b03      	ldr	r3, [sp, #12]
 8009536:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009538:	1bdb      	subs	r3, r3, r7
 800953a:	4638      	mov	r0, r7
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	b004      	add	sp, #16
 8009540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009544:	1c59      	adds	r1, r3, #1
 8009546:	9103      	str	r1, [sp, #12]
 8009548:	701a      	strb	r2, [r3, #0]
 800954a:	e7f0      	b.n	800952e <__cvt+0xa6>

0800954c <__exponent>:
 800954c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800954e:	4603      	mov	r3, r0
 8009550:	2900      	cmp	r1, #0
 8009552:	bfb8      	it	lt
 8009554:	4249      	neglt	r1, r1
 8009556:	f803 2b02 	strb.w	r2, [r3], #2
 800955a:	bfb4      	ite	lt
 800955c:	222d      	movlt	r2, #45	; 0x2d
 800955e:	222b      	movge	r2, #43	; 0x2b
 8009560:	2909      	cmp	r1, #9
 8009562:	7042      	strb	r2, [r0, #1]
 8009564:	dd2a      	ble.n	80095bc <__exponent+0x70>
 8009566:	f10d 0407 	add.w	r4, sp, #7
 800956a:	46a4      	mov	ip, r4
 800956c:	270a      	movs	r7, #10
 800956e:	46a6      	mov	lr, r4
 8009570:	460a      	mov	r2, r1
 8009572:	fb91 f6f7 	sdiv	r6, r1, r7
 8009576:	fb07 1516 	mls	r5, r7, r6, r1
 800957a:	3530      	adds	r5, #48	; 0x30
 800957c:	2a63      	cmp	r2, #99	; 0x63
 800957e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009582:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009586:	4631      	mov	r1, r6
 8009588:	dcf1      	bgt.n	800956e <__exponent+0x22>
 800958a:	3130      	adds	r1, #48	; 0x30
 800958c:	f1ae 0502 	sub.w	r5, lr, #2
 8009590:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009594:	1c44      	adds	r4, r0, #1
 8009596:	4629      	mov	r1, r5
 8009598:	4561      	cmp	r1, ip
 800959a:	d30a      	bcc.n	80095b2 <__exponent+0x66>
 800959c:	f10d 0209 	add.w	r2, sp, #9
 80095a0:	eba2 020e 	sub.w	r2, r2, lr
 80095a4:	4565      	cmp	r5, ip
 80095a6:	bf88      	it	hi
 80095a8:	2200      	movhi	r2, #0
 80095aa:	4413      	add	r3, r2
 80095ac:	1a18      	subs	r0, r3, r0
 80095ae:	b003      	add	sp, #12
 80095b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80095ba:	e7ed      	b.n	8009598 <__exponent+0x4c>
 80095bc:	2330      	movs	r3, #48	; 0x30
 80095be:	3130      	adds	r1, #48	; 0x30
 80095c0:	7083      	strb	r3, [r0, #2]
 80095c2:	70c1      	strb	r1, [r0, #3]
 80095c4:	1d03      	adds	r3, r0, #4
 80095c6:	e7f1      	b.n	80095ac <__exponent+0x60>

080095c8 <_printf_float>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	ed2d 8b02 	vpush	{d8}
 80095d0:	b08d      	sub	sp, #52	; 0x34
 80095d2:	460c      	mov	r4, r1
 80095d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80095d8:	4616      	mov	r6, r2
 80095da:	461f      	mov	r7, r3
 80095dc:	4605      	mov	r5, r0
 80095de:	f001 fe09 	bl	800b1f4 <_localeconv_r>
 80095e2:	f8d0 a000 	ldr.w	sl, [r0]
 80095e6:	4650      	mov	r0, sl
 80095e8:	f7f6 fdd4 	bl	8000194 <strlen>
 80095ec:	2300      	movs	r3, #0
 80095ee:	930a      	str	r3, [sp, #40]	; 0x28
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	9305      	str	r3, [sp, #20]
 80095f4:	f8d8 3000 	ldr.w	r3, [r8]
 80095f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80095fc:	3307      	adds	r3, #7
 80095fe:	f023 0307 	bic.w	r3, r3, #7
 8009602:	f103 0208 	add.w	r2, r3, #8
 8009606:	f8c8 2000 	str.w	r2, [r8]
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009612:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009616:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800961a:	9307      	str	r3, [sp, #28]
 800961c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009620:	ee08 0a10 	vmov	s16, r0
 8009624:	4b9f      	ldr	r3, [pc, #636]	; (80098a4 <_printf_float+0x2dc>)
 8009626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800962a:	f04f 32ff 	mov.w	r2, #4294967295
 800962e:	f7f7 fa65 	bl	8000afc <__aeabi_dcmpun>
 8009632:	bb88      	cbnz	r0, 8009698 <_printf_float+0xd0>
 8009634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009638:	4b9a      	ldr	r3, [pc, #616]	; (80098a4 <_printf_float+0x2dc>)
 800963a:	f04f 32ff 	mov.w	r2, #4294967295
 800963e:	f7f7 fa3f 	bl	8000ac0 <__aeabi_dcmple>
 8009642:	bb48      	cbnz	r0, 8009698 <_printf_float+0xd0>
 8009644:	2200      	movs	r2, #0
 8009646:	2300      	movs	r3, #0
 8009648:	4640      	mov	r0, r8
 800964a:	4649      	mov	r1, r9
 800964c:	f7f7 fa2e 	bl	8000aac <__aeabi_dcmplt>
 8009650:	b110      	cbz	r0, 8009658 <_printf_float+0x90>
 8009652:	232d      	movs	r3, #45	; 0x2d
 8009654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009658:	4b93      	ldr	r3, [pc, #588]	; (80098a8 <_printf_float+0x2e0>)
 800965a:	4894      	ldr	r0, [pc, #592]	; (80098ac <_printf_float+0x2e4>)
 800965c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009660:	bf94      	ite	ls
 8009662:	4698      	movls	r8, r3
 8009664:	4680      	movhi	r8, r0
 8009666:	2303      	movs	r3, #3
 8009668:	6123      	str	r3, [r4, #16]
 800966a:	9b05      	ldr	r3, [sp, #20]
 800966c:	f023 0204 	bic.w	r2, r3, #4
 8009670:	6022      	str	r2, [r4, #0]
 8009672:	f04f 0900 	mov.w	r9, #0
 8009676:	9700      	str	r7, [sp, #0]
 8009678:	4633      	mov	r3, r6
 800967a:	aa0b      	add	r2, sp, #44	; 0x2c
 800967c:	4621      	mov	r1, r4
 800967e:	4628      	mov	r0, r5
 8009680:	f000 f9d8 	bl	8009a34 <_printf_common>
 8009684:	3001      	adds	r0, #1
 8009686:	f040 8090 	bne.w	80097aa <_printf_float+0x1e2>
 800968a:	f04f 30ff 	mov.w	r0, #4294967295
 800968e:	b00d      	add	sp, #52	; 0x34
 8009690:	ecbd 8b02 	vpop	{d8}
 8009694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009698:	4642      	mov	r2, r8
 800969a:	464b      	mov	r3, r9
 800969c:	4640      	mov	r0, r8
 800969e:	4649      	mov	r1, r9
 80096a0:	f7f7 fa2c 	bl	8000afc <__aeabi_dcmpun>
 80096a4:	b140      	cbz	r0, 80096b8 <_printf_float+0xf0>
 80096a6:	464b      	mov	r3, r9
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	bfbc      	itt	lt
 80096ac:	232d      	movlt	r3, #45	; 0x2d
 80096ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096b2:	487f      	ldr	r0, [pc, #508]	; (80098b0 <_printf_float+0x2e8>)
 80096b4:	4b7f      	ldr	r3, [pc, #508]	; (80098b4 <_printf_float+0x2ec>)
 80096b6:	e7d1      	b.n	800965c <_printf_float+0x94>
 80096b8:	6863      	ldr	r3, [r4, #4]
 80096ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80096be:	9206      	str	r2, [sp, #24]
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	d13f      	bne.n	8009744 <_printf_float+0x17c>
 80096c4:	2306      	movs	r3, #6
 80096c6:	6063      	str	r3, [r4, #4]
 80096c8:	9b05      	ldr	r3, [sp, #20]
 80096ca:	6861      	ldr	r1, [r4, #4]
 80096cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80096d0:	2300      	movs	r3, #0
 80096d2:	9303      	str	r3, [sp, #12]
 80096d4:	ab0a      	add	r3, sp, #40	; 0x28
 80096d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80096da:	ab09      	add	r3, sp, #36	; 0x24
 80096dc:	ec49 8b10 	vmov	d0, r8, r9
 80096e0:	9300      	str	r3, [sp, #0]
 80096e2:	6022      	str	r2, [r4, #0]
 80096e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80096e8:	4628      	mov	r0, r5
 80096ea:	f7ff fecd 	bl	8009488 <__cvt>
 80096ee:	9b06      	ldr	r3, [sp, #24]
 80096f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096f2:	2b47      	cmp	r3, #71	; 0x47
 80096f4:	4680      	mov	r8, r0
 80096f6:	d108      	bne.n	800970a <_printf_float+0x142>
 80096f8:	1cc8      	adds	r0, r1, #3
 80096fa:	db02      	blt.n	8009702 <_printf_float+0x13a>
 80096fc:	6863      	ldr	r3, [r4, #4]
 80096fe:	4299      	cmp	r1, r3
 8009700:	dd41      	ble.n	8009786 <_printf_float+0x1be>
 8009702:	f1ab 0b02 	sub.w	fp, fp, #2
 8009706:	fa5f fb8b 	uxtb.w	fp, fp
 800970a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800970e:	d820      	bhi.n	8009752 <_printf_float+0x18a>
 8009710:	3901      	subs	r1, #1
 8009712:	465a      	mov	r2, fp
 8009714:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009718:	9109      	str	r1, [sp, #36]	; 0x24
 800971a:	f7ff ff17 	bl	800954c <__exponent>
 800971e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009720:	1813      	adds	r3, r2, r0
 8009722:	2a01      	cmp	r2, #1
 8009724:	4681      	mov	r9, r0
 8009726:	6123      	str	r3, [r4, #16]
 8009728:	dc02      	bgt.n	8009730 <_printf_float+0x168>
 800972a:	6822      	ldr	r2, [r4, #0]
 800972c:	07d2      	lsls	r2, r2, #31
 800972e:	d501      	bpl.n	8009734 <_printf_float+0x16c>
 8009730:	3301      	adds	r3, #1
 8009732:	6123      	str	r3, [r4, #16]
 8009734:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009738:	2b00      	cmp	r3, #0
 800973a:	d09c      	beq.n	8009676 <_printf_float+0xae>
 800973c:	232d      	movs	r3, #45	; 0x2d
 800973e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009742:	e798      	b.n	8009676 <_printf_float+0xae>
 8009744:	9a06      	ldr	r2, [sp, #24]
 8009746:	2a47      	cmp	r2, #71	; 0x47
 8009748:	d1be      	bne.n	80096c8 <_printf_float+0x100>
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1bc      	bne.n	80096c8 <_printf_float+0x100>
 800974e:	2301      	movs	r3, #1
 8009750:	e7b9      	b.n	80096c6 <_printf_float+0xfe>
 8009752:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009756:	d118      	bne.n	800978a <_printf_float+0x1c2>
 8009758:	2900      	cmp	r1, #0
 800975a:	6863      	ldr	r3, [r4, #4]
 800975c:	dd0b      	ble.n	8009776 <_printf_float+0x1ae>
 800975e:	6121      	str	r1, [r4, #16]
 8009760:	b913      	cbnz	r3, 8009768 <_printf_float+0x1a0>
 8009762:	6822      	ldr	r2, [r4, #0]
 8009764:	07d0      	lsls	r0, r2, #31
 8009766:	d502      	bpl.n	800976e <_printf_float+0x1a6>
 8009768:	3301      	adds	r3, #1
 800976a:	440b      	add	r3, r1
 800976c:	6123      	str	r3, [r4, #16]
 800976e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009770:	f04f 0900 	mov.w	r9, #0
 8009774:	e7de      	b.n	8009734 <_printf_float+0x16c>
 8009776:	b913      	cbnz	r3, 800977e <_printf_float+0x1b6>
 8009778:	6822      	ldr	r2, [r4, #0]
 800977a:	07d2      	lsls	r2, r2, #31
 800977c:	d501      	bpl.n	8009782 <_printf_float+0x1ba>
 800977e:	3302      	adds	r3, #2
 8009780:	e7f4      	b.n	800976c <_printf_float+0x1a4>
 8009782:	2301      	movs	r3, #1
 8009784:	e7f2      	b.n	800976c <_printf_float+0x1a4>
 8009786:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800978a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800978c:	4299      	cmp	r1, r3
 800978e:	db05      	blt.n	800979c <_printf_float+0x1d4>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	6121      	str	r1, [r4, #16]
 8009794:	07d8      	lsls	r0, r3, #31
 8009796:	d5ea      	bpl.n	800976e <_printf_float+0x1a6>
 8009798:	1c4b      	adds	r3, r1, #1
 800979a:	e7e7      	b.n	800976c <_printf_float+0x1a4>
 800979c:	2900      	cmp	r1, #0
 800979e:	bfd4      	ite	le
 80097a0:	f1c1 0202 	rsble	r2, r1, #2
 80097a4:	2201      	movgt	r2, #1
 80097a6:	4413      	add	r3, r2
 80097a8:	e7e0      	b.n	800976c <_printf_float+0x1a4>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	055a      	lsls	r2, r3, #21
 80097ae:	d407      	bmi.n	80097c0 <_printf_float+0x1f8>
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	4642      	mov	r2, r8
 80097b4:	4631      	mov	r1, r6
 80097b6:	4628      	mov	r0, r5
 80097b8:	47b8      	blx	r7
 80097ba:	3001      	adds	r0, #1
 80097bc:	d12c      	bne.n	8009818 <_printf_float+0x250>
 80097be:	e764      	b.n	800968a <_printf_float+0xc2>
 80097c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097c4:	f240 80e0 	bls.w	8009988 <_printf_float+0x3c0>
 80097c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097cc:	2200      	movs	r2, #0
 80097ce:	2300      	movs	r3, #0
 80097d0:	f7f7 f962 	bl	8000a98 <__aeabi_dcmpeq>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d034      	beq.n	8009842 <_printf_float+0x27a>
 80097d8:	4a37      	ldr	r2, [pc, #220]	; (80098b8 <_printf_float+0x2f0>)
 80097da:	2301      	movs	r3, #1
 80097dc:	4631      	mov	r1, r6
 80097de:	4628      	mov	r0, r5
 80097e0:	47b8      	blx	r7
 80097e2:	3001      	adds	r0, #1
 80097e4:	f43f af51 	beq.w	800968a <_printf_float+0xc2>
 80097e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097ec:	429a      	cmp	r2, r3
 80097ee:	db02      	blt.n	80097f6 <_printf_float+0x22e>
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	07d8      	lsls	r0, r3, #31
 80097f4:	d510      	bpl.n	8009818 <_printf_float+0x250>
 80097f6:	ee18 3a10 	vmov	r3, s16
 80097fa:	4652      	mov	r2, sl
 80097fc:	4631      	mov	r1, r6
 80097fe:	4628      	mov	r0, r5
 8009800:	47b8      	blx	r7
 8009802:	3001      	adds	r0, #1
 8009804:	f43f af41 	beq.w	800968a <_printf_float+0xc2>
 8009808:	f04f 0800 	mov.w	r8, #0
 800980c:	f104 091a 	add.w	r9, r4, #26
 8009810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009812:	3b01      	subs	r3, #1
 8009814:	4543      	cmp	r3, r8
 8009816:	dc09      	bgt.n	800982c <_printf_float+0x264>
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	079b      	lsls	r3, r3, #30
 800981c:	f100 8105 	bmi.w	8009a2a <_printf_float+0x462>
 8009820:	68e0      	ldr	r0, [r4, #12]
 8009822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009824:	4298      	cmp	r0, r3
 8009826:	bfb8      	it	lt
 8009828:	4618      	movlt	r0, r3
 800982a:	e730      	b.n	800968e <_printf_float+0xc6>
 800982c:	2301      	movs	r3, #1
 800982e:	464a      	mov	r2, r9
 8009830:	4631      	mov	r1, r6
 8009832:	4628      	mov	r0, r5
 8009834:	47b8      	blx	r7
 8009836:	3001      	adds	r0, #1
 8009838:	f43f af27 	beq.w	800968a <_printf_float+0xc2>
 800983c:	f108 0801 	add.w	r8, r8, #1
 8009840:	e7e6      	b.n	8009810 <_printf_float+0x248>
 8009842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009844:	2b00      	cmp	r3, #0
 8009846:	dc39      	bgt.n	80098bc <_printf_float+0x2f4>
 8009848:	4a1b      	ldr	r2, [pc, #108]	; (80098b8 <_printf_float+0x2f0>)
 800984a:	2301      	movs	r3, #1
 800984c:	4631      	mov	r1, r6
 800984e:	4628      	mov	r0, r5
 8009850:	47b8      	blx	r7
 8009852:	3001      	adds	r0, #1
 8009854:	f43f af19 	beq.w	800968a <_printf_float+0xc2>
 8009858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800985c:	4313      	orrs	r3, r2
 800985e:	d102      	bne.n	8009866 <_printf_float+0x29e>
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	07d9      	lsls	r1, r3, #31
 8009864:	d5d8      	bpl.n	8009818 <_printf_float+0x250>
 8009866:	ee18 3a10 	vmov	r3, s16
 800986a:	4652      	mov	r2, sl
 800986c:	4631      	mov	r1, r6
 800986e:	4628      	mov	r0, r5
 8009870:	47b8      	blx	r7
 8009872:	3001      	adds	r0, #1
 8009874:	f43f af09 	beq.w	800968a <_printf_float+0xc2>
 8009878:	f04f 0900 	mov.w	r9, #0
 800987c:	f104 0a1a 	add.w	sl, r4, #26
 8009880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009882:	425b      	negs	r3, r3
 8009884:	454b      	cmp	r3, r9
 8009886:	dc01      	bgt.n	800988c <_printf_float+0x2c4>
 8009888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800988a:	e792      	b.n	80097b2 <_printf_float+0x1ea>
 800988c:	2301      	movs	r3, #1
 800988e:	4652      	mov	r2, sl
 8009890:	4631      	mov	r1, r6
 8009892:	4628      	mov	r0, r5
 8009894:	47b8      	blx	r7
 8009896:	3001      	adds	r0, #1
 8009898:	f43f aef7 	beq.w	800968a <_printf_float+0xc2>
 800989c:	f109 0901 	add.w	r9, r9, #1
 80098a0:	e7ee      	b.n	8009880 <_printf_float+0x2b8>
 80098a2:	bf00      	nop
 80098a4:	7fefffff 	.word	0x7fefffff
 80098a8:	0800cf34 	.word	0x0800cf34
 80098ac:	0800cf38 	.word	0x0800cf38
 80098b0:	0800cf40 	.word	0x0800cf40
 80098b4:	0800cf3c 	.word	0x0800cf3c
 80098b8:	0800cf44 	.word	0x0800cf44
 80098bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098c0:	429a      	cmp	r2, r3
 80098c2:	bfa8      	it	ge
 80098c4:	461a      	movge	r2, r3
 80098c6:	2a00      	cmp	r2, #0
 80098c8:	4691      	mov	r9, r2
 80098ca:	dc37      	bgt.n	800993c <_printf_float+0x374>
 80098cc:	f04f 0b00 	mov.w	fp, #0
 80098d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098d4:	f104 021a 	add.w	r2, r4, #26
 80098d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098da:	9305      	str	r3, [sp, #20]
 80098dc:	eba3 0309 	sub.w	r3, r3, r9
 80098e0:	455b      	cmp	r3, fp
 80098e2:	dc33      	bgt.n	800994c <_printf_float+0x384>
 80098e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098e8:	429a      	cmp	r2, r3
 80098ea:	db3b      	blt.n	8009964 <_printf_float+0x39c>
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	07da      	lsls	r2, r3, #31
 80098f0:	d438      	bmi.n	8009964 <_printf_float+0x39c>
 80098f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f4:	9a05      	ldr	r2, [sp, #20]
 80098f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098f8:	1a9a      	subs	r2, r3, r2
 80098fa:	eba3 0901 	sub.w	r9, r3, r1
 80098fe:	4591      	cmp	r9, r2
 8009900:	bfa8      	it	ge
 8009902:	4691      	movge	r9, r2
 8009904:	f1b9 0f00 	cmp.w	r9, #0
 8009908:	dc35      	bgt.n	8009976 <_printf_float+0x3ae>
 800990a:	f04f 0800 	mov.w	r8, #0
 800990e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009912:	f104 0a1a 	add.w	sl, r4, #26
 8009916:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800991a:	1a9b      	subs	r3, r3, r2
 800991c:	eba3 0309 	sub.w	r3, r3, r9
 8009920:	4543      	cmp	r3, r8
 8009922:	f77f af79 	ble.w	8009818 <_printf_float+0x250>
 8009926:	2301      	movs	r3, #1
 8009928:	4652      	mov	r2, sl
 800992a:	4631      	mov	r1, r6
 800992c:	4628      	mov	r0, r5
 800992e:	47b8      	blx	r7
 8009930:	3001      	adds	r0, #1
 8009932:	f43f aeaa 	beq.w	800968a <_printf_float+0xc2>
 8009936:	f108 0801 	add.w	r8, r8, #1
 800993a:	e7ec      	b.n	8009916 <_printf_float+0x34e>
 800993c:	4613      	mov	r3, r2
 800993e:	4631      	mov	r1, r6
 8009940:	4642      	mov	r2, r8
 8009942:	4628      	mov	r0, r5
 8009944:	47b8      	blx	r7
 8009946:	3001      	adds	r0, #1
 8009948:	d1c0      	bne.n	80098cc <_printf_float+0x304>
 800994a:	e69e      	b.n	800968a <_printf_float+0xc2>
 800994c:	2301      	movs	r3, #1
 800994e:	4631      	mov	r1, r6
 8009950:	4628      	mov	r0, r5
 8009952:	9205      	str	r2, [sp, #20]
 8009954:	47b8      	blx	r7
 8009956:	3001      	adds	r0, #1
 8009958:	f43f ae97 	beq.w	800968a <_printf_float+0xc2>
 800995c:	9a05      	ldr	r2, [sp, #20]
 800995e:	f10b 0b01 	add.w	fp, fp, #1
 8009962:	e7b9      	b.n	80098d8 <_printf_float+0x310>
 8009964:	ee18 3a10 	vmov	r3, s16
 8009968:	4652      	mov	r2, sl
 800996a:	4631      	mov	r1, r6
 800996c:	4628      	mov	r0, r5
 800996e:	47b8      	blx	r7
 8009970:	3001      	adds	r0, #1
 8009972:	d1be      	bne.n	80098f2 <_printf_float+0x32a>
 8009974:	e689      	b.n	800968a <_printf_float+0xc2>
 8009976:	9a05      	ldr	r2, [sp, #20]
 8009978:	464b      	mov	r3, r9
 800997a:	4442      	add	r2, r8
 800997c:	4631      	mov	r1, r6
 800997e:	4628      	mov	r0, r5
 8009980:	47b8      	blx	r7
 8009982:	3001      	adds	r0, #1
 8009984:	d1c1      	bne.n	800990a <_printf_float+0x342>
 8009986:	e680      	b.n	800968a <_printf_float+0xc2>
 8009988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800998a:	2a01      	cmp	r2, #1
 800998c:	dc01      	bgt.n	8009992 <_printf_float+0x3ca>
 800998e:	07db      	lsls	r3, r3, #31
 8009990:	d538      	bpl.n	8009a04 <_printf_float+0x43c>
 8009992:	2301      	movs	r3, #1
 8009994:	4642      	mov	r2, r8
 8009996:	4631      	mov	r1, r6
 8009998:	4628      	mov	r0, r5
 800999a:	47b8      	blx	r7
 800999c:	3001      	adds	r0, #1
 800999e:	f43f ae74 	beq.w	800968a <_printf_float+0xc2>
 80099a2:	ee18 3a10 	vmov	r3, s16
 80099a6:	4652      	mov	r2, sl
 80099a8:	4631      	mov	r1, r6
 80099aa:	4628      	mov	r0, r5
 80099ac:	47b8      	blx	r7
 80099ae:	3001      	adds	r0, #1
 80099b0:	f43f ae6b 	beq.w	800968a <_printf_float+0xc2>
 80099b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099b8:	2200      	movs	r2, #0
 80099ba:	2300      	movs	r3, #0
 80099bc:	f7f7 f86c 	bl	8000a98 <__aeabi_dcmpeq>
 80099c0:	b9d8      	cbnz	r0, 80099fa <_printf_float+0x432>
 80099c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c4:	f108 0201 	add.w	r2, r8, #1
 80099c8:	3b01      	subs	r3, #1
 80099ca:	4631      	mov	r1, r6
 80099cc:	4628      	mov	r0, r5
 80099ce:	47b8      	blx	r7
 80099d0:	3001      	adds	r0, #1
 80099d2:	d10e      	bne.n	80099f2 <_printf_float+0x42a>
 80099d4:	e659      	b.n	800968a <_printf_float+0xc2>
 80099d6:	2301      	movs	r3, #1
 80099d8:	4652      	mov	r2, sl
 80099da:	4631      	mov	r1, r6
 80099dc:	4628      	mov	r0, r5
 80099de:	47b8      	blx	r7
 80099e0:	3001      	adds	r0, #1
 80099e2:	f43f ae52 	beq.w	800968a <_printf_float+0xc2>
 80099e6:	f108 0801 	add.w	r8, r8, #1
 80099ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ec:	3b01      	subs	r3, #1
 80099ee:	4543      	cmp	r3, r8
 80099f0:	dcf1      	bgt.n	80099d6 <_printf_float+0x40e>
 80099f2:	464b      	mov	r3, r9
 80099f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80099f8:	e6dc      	b.n	80097b4 <_printf_float+0x1ec>
 80099fa:	f04f 0800 	mov.w	r8, #0
 80099fe:	f104 0a1a 	add.w	sl, r4, #26
 8009a02:	e7f2      	b.n	80099ea <_printf_float+0x422>
 8009a04:	2301      	movs	r3, #1
 8009a06:	4642      	mov	r2, r8
 8009a08:	e7df      	b.n	80099ca <_printf_float+0x402>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	464a      	mov	r2, r9
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b8      	blx	r7
 8009a14:	3001      	adds	r0, #1
 8009a16:	f43f ae38 	beq.w	800968a <_printf_float+0xc2>
 8009a1a:	f108 0801 	add.w	r8, r8, #1
 8009a1e:	68e3      	ldr	r3, [r4, #12]
 8009a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a22:	1a5b      	subs	r3, r3, r1
 8009a24:	4543      	cmp	r3, r8
 8009a26:	dcf0      	bgt.n	8009a0a <_printf_float+0x442>
 8009a28:	e6fa      	b.n	8009820 <_printf_float+0x258>
 8009a2a:	f04f 0800 	mov.w	r8, #0
 8009a2e:	f104 0919 	add.w	r9, r4, #25
 8009a32:	e7f4      	b.n	8009a1e <_printf_float+0x456>

08009a34 <_printf_common>:
 8009a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a38:	4616      	mov	r6, r2
 8009a3a:	4699      	mov	r9, r3
 8009a3c:	688a      	ldr	r2, [r1, #8]
 8009a3e:	690b      	ldr	r3, [r1, #16]
 8009a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a44:	4293      	cmp	r3, r2
 8009a46:	bfb8      	it	lt
 8009a48:	4613      	movlt	r3, r2
 8009a4a:	6033      	str	r3, [r6, #0]
 8009a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a50:	4607      	mov	r7, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	b10a      	cbz	r2, 8009a5a <_printf_common+0x26>
 8009a56:	3301      	adds	r3, #1
 8009a58:	6033      	str	r3, [r6, #0]
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	0699      	lsls	r1, r3, #26
 8009a5e:	bf42      	ittt	mi
 8009a60:	6833      	ldrmi	r3, [r6, #0]
 8009a62:	3302      	addmi	r3, #2
 8009a64:	6033      	strmi	r3, [r6, #0]
 8009a66:	6825      	ldr	r5, [r4, #0]
 8009a68:	f015 0506 	ands.w	r5, r5, #6
 8009a6c:	d106      	bne.n	8009a7c <_printf_common+0x48>
 8009a6e:	f104 0a19 	add.w	sl, r4, #25
 8009a72:	68e3      	ldr	r3, [r4, #12]
 8009a74:	6832      	ldr	r2, [r6, #0]
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	42ab      	cmp	r3, r5
 8009a7a:	dc26      	bgt.n	8009aca <_printf_common+0x96>
 8009a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a80:	1e13      	subs	r3, r2, #0
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	bf18      	it	ne
 8009a86:	2301      	movne	r3, #1
 8009a88:	0692      	lsls	r2, r2, #26
 8009a8a:	d42b      	bmi.n	8009ae4 <_printf_common+0xb0>
 8009a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a90:	4649      	mov	r1, r9
 8009a92:	4638      	mov	r0, r7
 8009a94:	47c0      	blx	r8
 8009a96:	3001      	adds	r0, #1
 8009a98:	d01e      	beq.n	8009ad8 <_printf_common+0xa4>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	68e5      	ldr	r5, [r4, #12]
 8009a9e:	6832      	ldr	r2, [r6, #0]
 8009aa0:	f003 0306 	and.w	r3, r3, #6
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	bf08      	it	eq
 8009aa8:	1aad      	subeq	r5, r5, r2
 8009aaa:	68a3      	ldr	r3, [r4, #8]
 8009aac:	6922      	ldr	r2, [r4, #16]
 8009aae:	bf0c      	ite	eq
 8009ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab4:	2500      	movne	r5, #0
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	bfc4      	itt	gt
 8009aba:	1a9b      	subgt	r3, r3, r2
 8009abc:	18ed      	addgt	r5, r5, r3
 8009abe:	2600      	movs	r6, #0
 8009ac0:	341a      	adds	r4, #26
 8009ac2:	42b5      	cmp	r5, r6
 8009ac4:	d11a      	bne.n	8009afc <_printf_common+0xc8>
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	e008      	b.n	8009adc <_printf_common+0xa8>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4652      	mov	r2, sl
 8009ace:	4649      	mov	r1, r9
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	47c0      	blx	r8
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d103      	bne.n	8009ae0 <_printf_common+0xac>
 8009ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8009adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	e7c6      	b.n	8009a72 <_printf_common+0x3e>
 8009ae4:	18e1      	adds	r1, r4, r3
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	2030      	movs	r0, #48	; 0x30
 8009aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aee:	4422      	add	r2, r4
 8009af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009af8:	3302      	adds	r3, #2
 8009afa:	e7c7      	b.n	8009a8c <_printf_common+0x58>
 8009afc:	2301      	movs	r3, #1
 8009afe:	4622      	mov	r2, r4
 8009b00:	4649      	mov	r1, r9
 8009b02:	4638      	mov	r0, r7
 8009b04:	47c0      	blx	r8
 8009b06:	3001      	adds	r0, #1
 8009b08:	d0e6      	beq.n	8009ad8 <_printf_common+0xa4>
 8009b0a:	3601      	adds	r6, #1
 8009b0c:	e7d9      	b.n	8009ac2 <_printf_common+0x8e>
	...

08009b10 <_printf_i>:
 8009b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b14:	7e0f      	ldrb	r7, [r1, #24]
 8009b16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b18:	2f78      	cmp	r7, #120	; 0x78
 8009b1a:	4691      	mov	r9, r2
 8009b1c:	4680      	mov	r8, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	469a      	mov	sl, r3
 8009b22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b26:	d807      	bhi.n	8009b38 <_printf_i+0x28>
 8009b28:	2f62      	cmp	r7, #98	; 0x62
 8009b2a:	d80a      	bhi.n	8009b42 <_printf_i+0x32>
 8009b2c:	2f00      	cmp	r7, #0
 8009b2e:	f000 80d8 	beq.w	8009ce2 <_printf_i+0x1d2>
 8009b32:	2f58      	cmp	r7, #88	; 0x58
 8009b34:	f000 80a3 	beq.w	8009c7e <_printf_i+0x16e>
 8009b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b40:	e03a      	b.n	8009bb8 <_printf_i+0xa8>
 8009b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b46:	2b15      	cmp	r3, #21
 8009b48:	d8f6      	bhi.n	8009b38 <_printf_i+0x28>
 8009b4a:	a101      	add	r1, pc, #4	; (adr r1, 8009b50 <_printf_i+0x40>)
 8009b4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b50:	08009ba9 	.word	0x08009ba9
 8009b54:	08009bbd 	.word	0x08009bbd
 8009b58:	08009b39 	.word	0x08009b39
 8009b5c:	08009b39 	.word	0x08009b39
 8009b60:	08009b39 	.word	0x08009b39
 8009b64:	08009b39 	.word	0x08009b39
 8009b68:	08009bbd 	.word	0x08009bbd
 8009b6c:	08009b39 	.word	0x08009b39
 8009b70:	08009b39 	.word	0x08009b39
 8009b74:	08009b39 	.word	0x08009b39
 8009b78:	08009b39 	.word	0x08009b39
 8009b7c:	08009cc9 	.word	0x08009cc9
 8009b80:	08009bed 	.word	0x08009bed
 8009b84:	08009cab 	.word	0x08009cab
 8009b88:	08009b39 	.word	0x08009b39
 8009b8c:	08009b39 	.word	0x08009b39
 8009b90:	08009ceb 	.word	0x08009ceb
 8009b94:	08009b39 	.word	0x08009b39
 8009b98:	08009bed 	.word	0x08009bed
 8009b9c:	08009b39 	.word	0x08009b39
 8009ba0:	08009b39 	.word	0x08009b39
 8009ba4:	08009cb3 	.word	0x08009cb3
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	1d1a      	adds	r2, r3, #4
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	602a      	str	r2, [r5, #0]
 8009bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e0a3      	b.n	8009d04 <_printf_i+0x1f4>
 8009bbc:	6820      	ldr	r0, [r4, #0]
 8009bbe:	6829      	ldr	r1, [r5, #0]
 8009bc0:	0606      	lsls	r6, r0, #24
 8009bc2:	f101 0304 	add.w	r3, r1, #4
 8009bc6:	d50a      	bpl.n	8009bde <_printf_i+0xce>
 8009bc8:	680e      	ldr	r6, [r1, #0]
 8009bca:	602b      	str	r3, [r5, #0]
 8009bcc:	2e00      	cmp	r6, #0
 8009bce:	da03      	bge.n	8009bd8 <_printf_i+0xc8>
 8009bd0:	232d      	movs	r3, #45	; 0x2d
 8009bd2:	4276      	negs	r6, r6
 8009bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bd8:	485e      	ldr	r0, [pc, #376]	; (8009d54 <_printf_i+0x244>)
 8009bda:	230a      	movs	r3, #10
 8009bdc:	e019      	b.n	8009c12 <_printf_i+0x102>
 8009bde:	680e      	ldr	r6, [r1, #0]
 8009be0:	602b      	str	r3, [r5, #0]
 8009be2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009be6:	bf18      	it	ne
 8009be8:	b236      	sxthne	r6, r6
 8009bea:	e7ef      	b.n	8009bcc <_printf_i+0xbc>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	6820      	ldr	r0, [r4, #0]
 8009bf0:	1d19      	adds	r1, r3, #4
 8009bf2:	6029      	str	r1, [r5, #0]
 8009bf4:	0601      	lsls	r1, r0, #24
 8009bf6:	d501      	bpl.n	8009bfc <_printf_i+0xec>
 8009bf8:	681e      	ldr	r6, [r3, #0]
 8009bfa:	e002      	b.n	8009c02 <_printf_i+0xf2>
 8009bfc:	0646      	lsls	r6, r0, #25
 8009bfe:	d5fb      	bpl.n	8009bf8 <_printf_i+0xe8>
 8009c00:	881e      	ldrh	r6, [r3, #0]
 8009c02:	4854      	ldr	r0, [pc, #336]	; (8009d54 <_printf_i+0x244>)
 8009c04:	2f6f      	cmp	r7, #111	; 0x6f
 8009c06:	bf0c      	ite	eq
 8009c08:	2308      	moveq	r3, #8
 8009c0a:	230a      	movne	r3, #10
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c12:	6865      	ldr	r5, [r4, #4]
 8009c14:	60a5      	str	r5, [r4, #8]
 8009c16:	2d00      	cmp	r5, #0
 8009c18:	bfa2      	ittt	ge
 8009c1a:	6821      	ldrge	r1, [r4, #0]
 8009c1c:	f021 0104 	bicge.w	r1, r1, #4
 8009c20:	6021      	strge	r1, [r4, #0]
 8009c22:	b90e      	cbnz	r6, 8009c28 <_printf_i+0x118>
 8009c24:	2d00      	cmp	r5, #0
 8009c26:	d04d      	beq.n	8009cc4 <_printf_i+0x1b4>
 8009c28:	4615      	mov	r5, r2
 8009c2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c2e:	fb03 6711 	mls	r7, r3, r1, r6
 8009c32:	5dc7      	ldrb	r7, [r0, r7]
 8009c34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c38:	4637      	mov	r7, r6
 8009c3a:	42bb      	cmp	r3, r7
 8009c3c:	460e      	mov	r6, r1
 8009c3e:	d9f4      	bls.n	8009c2a <_printf_i+0x11a>
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d10b      	bne.n	8009c5c <_printf_i+0x14c>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	07de      	lsls	r6, r3, #31
 8009c48:	d508      	bpl.n	8009c5c <_printf_i+0x14c>
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	6861      	ldr	r1, [r4, #4]
 8009c4e:	4299      	cmp	r1, r3
 8009c50:	bfde      	ittt	le
 8009c52:	2330      	movle	r3, #48	; 0x30
 8009c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c5c:	1b52      	subs	r2, r2, r5
 8009c5e:	6122      	str	r2, [r4, #16]
 8009c60:	f8cd a000 	str.w	sl, [sp]
 8009c64:	464b      	mov	r3, r9
 8009c66:	aa03      	add	r2, sp, #12
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	f7ff fee2 	bl	8009a34 <_printf_common>
 8009c70:	3001      	adds	r0, #1
 8009c72:	d14c      	bne.n	8009d0e <_printf_i+0x1fe>
 8009c74:	f04f 30ff 	mov.w	r0, #4294967295
 8009c78:	b004      	add	sp, #16
 8009c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7e:	4835      	ldr	r0, [pc, #212]	; (8009d54 <_printf_i+0x244>)
 8009c80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c84:	6829      	ldr	r1, [r5, #0]
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c8c:	6029      	str	r1, [r5, #0]
 8009c8e:	061d      	lsls	r5, r3, #24
 8009c90:	d514      	bpl.n	8009cbc <_printf_i+0x1ac>
 8009c92:	07df      	lsls	r7, r3, #31
 8009c94:	bf44      	itt	mi
 8009c96:	f043 0320 	orrmi.w	r3, r3, #32
 8009c9a:	6023      	strmi	r3, [r4, #0]
 8009c9c:	b91e      	cbnz	r6, 8009ca6 <_printf_i+0x196>
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	f023 0320 	bic.w	r3, r3, #32
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	2310      	movs	r3, #16
 8009ca8:	e7b0      	b.n	8009c0c <_printf_i+0xfc>
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	f043 0320 	orr.w	r3, r3, #32
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	2378      	movs	r3, #120	; 0x78
 8009cb4:	4828      	ldr	r0, [pc, #160]	; (8009d58 <_printf_i+0x248>)
 8009cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cba:	e7e3      	b.n	8009c84 <_printf_i+0x174>
 8009cbc:	0659      	lsls	r1, r3, #25
 8009cbe:	bf48      	it	mi
 8009cc0:	b2b6      	uxthmi	r6, r6
 8009cc2:	e7e6      	b.n	8009c92 <_printf_i+0x182>
 8009cc4:	4615      	mov	r5, r2
 8009cc6:	e7bb      	b.n	8009c40 <_printf_i+0x130>
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	6826      	ldr	r6, [r4, #0]
 8009ccc:	6961      	ldr	r1, [r4, #20]
 8009cce:	1d18      	adds	r0, r3, #4
 8009cd0:	6028      	str	r0, [r5, #0]
 8009cd2:	0635      	lsls	r5, r6, #24
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	d501      	bpl.n	8009cdc <_printf_i+0x1cc>
 8009cd8:	6019      	str	r1, [r3, #0]
 8009cda:	e002      	b.n	8009ce2 <_printf_i+0x1d2>
 8009cdc:	0670      	lsls	r0, r6, #25
 8009cde:	d5fb      	bpl.n	8009cd8 <_printf_i+0x1c8>
 8009ce0:	8019      	strh	r1, [r3, #0]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6123      	str	r3, [r4, #16]
 8009ce6:	4615      	mov	r5, r2
 8009ce8:	e7ba      	b.n	8009c60 <_printf_i+0x150>
 8009cea:	682b      	ldr	r3, [r5, #0]
 8009cec:	1d1a      	adds	r2, r3, #4
 8009cee:	602a      	str	r2, [r5, #0]
 8009cf0:	681d      	ldr	r5, [r3, #0]
 8009cf2:	6862      	ldr	r2, [r4, #4]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f7f6 fa5a 	bl	80001b0 <memchr>
 8009cfc:	b108      	cbz	r0, 8009d02 <_printf_i+0x1f2>
 8009cfe:	1b40      	subs	r0, r0, r5
 8009d00:	6060      	str	r0, [r4, #4]
 8009d02:	6863      	ldr	r3, [r4, #4]
 8009d04:	6123      	str	r3, [r4, #16]
 8009d06:	2300      	movs	r3, #0
 8009d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d0c:	e7a8      	b.n	8009c60 <_printf_i+0x150>
 8009d0e:	6923      	ldr	r3, [r4, #16]
 8009d10:	462a      	mov	r2, r5
 8009d12:	4649      	mov	r1, r9
 8009d14:	4640      	mov	r0, r8
 8009d16:	47d0      	blx	sl
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d0ab      	beq.n	8009c74 <_printf_i+0x164>
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	079b      	lsls	r3, r3, #30
 8009d20:	d413      	bmi.n	8009d4a <_printf_i+0x23a>
 8009d22:	68e0      	ldr	r0, [r4, #12]
 8009d24:	9b03      	ldr	r3, [sp, #12]
 8009d26:	4298      	cmp	r0, r3
 8009d28:	bfb8      	it	lt
 8009d2a:	4618      	movlt	r0, r3
 8009d2c:	e7a4      	b.n	8009c78 <_printf_i+0x168>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	4632      	mov	r2, r6
 8009d32:	4649      	mov	r1, r9
 8009d34:	4640      	mov	r0, r8
 8009d36:	47d0      	blx	sl
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d09b      	beq.n	8009c74 <_printf_i+0x164>
 8009d3c:	3501      	adds	r5, #1
 8009d3e:	68e3      	ldr	r3, [r4, #12]
 8009d40:	9903      	ldr	r1, [sp, #12]
 8009d42:	1a5b      	subs	r3, r3, r1
 8009d44:	42ab      	cmp	r3, r5
 8009d46:	dcf2      	bgt.n	8009d2e <_printf_i+0x21e>
 8009d48:	e7eb      	b.n	8009d22 <_printf_i+0x212>
 8009d4a:	2500      	movs	r5, #0
 8009d4c:	f104 0619 	add.w	r6, r4, #25
 8009d50:	e7f5      	b.n	8009d3e <_printf_i+0x22e>
 8009d52:	bf00      	nop
 8009d54:	0800cf46 	.word	0x0800cf46
 8009d58:	0800cf57 	.word	0x0800cf57

08009d5c <iprintf>:
 8009d5c:	b40f      	push	{r0, r1, r2, r3}
 8009d5e:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <iprintf+0x2c>)
 8009d60:	b513      	push	{r0, r1, r4, lr}
 8009d62:	681c      	ldr	r4, [r3, #0]
 8009d64:	b124      	cbz	r4, 8009d70 <iprintf+0x14>
 8009d66:	69a3      	ldr	r3, [r4, #24]
 8009d68:	b913      	cbnz	r3, 8009d70 <iprintf+0x14>
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f001 f9a4 	bl	800b0b8 <__sinit>
 8009d70:	ab05      	add	r3, sp, #20
 8009d72:	9a04      	ldr	r2, [sp, #16]
 8009d74:	68a1      	ldr	r1, [r4, #8]
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f001 ffd3 	bl	800bd24 <_vfiprintf_r>
 8009d7e:	b002      	add	sp, #8
 8009d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d84:	b004      	add	sp, #16
 8009d86:	4770      	bx	lr
 8009d88:	20000010 	.word	0x20000010

08009d8c <_puts_r>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	460e      	mov	r6, r1
 8009d90:	4605      	mov	r5, r0
 8009d92:	b118      	cbz	r0, 8009d9c <_puts_r+0x10>
 8009d94:	6983      	ldr	r3, [r0, #24]
 8009d96:	b90b      	cbnz	r3, 8009d9c <_puts_r+0x10>
 8009d98:	f001 f98e 	bl	800b0b8 <__sinit>
 8009d9c:	69ab      	ldr	r3, [r5, #24]
 8009d9e:	68ac      	ldr	r4, [r5, #8]
 8009da0:	b913      	cbnz	r3, 8009da8 <_puts_r+0x1c>
 8009da2:	4628      	mov	r0, r5
 8009da4:	f001 f988 	bl	800b0b8 <__sinit>
 8009da8:	4b2c      	ldr	r3, [pc, #176]	; (8009e5c <_puts_r+0xd0>)
 8009daa:	429c      	cmp	r4, r3
 8009dac:	d120      	bne.n	8009df0 <_puts_r+0x64>
 8009dae:	686c      	ldr	r4, [r5, #4]
 8009db0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009db2:	07db      	lsls	r3, r3, #31
 8009db4:	d405      	bmi.n	8009dc2 <_puts_r+0x36>
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	0598      	lsls	r0, r3, #22
 8009dba:	d402      	bmi.n	8009dc2 <_puts_r+0x36>
 8009dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dbe:	f001 fa1e 	bl	800b1fe <__retarget_lock_acquire_recursive>
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	0719      	lsls	r1, r3, #28
 8009dc6:	d51d      	bpl.n	8009e04 <_puts_r+0x78>
 8009dc8:	6923      	ldr	r3, [r4, #16]
 8009dca:	b1db      	cbz	r3, 8009e04 <_puts_r+0x78>
 8009dcc:	3e01      	subs	r6, #1
 8009dce:	68a3      	ldr	r3, [r4, #8]
 8009dd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	60a3      	str	r3, [r4, #8]
 8009dd8:	bb39      	cbnz	r1, 8009e2a <_puts_r+0x9e>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	da38      	bge.n	8009e50 <_puts_r+0xc4>
 8009dde:	4622      	mov	r2, r4
 8009de0:	210a      	movs	r1, #10
 8009de2:	4628      	mov	r0, r5
 8009de4:	f000 f912 	bl	800a00c <__swbuf_r>
 8009de8:	3001      	adds	r0, #1
 8009dea:	d011      	beq.n	8009e10 <_puts_r+0x84>
 8009dec:	250a      	movs	r5, #10
 8009dee:	e011      	b.n	8009e14 <_puts_r+0x88>
 8009df0:	4b1b      	ldr	r3, [pc, #108]	; (8009e60 <_puts_r+0xd4>)
 8009df2:	429c      	cmp	r4, r3
 8009df4:	d101      	bne.n	8009dfa <_puts_r+0x6e>
 8009df6:	68ac      	ldr	r4, [r5, #8]
 8009df8:	e7da      	b.n	8009db0 <_puts_r+0x24>
 8009dfa:	4b1a      	ldr	r3, [pc, #104]	; (8009e64 <_puts_r+0xd8>)
 8009dfc:	429c      	cmp	r4, r3
 8009dfe:	bf08      	it	eq
 8009e00:	68ec      	ldreq	r4, [r5, #12]
 8009e02:	e7d5      	b.n	8009db0 <_puts_r+0x24>
 8009e04:	4621      	mov	r1, r4
 8009e06:	4628      	mov	r0, r5
 8009e08:	f000 f952 	bl	800a0b0 <__swsetup_r>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d0dd      	beq.n	8009dcc <_puts_r+0x40>
 8009e10:	f04f 35ff 	mov.w	r5, #4294967295
 8009e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e16:	07da      	lsls	r2, r3, #31
 8009e18:	d405      	bmi.n	8009e26 <_puts_r+0x9a>
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	059b      	lsls	r3, r3, #22
 8009e1e:	d402      	bmi.n	8009e26 <_puts_r+0x9a>
 8009e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e22:	f001 f9ed 	bl	800b200 <__retarget_lock_release_recursive>
 8009e26:	4628      	mov	r0, r5
 8009e28:	bd70      	pop	{r4, r5, r6, pc}
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	da04      	bge.n	8009e38 <_puts_r+0xac>
 8009e2e:	69a2      	ldr	r2, [r4, #24]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	dc06      	bgt.n	8009e42 <_puts_r+0xb6>
 8009e34:	290a      	cmp	r1, #10
 8009e36:	d004      	beq.n	8009e42 <_puts_r+0xb6>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	6022      	str	r2, [r4, #0]
 8009e3e:	7019      	strb	r1, [r3, #0]
 8009e40:	e7c5      	b.n	8009dce <_puts_r+0x42>
 8009e42:	4622      	mov	r2, r4
 8009e44:	4628      	mov	r0, r5
 8009e46:	f000 f8e1 	bl	800a00c <__swbuf_r>
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	d1bf      	bne.n	8009dce <_puts_r+0x42>
 8009e4e:	e7df      	b.n	8009e10 <_puts_r+0x84>
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	250a      	movs	r5, #10
 8009e54:	1c5a      	adds	r2, r3, #1
 8009e56:	6022      	str	r2, [r4, #0]
 8009e58:	701d      	strb	r5, [r3, #0]
 8009e5a:	e7db      	b.n	8009e14 <_puts_r+0x88>
 8009e5c:	0800d11c 	.word	0x0800d11c
 8009e60:	0800d13c 	.word	0x0800d13c
 8009e64:	0800d0fc 	.word	0x0800d0fc

08009e68 <puts>:
 8009e68:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <puts+0xc>)
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	6818      	ldr	r0, [r3, #0]
 8009e6e:	f7ff bf8d 	b.w	8009d8c <_puts_r>
 8009e72:	bf00      	nop
 8009e74:	20000010 	.word	0x20000010

08009e78 <_sbrk_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4d06      	ldr	r5, [pc, #24]	; (8009e94 <_sbrk_r+0x1c>)
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	4604      	mov	r4, r0
 8009e80:	4608      	mov	r0, r1
 8009e82:	602b      	str	r3, [r5, #0]
 8009e84:	f7f8 fa1a 	bl	80022bc <_sbrk>
 8009e88:	1c43      	adds	r3, r0, #1
 8009e8a:	d102      	bne.n	8009e92 <_sbrk_r+0x1a>
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	b103      	cbz	r3, 8009e92 <_sbrk_r+0x1a>
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
 8009e94:	20000544 	.word	0x20000544

08009e98 <siprintf>:
 8009e98:	b40e      	push	{r1, r2, r3}
 8009e9a:	b500      	push	{lr}
 8009e9c:	b09c      	sub	sp, #112	; 0x70
 8009e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8009ea0:	9002      	str	r0, [sp, #8]
 8009ea2:	9006      	str	r0, [sp, #24]
 8009ea4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ea8:	4809      	ldr	r0, [pc, #36]	; (8009ed0 <siprintf+0x38>)
 8009eaa:	9107      	str	r1, [sp, #28]
 8009eac:	9104      	str	r1, [sp, #16]
 8009eae:	4909      	ldr	r1, [pc, #36]	; (8009ed4 <siprintf+0x3c>)
 8009eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb4:	9105      	str	r1, [sp, #20]
 8009eb6:	6800      	ldr	r0, [r0, #0]
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	a902      	add	r1, sp, #8
 8009ebc:	f001 fe08 	bl	800bad0 <_svfiprintf_r>
 8009ec0:	9b02      	ldr	r3, [sp, #8]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	701a      	strb	r2, [r3, #0]
 8009ec6:	b01c      	add	sp, #112	; 0x70
 8009ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ecc:	b003      	add	sp, #12
 8009ece:	4770      	bx	lr
 8009ed0:	20000010 	.word	0x20000010
 8009ed4:	ffff0208 	.word	0xffff0208

08009ed8 <strchr>:
 8009ed8:	b2c9      	uxtb	r1, r1
 8009eda:	4603      	mov	r3, r0
 8009edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ee0:	b11a      	cbz	r2, 8009eea <strchr+0x12>
 8009ee2:	428a      	cmp	r2, r1
 8009ee4:	d1f9      	bne.n	8009eda <strchr+0x2>
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	4770      	bx	lr
 8009eea:	2900      	cmp	r1, #0
 8009eec:	bf18      	it	ne
 8009eee:	2300      	movne	r3, #0
 8009ef0:	e7f9      	b.n	8009ee6 <strchr+0xe>
	...

08009ef4 <_strtol_l.constprop.0>:
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009efa:	d001      	beq.n	8009f00 <_strtol_l.constprop.0+0xc>
 8009efc:	2b24      	cmp	r3, #36	; 0x24
 8009efe:	d906      	bls.n	8009f0e <_strtol_l.constprop.0+0x1a>
 8009f00:	f7ff f99a 	bl	8009238 <__errno>
 8009f04:	2316      	movs	r3, #22
 8009f06:	6003      	str	r3, [r0, #0]
 8009f08:	2000      	movs	r0, #0
 8009f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009ff4 <_strtol_l.constprop.0+0x100>
 8009f12:	460d      	mov	r5, r1
 8009f14:	462e      	mov	r6, r5
 8009f16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f1a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009f1e:	f017 0708 	ands.w	r7, r7, #8
 8009f22:	d1f7      	bne.n	8009f14 <_strtol_l.constprop.0+0x20>
 8009f24:	2c2d      	cmp	r4, #45	; 0x2d
 8009f26:	d132      	bne.n	8009f8e <_strtol_l.constprop.0+0x9a>
 8009f28:	782c      	ldrb	r4, [r5, #0]
 8009f2a:	2701      	movs	r7, #1
 8009f2c:	1cb5      	adds	r5, r6, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d05b      	beq.n	8009fea <_strtol_l.constprop.0+0xf6>
 8009f32:	2b10      	cmp	r3, #16
 8009f34:	d109      	bne.n	8009f4a <_strtol_l.constprop.0+0x56>
 8009f36:	2c30      	cmp	r4, #48	; 0x30
 8009f38:	d107      	bne.n	8009f4a <_strtol_l.constprop.0+0x56>
 8009f3a:	782c      	ldrb	r4, [r5, #0]
 8009f3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f40:	2c58      	cmp	r4, #88	; 0x58
 8009f42:	d14d      	bne.n	8009fe0 <_strtol_l.constprop.0+0xec>
 8009f44:	786c      	ldrb	r4, [r5, #1]
 8009f46:	2310      	movs	r3, #16
 8009f48:	3502      	adds	r5, #2
 8009f4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009f4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f52:	f04f 0c00 	mov.w	ip, #0
 8009f56:	fbb8 f9f3 	udiv	r9, r8, r3
 8009f5a:	4666      	mov	r6, ip
 8009f5c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009f60:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009f64:	f1be 0f09 	cmp.w	lr, #9
 8009f68:	d816      	bhi.n	8009f98 <_strtol_l.constprop.0+0xa4>
 8009f6a:	4674      	mov	r4, lr
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	dd24      	ble.n	8009fba <_strtol_l.constprop.0+0xc6>
 8009f70:	f1bc 0f00 	cmp.w	ip, #0
 8009f74:	db1e      	blt.n	8009fb4 <_strtol_l.constprop.0+0xc0>
 8009f76:	45b1      	cmp	r9, r6
 8009f78:	d31c      	bcc.n	8009fb4 <_strtol_l.constprop.0+0xc0>
 8009f7a:	d101      	bne.n	8009f80 <_strtol_l.constprop.0+0x8c>
 8009f7c:	45a2      	cmp	sl, r4
 8009f7e:	db19      	blt.n	8009fb4 <_strtol_l.constprop.0+0xc0>
 8009f80:	fb06 4603 	mla	r6, r6, r3, r4
 8009f84:	f04f 0c01 	mov.w	ip, #1
 8009f88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f8c:	e7e8      	b.n	8009f60 <_strtol_l.constprop.0+0x6c>
 8009f8e:	2c2b      	cmp	r4, #43	; 0x2b
 8009f90:	bf04      	itt	eq
 8009f92:	782c      	ldrbeq	r4, [r5, #0]
 8009f94:	1cb5      	addeq	r5, r6, #2
 8009f96:	e7ca      	b.n	8009f2e <_strtol_l.constprop.0+0x3a>
 8009f98:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009f9c:	f1be 0f19 	cmp.w	lr, #25
 8009fa0:	d801      	bhi.n	8009fa6 <_strtol_l.constprop.0+0xb2>
 8009fa2:	3c37      	subs	r4, #55	; 0x37
 8009fa4:	e7e2      	b.n	8009f6c <_strtol_l.constprop.0+0x78>
 8009fa6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009faa:	f1be 0f19 	cmp.w	lr, #25
 8009fae:	d804      	bhi.n	8009fba <_strtol_l.constprop.0+0xc6>
 8009fb0:	3c57      	subs	r4, #87	; 0x57
 8009fb2:	e7db      	b.n	8009f6c <_strtol_l.constprop.0+0x78>
 8009fb4:	f04f 3cff 	mov.w	ip, #4294967295
 8009fb8:	e7e6      	b.n	8009f88 <_strtol_l.constprop.0+0x94>
 8009fba:	f1bc 0f00 	cmp.w	ip, #0
 8009fbe:	da05      	bge.n	8009fcc <_strtol_l.constprop.0+0xd8>
 8009fc0:	2322      	movs	r3, #34	; 0x22
 8009fc2:	6003      	str	r3, [r0, #0]
 8009fc4:	4646      	mov	r6, r8
 8009fc6:	b942      	cbnz	r2, 8009fda <_strtol_l.constprop.0+0xe6>
 8009fc8:	4630      	mov	r0, r6
 8009fca:	e79e      	b.n	8009f0a <_strtol_l.constprop.0+0x16>
 8009fcc:	b107      	cbz	r7, 8009fd0 <_strtol_l.constprop.0+0xdc>
 8009fce:	4276      	negs	r6, r6
 8009fd0:	2a00      	cmp	r2, #0
 8009fd2:	d0f9      	beq.n	8009fc8 <_strtol_l.constprop.0+0xd4>
 8009fd4:	f1bc 0f00 	cmp.w	ip, #0
 8009fd8:	d000      	beq.n	8009fdc <_strtol_l.constprop.0+0xe8>
 8009fda:	1e69      	subs	r1, r5, #1
 8009fdc:	6011      	str	r1, [r2, #0]
 8009fde:	e7f3      	b.n	8009fc8 <_strtol_l.constprop.0+0xd4>
 8009fe0:	2430      	movs	r4, #48	; 0x30
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1b1      	bne.n	8009f4a <_strtol_l.constprop.0+0x56>
 8009fe6:	2308      	movs	r3, #8
 8009fe8:	e7af      	b.n	8009f4a <_strtol_l.constprop.0+0x56>
 8009fea:	2c30      	cmp	r4, #48	; 0x30
 8009fec:	d0a5      	beq.n	8009f3a <_strtol_l.constprop.0+0x46>
 8009fee:	230a      	movs	r3, #10
 8009ff0:	e7ab      	b.n	8009f4a <_strtol_l.constprop.0+0x56>
 8009ff2:	bf00      	nop
 8009ff4:	0800cf69 	.word	0x0800cf69

08009ff8 <strtol>:
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	460a      	mov	r2, r1
 8009ffc:	4601      	mov	r1, r0
 8009ffe:	4802      	ldr	r0, [pc, #8]	; (800a008 <strtol+0x10>)
 800a000:	6800      	ldr	r0, [r0, #0]
 800a002:	f7ff bf77 	b.w	8009ef4 <_strtol_l.constprop.0>
 800a006:	bf00      	nop
 800a008:	20000010 	.word	0x20000010

0800a00c <__swbuf_r>:
 800a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00e:	460e      	mov	r6, r1
 800a010:	4614      	mov	r4, r2
 800a012:	4605      	mov	r5, r0
 800a014:	b118      	cbz	r0, 800a01e <__swbuf_r+0x12>
 800a016:	6983      	ldr	r3, [r0, #24]
 800a018:	b90b      	cbnz	r3, 800a01e <__swbuf_r+0x12>
 800a01a:	f001 f84d 	bl	800b0b8 <__sinit>
 800a01e:	4b21      	ldr	r3, [pc, #132]	; (800a0a4 <__swbuf_r+0x98>)
 800a020:	429c      	cmp	r4, r3
 800a022:	d12b      	bne.n	800a07c <__swbuf_r+0x70>
 800a024:	686c      	ldr	r4, [r5, #4]
 800a026:	69a3      	ldr	r3, [r4, #24]
 800a028:	60a3      	str	r3, [r4, #8]
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	071a      	lsls	r2, r3, #28
 800a02e:	d52f      	bpl.n	800a090 <__swbuf_r+0x84>
 800a030:	6923      	ldr	r3, [r4, #16]
 800a032:	b36b      	cbz	r3, 800a090 <__swbuf_r+0x84>
 800a034:	6923      	ldr	r3, [r4, #16]
 800a036:	6820      	ldr	r0, [r4, #0]
 800a038:	1ac0      	subs	r0, r0, r3
 800a03a:	6963      	ldr	r3, [r4, #20]
 800a03c:	b2f6      	uxtb	r6, r6
 800a03e:	4283      	cmp	r3, r0
 800a040:	4637      	mov	r7, r6
 800a042:	dc04      	bgt.n	800a04e <__swbuf_r+0x42>
 800a044:	4621      	mov	r1, r4
 800a046:	4628      	mov	r0, r5
 800a048:	f000 ffa2 	bl	800af90 <_fflush_r>
 800a04c:	bb30      	cbnz	r0, 800a09c <__swbuf_r+0x90>
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	3b01      	subs	r3, #1
 800a052:	60a3      	str	r3, [r4, #8]
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	6022      	str	r2, [r4, #0]
 800a05a:	701e      	strb	r6, [r3, #0]
 800a05c:	6963      	ldr	r3, [r4, #20]
 800a05e:	3001      	adds	r0, #1
 800a060:	4283      	cmp	r3, r0
 800a062:	d004      	beq.n	800a06e <__swbuf_r+0x62>
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	07db      	lsls	r3, r3, #31
 800a068:	d506      	bpl.n	800a078 <__swbuf_r+0x6c>
 800a06a:	2e0a      	cmp	r6, #10
 800a06c:	d104      	bne.n	800a078 <__swbuf_r+0x6c>
 800a06e:	4621      	mov	r1, r4
 800a070:	4628      	mov	r0, r5
 800a072:	f000 ff8d 	bl	800af90 <_fflush_r>
 800a076:	b988      	cbnz	r0, 800a09c <__swbuf_r+0x90>
 800a078:	4638      	mov	r0, r7
 800a07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a07c:	4b0a      	ldr	r3, [pc, #40]	; (800a0a8 <__swbuf_r+0x9c>)
 800a07e:	429c      	cmp	r4, r3
 800a080:	d101      	bne.n	800a086 <__swbuf_r+0x7a>
 800a082:	68ac      	ldr	r4, [r5, #8]
 800a084:	e7cf      	b.n	800a026 <__swbuf_r+0x1a>
 800a086:	4b09      	ldr	r3, [pc, #36]	; (800a0ac <__swbuf_r+0xa0>)
 800a088:	429c      	cmp	r4, r3
 800a08a:	bf08      	it	eq
 800a08c:	68ec      	ldreq	r4, [r5, #12]
 800a08e:	e7ca      	b.n	800a026 <__swbuf_r+0x1a>
 800a090:	4621      	mov	r1, r4
 800a092:	4628      	mov	r0, r5
 800a094:	f000 f80c 	bl	800a0b0 <__swsetup_r>
 800a098:	2800      	cmp	r0, #0
 800a09a:	d0cb      	beq.n	800a034 <__swbuf_r+0x28>
 800a09c:	f04f 37ff 	mov.w	r7, #4294967295
 800a0a0:	e7ea      	b.n	800a078 <__swbuf_r+0x6c>
 800a0a2:	bf00      	nop
 800a0a4:	0800d11c 	.word	0x0800d11c
 800a0a8:	0800d13c 	.word	0x0800d13c
 800a0ac:	0800d0fc 	.word	0x0800d0fc

0800a0b0 <__swsetup_r>:
 800a0b0:	4b32      	ldr	r3, [pc, #200]	; (800a17c <__swsetup_r+0xcc>)
 800a0b2:	b570      	push	{r4, r5, r6, lr}
 800a0b4:	681d      	ldr	r5, [r3, #0]
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	b125      	cbz	r5, 800a0c6 <__swsetup_r+0x16>
 800a0bc:	69ab      	ldr	r3, [r5, #24]
 800a0be:	b913      	cbnz	r3, 800a0c6 <__swsetup_r+0x16>
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f000 fff9 	bl	800b0b8 <__sinit>
 800a0c6:	4b2e      	ldr	r3, [pc, #184]	; (800a180 <__swsetup_r+0xd0>)
 800a0c8:	429c      	cmp	r4, r3
 800a0ca:	d10f      	bne.n	800a0ec <__swsetup_r+0x3c>
 800a0cc:	686c      	ldr	r4, [r5, #4]
 800a0ce:	89a3      	ldrh	r3, [r4, #12]
 800a0d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0d4:	0719      	lsls	r1, r3, #28
 800a0d6:	d42c      	bmi.n	800a132 <__swsetup_r+0x82>
 800a0d8:	06dd      	lsls	r5, r3, #27
 800a0da:	d411      	bmi.n	800a100 <__swsetup_r+0x50>
 800a0dc:	2309      	movs	r3, #9
 800a0de:	6033      	str	r3, [r6, #0]
 800a0e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0e4:	81a3      	strh	r3, [r4, #12]
 800a0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ea:	e03e      	b.n	800a16a <__swsetup_r+0xba>
 800a0ec:	4b25      	ldr	r3, [pc, #148]	; (800a184 <__swsetup_r+0xd4>)
 800a0ee:	429c      	cmp	r4, r3
 800a0f0:	d101      	bne.n	800a0f6 <__swsetup_r+0x46>
 800a0f2:	68ac      	ldr	r4, [r5, #8]
 800a0f4:	e7eb      	b.n	800a0ce <__swsetup_r+0x1e>
 800a0f6:	4b24      	ldr	r3, [pc, #144]	; (800a188 <__swsetup_r+0xd8>)
 800a0f8:	429c      	cmp	r4, r3
 800a0fa:	bf08      	it	eq
 800a0fc:	68ec      	ldreq	r4, [r5, #12]
 800a0fe:	e7e6      	b.n	800a0ce <__swsetup_r+0x1e>
 800a100:	0758      	lsls	r0, r3, #29
 800a102:	d512      	bpl.n	800a12a <__swsetup_r+0x7a>
 800a104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a106:	b141      	cbz	r1, 800a11a <__swsetup_r+0x6a>
 800a108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a10c:	4299      	cmp	r1, r3
 800a10e:	d002      	beq.n	800a116 <__swsetup_r+0x66>
 800a110:	4630      	mov	r0, r6
 800a112:	f7ff f8d9 	bl	80092c8 <_free_r>
 800a116:	2300      	movs	r3, #0
 800a118:	6363      	str	r3, [r4, #52]	; 0x34
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a120:	81a3      	strh	r3, [r4, #12]
 800a122:	2300      	movs	r3, #0
 800a124:	6063      	str	r3, [r4, #4]
 800a126:	6923      	ldr	r3, [r4, #16]
 800a128:	6023      	str	r3, [r4, #0]
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	f043 0308 	orr.w	r3, r3, #8
 800a130:	81a3      	strh	r3, [r4, #12]
 800a132:	6923      	ldr	r3, [r4, #16]
 800a134:	b94b      	cbnz	r3, 800a14a <__swsetup_r+0x9a>
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a13c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a140:	d003      	beq.n	800a14a <__swsetup_r+0x9a>
 800a142:	4621      	mov	r1, r4
 800a144:	4630      	mov	r0, r6
 800a146:	f001 f881 	bl	800b24c <__smakebuf_r>
 800a14a:	89a0      	ldrh	r0, [r4, #12]
 800a14c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a150:	f010 0301 	ands.w	r3, r0, #1
 800a154:	d00a      	beq.n	800a16c <__swsetup_r+0xbc>
 800a156:	2300      	movs	r3, #0
 800a158:	60a3      	str	r3, [r4, #8]
 800a15a:	6963      	ldr	r3, [r4, #20]
 800a15c:	425b      	negs	r3, r3
 800a15e:	61a3      	str	r3, [r4, #24]
 800a160:	6923      	ldr	r3, [r4, #16]
 800a162:	b943      	cbnz	r3, 800a176 <__swsetup_r+0xc6>
 800a164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a168:	d1ba      	bne.n	800a0e0 <__swsetup_r+0x30>
 800a16a:	bd70      	pop	{r4, r5, r6, pc}
 800a16c:	0781      	lsls	r1, r0, #30
 800a16e:	bf58      	it	pl
 800a170:	6963      	ldrpl	r3, [r4, #20]
 800a172:	60a3      	str	r3, [r4, #8]
 800a174:	e7f4      	b.n	800a160 <__swsetup_r+0xb0>
 800a176:	2000      	movs	r0, #0
 800a178:	e7f7      	b.n	800a16a <__swsetup_r+0xba>
 800a17a:	bf00      	nop
 800a17c:	20000010 	.word	0x20000010
 800a180:	0800d11c 	.word	0x0800d11c
 800a184:	0800d13c 	.word	0x0800d13c
 800a188:	0800d0fc 	.word	0x0800d0fc

0800a18c <quorem>:
 800a18c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a190:	6903      	ldr	r3, [r0, #16]
 800a192:	690c      	ldr	r4, [r1, #16]
 800a194:	42a3      	cmp	r3, r4
 800a196:	4607      	mov	r7, r0
 800a198:	f2c0 8081 	blt.w	800a29e <quorem+0x112>
 800a19c:	3c01      	subs	r4, #1
 800a19e:	f101 0814 	add.w	r8, r1, #20
 800a1a2:	f100 0514 	add.w	r5, r0, #20
 800a1a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1c4:	d331      	bcc.n	800a22a <quorem+0x9e>
 800a1c6:	f04f 0e00 	mov.w	lr, #0
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	46ac      	mov	ip, r5
 800a1ce:	46f2      	mov	sl, lr
 800a1d0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1d4:	b293      	uxth	r3, r2
 800a1d6:	fb06 e303 	mla	r3, r6, r3, lr
 800a1da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	ebaa 0303 	sub.w	r3, sl, r3
 800a1e4:	f8dc a000 	ldr.w	sl, [ip]
 800a1e8:	0c12      	lsrs	r2, r2, #16
 800a1ea:	fa13 f38a 	uxtah	r3, r3, sl
 800a1ee:	fb06 e202 	mla	r2, r6, r2, lr
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	9b00      	ldr	r3, [sp, #0]
 800a1f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1fa:	b292      	uxth	r2, r2
 800a1fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a204:	f8bd 3000 	ldrh.w	r3, [sp]
 800a208:	4581      	cmp	r9, r0
 800a20a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a20e:	f84c 3b04 	str.w	r3, [ip], #4
 800a212:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a216:	d2db      	bcs.n	800a1d0 <quorem+0x44>
 800a218:	f855 300b 	ldr.w	r3, [r5, fp]
 800a21c:	b92b      	cbnz	r3, 800a22a <quorem+0x9e>
 800a21e:	9b01      	ldr	r3, [sp, #4]
 800a220:	3b04      	subs	r3, #4
 800a222:	429d      	cmp	r5, r3
 800a224:	461a      	mov	r2, r3
 800a226:	d32e      	bcc.n	800a286 <quorem+0xfa>
 800a228:	613c      	str	r4, [r7, #16]
 800a22a:	4638      	mov	r0, r7
 800a22c:	f001 fadc 	bl	800b7e8 <__mcmp>
 800a230:	2800      	cmp	r0, #0
 800a232:	db24      	blt.n	800a27e <quorem+0xf2>
 800a234:	3601      	adds	r6, #1
 800a236:	4628      	mov	r0, r5
 800a238:	f04f 0c00 	mov.w	ip, #0
 800a23c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a240:	f8d0 e000 	ldr.w	lr, [r0]
 800a244:	b293      	uxth	r3, r2
 800a246:	ebac 0303 	sub.w	r3, ip, r3
 800a24a:	0c12      	lsrs	r2, r2, #16
 800a24c:	fa13 f38e 	uxtah	r3, r3, lr
 800a250:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a254:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a258:	b29b      	uxth	r3, r3
 800a25a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a25e:	45c1      	cmp	r9, r8
 800a260:	f840 3b04 	str.w	r3, [r0], #4
 800a264:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a268:	d2e8      	bcs.n	800a23c <quorem+0xb0>
 800a26a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a26e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a272:	b922      	cbnz	r2, 800a27e <quorem+0xf2>
 800a274:	3b04      	subs	r3, #4
 800a276:	429d      	cmp	r5, r3
 800a278:	461a      	mov	r2, r3
 800a27a:	d30a      	bcc.n	800a292 <quorem+0x106>
 800a27c:	613c      	str	r4, [r7, #16]
 800a27e:	4630      	mov	r0, r6
 800a280:	b003      	add	sp, #12
 800a282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a286:	6812      	ldr	r2, [r2, #0]
 800a288:	3b04      	subs	r3, #4
 800a28a:	2a00      	cmp	r2, #0
 800a28c:	d1cc      	bne.n	800a228 <quorem+0x9c>
 800a28e:	3c01      	subs	r4, #1
 800a290:	e7c7      	b.n	800a222 <quorem+0x96>
 800a292:	6812      	ldr	r2, [r2, #0]
 800a294:	3b04      	subs	r3, #4
 800a296:	2a00      	cmp	r2, #0
 800a298:	d1f0      	bne.n	800a27c <quorem+0xf0>
 800a29a:	3c01      	subs	r4, #1
 800a29c:	e7eb      	b.n	800a276 <quorem+0xea>
 800a29e:	2000      	movs	r0, #0
 800a2a0:	e7ee      	b.n	800a280 <quorem+0xf4>
 800a2a2:	0000      	movs	r0, r0
 800a2a4:	0000      	movs	r0, r0
	...

0800a2a8 <_dtoa_r>:
 800a2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ac:	ed2d 8b04 	vpush	{d8-d9}
 800a2b0:	ec57 6b10 	vmov	r6, r7, d0
 800a2b4:	b093      	sub	sp, #76	; 0x4c
 800a2b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2bc:	9106      	str	r1, [sp, #24]
 800a2be:	ee10 aa10 	vmov	sl, s0
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a2c6:	930c      	str	r3, [sp, #48]	; 0x30
 800a2c8:	46bb      	mov	fp, r7
 800a2ca:	b975      	cbnz	r5, 800a2ea <_dtoa_r+0x42>
 800a2cc:	2010      	movs	r0, #16
 800a2ce:	f7fe ffdd 	bl	800928c <malloc>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	6260      	str	r0, [r4, #36]	; 0x24
 800a2d6:	b920      	cbnz	r0, 800a2e2 <_dtoa_r+0x3a>
 800a2d8:	4ba7      	ldr	r3, [pc, #668]	; (800a578 <_dtoa_r+0x2d0>)
 800a2da:	21ea      	movs	r1, #234	; 0xea
 800a2dc:	48a7      	ldr	r0, [pc, #668]	; (800a57c <_dtoa_r+0x2d4>)
 800a2de:	f001 fea7 	bl	800c030 <__assert_func>
 800a2e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2e6:	6005      	str	r5, [r0, #0]
 800a2e8:	60c5      	str	r5, [r0, #12]
 800a2ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2ec:	6819      	ldr	r1, [r3, #0]
 800a2ee:	b151      	cbz	r1, 800a306 <_dtoa_r+0x5e>
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	604a      	str	r2, [r1, #4]
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	4093      	lsls	r3, r2
 800a2f8:	608b      	str	r3, [r1, #8]
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f001 f832 	bl	800b364 <_Bfree>
 800a300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a302:	2200      	movs	r2, #0
 800a304:	601a      	str	r2, [r3, #0]
 800a306:	1e3b      	subs	r3, r7, #0
 800a308:	bfaa      	itet	ge
 800a30a:	2300      	movge	r3, #0
 800a30c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a310:	f8c8 3000 	strge.w	r3, [r8]
 800a314:	4b9a      	ldr	r3, [pc, #616]	; (800a580 <_dtoa_r+0x2d8>)
 800a316:	bfbc      	itt	lt
 800a318:	2201      	movlt	r2, #1
 800a31a:	f8c8 2000 	strlt.w	r2, [r8]
 800a31e:	ea33 030b 	bics.w	r3, r3, fp
 800a322:	d11b      	bne.n	800a35c <_dtoa_r+0xb4>
 800a324:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a326:	f242 730f 	movw	r3, #9999	; 0x270f
 800a32a:	6013      	str	r3, [r2, #0]
 800a32c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a330:	4333      	orrs	r3, r6
 800a332:	f000 8592 	beq.w	800ae5a <_dtoa_r+0xbb2>
 800a336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a338:	b963      	cbnz	r3, 800a354 <_dtoa_r+0xac>
 800a33a:	4b92      	ldr	r3, [pc, #584]	; (800a584 <_dtoa_r+0x2dc>)
 800a33c:	e022      	b.n	800a384 <_dtoa_r+0xdc>
 800a33e:	4b92      	ldr	r3, [pc, #584]	; (800a588 <_dtoa_r+0x2e0>)
 800a340:	9301      	str	r3, [sp, #4]
 800a342:	3308      	adds	r3, #8
 800a344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	9801      	ldr	r0, [sp, #4]
 800a34a:	b013      	add	sp, #76	; 0x4c
 800a34c:	ecbd 8b04 	vpop	{d8-d9}
 800a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a354:	4b8b      	ldr	r3, [pc, #556]	; (800a584 <_dtoa_r+0x2dc>)
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	3303      	adds	r3, #3
 800a35a:	e7f3      	b.n	800a344 <_dtoa_r+0x9c>
 800a35c:	2200      	movs	r2, #0
 800a35e:	2300      	movs	r3, #0
 800a360:	4650      	mov	r0, sl
 800a362:	4659      	mov	r1, fp
 800a364:	f7f6 fb98 	bl	8000a98 <__aeabi_dcmpeq>
 800a368:	ec4b ab19 	vmov	d9, sl, fp
 800a36c:	4680      	mov	r8, r0
 800a36e:	b158      	cbz	r0, 800a388 <_dtoa_r+0xe0>
 800a370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a372:	2301      	movs	r3, #1
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 856b 	beq.w	800ae54 <_dtoa_r+0xbac>
 800a37e:	4883      	ldr	r0, [pc, #524]	; (800a58c <_dtoa_r+0x2e4>)
 800a380:	6018      	str	r0, [r3, #0]
 800a382:	1e43      	subs	r3, r0, #1
 800a384:	9301      	str	r3, [sp, #4]
 800a386:	e7df      	b.n	800a348 <_dtoa_r+0xa0>
 800a388:	ec4b ab10 	vmov	d0, sl, fp
 800a38c:	aa10      	add	r2, sp, #64	; 0x40
 800a38e:	a911      	add	r1, sp, #68	; 0x44
 800a390:	4620      	mov	r0, r4
 800a392:	f001 facf 	bl	800b934 <__d2b>
 800a396:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a39a:	ee08 0a10 	vmov	s16, r0
 800a39e:	2d00      	cmp	r5, #0
 800a3a0:	f000 8084 	beq.w	800a4ac <_dtoa_r+0x204>
 800a3a4:	ee19 3a90 	vmov	r3, s19
 800a3a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a3b0:	4656      	mov	r6, sl
 800a3b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a3b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a3be:	4b74      	ldr	r3, [pc, #464]	; (800a590 <_dtoa_r+0x2e8>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	f7f5 ff47 	bl	8000258 <__aeabi_dsub>
 800a3ca:	a365      	add	r3, pc, #404	; (adr r3, 800a560 <_dtoa_r+0x2b8>)
 800a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d0:	f7f6 f8fa 	bl	80005c8 <__aeabi_dmul>
 800a3d4:	a364      	add	r3, pc, #400	; (adr r3, 800a568 <_dtoa_r+0x2c0>)
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	f7f5 ff3f 	bl	800025c <__adddf3>
 800a3de:	4606      	mov	r6, r0
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	460f      	mov	r7, r1
 800a3e4:	f7f6 f886 	bl	80004f4 <__aeabi_i2d>
 800a3e8:	a361      	add	r3, pc, #388	; (adr r3, 800a570 <_dtoa_r+0x2c8>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	f7f6 f8eb 	bl	80005c8 <__aeabi_dmul>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	4639      	mov	r1, r7
 800a3fa:	f7f5 ff2f 	bl	800025c <__adddf3>
 800a3fe:	4606      	mov	r6, r0
 800a400:	460f      	mov	r7, r1
 800a402:	f7f6 fb91 	bl	8000b28 <__aeabi_d2iz>
 800a406:	2200      	movs	r2, #0
 800a408:	9000      	str	r0, [sp, #0]
 800a40a:	2300      	movs	r3, #0
 800a40c:	4630      	mov	r0, r6
 800a40e:	4639      	mov	r1, r7
 800a410:	f7f6 fb4c 	bl	8000aac <__aeabi_dcmplt>
 800a414:	b150      	cbz	r0, 800a42c <_dtoa_r+0x184>
 800a416:	9800      	ldr	r0, [sp, #0]
 800a418:	f7f6 f86c 	bl	80004f4 <__aeabi_i2d>
 800a41c:	4632      	mov	r2, r6
 800a41e:	463b      	mov	r3, r7
 800a420:	f7f6 fb3a 	bl	8000a98 <__aeabi_dcmpeq>
 800a424:	b910      	cbnz	r0, 800a42c <_dtoa_r+0x184>
 800a426:	9b00      	ldr	r3, [sp, #0]
 800a428:	3b01      	subs	r3, #1
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	9b00      	ldr	r3, [sp, #0]
 800a42e:	2b16      	cmp	r3, #22
 800a430:	d85a      	bhi.n	800a4e8 <_dtoa_r+0x240>
 800a432:	9a00      	ldr	r2, [sp, #0]
 800a434:	4b57      	ldr	r3, [pc, #348]	; (800a594 <_dtoa_r+0x2ec>)
 800a436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	ec51 0b19 	vmov	r0, r1, d9
 800a442:	f7f6 fb33 	bl	8000aac <__aeabi_dcmplt>
 800a446:	2800      	cmp	r0, #0
 800a448:	d050      	beq.n	800a4ec <_dtoa_r+0x244>
 800a44a:	9b00      	ldr	r3, [sp, #0]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	2300      	movs	r3, #0
 800a452:	930b      	str	r3, [sp, #44]	; 0x2c
 800a454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a456:	1b5d      	subs	r5, r3, r5
 800a458:	1e6b      	subs	r3, r5, #1
 800a45a:	9305      	str	r3, [sp, #20]
 800a45c:	bf45      	ittet	mi
 800a45e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a462:	9304      	strmi	r3, [sp, #16]
 800a464:	2300      	movpl	r3, #0
 800a466:	2300      	movmi	r3, #0
 800a468:	bf4c      	ite	mi
 800a46a:	9305      	strmi	r3, [sp, #20]
 800a46c:	9304      	strpl	r3, [sp, #16]
 800a46e:	9b00      	ldr	r3, [sp, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	db3d      	blt.n	800a4f0 <_dtoa_r+0x248>
 800a474:	9b05      	ldr	r3, [sp, #20]
 800a476:	9a00      	ldr	r2, [sp, #0]
 800a478:	920a      	str	r2, [sp, #40]	; 0x28
 800a47a:	4413      	add	r3, r2
 800a47c:	9305      	str	r3, [sp, #20]
 800a47e:	2300      	movs	r3, #0
 800a480:	9307      	str	r3, [sp, #28]
 800a482:	9b06      	ldr	r3, [sp, #24]
 800a484:	2b09      	cmp	r3, #9
 800a486:	f200 8089 	bhi.w	800a59c <_dtoa_r+0x2f4>
 800a48a:	2b05      	cmp	r3, #5
 800a48c:	bfc4      	itt	gt
 800a48e:	3b04      	subgt	r3, #4
 800a490:	9306      	strgt	r3, [sp, #24]
 800a492:	9b06      	ldr	r3, [sp, #24]
 800a494:	f1a3 0302 	sub.w	r3, r3, #2
 800a498:	bfcc      	ite	gt
 800a49a:	2500      	movgt	r5, #0
 800a49c:	2501      	movle	r5, #1
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	f200 8087 	bhi.w	800a5b2 <_dtoa_r+0x30a>
 800a4a4:	e8df f003 	tbb	[pc, r3]
 800a4a8:	59383a2d 	.word	0x59383a2d
 800a4ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a4b0:	441d      	add	r5, r3
 800a4b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4b6:	2b20      	cmp	r3, #32
 800a4b8:	bfc1      	itttt	gt
 800a4ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a4c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a4c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4ca:	bfda      	itte	le
 800a4cc:	f1c3 0320 	rsble	r3, r3, #32
 800a4d0:	fa06 f003 	lslle.w	r0, r6, r3
 800a4d4:	4318      	orrgt	r0, r3
 800a4d6:	f7f5 fffd 	bl	80004d4 <__aeabi_ui2d>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	4606      	mov	r6, r0
 800a4de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4e2:	3d01      	subs	r5, #1
 800a4e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a4e6:	e76a      	b.n	800a3be <_dtoa_r+0x116>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e7b2      	b.n	800a452 <_dtoa_r+0x1aa>
 800a4ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4ee:	e7b1      	b.n	800a454 <_dtoa_r+0x1ac>
 800a4f0:	9b04      	ldr	r3, [sp, #16]
 800a4f2:	9a00      	ldr	r2, [sp, #0]
 800a4f4:	1a9b      	subs	r3, r3, r2
 800a4f6:	9304      	str	r3, [sp, #16]
 800a4f8:	4253      	negs	r3, r2
 800a4fa:	9307      	str	r3, [sp, #28]
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a500:	e7bf      	b.n	800a482 <_dtoa_r+0x1da>
 800a502:	2300      	movs	r3, #0
 800a504:	9308      	str	r3, [sp, #32]
 800a506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a508:	2b00      	cmp	r3, #0
 800a50a:	dc55      	bgt.n	800a5b8 <_dtoa_r+0x310>
 800a50c:	2301      	movs	r3, #1
 800a50e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a512:	461a      	mov	r2, r3
 800a514:	9209      	str	r2, [sp, #36]	; 0x24
 800a516:	e00c      	b.n	800a532 <_dtoa_r+0x28a>
 800a518:	2301      	movs	r3, #1
 800a51a:	e7f3      	b.n	800a504 <_dtoa_r+0x25c>
 800a51c:	2300      	movs	r3, #0
 800a51e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a520:	9308      	str	r3, [sp, #32]
 800a522:	9b00      	ldr	r3, [sp, #0]
 800a524:	4413      	add	r3, r2
 800a526:	9302      	str	r3, [sp, #8]
 800a528:	3301      	adds	r3, #1
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	9303      	str	r3, [sp, #12]
 800a52e:	bfb8      	it	lt
 800a530:	2301      	movlt	r3, #1
 800a532:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a534:	2200      	movs	r2, #0
 800a536:	6042      	str	r2, [r0, #4]
 800a538:	2204      	movs	r2, #4
 800a53a:	f102 0614 	add.w	r6, r2, #20
 800a53e:	429e      	cmp	r6, r3
 800a540:	6841      	ldr	r1, [r0, #4]
 800a542:	d93d      	bls.n	800a5c0 <_dtoa_r+0x318>
 800a544:	4620      	mov	r0, r4
 800a546:	f000 fecd 	bl	800b2e4 <_Balloc>
 800a54a:	9001      	str	r0, [sp, #4]
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d13b      	bne.n	800a5c8 <_dtoa_r+0x320>
 800a550:	4b11      	ldr	r3, [pc, #68]	; (800a598 <_dtoa_r+0x2f0>)
 800a552:	4602      	mov	r2, r0
 800a554:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a558:	e6c0      	b.n	800a2dc <_dtoa_r+0x34>
 800a55a:	2301      	movs	r3, #1
 800a55c:	e7df      	b.n	800a51e <_dtoa_r+0x276>
 800a55e:	bf00      	nop
 800a560:	636f4361 	.word	0x636f4361
 800a564:	3fd287a7 	.word	0x3fd287a7
 800a568:	8b60c8b3 	.word	0x8b60c8b3
 800a56c:	3fc68a28 	.word	0x3fc68a28
 800a570:	509f79fb 	.word	0x509f79fb
 800a574:	3fd34413 	.word	0x3fd34413
 800a578:	0800d076 	.word	0x0800d076
 800a57c:	0800d08d 	.word	0x0800d08d
 800a580:	7ff00000 	.word	0x7ff00000
 800a584:	0800d072 	.word	0x0800d072
 800a588:	0800d069 	.word	0x0800d069
 800a58c:	0800cf45 	.word	0x0800cf45
 800a590:	3ff80000 	.word	0x3ff80000
 800a594:	0800d1e0 	.word	0x0800d1e0
 800a598:	0800d0e8 	.word	0x0800d0e8
 800a59c:	2501      	movs	r5, #1
 800a59e:	2300      	movs	r3, #0
 800a5a0:	9306      	str	r3, [sp, #24]
 800a5a2:	9508      	str	r5, [sp, #32]
 800a5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	2312      	movs	r3, #18
 800a5b0:	e7b0      	b.n	800a514 <_dtoa_r+0x26c>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	9308      	str	r3, [sp, #32]
 800a5b6:	e7f5      	b.n	800a5a4 <_dtoa_r+0x2fc>
 800a5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5be:	e7b8      	b.n	800a532 <_dtoa_r+0x28a>
 800a5c0:	3101      	adds	r1, #1
 800a5c2:	6041      	str	r1, [r0, #4]
 800a5c4:	0052      	lsls	r2, r2, #1
 800a5c6:	e7b8      	b.n	800a53a <_dtoa_r+0x292>
 800a5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5ca:	9a01      	ldr	r2, [sp, #4]
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	9b03      	ldr	r3, [sp, #12]
 800a5d0:	2b0e      	cmp	r3, #14
 800a5d2:	f200 809d 	bhi.w	800a710 <_dtoa_r+0x468>
 800a5d6:	2d00      	cmp	r5, #0
 800a5d8:	f000 809a 	beq.w	800a710 <_dtoa_r+0x468>
 800a5dc:	9b00      	ldr	r3, [sp, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	dd32      	ble.n	800a648 <_dtoa_r+0x3a0>
 800a5e2:	4ab7      	ldr	r2, [pc, #732]	; (800a8c0 <_dtoa_r+0x618>)
 800a5e4:	f003 030f 	and.w	r3, r3, #15
 800a5e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5f0:	9b00      	ldr	r3, [sp, #0]
 800a5f2:	05d8      	lsls	r0, r3, #23
 800a5f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a5f8:	d516      	bpl.n	800a628 <_dtoa_r+0x380>
 800a5fa:	4bb2      	ldr	r3, [pc, #712]	; (800a8c4 <_dtoa_r+0x61c>)
 800a5fc:	ec51 0b19 	vmov	r0, r1, d9
 800a600:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a604:	f7f6 f90a 	bl	800081c <__aeabi_ddiv>
 800a608:	f007 070f 	and.w	r7, r7, #15
 800a60c:	4682      	mov	sl, r0
 800a60e:	468b      	mov	fp, r1
 800a610:	2503      	movs	r5, #3
 800a612:	4eac      	ldr	r6, [pc, #688]	; (800a8c4 <_dtoa_r+0x61c>)
 800a614:	b957      	cbnz	r7, 800a62c <_dtoa_r+0x384>
 800a616:	4642      	mov	r2, r8
 800a618:	464b      	mov	r3, r9
 800a61a:	4650      	mov	r0, sl
 800a61c:	4659      	mov	r1, fp
 800a61e:	f7f6 f8fd 	bl	800081c <__aeabi_ddiv>
 800a622:	4682      	mov	sl, r0
 800a624:	468b      	mov	fp, r1
 800a626:	e028      	b.n	800a67a <_dtoa_r+0x3d2>
 800a628:	2502      	movs	r5, #2
 800a62a:	e7f2      	b.n	800a612 <_dtoa_r+0x36a>
 800a62c:	07f9      	lsls	r1, r7, #31
 800a62e:	d508      	bpl.n	800a642 <_dtoa_r+0x39a>
 800a630:	4640      	mov	r0, r8
 800a632:	4649      	mov	r1, r9
 800a634:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a638:	f7f5 ffc6 	bl	80005c8 <__aeabi_dmul>
 800a63c:	3501      	adds	r5, #1
 800a63e:	4680      	mov	r8, r0
 800a640:	4689      	mov	r9, r1
 800a642:	107f      	asrs	r7, r7, #1
 800a644:	3608      	adds	r6, #8
 800a646:	e7e5      	b.n	800a614 <_dtoa_r+0x36c>
 800a648:	f000 809b 	beq.w	800a782 <_dtoa_r+0x4da>
 800a64c:	9b00      	ldr	r3, [sp, #0]
 800a64e:	4f9d      	ldr	r7, [pc, #628]	; (800a8c4 <_dtoa_r+0x61c>)
 800a650:	425e      	negs	r6, r3
 800a652:	4b9b      	ldr	r3, [pc, #620]	; (800a8c0 <_dtoa_r+0x618>)
 800a654:	f006 020f 	and.w	r2, r6, #15
 800a658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a660:	ec51 0b19 	vmov	r0, r1, d9
 800a664:	f7f5 ffb0 	bl	80005c8 <__aeabi_dmul>
 800a668:	1136      	asrs	r6, r6, #4
 800a66a:	4682      	mov	sl, r0
 800a66c:	468b      	mov	fp, r1
 800a66e:	2300      	movs	r3, #0
 800a670:	2502      	movs	r5, #2
 800a672:	2e00      	cmp	r6, #0
 800a674:	d17a      	bne.n	800a76c <_dtoa_r+0x4c4>
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1d3      	bne.n	800a622 <_dtoa_r+0x37a>
 800a67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 8082 	beq.w	800a786 <_dtoa_r+0x4de>
 800a682:	4b91      	ldr	r3, [pc, #580]	; (800a8c8 <_dtoa_r+0x620>)
 800a684:	2200      	movs	r2, #0
 800a686:	4650      	mov	r0, sl
 800a688:	4659      	mov	r1, fp
 800a68a:	f7f6 fa0f 	bl	8000aac <__aeabi_dcmplt>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d079      	beq.n	800a786 <_dtoa_r+0x4de>
 800a692:	9b03      	ldr	r3, [sp, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d076      	beq.n	800a786 <_dtoa_r+0x4de>
 800a698:	9b02      	ldr	r3, [sp, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	dd36      	ble.n	800a70c <_dtoa_r+0x464>
 800a69e:	9b00      	ldr	r3, [sp, #0]
 800a6a0:	4650      	mov	r0, sl
 800a6a2:	4659      	mov	r1, fp
 800a6a4:	1e5f      	subs	r7, r3, #1
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	4b88      	ldr	r3, [pc, #544]	; (800a8cc <_dtoa_r+0x624>)
 800a6aa:	f7f5 ff8d 	bl	80005c8 <__aeabi_dmul>
 800a6ae:	9e02      	ldr	r6, [sp, #8]
 800a6b0:	4682      	mov	sl, r0
 800a6b2:	468b      	mov	fp, r1
 800a6b4:	3501      	adds	r5, #1
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f7f5 ff1c 	bl	80004f4 <__aeabi_i2d>
 800a6bc:	4652      	mov	r2, sl
 800a6be:	465b      	mov	r3, fp
 800a6c0:	f7f5 ff82 	bl	80005c8 <__aeabi_dmul>
 800a6c4:	4b82      	ldr	r3, [pc, #520]	; (800a8d0 <_dtoa_r+0x628>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f7f5 fdc8 	bl	800025c <__adddf3>
 800a6cc:	46d0      	mov	r8, sl
 800a6ce:	46d9      	mov	r9, fp
 800a6d0:	4682      	mov	sl, r0
 800a6d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a6d6:	2e00      	cmp	r6, #0
 800a6d8:	d158      	bne.n	800a78c <_dtoa_r+0x4e4>
 800a6da:	4b7e      	ldr	r3, [pc, #504]	; (800a8d4 <_dtoa_r+0x62c>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	f7f5 fdb9 	bl	8000258 <__aeabi_dsub>
 800a6e6:	4652      	mov	r2, sl
 800a6e8:	465b      	mov	r3, fp
 800a6ea:	4680      	mov	r8, r0
 800a6ec:	4689      	mov	r9, r1
 800a6ee:	f7f6 f9fb 	bl	8000ae8 <__aeabi_dcmpgt>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	f040 8295 	bne.w	800ac22 <_dtoa_r+0x97a>
 800a6f8:	4652      	mov	r2, sl
 800a6fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6fe:	4640      	mov	r0, r8
 800a700:	4649      	mov	r1, r9
 800a702:	f7f6 f9d3 	bl	8000aac <__aeabi_dcmplt>
 800a706:	2800      	cmp	r0, #0
 800a708:	f040 8289 	bne.w	800ac1e <_dtoa_r+0x976>
 800a70c:	ec5b ab19 	vmov	sl, fp, d9
 800a710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a712:	2b00      	cmp	r3, #0
 800a714:	f2c0 8148 	blt.w	800a9a8 <_dtoa_r+0x700>
 800a718:	9a00      	ldr	r2, [sp, #0]
 800a71a:	2a0e      	cmp	r2, #14
 800a71c:	f300 8144 	bgt.w	800a9a8 <_dtoa_r+0x700>
 800a720:	4b67      	ldr	r3, [pc, #412]	; (800a8c0 <_dtoa_r+0x618>)
 800a722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a726:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f280 80d5 	bge.w	800a8dc <_dtoa_r+0x634>
 800a732:	9b03      	ldr	r3, [sp, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	f300 80d1 	bgt.w	800a8dc <_dtoa_r+0x634>
 800a73a:	f040 826f 	bne.w	800ac1c <_dtoa_r+0x974>
 800a73e:	4b65      	ldr	r3, [pc, #404]	; (800a8d4 <_dtoa_r+0x62c>)
 800a740:	2200      	movs	r2, #0
 800a742:	4640      	mov	r0, r8
 800a744:	4649      	mov	r1, r9
 800a746:	f7f5 ff3f 	bl	80005c8 <__aeabi_dmul>
 800a74a:	4652      	mov	r2, sl
 800a74c:	465b      	mov	r3, fp
 800a74e:	f7f6 f9c1 	bl	8000ad4 <__aeabi_dcmpge>
 800a752:	9e03      	ldr	r6, [sp, #12]
 800a754:	4637      	mov	r7, r6
 800a756:	2800      	cmp	r0, #0
 800a758:	f040 8245 	bne.w	800abe6 <_dtoa_r+0x93e>
 800a75c:	9d01      	ldr	r5, [sp, #4]
 800a75e:	2331      	movs	r3, #49	; 0x31
 800a760:	f805 3b01 	strb.w	r3, [r5], #1
 800a764:	9b00      	ldr	r3, [sp, #0]
 800a766:	3301      	adds	r3, #1
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	e240      	b.n	800abee <_dtoa_r+0x946>
 800a76c:	07f2      	lsls	r2, r6, #31
 800a76e:	d505      	bpl.n	800a77c <_dtoa_r+0x4d4>
 800a770:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a774:	f7f5 ff28 	bl	80005c8 <__aeabi_dmul>
 800a778:	3501      	adds	r5, #1
 800a77a:	2301      	movs	r3, #1
 800a77c:	1076      	asrs	r6, r6, #1
 800a77e:	3708      	adds	r7, #8
 800a780:	e777      	b.n	800a672 <_dtoa_r+0x3ca>
 800a782:	2502      	movs	r5, #2
 800a784:	e779      	b.n	800a67a <_dtoa_r+0x3d2>
 800a786:	9f00      	ldr	r7, [sp, #0]
 800a788:	9e03      	ldr	r6, [sp, #12]
 800a78a:	e794      	b.n	800a6b6 <_dtoa_r+0x40e>
 800a78c:	9901      	ldr	r1, [sp, #4]
 800a78e:	4b4c      	ldr	r3, [pc, #304]	; (800a8c0 <_dtoa_r+0x618>)
 800a790:	4431      	add	r1, r6
 800a792:	910d      	str	r1, [sp, #52]	; 0x34
 800a794:	9908      	ldr	r1, [sp, #32]
 800a796:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a79a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a79e:	2900      	cmp	r1, #0
 800a7a0:	d043      	beq.n	800a82a <_dtoa_r+0x582>
 800a7a2:	494d      	ldr	r1, [pc, #308]	; (800a8d8 <_dtoa_r+0x630>)
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	f7f6 f839 	bl	800081c <__aeabi_ddiv>
 800a7aa:	4652      	mov	r2, sl
 800a7ac:	465b      	mov	r3, fp
 800a7ae:	f7f5 fd53 	bl	8000258 <__aeabi_dsub>
 800a7b2:	9d01      	ldr	r5, [sp, #4]
 800a7b4:	4682      	mov	sl, r0
 800a7b6:	468b      	mov	fp, r1
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	4640      	mov	r0, r8
 800a7bc:	f7f6 f9b4 	bl	8000b28 <__aeabi_d2iz>
 800a7c0:	4606      	mov	r6, r0
 800a7c2:	f7f5 fe97 	bl	80004f4 <__aeabi_i2d>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	4640      	mov	r0, r8
 800a7cc:	4649      	mov	r1, r9
 800a7ce:	f7f5 fd43 	bl	8000258 <__aeabi_dsub>
 800a7d2:	3630      	adds	r6, #48	; 0x30
 800a7d4:	f805 6b01 	strb.w	r6, [r5], #1
 800a7d8:	4652      	mov	r2, sl
 800a7da:	465b      	mov	r3, fp
 800a7dc:	4680      	mov	r8, r0
 800a7de:	4689      	mov	r9, r1
 800a7e0:	f7f6 f964 	bl	8000aac <__aeabi_dcmplt>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d163      	bne.n	800a8b0 <_dtoa_r+0x608>
 800a7e8:	4642      	mov	r2, r8
 800a7ea:	464b      	mov	r3, r9
 800a7ec:	4936      	ldr	r1, [pc, #216]	; (800a8c8 <_dtoa_r+0x620>)
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	f7f5 fd32 	bl	8000258 <__aeabi_dsub>
 800a7f4:	4652      	mov	r2, sl
 800a7f6:	465b      	mov	r3, fp
 800a7f8:	f7f6 f958 	bl	8000aac <__aeabi_dcmplt>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	f040 80b5 	bne.w	800a96c <_dtoa_r+0x6c4>
 800a802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a804:	429d      	cmp	r5, r3
 800a806:	d081      	beq.n	800a70c <_dtoa_r+0x464>
 800a808:	4b30      	ldr	r3, [pc, #192]	; (800a8cc <_dtoa_r+0x624>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	4650      	mov	r0, sl
 800a80e:	4659      	mov	r1, fp
 800a810:	f7f5 feda 	bl	80005c8 <__aeabi_dmul>
 800a814:	4b2d      	ldr	r3, [pc, #180]	; (800a8cc <_dtoa_r+0x624>)
 800a816:	4682      	mov	sl, r0
 800a818:	468b      	mov	fp, r1
 800a81a:	4640      	mov	r0, r8
 800a81c:	4649      	mov	r1, r9
 800a81e:	2200      	movs	r2, #0
 800a820:	f7f5 fed2 	bl	80005c8 <__aeabi_dmul>
 800a824:	4680      	mov	r8, r0
 800a826:	4689      	mov	r9, r1
 800a828:	e7c6      	b.n	800a7b8 <_dtoa_r+0x510>
 800a82a:	4650      	mov	r0, sl
 800a82c:	4659      	mov	r1, fp
 800a82e:	f7f5 fecb 	bl	80005c8 <__aeabi_dmul>
 800a832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a834:	9d01      	ldr	r5, [sp, #4]
 800a836:	930f      	str	r3, [sp, #60]	; 0x3c
 800a838:	4682      	mov	sl, r0
 800a83a:	468b      	mov	fp, r1
 800a83c:	4649      	mov	r1, r9
 800a83e:	4640      	mov	r0, r8
 800a840:	f7f6 f972 	bl	8000b28 <__aeabi_d2iz>
 800a844:	4606      	mov	r6, r0
 800a846:	f7f5 fe55 	bl	80004f4 <__aeabi_i2d>
 800a84a:	3630      	adds	r6, #48	; 0x30
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4640      	mov	r0, r8
 800a852:	4649      	mov	r1, r9
 800a854:	f7f5 fd00 	bl	8000258 <__aeabi_dsub>
 800a858:	f805 6b01 	strb.w	r6, [r5], #1
 800a85c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a85e:	429d      	cmp	r5, r3
 800a860:	4680      	mov	r8, r0
 800a862:	4689      	mov	r9, r1
 800a864:	f04f 0200 	mov.w	r2, #0
 800a868:	d124      	bne.n	800a8b4 <_dtoa_r+0x60c>
 800a86a:	4b1b      	ldr	r3, [pc, #108]	; (800a8d8 <_dtoa_r+0x630>)
 800a86c:	4650      	mov	r0, sl
 800a86e:	4659      	mov	r1, fp
 800a870:	f7f5 fcf4 	bl	800025c <__adddf3>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4640      	mov	r0, r8
 800a87a:	4649      	mov	r1, r9
 800a87c:	f7f6 f934 	bl	8000ae8 <__aeabi_dcmpgt>
 800a880:	2800      	cmp	r0, #0
 800a882:	d173      	bne.n	800a96c <_dtoa_r+0x6c4>
 800a884:	4652      	mov	r2, sl
 800a886:	465b      	mov	r3, fp
 800a888:	4913      	ldr	r1, [pc, #76]	; (800a8d8 <_dtoa_r+0x630>)
 800a88a:	2000      	movs	r0, #0
 800a88c:	f7f5 fce4 	bl	8000258 <__aeabi_dsub>
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	4640      	mov	r0, r8
 800a896:	4649      	mov	r1, r9
 800a898:	f7f6 f908 	bl	8000aac <__aeabi_dcmplt>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	f43f af35 	beq.w	800a70c <_dtoa_r+0x464>
 800a8a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a8a4:	1e6b      	subs	r3, r5, #1
 800a8a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8ac:	2b30      	cmp	r3, #48	; 0x30
 800a8ae:	d0f8      	beq.n	800a8a2 <_dtoa_r+0x5fa>
 800a8b0:	9700      	str	r7, [sp, #0]
 800a8b2:	e049      	b.n	800a948 <_dtoa_r+0x6a0>
 800a8b4:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <_dtoa_r+0x624>)
 800a8b6:	f7f5 fe87 	bl	80005c8 <__aeabi_dmul>
 800a8ba:	4680      	mov	r8, r0
 800a8bc:	4689      	mov	r9, r1
 800a8be:	e7bd      	b.n	800a83c <_dtoa_r+0x594>
 800a8c0:	0800d1e0 	.word	0x0800d1e0
 800a8c4:	0800d1b8 	.word	0x0800d1b8
 800a8c8:	3ff00000 	.word	0x3ff00000
 800a8cc:	40240000 	.word	0x40240000
 800a8d0:	401c0000 	.word	0x401c0000
 800a8d4:	40140000 	.word	0x40140000
 800a8d8:	3fe00000 	.word	0x3fe00000
 800a8dc:	9d01      	ldr	r5, [sp, #4]
 800a8de:	4656      	mov	r6, sl
 800a8e0:	465f      	mov	r7, fp
 800a8e2:	4642      	mov	r2, r8
 800a8e4:	464b      	mov	r3, r9
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	4639      	mov	r1, r7
 800a8ea:	f7f5 ff97 	bl	800081c <__aeabi_ddiv>
 800a8ee:	f7f6 f91b 	bl	8000b28 <__aeabi_d2iz>
 800a8f2:	4682      	mov	sl, r0
 800a8f4:	f7f5 fdfe 	bl	80004f4 <__aeabi_i2d>
 800a8f8:	4642      	mov	r2, r8
 800a8fa:	464b      	mov	r3, r9
 800a8fc:	f7f5 fe64 	bl	80005c8 <__aeabi_dmul>
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	4630      	mov	r0, r6
 800a906:	4639      	mov	r1, r7
 800a908:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a90c:	f7f5 fca4 	bl	8000258 <__aeabi_dsub>
 800a910:	f805 6b01 	strb.w	r6, [r5], #1
 800a914:	9e01      	ldr	r6, [sp, #4]
 800a916:	9f03      	ldr	r7, [sp, #12]
 800a918:	1bae      	subs	r6, r5, r6
 800a91a:	42b7      	cmp	r7, r6
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	d135      	bne.n	800a98e <_dtoa_r+0x6e6>
 800a922:	f7f5 fc9b 	bl	800025c <__adddf3>
 800a926:	4642      	mov	r2, r8
 800a928:	464b      	mov	r3, r9
 800a92a:	4606      	mov	r6, r0
 800a92c:	460f      	mov	r7, r1
 800a92e:	f7f6 f8db 	bl	8000ae8 <__aeabi_dcmpgt>
 800a932:	b9d0      	cbnz	r0, 800a96a <_dtoa_r+0x6c2>
 800a934:	4642      	mov	r2, r8
 800a936:	464b      	mov	r3, r9
 800a938:	4630      	mov	r0, r6
 800a93a:	4639      	mov	r1, r7
 800a93c:	f7f6 f8ac 	bl	8000a98 <__aeabi_dcmpeq>
 800a940:	b110      	cbz	r0, 800a948 <_dtoa_r+0x6a0>
 800a942:	f01a 0f01 	tst.w	sl, #1
 800a946:	d110      	bne.n	800a96a <_dtoa_r+0x6c2>
 800a948:	4620      	mov	r0, r4
 800a94a:	ee18 1a10 	vmov	r1, s16
 800a94e:	f000 fd09 	bl	800b364 <_Bfree>
 800a952:	2300      	movs	r3, #0
 800a954:	9800      	ldr	r0, [sp, #0]
 800a956:	702b      	strb	r3, [r5, #0]
 800a958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a95a:	3001      	adds	r0, #1
 800a95c:	6018      	str	r0, [r3, #0]
 800a95e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a960:	2b00      	cmp	r3, #0
 800a962:	f43f acf1 	beq.w	800a348 <_dtoa_r+0xa0>
 800a966:	601d      	str	r5, [r3, #0]
 800a968:	e4ee      	b.n	800a348 <_dtoa_r+0xa0>
 800a96a:	9f00      	ldr	r7, [sp, #0]
 800a96c:	462b      	mov	r3, r5
 800a96e:	461d      	mov	r5, r3
 800a970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a974:	2a39      	cmp	r2, #57	; 0x39
 800a976:	d106      	bne.n	800a986 <_dtoa_r+0x6de>
 800a978:	9a01      	ldr	r2, [sp, #4]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d1f7      	bne.n	800a96e <_dtoa_r+0x6c6>
 800a97e:	9901      	ldr	r1, [sp, #4]
 800a980:	2230      	movs	r2, #48	; 0x30
 800a982:	3701      	adds	r7, #1
 800a984:	700a      	strb	r2, [r1, #0]
 800a986:	781a      	ldrb	r2, [r3, #0]
 800a988:	3201      	adds	r2, #1
 800a98a:	701a      	strb	r2, [r3, #0]
 800a98c:	e790      	b.n	800a8b0 <_dtoa_r+0x608>
 800a98e:	4ba6      	ldr	r3, [pc, #664]	; (800ac28 <_dtoa_r+0x980>)
 800a990:	2200      	movs	r2, #0
 800a992:	f7f5 fe19 	bl	80005c8 <__aeabi_dmul>
 800a996:	2200      	movs	r2, #0
 800a998:	2300      	movs	r3, #0
 800a99a:	4606      	mov	r6, r0
 800a99c:	460f      	mov	r7, r1
 800a99e:	f7f6 f87b 	bl	8000a98 <__aeabi_dcmpeq>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d09d      	beq.n	800a8e2 <_dtoa_r+0x63a>
 800a9a6:	e7cf      	b.n	800a948 <_dtoa_r+0x6a0>
 800a9a8:	9a08      	ldr	r2, [sp, #32]
 800a9aa:	2a00      	cmp	r2, #0
 800a9ac:	f000 80d7 	beq.w	800ab5e <_dtoa_r+0x8b6>
 800a9b0:	9a06      	ldr	r2, [sp, #24]
 800a9b2:	2a01      	cmp	r2, #1
 800a9b4:	f300 80ba 	bgt.w	800ab2c <_dtoa_r+0x884>
 800a9b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9ba:	2a00      	cmp	r2, #0
 800a9bc:	f000 80b2 	beq.w	800ab24 <_dtoa_r+0x87c>
 800a9c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9c4:	9e07      	ldr	r6, [sp, #28]
 800a9c6:	9d04      	ldr	r5, [sp, #16]
 800a9c8:	9a04      	ldr	r2, [sp, #16]
 800a9ca:	441a      	add	r2, r3
 800a9cc:	9204      	str	r2, [sp, #16]
 800a9ce:	9a05      	ldr	r2, [sp, #20]
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	441a      	add	r2, r3
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	9205      	str	r2, [sp, #20]
 800a9d8:	f000 fd7c 	bl	800b4d4 <__i2b>
 800a9dc:	4607      	mov	r7, r0
 800a9de:	2d00      	cmp	r5, #0
 800a9e0:	dd0c      	ble.n	800a9fc <_dtoa_r+0x754>
 800a9e2:	9b05      	ldr	r3, [sp, #20]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	dd09      	ble.n	800a9fc <_dtoa_r+0x754>
 800a9e8:	42ab      	cmp	r3, r5
 800a9ea:	9a04      	ldr	r2, [sp, #16]
 800a9ec:	bfa8      	it	ge
 800a9ee:	462b      	movge	r3, r5
 800a9f0:	1ad2      	subs	r2, r2, r3
 800a9f2:	9204      	str	r2, [sp, #16]
 800a9f4:	9a05      	ldr	r2, [sp, #20]
 800a9f6:	1aed      	subs	r5, r5, r3
 800a9f8:	1ad3      	subs	r3, r2, r3
 800a9fa:	9305      	str	r3, [sp, #20]
 800a9fc:	9b07      	ldr	r3, [sp, #28]
 800a9fe:	b31b      	cbz	r3, 800aa48 <_dtoa_r+0x7a0>
 800aa00:	9b08      	ldr	r3, [sp, #32]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 80af 	beq.w	800ab66 <_dtoa_r+0x8be>
 800aa08:	2e00      	cmp	r6, #0
 800aa0a:	dd13      	ble.n	800aa34 <_dtoa_r+0x78c>
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	4632      	mov	r2, r6
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 fe1f 	bl	800b654 <__pow5mult>
 800aa16:	ee18 2a10 	vmov	r2, s16
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f000 fd6e 	bl	800b500 <__multiply>
 800aa24:	ee18 1a10 	vmov	r1, s16
 800aa28:	4680      	mov	r8, r0
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 fc9a 	bl	800b364 <_Bfree>
 800aa30:	ee08 8a10 	vmov	s16, r8
 800aa34:	9b07      	ldr	r3, [sp, #28]
 800aa36:	1b9a      	subs	r2, r3, r6
 800aa38:	d006      	beq.n	800aa48 <_dtoa_r+0x7a0>
 800aa3a:	ee18 1a10 	vmov	r1, s16
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f000 fe08 	bl	800b654 <__pow5mult>
 800aa44:	ee08 0a10 	vmov	s16, r0
 800aa48:	2101      	movs	r1, #1
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 fd42 	bl	800b4d4 <__i2b>
 800aa50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	4606      	mov	r6, r0
 800aa56:	f340 8088 	ble.w	800ab6a <_dtoa_r+0x8c2>
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	4601      	mov	r1, r0
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 fdf8 	bl	800b654 <__pow5mult>
 800aa64:	9b06      	ldr	r3, [sp, #24]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	4606      	mov	r6, r0
 800aa6a:	f340 8081 	ble.w	800ab70 <_dtoa_r+0x8c8>
 800aa6e:	f04f 0800 	mov.w	r8, #0
 800aa72:	6933      	ldr	r3, [r6, #16]
 800aa74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa78:	6918      	ldr	r0, [r3, #16]
 800aa7a:	f000 fcdb 	bl	800b434 <__hi0bits>
 800aa7e:	f1c0 0020 	rsb	r0, r0, #32
 800aa82:	9b05      	ldr	r3, [sp, #20]
 800aa84:	4418      	add	r0, r3
 800aa86:	f010 001f 	ands.w	r0, r0, #31
 800aa8a:	f000 8092 	beq.w	800abb2 <_dtoa_r+0x90a>
 800aa8e:	f1c0 0320 	rsb	r3, r0, #32
 800aa92:	2b04      	cmp	r3, #4
 800aa94:	f340 808a 	ble.w	800abac <_dtoa_r+0x904>
 800aa98:	f1c0 001c 	rsb	r0, r0, #28
 800aa9c:	9b04      	ldr	r3, [sp, #16]
 800aa9e:	4403      	add	r3, r0
 800aaa0:	9304      	str	r3, [sp, #16]
 800aaa2:	9b05      	ldr	r3, [sp, #20]
 800aaa4:	4403      	add	r3, r0
 800aaa6:	4405      	add	r5, r0
 800aaa8:	9305      	str	r3, [sp, #20]
 800aaaa:	9b04      	ldr	r3, [sp, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	dd07      	ble.n	800aac0 <_dtoa_r+0x818>
 800aab0:	ee18 1a10 	vmov	r1, s16
 800aab4:	461a      	mov	r2, r3
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 fe26 	bl	800b708 <__lshift>
 800aabc:	ee08 0a10 	vmov	s16, r0
 800aac0:	9b05      	ldr	r3, [sp, #20]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	dd05      	ble.n	800aad2 <_dtoa_r+0x82a>
 800aac6:	4631      	mov	r1, r6
 800aac8:	461a      	mov	r2, r3
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 fe1c 	bl	800b708 <__lshift>
 800aad0:	4606      	mov	r6, r0
 800aad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d06e      	beq.n	800abb6 <_dtoa_r+0x90e>
 800aad8:	ee18 0a10 	vmov	r0, s16
 800aadc:	4631      	mov	r1, r6
 800aade:	f000 fe83 	bl	800b7e8 <__mcmp>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	da67      	bge.n	800abb6 <_dtoa_r+0x90e>
 800aae6:	9b00      	ldr	r3, [sp, #0]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	ee18 1a10 	vmov	r1, s16
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	220a      	movs	r2, #10
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f000 fc57 	bl	800b3a8 <__multadd>
 800aafa:	9b08      	ldr	r3, [sp, #32]
 800aafc:	ee08 0a10 	vmov	s16, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 81b1 	beq.w	800ae68 <_dtoa_r+0xbc0>
 800ab06:	2300      	movs	r3, #0
 800ab08:	4639      	mov	r1, r7
 800ab0a:	220a      	movs	r2, #10
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f000 fc4b 	bl	800b3a8 <__multadd>
 800ab12:	9b02      	ldr	r3, [sp, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	4607      	mov	r7, r0
 800ab18:	f300 808e 	bgt.w	800ac38 <_dtoa_r+0x990>
 800ab1c:	9b06      	ldr	r3, [sp, #24]
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	dc51      	bgt.n	800abc6 <_dtoa_r+0x91e>
 800ab22:	e089      	b.n	800ac38 <_dtoa_r+0x990>
 800ab24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab2a:	e74b      	b.n	800a9c4 <_dtoa_r+0x71c>
 800ab2c:	9b03      	ldr	r3, [sp, #12]
 800ab2e:	1e5e      	subs	r6, r3, #1
 800ab30:	9b07      	ldr	r3, [sp, #28]
 800ab32:	42b3      	cmp	r3, r6
 800ab34:	bfbf      	itttt	lt
 800ab36:	9b07      	ldrlt	r3, [sp, #28]
 800ab38:	9607      	strlt	r6, [sp, #28]
 800ab3a:	1af2      	sublt	r2, r6, r3
 800ab3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ab3e:	bfb6      	itet	lt
 800ab40:	189b      	addlt	r3, r3, r2
 800ab42:	1b9e      	subge	r6, r3, r6
 800ab44:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ab46:	9b03      	ldr	r3, [sp, #12]
 800ab48:	bfb8      	it	lt
 800ab4a:	2600      	movlt	r6, #0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	bfb7      	itett	lt
 800ab50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ab54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ab58:	1a9d      	sublt	r5, r3, r2
 800ab5a:	2300      	movlt	r3, #0
 800ab5c:	e734      	b.n	800a9c8 <_dtoa_r+0x720>
 800ab5e:	9e07      	ldr	r6, [sp, #28]
 800ab60:	9d04      	ldr	r5, [sp, #16]
 800ab62:	9f08      	ldr	r7, [sp, #32]
 800ab64:	e73b      	b.n	800a9de <_dtoa_r+0x736>
 800ab66:	9a07      	ldr	r2, [sp, #28]
 800ab68:	e767      	b.n	800aa3a <_dtoa_r+0x792>
 800ab6a:	9b06      	ldr	r3, [sp, #24]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	dc18      	bgt.n	800aba2 <_dtoa_r+0x8fa>
 800ab70:	f1ba 0f00 	cmp.w	sl, #0
 800ab74:	d115      	bne.n	800aba2 <_dtoa_r+0x8fa>
 800ab76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab7a:	b993      	cbnz	r3, 800aba2 <_dtoa_r+0x8fa>
 800ab7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab80:	0d1b      	lsrs	r3, r3, #20
 800ab82:	051b      	lsls	r3, r3, #20
 800ab84:	b183      	cbz	r3, 800aba8 <_dtoa_r+0x900>
 800ab86:	9b04      	ldr	r3, [sp, #16]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	9304      	str	r3, [sp, #16]
 800ab8c:	9b05      	ldr	r3, [sp, #20]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	9305      	str	r3, [sp, #20]
 800ab92:	f04f 0801 	mov.w	r8, #1
 800ab96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f47f af6a 	bne.w	800aa72 <_dtoa_r+0x7ca>
 800ab9e:	2001      	movs	r0, #1
 800aba0:	e76f      	b.n	800aa82 <_dtoa_r+0x7da>
 800aba2:	f04f 0800 	mov.w	r8, #0
 800aba6:	e7f6      	b.n	800ab96 <_dtoa_r+0x8ee>
 800aba8:	4698      	mov	r8, r3
 800abaa:	e7f4      	b.n	800ab96 <_dtoa_r+0x8ee>
 800abac:	f43f af7d 	beq.w	800aaaa <_dtoa_r+0x802>
 800abb0:	4618      	mov	r0, r3
 800abb2:	301c      	adds	r0, #28
 800abb4:	e772      	b.n	800aa9c <_dtoa_r+0x7f4>
 800abb6:	9b03      	ldr	r3, [sp, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dc37      	bgt.n	800ac2c <_dtoa_r+0x984>
 800abbc:	9b06      	ldr	r3, [sp, #24]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	dd34      	ble.n	800ac2c <_dtoa_r+0x984>
 800abc2:	9b03      	ldr	r3, [sp, #12]
 800abc4:	9302      	str	r3, [sp, #8]
 800abc6:	9b02      	ldr	r3, [sp, #8]
 800abc8:	b96b      	cbnz	r3, 800abe6 <_dtoa_r+0x93e>
 800abca:	4631      	mov	r1, r6
 800abcc:	2205      	movs	r2, #5
 800abce:	4620      	mov	r0, r4
 800abd0:	f000 fbea 	bl	800b3a8 <__multadd>
 800abd4:	4601      	mov	r1, r0
 800abd6:	4606      	mov	r6, r0
 800abd8:	ee18 0a10 	vmov	r0, s16
 800abdc:	f000 fe04 	bl	800b7e8 <__mcmp>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	f73f adbb 	bgt.w	800a75c <_dtoa_r+0x4b4>
 800abe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe8:	9d01      	ldr	r5, [sp, #4]
 800abea:	43db      	mvns	r3, r3
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	f04f 0800 	mov.w	r8, #0
 800abf2:	4631      	mov	r1, r6
 800abf4:	4620      	mov	r0, r4
 800abf6:	f000 fbb5 	bl	800b364 <_Bfree>
 800abfa:	2f00      	cmp	r7, #0
 800abfc:	f43f aea4 	beq.w	800a948 <_dtoa_r+0x6a0>
 800ac00:	f1b8 0f00 	cmp.w	r8, #0
 800ac04:	d005      	beq.n	800ac12 <_dtoa_r+0x96a>
 800ac06:	45b8      	cmp	r8, r7
 800ac08:	d003      	beq.n	800ac12 <_dtoa_r+0x96a>
 800ac0a:	4641      	mov	r1, r8
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 fba9 	bl	800b364 <_Bfree>
 800ac12:	4639      	mov	r1, r7
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 fba5 	bl	800b364 <_Bfree>
 800ac1a:	e695      	b.n	800a948 <_dtoa_r+0x6a0>
 800ac1c:	2600      	movs	r6, #0
 800ac1e:	4637      	mov	r7, r6
 800ac20:	e7e1      	b.n	800abe6 <_dtoa_r+0x93e>
 800ac22:	9700      	str	r7, [sp, #0]
 800ac24:	4637      	mov	r7, r6
 800ac26:	e599      	b.n	800a75c <_dtoa_r+0x4b4>
 800ac28:	40240000 	.word	0x40240000
 800ac2c:	9b08      	ldr	r3, [sp, #32]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f000 80ca 	beq.w	800adc8 <_dtoa_r+0xb20>
 800ac34:	9b03      	ldr	r3, [sp, #12]
 800ac36:	9302      	str	r3, [sp, #8]
 800ac38:	2d00      	cmp	r5, #0
 800ac3a:	dd05      	ble.n	800ac48 <_dtoa_r+0x9a0>
 800ac3c:	4639      	mov	r1, r7
 800ac3e:	462a      	mov	r2, r5
 800ac40:	4620      	mov	r0, r4
 800ac42:	f000 fd61 	bl	800b708 <__lshift>
 800ac46:	4607      	mov	r7, r0
 800ac48:	f1b8 0f00 	cmp.w	r8, #0
 800ac4c:	d05b      	beq.n	800ad06 <_dtoa_r+0xa5e>
 800ac4e:	6879      	ldr	r1, [r7, #4]
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 fb47 	bl	800b2e4 <_Balloc>
 800ac56:	4605      	mov	r5, r0
 800ac58:	b928      	cbnz	r0, 800ac66 <_dtoa_r+0x9be>
 800ac5a:	4b87      	ldr	r3, [pc, #540]	; (800ae78 <_dtoa_r+0xbd0>)
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac62:	f7ff bb3b 	b.w	800a2dc <_dtoa_r+0x34>
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	3202      	adds	r2, #2
 800ac6a:	0092      	lsls	r2, r2, #2
 800ac6c:	f107 010c 	add.w	r1, r7, #12
 800ac70:	300c      	adds	r0, #12
 800ac72:	f7fe fb13 	bl	800929c <memcpy>
 800ac76:	2201      	movs	r2, #1
 800ac78:	4629      	mov	r1, r5
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 fd44 	bl	800b708 <__lshift>
 800ac80:	9b01      	ldr	r3, [sp, #4]
 800ac82:	f103 0901 	add.w	r9, r3, #1
 800ac86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	9305      	str	r3, [sp, #20]
 800ac8e:	f00a 0301 	and.w	r3, sl, #1
 800ac92:	46b8      	mov	r8, r7
 800ac94:	9304      	str	r3, [sp, #16]
 800ac96:	4607      	mov	r7, r0
 800ac98:	4631      	mov	r1, r6
 800ac9a:	ee18 0a10 	vmov	r0, s16
 800ac9e:	f7ff fa75 	bl	800a18c <quorem>
 800aca2:	4641      	mov	r1, r8
 800aca4:	9002      	str	r0, [sp, #8]
 800aca6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800acaa:	ee18 0a10 	vmov	r0, s16
 800acae:	f000 fd9b 	bl	800b7e8 <__mcmp>
 800acb2:	463a      	mov	r2, r7
 800acb4:	9003      	str	r0, [sp, #12]
 800acb6:	4631      	mov	r1, r6
 800acb8:	4620      	mov	r0, r4
 800acba:	f000 fdb1 	bl	800b820 <__mdiff>
 800acbe:	68c2      	ldr	r2, [r0, #12]
 800acc0:	f109 3bff 	add.w	fp, r9, #4294967295
 800acc4:	4605      	mov	r5, r0
 800acc6:	bb02      	cbnz	r2, 800ad0a <_dtoa_r+0xa62>
 800acc8:	4601      	mov	r1, r0
 800acca:	ee18 0a10 	vmov	r0, s16
 800acce:	f000 fd8b 	bl	800b7e8 <__mcmp>
 800acd2:	4602      	mov	r2, r0
 800acd4:	4629      	mov	r1, r5
 800acd6:	4620      	mov	r0, r4
 800acd8:	9207      	str	r2, [sp, #28]
 800acda:	f000 fb43 	bl	800b364 <_Bfree>
 800acde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ace2:	ea43 0102 	orr.w	r1, r3, r2
 800ace6:	9b04      	ldr	r3, [sp, #16]
 800ace8:	430b      	orrs	r3, r1
 800acea:	464d      	mov	r5, r9
 800acec:	d10f      	bne.n	800ad0e <_dtoa_r+0xa66>
 800acee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acf2:	d02a      	beq.n	800ad4a <_dtoa_r+0xaa2>
 800acf4:	9b03      	ldr	r3, [sp, #12]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	dd02      	ble.n	800ad00 <_dtoa_r+0xa58>
 800acfa:	9b02      	ldr	r3, [sp, #8]
 800acfc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ad00:	f88b a000 	strb.w	sl, [fp]
 800ad04:	e775      	b.n	800abf2 <_dtoa_r+0x94a>
 800ad06:	4638      	mov	r0, r7
 800ad08:	e7ba      	b.n	800ac80 <_dtoa_r+0x9d8>
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	e7e2      	b.n	800acd4 <_dtoa_r+0xa2c>
 800ad0e:	9b03      	ldr	r3, [sp, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	db04      	blt.n	800ad1e <_dtoa_r+0xa76>
 800ad14:	9906      	ldr	r1, [sp, #24]
 800ad16:	430b      	orrs	r3, r1
 800ad18:	9904      	ldr	r1, [sp, #16]
 800ad1a:	430b      	orrs	r3, r1
 800ad1c:	d122      	bne.n	800ad64 <_dtoa_r+0xabc>
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	ddee      	ble.n	800ad00 <_dtoa_r+0xa58>
 800ad22:	ee18 1a10 	vmov	r1, s16
 800ad26:	2201      	movs	r2, #1
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f000 fced 	bl	800b708 <__lshift>
 800ad2e:	4631      	mov	r1, r6
 800ad30:	ee08 0a10 	vmov	s16, r0
 800ad34:	f000 fd58 	bl	800b7e8 <__mcmp>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	dc03      	bgt.n	800ad44 <_dtoa_r+0xa9c>
 800ad3c:	d1e0      	bne.n	800ad00 <_dtoa_r+0xa58>
 800ad3e:	f01a 0f01 	tst.w	sl, #1
 800ad42:	d0dd      	beq.n	800ad00 <_dtoa_r+0xa58>
 800ad44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad48:	d1d7      	bne.n	800acfa <_dtoa_r+0xa52>
 800ad4a:	2339      	movs	r3, #57	; 0x39
 800ad4c:	f88b 3000 	strb.w	r3, [fp]
 800ad50:	462b      	mov	r3, r5
 800ad52:	461d      	mov	r5, r3
 800ad54:	3b01      	subs	r3, #1
 800ad56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad5a:	2a39      	cmp	r2, #57	; 0x39
 800ad5c:	d071      	beq.n	800ae42 <_dtoa_r+0xb9a>
 800ad5e:	3201      	adds	r2, #1
 800ad60:	701a      	strb	r2, [r3, #0]
 800ad62:	e746      	b.n	800abf2 <_dtoa_r+0x94a>
 800ad64:	2a00      	cmp	r2, #0
 800ad66:	dd07      	ble.n	800ad78 <_dtoa_r+0xad0>
 800ad68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad6c:	d0ed      	beq.n	800ad4a <_dtoa_r+0xaa2>
 800ad6e:	f10a 0301 	add.w	r3, sl, #1
 800ad72:	f88b 3000 	strb.w	r3, [fp]
 800ad76:	e73c      	b.n	800abf2 <_dtoa_r+0x94a>
 800ad78:	9b05      	ldr	r3, [sp, #20]
 800ad7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad7e:	4599      	cmp	r9, r3
 800ad80:	d047      	beq.n	800ae12 <_dtoa_r+0xb6a>
 800ad82:	ee18 1a10 	vmov	r1, s16
 800ad86:	2300      	movs	r3, #0
 800ad88:	220a      	movs	r2, #10
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 fb0c 	bl	800b3a8 <__multadd>
 800ad90:	45b8      	cmp	r8, r7
 800ad92:	ee08 0a10 	vmov	s16, r0
 800ad96:	f04f 0300 	mov.w	r3, #0
 800ad9a:	f04f 020a 	mov.w	r2, #10
 800ad9e:	4641      	mov	r1, r8
 800ada0:	4620      	mov	r0, r4
 800ada2:	d106      	bne.n	800adb2 <_dtoa_r+0xb0a>
 800ada4:	f000 fb00 	bl	800b3a8 <__multadd>
 800ada8:	4680      	mov	r8, r0
 800adaa:	4607      	mov	r7, r0
 800adac:	f109 0901 	add.w	r9, r9, #1
 800adb0:	e772      	b.n	800ac98 <_dtoa_r+0x9f0>
 800adb2:	f000 faf9 	bl	800b3a8 <__multadd>
 800adb6:	4639      	mov	r1, r7
 800adb8:	4680      	mov	r8, r0
 800adba:	2300      	movs	r3, #0
 800adbc:	220a      	movs	r2, #10
 800adbe:	4620      	mov	r0, r4
 800adc0:	f000 faf2 	bl	800b3a8 <__multadd>
 800adc4:	4607      	mov	r7, r0
 800adc6:	e7f1      	b.n	800adac <_dtoa_r+0xb04>
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	9302      	str	r3, [sp, #8]
 800adcc:	9d01      	ldr	r5, [sp, #4]
 800adce:	ee18 0a10 	vmov	r0, s16
 800add2:	4631      	mov	r1, r6
 800add4:	f7ff f9da 	bl	800a18c <quorem>
 800add8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800addc:	9b01      	ldr	r3, [sp, #4]
 800adde:	f805 ab01 	strb.w	sl, [r5], #1
 800ade2:	1aea      	subs	r2, r5, r3
 800ade4:	9b02      	ldr	r3, [sp, #8]
 800ade6:	4293      	cmp	r3, r2
 800ade8:	dd09      	ble.n	800adfe <_dtoa_r+0xb56>
 800adea:	ee18 1a10 	vmov	r1, s16
 800adee:	2300      	movs	r3, #0
 800adf0:	220a      	movs	r2, #10
 800adf2:	4620      	mov	r0, r4
 800adf4:	f000 fad8 	bl	800b3a8 <__multadd>
 800adf8:	ee08 0a10 	vmov	s16, r0
 800adfc:	e7e7      	b.n	800adce <_dtoa_r+0xb26>
 800adfe:	9b02      	ldr	r3, [sp, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bfc8      	it	gt
 800ae04:	461d      	movgt	r5, r3
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	bfd8      	it	le
 800ae0a:	2501      	movle	r5, #1
 800ae0c:	441d      	add	r5, r3
 800ae0e:	f04f 0800 	mov.w	r8, #0
 800ae12:	ee18 1a10 	vmov	r1, s16
 800ae16:	2201      	movs	r2, #1
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f000 fc75 	bl	800b708 <__lshift>
 800ae1e:	4631      	mov	r1, r6
 800ae20:	ee08 0a10 	vmov	s16, r0
 800ae24:	f000 fce0 	bl	800b7e8 <__mcmp>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	dc91      	bgt.n	800ad50 <_dtoa_r+0xaa8>
 800ae2c:	d102      	bne.n	800ae34 <_dtoa_r+0xb8c>
 800ae2e:	f01a 0f01 	tst.w	sl, #1
 800ae32:	d18d      	bne.n	800ad50 <_dtoa_r+0xaa8>
 800ae34:	462b      	mov	r3, r5
 800ae36:	461d      	mov	r5, r3
 800ae38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae3c:	2a30      	cmp	r2, #48	; 0x30
 800ae3e:	d0fa      	beq.n	800ae36 <_dtoa_r+0xb8e>
 800ae40:	e6d7      	b.n	800abf2 <_dtoa_r+0x94a>
 800ae42:	9a01      	ldr	r2, [sp, #4]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d184      	bne.n	800ad52 <_dtoa_r+0xaaa>
 800ae48:	9b00      	ldr	r3, [sp, #0]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	2331      	movs	r3, #49	; 0x31
 800ae50:	7013      	strb	r3, [r2, #0]
 800ae52:	e6ce      	b.n	800abf2 <_dtoa_r+0x94a>
 800ae54:	4b09      	ldr	r3, [pc, #36]	; (800ae7c <_dtoa_r+0xbd4>)
 800ae56:	f7ff ba95 	b.w	800a384 <_dtoa_r+0xdc>
 800ae5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f47f aa6e 	bne.w	800a33e <_dtoa_r+0x96>
 800ae62:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <_dtoa_r+0xbd8>)
 800ae64:	f7ff ba8e 	b.w	800a384 <_dtoa_r+0xdc>
 800ae68:	9b02      	ldr	r3, [sp, #8]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	dcae      	bgt.n	800adcc <_dtoa_r+0xb24>
 800ae6e:	9b06      	ldr	r3, [sp, #24]
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	f73f aea8 	bgt.w	800abc6 <_dtoa_r+0x91e>
 800ae76:	e7a9      	b.n	800adcc <_dtoa_r+0xb24>
 800ae78:	0800d0e8 	.word	0x0800d0e8
 800ae7c:	0800cf44 	.word	0x0800cf44
 800ae80:	0800d069 	.word	0x0800d069

0800ae84 <__sflush_r>:
 800ae84:	898a      	ldrh	r2, [r1, #12]
 800ae86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	0710      	lsls	r0, r2, #28
 800ae8e:	460c      	mov	r4, r1
 800ae90:	d458      	bmi.n	800af44 <__sflush_r+0xc0>
 800ae92:	684b      	ldr	r3, [r1, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	dc05      	bgt.n	800aea4 <__sflush_r+0x20>
 800ae98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dc02      	bgt.n	800aea4 <__sflush_r+0x20>
 800ae9e:	2000      	movs	r0, #0
 800aea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aea6:	2e00      	cmp	r6, #0
 800aea8:	d0f9      	beq.n	800ae9e <__sflush_r+0x1a>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aeb0:	682f      	ldr	r7, [r5, #0]
 800aeb2:	602b      	str	r3, [r5, #0]
 800aeb4:	d032      	beq.n	800af1c <__sflush_r+0x98>
 800aeb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	075a      	lsls	r2, r3, #29
 800aebc:	d505      	bpl.n	800aeca <__sflush_r+0x46>
 800aebe:	6863      	ldr	r3, [r4, #4]
 800aec0:	1ac0      	subs	r0, r0, r3
 800aec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aec4:	b10b      	cbz	r3, 800aeca <__sflush_r+0x46>
 800aec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aec8:	1ac0      	subs	r0, r0, r3
 800aeca:	2300      	movs	r3, #0
 800aecc:	4602      	mov	r2, r0
 800aece:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aed0:	6a21      	ldr	r1, [r4, #32]
 800aed2:	4628      	mov	r0, r5
 800aed4:	47b0      	blx	r6
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	d106      	bne.n	800aeea <__sflush_r+0x66>
 800aedc:	6829      	ldr	r1, [r5, #0]
 800aede:	291d      	cmp	r1, #29
 800aee0:	d82c      	bhi.n	800af3c <__sflush_r+0xb8>
 800aee2:	4a2a      	ldr	r2, [pc, #168]	; (800af8c <__sflush_r+0x108>)
 800aee4:	40ca      	lsrs	r2, r1
 800aee6:	07d6      	lsls	r6, r2, #31
 800aee8:	d528      	bpl.n	800af3c <__sflush_r+0xb8>
 800aeea:	2200      	movs	r2, #0
 800aeec:	6062      	str	r2, [r4, #4]
 800aeee:	04d9      	lsls	r1, r3, #19
 800aef0:	6922      	ldr	r2, [r4, #16]
 800aef2:	6022      	str	r2, [r4, #0]
 800aef4:	d504      	bpl.n	800af00 <__sflush_r+0x7c>
 800aef6:	1c42      	adds	r2, r0, #1
 800aef8:	d101      	bne.n	800aefe <__sflush_r+0x7a>
 800aefa:	682b      	ldr	r3, [r5, #0]
 800aefc:	b903      	cbnz	r3, 800af00 <__sflush_r+0x7c>
 800aefe:	6560      	str	r0, [r4, #84]	; 0x54
 800af00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af02:	602f      	str	r7, [r5, #0]
 800af04:	2900      	cmp	r1, #0
 800af06:	d0ca      	beq.n	800ae9e <__sflush_r+0x1a>
 800af08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af0c:	4299      	cmp	r1, r3
 800af0e:	d002      	beq.n	800af16 <__sflush_r+0x92>
 800af10:	4628      	mov	r0, r5
 800af12:	f7fe f9d9 	bl	80092c8 <_free_r>
 800af16:	2000      	movs	r0, #0
 800af18:	6360      	str	r0, [r4, #52]	; 0x34
 800af1a:	e7c1      	b.n	800aea0 <__sflush_r+0x1c>
 800af1c:	6a21      	ldr	r1, [r4, #32]
 800af1e:	2301      	movs	r3, #1
 800af20:	4628      	mov	r0, r5
 800af22:	47b0      	blx	r6
 800af24:	1c41      	adds	r1, r0, #1
 800af26:	d1c7      	bne.n	800aeb8 <__sflush_r+0x34>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d0c4      	beq.n	800aeb8 <__sflush_r+0x34>
 800af2e:	2b1d      	cmp	r3, #29
 800af30:	d001      	beq.n	800af36 <__sflush_r+0xb2>
 800af32:	2b16      	cmp	r3, #22
 800af34:	d101      	bne.n	800af3a <__sflush_r+0xb6>
 800af36:	602f      	str	r7, [r5, #0]
 800af38:	e7b1      	b.n	800ae9e <__sflush_r+0x1a>
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af40:	81a3      	strh	r3, [r4, #12]
 800af42:	e7ad      	b.n	800aea0 <__sflush_r+0x1c>
 800af44:	690f      	ldr	r7, [r1, #16]
 800af46:	2f00      	cmp	r7, #0
 800af48:	d0a9      	beq.n	800ae9e <__sflush_r+0x1a>
 800af4a:	0793      	lsls	r3, r2, #30
 800af4c:	680e      	ldr	r6, [r1, #0]
 800af4e:	bf08      	it	eq
 800af50:	694b      	ldreq	r3, [r1, #20]
 800af52:	600f      	str	r7, [r1, #0]
 800af54:	bf18      	it	ne
 800af56:	2300      	movne	r3, #0
 800af58:	eba6 0807 	sub.w	r8, r6, r7
 800af5c:	608b      	str	r3, [r1, #8]
 800af5e:	f1b8 0f00 	cmp.w	r8, #0
 800af62:	dd9c      	ble.n	800ae9e <__sflush_r+0x1a>
 800af64:	6a21      	ldr	r1, [r4, #32]
 800af66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af68:	4643      	mov	r3, r8
 800af6a:	463a      	mov	r2, r7
 800af6c:	4628      	mov	r0, r5
 800af6e:	47b0      	blx	r6
 800af70:	2800      	cmp	r0, #0
 800af72:	dc06      	bgt.n	800af82 <__sflush_r+0xfe>
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	f04f 30ff 	mov.w	r0, #4294967295
 800af80:	e78e      	b.n	800aea0 <__sflush_r+0x1c>
 800af82:	4407      	add	r7, r0
 800af84:	eba8 0800 	sub.w	r8, r8, r0
 800af88:	e7e9      	b.n	800af5e <__sflush_r+0xda>
 800af8a:	bf00      	nop
 800af8c:	20400001 	.word	0x20400001

0800af90 <_fflush_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	690b      	ldr	r3, [r1, #16]
 800af94:	4605      	mov	r5, r0
 800af96:	460c      	mov	r4, r1
 800af98:	b913      	cbnz	r3, 800afa0 <_fflush_r+0x10>
 800af9a:	2500      	movs	r5, #0
 800af9c:	4628      	mov	r0, r5
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	b118      	cbz	r0, 800afaa <_fflush_r+0x1a>
 800afa2:	6983      	ldr	r3, [r0, #24]
 800afa4:	b90b      	cbnz	r3, 800afaa <_fflush_r+0x1a>
 800afa6:	f000 f887 	bl	800b0b8 <__sinit>
 800afaa:	4b14      	ldr	r3, [pc, #80]	; (800affc <_fflush_r+0x6c>)
 800afac:	429c      	cmp	r4, r3
 800afae:	d11b      	bne.n	800afe8 <_fflush_r+0x58>
 800afb0:	686c      	ldr	r4, [r5, #4]
 800afb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d0ef      	beq.n	800af9a <_fflush_r+0xa>
 800afba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afbc:	07d0      	lsls	r0, r2, #31
 800afbe:	d404      	bmi.n	800afca <_fflush_r+0x3a>
 800afc0:	0599      	lsls	r1, r3, #22
 800afc2:	d402      	bmi.n	800afca <_fflush_r+0x3a>
 800afc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afc6:	f000 f91a 	bl	800b1fe <__retarget_lock_acquire_recursive>
 800afca:	4628      	mov	r0, r5
 800afcc:	4621      	mov	r1, r4
 800afce:	f7ff ff59 	bl	800ae84 <__sflush_r>
 800afd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afd4:	07da      	lsls	r2, r3, #31
 800afd6:	4605      	mov	r5, r0
 800afd8:	d4e0      	bmi.n	800af9c <_fflush_r+0xc>
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	059b      	lsls	r3, r3, #22
 800afde:	d4dd      	bmi.n	800af9c <_fflush_r+0xc>
 800afe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afe2:	f000 f90d 	bl	800b200 <__retarget_lock_release_recursive>
 800afe6:	e7d9      	b.n	800af9c <_fflush_r+0xc>
 800afe8:	4b05      	ldr	r3, [pc, #20]	; (800b000 <_fflush_r+0x70>)
 800afea:	429c      	cmp	r4, r3
 800afec:	d101      	bne.n	800aff2 <_fflush_r+0x62>
 800afee:	68ac      	ldr	r4, [r5, #8]
 800aff0:	e7df      	b.n	800afb2 <_fflush_r+0x22>
 800aff2:	4b04      	ldr	r3, [pc, #16]	; (800b004 <_fflush_r+0x74>)
 800aff4:	429c      	cmp	r4, r3
 800aff6:	bf08      	it	eq
 800aff8:	68ec      	ldreq	r4, [r5, #12]
 800affa:	e7da      	b.n	800afb2 <_fflush_r+0x22>
 800affc:	0800d11c 	.word	0x0800d11c
 800b000:	0800d13c 	.word	0x0800d13c
 800b004:	0800d0fc 	.word	0x0800d0fc

0800b008 <std>:
 800b008:	2300      	movs	r3, #0
 800b00a:	b510      	push	{r4, lr}
 800b00c:	4604      	mov	r4, r0
 800b00e:	e9c0 3300 	strd	r3, r3, [r0]
 800b012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b016:	6083      	str	r3, [r0, #8]
 800b018:	8181      	strh	r1, [r0, #12]
 800b01a:	6643      	str	r3, [r0, #100]	; 0x64
 800b01c:	81c2      	strh	r2, [r0, #14]
 800b01e:	6183      	str	r3, [r0, #24]
 800b020:	4619      	mov	r1, r3
 800b022:	2208      	movs	r2, #8
 800b024:	305c      	adds	r0, #92	; 0x5c
 800b026:	f7fe f947 	bl	80092b8 <memset>
 800b02a:	4b05      	ldr	r3, [pc, #20]	; (800b040 <std+0x38>)
 800b02c:	6263      	str	r3, [r4, #36]	; 0x24
 800b02e:	4b05      	ldr	r3, [pc, #20]	; (800b044 <std+0x3c>)
 800b030:	62a3      	str	r3, [r4, #40]	; 0x28
 800b032:	4b05      	ldr	r3, [pc, #20]	; (800b048 <std+0x40>)
 800b034:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b036:	4b05      	ldr	r3, [pc, #20]	; (800b04c <std+0x44>)
 800b038:	6224      	str	r4, [r4, #32]
 800b03a:	6323      	str	r3, [r4, #48]	; 0x30
 800b03c:	bd10      	pop	{r4, pc}
 800b03e:	bf00      	nop
 800b040:	0800bf85 	.word	0x0800bf85
 800b044:	0800bfa7 	.word	0x0800bfa7
 800b048:	0800bfdf 	.word	0x0800bfdf
 800b04c:	0800c003 	.word	0x0800c003

0800b050 <_cleanup_r>:
 800b050:	4901      	ldr	r1, [pc, #4]	; (800b058 <_cleanup_r+0x8>)
 800b052:	f000 b8af 	b.w	800b1b4 <_fwalk_reent>
 800b056:	bf00      	nop
 800b058:	0800af91 	.word	0x0800af91

0800b05c <__sfmoreglue>:
 800b05c:	b570      	push	{r4, r5, r6, lr}
 800b05e:	2268      	movs	r2, #104	; 0x68
 800b060:	1e4d      	subs	r5, r1, #1
 800b062:	4355      	muls	r5, r2
 800b064:	460e      	mov	r6, r1
 800b066:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b06a:	f7fe f999 	bl	80093a0 <_malloc_r>
 800b06e:	4604      	mov	r4, r0
 800b070:	b140      	cbz	r0, 800b084 <__sfmoreglue+0x28>
 800b072:	2100      	movs	r1, #0
 800b074:	e9c0 1600 	strd	r1, r6, [r0]
 800b078:	300c      	adds	r0, #12
 800b07a:	60a0      	str	r0, [r4, #8]
 800b07c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b080:	f7fe f91a 	bl	80092b8 <memset>
 800b084:	4620      	mov	r0, r4
 800b086:	bd70      	pop	{r4, r5, r6, pc}

0800b088 <__sfp_lock_acquire>:
 800b088:	4801      	ldr	r0, [pc, #4]	; (800b090 <__sfp_lock_acquire+0x8>)
 800b08a:	f000 b8b8 	b.w	800b1fe <__retarget_lock_acquire_recursive>
 800b08e:	bf00      	nop
 800b090:	20000541 	.word	0x20000541

0800b094 <__sfp_lock_release>:
 800b094:	4801      	ldr	r0, [pc, #4]	; (800b09c <__sfp_lock_release+0x8>)
 800b096:	f000 b8b3 	b.w	800b200 <__retarget_lock_release_recursive>
 800b09a:	bf00      	nop
 800b09c:	20000541 	.word	0x20000541

0800b0a0 <__sinit_lock_acquire>:
 800b0a0:	4801      	ldr	r0, [pc, #4]	; (800b0a8 <__sinit_lock_acquire+0x8>)
 800b0a2:	f000 b8ac 	b.w	800b1fe <__retarget_lock_acquire_recursive>
 800b0a6:	bf00      	nop
 800b0a8:	20000542 	.word	0x20000542

0800b0ac <__sinit_lock_release>:
 800b0ac:	4801      	ldr	r0, [pc, #4]	; (800b0b4 <__sinit_lock_release+0x8>)
 800b0ae:	f000 b8a7 	b.w	800b200 <__retarget_lock_release_recursive>
 800b0b2:	bf00      	nop
 800b0b4:	20000542 	.word	0x20000542

0800b0b8 <__sinit>:
 800b0b8:	b510      	push	{r4, lr}
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	f7ff fff0 	bl	800b0a0 <__sinit_lock_acquire>
 800b0c0:	69a3      	ldr	r3, [r4, #24]
 800b0c2:	b11b      	cbz	r3, 800b0cc <__sinit+0x14>
 800b0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0c8:	f7ff bff0 	b.w	800b0ac <__sinit_lock_release>
 800b0cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b0d0:	6523      	str	r3, [r4, #80]	; 0x50
 800b0d2:	4b13      	ldr	r3, [pc, #76]	; (800b120 <__sinit+0x68>)
 800b0d4:	4a13      	ldr	r2, [pc, #76]	; (800b124 <__sinit+0x6c>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b0da:	42a3      	cmp	r3, r4
 800b0dc:	bf04      	itt	eq
 800b0de:	2301      	moveq	r3, #1
 800b0e0:	61a3      	streq	r3, [r4, #24]
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f000 f820 	bl	800b128 <__sfp>
 800b0e8:	6060      	str	r0, [r4, #4]
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 f81c 	bl	800b128 <__sfp>
 800b0f0:	60a0      	str	r0, [r4, #8]
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 f818 	bl	800b128 <__sfp>
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	60e0      	str	r0, [r4, #12]
 800b0fc:	2104      	movs	r1, #4
 800b0fe:	6860      	ldr	r0, [r4, #4]
 800b100:	f7ff ff82 	bl	800b008 <std>
 800b104:	68a0      	ldr	r0, [r4, #8]
 800b106:	2201      	movs	r2, #1
 800b108:	2109      	movs	r1, #9
 800b10a:	f7ff ff7d 	bl	800b008 <std>
 800b10e:	68e0      	ldr	r0, [r4, #12]
 800b110:	2202      	movs	r2, #2
 800b112:	2112      	movs	r1, #18
 800b114:	f7ff ff78 	bl	800b008 <std>
 800b118:	2301      	movs	r3, #1
 800b11a:	61a3      	str	r3, [r4, #24]
 800b11c:	e7d2      	b.n	800b0c4 <__sinit+0xc>
 800b11e:	bf00      	nop
 800b120:	0800cf30 	.word	0x0800cf30
 800b124:	0800b051 	.word	0x0800b051

0800b128 <__sfp>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	4607      	mov	r7, r0
 800b12c:	f7ff ffac 	bl	800b088 <__sfp_lock_acquire>
 800b130:	4b1e      	ldr	r3, [pc, #120]	; (800b1ac <__sfp+0x84>)
 800b132:	681e      	ldr	r6, [r3, #0]
 800b134:	69b3      	ldr	r3, [r6, #24]
 800b136:	b913      	cbnz	r3, 800b13e <__sfp+0x16>
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff ffbd 	bl	800b0b8 <__sinit>
 800b13e:	3648      	adds	r6, #72	; 0x48
 800b140:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b144:	3b01      	subs	r3, #1
 800b146:	d503      	bpl.n	800b150 <__sfp+0x28>
 800b148:	6833      	ldr	r3, [r6, #0]
 800b14a:	b30b      	cbz	r3, 800b190 <__sfp+0x68>
 800b14c:	6836      	ldr	r6, [r6, #0]
 800b14e:	e7f7      	b.n	800b140 <__sfp+0x18>
 800b150:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b154:	b9d5      	cbnz	r5, 800b18c <__sfp+0x64>
 800b156:	4b16      	ldr	r3, [pc, #88]	; (800b1b0 <__sfp+0x88>)
 800b158:	60e3      	str	r3, [r4, #12]
 800b15a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b15e:	6665      	str	r5, [r4, #100]	; 0x64
 800b160:	f000 f84c 	bl	800b1fc <__retarget_lock_init_recursive>
 800b164:	f7ff ff96 	bl	800b094 <__sfp_lock_release>
 800b168:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b16c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b170:	6025      	str	r5, [r4, #0]
 800b172:	61a5      	str	r5, [r4, #24]
 800b174:	2208      	movs	r2, #8
 800b176:	4629      	mov	r1, r5
 800b178:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b17c:	f7fe f89c 	bl	80092b8 <memset>
 800b180:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b184:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b188:	4620      	mov	r0, r4
 800b18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b18c:	3468      	adds	r4, #104	; 0x68
 800b18e:	e7d9      	b.n	800b144 <__sfp+0x1c>
 800b190:	2104      	movs	r1, #4
 800b192:	4638      	mov	r0, r7
 800b194:	f7ff ff62 	bl	800b05c <__sfmoreglue>
 800b198:	4604      	mov	r4, r0
 800b19a:	6030      	str	r0, [r6, #0]
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d1d5      	bne.n	800b14c <__sfp+0x24>
 800b1a0:	f7ff ff78 	bl	800b094 <__sfp_lock_release>
 800b1a4:	230c      	movs	r3, #12
 800b1a6:	603b      	str	r3, [r7, #0]
 800b1a8:	e7ee      	b.n	800b188 <__sfp+0x60>
 800b1aa:	bf00      	nop
 800b1ac:	0800cf30 	.word	0x0800cf30
 800b1b0:	ffff0001 	.word	0xffff0001

0800b1b4 <_fwalk_reent>:
 800b1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b8:	4606      	mov	r6, r0
 800b1ba:	4688      	mov	r8, r1
 800b1bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1c0:	2700      	movs	r7, #0
 800b1c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1c6:	f1b9 0901 	subs.w	r9, r9, #1
 800b1ca:	d505      	bpl.n	800b1d8 <_fwalk_reent+0x24>
 800b1cc:	6824      	ldr	r4, [r4, #0]
 800b1ce:	2c00      	cmp	r4, #0
 800b1d0:	d1f7      	bne.n	800b1c2 <_fwalk_reent+0xe>
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1d8:	89ab      	ldrh	r3, [r5, #12]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d907      	bls.n	800b1ee <_fwalk_reent+0x3a>
 800b1de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	d003      	beq.n	800b1ee <_fwalk_reent+0x3a>
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	47c0      	blx	r8
 800b1ec:	4307      	orrs	r7, r0
 800b1ee:	3568      	adds	r5, #104	; 0x68
 800b1f0:	e7e9      	b.n	800b1c6 <_fwalk_reent+0x12>
	...

0800b1f4 <_localeconv_r>:
 800b1f4:	4800      	ldr	r0, [pc, #0]	; (800b1f8 <_localeconv_r+0x4>)
 800b1f6:	4770      	bx	lr
 800b1f8:	20000164 	.word	0x20000164

0800b1fc <__retarget_lock_init_recursive>:
 800b1fc:	4770      	bx	lr

0800b1fe <__retarget_lock_acquire_recursive>:
 800b1fe:	4770      	bx	lr

0800b200 <__retarget_lock_release_recursive>:
 800b200:	4770      	bx	lr

0800b202 <__swhatbuf_r>:
 800b202:	b570      	push	{r4, r5, r6, lr}
 800b204:	460e      	mov	r6, r1
 800b206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b20a:	2900      	cmp	r1, #0
 800b20c:	b096      	sub	sp, #88	; 0x58
 800b20e:	4614      	mov	r4, r2
 800b210:	461d      	mov	r5, r3
 800b212:	da08      	bge.n	800b226 <__swhatbuf_r+0x24>
 800b214:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	602a      	str	r2, [r5, #0]
 800b21c:	061a      	lsls	r2, r3, #24
 800b21e:	d410      	bmi.n	800b242 <__swhatbuf_r+0x40>
 800b220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b224:	e00e      	b.n	800b244 <__swhatbuf_r+0x42>
 800b226:	466a      	mov	r2, sp
 800b228:	f000 ff42 	bl	800c0b0 <_fstat_r>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	dbf1      	blt.n	800b214 <__swhatbuf_r+0x12>
 800b230:	9a01      	ldr	r2, [sp, #4]
 800b232:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b236:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b23a:	425a      	negs	r2, r3
 800b23c:	415a      	adcs	r2, r3
 800b23e:	602a      	str	r2, [r5, #0]
 800b240:	e7ee      	b.n	800b220 <__swhatbuf_r+0x1e>
 800b242:	2340      	movs	r3, #64	; 0x40
 800b244:	2000      	movs	r0, #0
 800b246:	6023      	str	r3, [r4, #0]
 800b248:	b016      	add	sp, #88	; 0x58
 800b24a:	bd70      	pop	{r4, r5, r6, pc}

0800b24c <__smakebuf_r>:
 800b24c:	898b      	ldrh	r3, [r1, #12]
 800b24e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b250:	079d      	lsls	r5, r3, #30
 800b252:	4606      	mov	r6, r0
 800b254:	460c      	mov	r4, r1
 800b256:	d507      	bpl.n	800b268 <__smakebuf_r+0x1c>
 800b258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b25c:	6023      	str	r3, [r4, #0]
 800b25e:	6123      	str	r3, [r4, #16]
 800b260:	2301      	movs	r3, #1
 800b262:	6163      	str	r3, [r4, #20]
 800b264:	b002      	add	sp, #8
 800b266:	bd70      	pop	{r4, r5, r6, pc}
 800b268:	ab01      	add	r3, sp, #4
 800b26a:	466a      	mov	r2, sp
 800b26c:	f7ff ffc9 	bl	800b202 <__swhatbuf_r>
 800b270:	9900      	ldr	r1, [sp, #0]
 800b272:	4605      	mov	r5, r0
 800b274:	4630      	mov	r0, r6
 800b276:	f7fe f893 	bl	80093a0 <_malloc_r>
 800b27a:	b948      	cbnz	r0, 800b290 <__smakebuf_r+0x44>
 800b27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b280:	059a      	lsls	r2, r3, #22
 800b282:	d4ef      	bmi.n	800b264 <__smakebuf_r+0x18>
 800b284:	f023 0303 	bic.w	r3, r3, #3
 800b288:	f043 0302 	orr.w	r3, r3, #2
 800b28c:	81a3      	strh	r3, [r4, #12]
 800b28e:	e7e3      	b.n	800b258 <__smakebuf_r+0xc>
 800b290:	4b0d      	ldr	r3, [pc, #52]	; (800b2c8 <__smakebuf_r+0x7c>)
 800b292:	62b3      	str	r3, [r6, #40]	; 0x28
 800b294:	89a3      	ldrh	r3, [r4, #12]
 800b296:	6020      	str	r0, [r4, #0]
 800b298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b29c:	81a3      	strh	r3, [r4, #12]
 800b29e:	9b00      	ldr	r3, [sp, #0]
 800b2a0:	6163      	str	r3, [r4, #20]
 800b2a2:	9b01      	ldr	r3, [sp, #4]
 800b2a4:	6120      	str	r0, [r4, #16]
 800b2a6:	b15b      	cbz	r3, 800b2c0 <__smakebuf_r+0x74>
 800b2a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f000 ff11 	bl	800c0d4 <_isatty_r>
 800b2b2:	b128      	cbz	r0, 800b2c0 <__smakebuf_r+0x74>
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	f023 0303 	bic.w	r3, r3, #3
 800b2ba:	f043 0301 	orr.w	r3, r3, #1
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	89a0      	ldrh	r0, [r4, #12]
 800b2c2:	4305      	orrs	r5, r0
 800b2c4:	81a5      	strh	r5, [r4, #12]
 800b2c6:	e7cd      	b.n	800b264 <__smakebuf_r+0x18>
 800b2c8:	0800b051 	.word	0x0800b051

0800b2cc <__malloc_lock>:
 800b2cc:	4801      	ldr	r0, [pc, #4]	; (800b2d4 <__malloc_lock+0x8>)
 800b2ce:	f7ff bf96 	b.w	800b1fe <__retarget_lock_acquire_recursive>
 800b2d2:	bf00      	nop
 800b2d4:	20000540 	.word	0x20000540

0800b2d8 <__malloc_unlock>:
 800b2d8:	4801      	ldr	r0, [pc, #4]	; (800b2e0 <__malloc_unlock+0x8>)
 800b2da:	f7ff bf91 	b.w	800b200 <__retarget_lock_release_recursive>
 800b2de:	bf00      	nop
 800b2e0:	20000540 	.word	0x20000540

0800b2e4 <_Balloc>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	460d      	mov	r5, r1
 800b2ec:	b976      	cbnz	r6, 800b30c <_Balloc+0x28>
 800b2ee:	2010      	movs	r0, #16
 800b2f0:	f7fd ffcc 	bl	800928c <malloc>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	6260      	str	r0, [r4, #36]	; 0x24
 800b2f8:	b920      	cbnz	r0, 800b304 <_Balloc+0x20>
 800b2fa:	4b18      	ldr	r3, [pc, #96]	; (800b35c <_Balloc+0x78>)
 800b2fc:	4818      	ldr	r0, [pc, #96]	; (800b360 <_Balloc+0x7c>)
 800b2fe:	2166      	movs	r1, #102	; 0x66
 800b300:	f000 fe96 	bl	800c030 <__assert_func>
 800b304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b308:	6006      	str	r6, [r0, #0]
 800b30a:	60c6      	str	r6, [r0, #12]
 800b30c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b30e:	68f3      	ldr	r3, [r6, #12]
 800b310:	b183      	cbz	r3, 800b334 <_Balloc+0x50>
 800b312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b31a:	b9b8      	cbnz	r0, 800b34c <_Balloc+0x68>
 800b31c:	2101      	movs	r1, #1
 800b31e:	fa01 f605 	lsl.w	r6, r1, r5
 800b322:	1d72      	adds	r2, r6, #5
 800b324:	0092      	lsls	r2, r2, #2
 800b326:	4620      	mov	r0, r4
 800b328:	f000 fb60 	bl	800b9ec <_calloc_r>
 800b32c:	b160      	cbz	r0, 800b348 <_Balloc+0x64>
 800b32e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b332:	e00e      	b.n	800b352 <_Balloc+0x6e>
 800b334:	2221      	movs	r2, #33	; 0x21
 800b336:	2104      	movs	r1, #4
 800b338:	4620      	mov	r0, r4
 800b33a:	f000 fb57 	bl	800b9ec <_calloc_r>
 800b33e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b340:	60f0      	str	r0, [r6, #12]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1e4      	bne.n	800b312 <_Balloc+0x2e>
 800b348:	2000      	movs	r0, #0
 800b34a:	bd70      	pop	{r4, r5, r6, pc}
 800b34c:	6802      	ldr	r2, [r0, #0]
 800b34e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b352:	2300      	movs	r3, #0
 800b354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b358:	e7f7      	b.n	800b34a <_Balloc+0x66>
 800b35a:	bf00      	nop
 800b35c:	0800d076 	.word	0x0800d076
 800b360:	0800d15c 	.word	0x0800d15c

0800b364 <_Bfree>:
 800b364:	b570      	push	{r4, r5, r6, lr}
 800b366:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b368:	4605      	mov	r5, r0
 800b36a:	460c      	mov	r4, r1
 800b36c:	b976      	cbnz	r6, 800b38c <_Bfree+0x28>
 800b36e:	2010      	movs	r0, #16
 800b370:	f7fd ff8c 	bl	800928c <malloc>
 800b374:	4602      	mov	r2, r0
 800b376:	6268      	str	r0, [r5, #36]	; 0x24
 800b378:	b920      	cbnz	r0, 800b384 <_Bfree+0x20>
 800b37a:	4b09      	ldr	r3, [pc, #36]	; (800b3a0 <_Bfree+0x3c>)
 800b37c:	4809      	ldr	r0, [pc, #36]	; (800b3a4 <_Bfree+0x40>)
 800b37e:	218a      	movs	r1, #138	; 0x8a
 800b380:	f000 fe56 	bl	800c030 <__assert_func>
 800b384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b388:	6006      	str	r6, [r0, #0]
 800b38a:	60c6      	str	r6, [r0, #12]
 800b38c:	b13c      	cbz	r4, 800b39e <_Bfree+0x3a>
 800b38e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b390:	6862      	ldr	r2, [r4, #4]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b398:	6021      	str	r1, [r4, #0]
 800b39a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b39e:	bd70      	pop	{r4, r5, r6, pc}
 800b3a0:	0800d076 	.word	0x0800d076
 800b3a4:	0800d15c 	.word	0x0800d15c

0800b3a8 <__multadd>:
 800b3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ac:	690d      	ldr	r5, [r1, #16]
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	461e      	mov	r6, r3
 800b3b4:	f101 0c14 	add.w	ip, r1, #20
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	f8dc 3000 	ldr.w	r3, [ip]
 800b3be:	b299      	uxth	r1, r3
 800b3c0:	fb02 6101 	mla	r1, r2, r1, r6
 800b3c4:	0c1e      	lsrs	r6, r3, #16
 800b3c6:	0c0b      	lsrs	r3, r1, #16
 800b3c8:	fb02 3306 	mla	r3, r2, r6, r3
 800b3cc:	b289      	uxth	r1, r1
 800b3ce:	3001      	adds	r0, #1
 800b3d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b3d4:	4285      	cmp	r5, r0
 800b3d6:	f84c 1b04 	str.w	r1, [ip], #4
 800b3da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b3de:	dcec      	bgt.n	800b3ba <__multadd+0x12>
 800b3e0:	b30e      	cbz	r6, 800b426 <__multadd+0x7e>
 800b3e2:	68a3      	ldr	r3, [r4, #8]
 800b3e4:	42ab      	cmp	r3, r5
 800b3e6:	dc19      	bgt.n	800b41c <__multadd+0x74>
 800b3e8:	6861      	ldr	r1, [r4, #4]
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	3101      	adds	r1, #1
 800b3ee:	f7ff ff79 	bl	800b2e4 <_Balloc>
 800b3f2:	4680      	mov	r8, r0
 800b3f4:	b928      	cbnz	r0, 800b402 <__multadd+0x5a>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	4b0c      	ldr	r3, [pc, #48]	; (800b42c <__multadd+0x84>)
 800b3fa:	480d      	ldr	r0, [pc, #52]	; (800b430 <__multadd+0x88>)
 800b3fc:	21b5      	movs	r1, #181	; 0xb5
 800b3fe:	f000 fe17 	bl	800c030 <__assert_func>
 800b402:	6922      	ldr	r2, [r4, #16]
 800b404:	3202      	adds	r2, #2
 800b406:	f104 010c 	add.w	r1, r4, #12
 800b40a:	0092      	lsls	r2, r2, #2
 800b40c:	300c      	adds	r0, #12
 800b40e:	f7fd ff45 	bl	800929c <memcpy>
 800b412:	4621      	mov	r1, r4
 800b414:	4638      	mov	r0, r7
 800b416:	f7ff ffa5 	bl	800b364 <_Bfree>
 800b41a:	4644      	mov	r4, r8
 800b41c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b420:	3501      	adds	r5, #1
 800b422:	615e      	str	r6, [r3, #20]
 800b424:	6125      	str	r5, [r4, #16]
 800b426:	4620      	mov	r0, r4
 800b428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b42c:	0800d0e8 	.word	0x0800d0e8
 800b430:	0800d15c 	.word	0x0800d15c

0800b434 <__hi0bits>:
 800b434:	0c03      	lsrs	r3, r0, #16
 800b436:	041b      	lsls	r3, r3, #16
 800b438:	b9d3      	cbnz	r3, 800b470 <__hi0bits+0x3c>
 800b43a:	0400      	lsls	r0, r0, #16
 800b43c:	2310      	movs	r3, #16
 800b43e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b442:	bf04      	itt	eq
 800b444:	0200      	lsleq	r0, r0, #8
 800b446:	3308      	addeq	r3, #8
 800b448:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b44c:	bf04      	itt	eq
 800b44e:	0100      	lsleq	r0, r0, #4
 800b450:	3304      	addeq	r3, #4
 800b452:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b456:	bf04      	itt	eq
 800b458:	0080      	lsleq	r0, r0, #2
 800b45a:	3302      	addeq	r3, #2
 800b45c:	2800      	cmp	r0, #0
 800b45e:	db05      	blt.n	800b46c <__hi0bits+0x38>
 800b460:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b464:	f103 0301 	add.w	r3, r3, #1
 800b468:	bf08      	it	eq
 800b46a:	2320      	moveq	r3, #32
 800b46c:	4618      	mov	r0, r3
 800b46e:	4770      	bx	lr
 800b470:	2300      	movs	r3, #0
 800b472:	e7e4      	b.n	800b43e <__hi0bits+0xa>

0800b474 <__lo0bits>:
 800b474:	6803      	ldr	r3, [r0, #0]
 800b476:	f013 0207 	ands.w	r2, r3, #7
 800b47a:	4601      	mov	r1, r0
 800b47c:	d00b      	beq.n	800b496 <__lo0bits+0x22>
 800b47e:	07da      	lsls	r2, r3, #31
 800b480:	d423      	bmi.n	800b4ca <__lo0bits+0x56>
 800b482:	0798      	lsls	r0, r3, #30
 800b484:	bf49      	itett	mi
 800b486:	085b      	lsrmi	r3, r3, #1
 800b488:	089b      	lsrpl	r3, r3, #2
 800b48a:	2001      	movmi	r0, #1
 800b48c:	600b      	strmi	r3, [r1, #0]
 800b48e:	bf5c      	itt	pl
 800b490:	600b      	strpl	r3, [r1, #0]
 800b492:	2002      	movpl	r0, #2
 800b494:	4770      	bx	lr
 800b496:	b298      	uxth	r0, r3
 800b498:	b9a8      	cbnz	r0, 800b4c6 <__lo0bits+0x52>
 800b49a:	0c1b      	lsrs	r3, r3, #16
 800b49c:	2010      	movs	r0, #16
 800b49e:	b2da      	uxtb	r2, r3
 800b4a0:	b90a      	cbnz	r2, 800b4a6 <__lo0bits+0x32>
 800b4a2:	3008      	adds	r0, #8
 800b4a4:	0a1b      	lsrs	r3, r3, #8
 800b4a6:	071a      	lsls	r2, r3, #28
 800b4a8:	bf04      	itt	eq
 800b4aa:	091b      	lsreq	r3, r3, #4
 800b4ac:	3004      	addeq	r0, #4
 800b4ae:	079a      	lsls	r2, r3, #30
 800b4b0:	bf04      	itt	eq
 800b4b2:	089b      	lsreq	r3, r3, #2
 800b4b4:	3002      	addeq	r0, #2
 800b4b6:	07da      	lsls	r2, r3, #31
 800b4b8:	d403      	bmi.n	800b4c2 <__lo0bits+0x4e>
 800b4ba:	085b      	lsrs	r3, r3, #1
 800b4bc:	f100 0001 	add.w	r0, r0, #1
 800b4c0:	d005      	beq.n	800b4ce <__lo0bits+0x5a>
 800b4c2:	600b      	str	r3, [r1, #0]
 800b4c4:	4770      	bx	lr
 800b4c6:	4610      	mov	r0, r2
 800b4c8:	e7e9      	b.n	800b49e <__lo0bits+0x2a>
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	4770      	bx	lr
 800b4ce:	2020      	movs	r0, #32
 800b4d0:	4770      	bx	lr
	...

0800b4d4 <__i2b>:
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	2101      	movs	r1, #1
 800b4da:	f7ff ff03 	bl	800b2e4 <_Balloc>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	b928      	cbnz	r0, 800b4ee <__i2b+0x1a>
 800b4e2:	4b05      	ldr	r3, [pc, #20]	; (800b4f8 <__i2b+0x24>)
 800b4e4:	4805      	ldr	r0, [pc, #20]	; (800b4fc <__i2b+0x28>)
 800b4e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b4ea:	f000 fda1 	bl	800c030 <__assert_func>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	6144      	str	r4, [r0, #20]
 800b4f2:	6103      	str	r3, [r0, #16]
 800b4f4:	bd10      	pop	{r4, pc}
 800b4f6:	bf00      	nop
 800b4f8:	0800d0e8 	.word	0x0800d0e8
 800b4fc:	0800d15c 	.word	0x0800d15c

0800b500 <__multiply>:
 800b500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	4691      	mov	r9, r2
 800b506:	690a      	ldr	r2, [r1, #16]
 800b508:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	bfb8      	it	lt
 800b510:	460b      	movlt	r3, r1
 800b512:	460c      	mov	r4, r1
 800b514:	bfbc      	itt	lt
 800b516:	464c      	movlt	r4, r9
 800b518:	4699      	movlt	r9, r3
 800b51a:	6927      	ldr	r7, [r4, #16]
 800b51c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b520:	68a3      	ldr	r3, [r4, #8]
 800b522:	6861      	ldr	r1, [r4, #4]
 800b524:	eb07 060a 	add.w	r6, r7, sl
 800b528:	42b3      	cmp	r3, r6
 800b52a:	b085      	sub	sp, #20
 800b52c:	bfb8      	it	lt
 800b52e:	3101      	addlt	r1, #1
 800b530:	f7ff fed8 	bl	800b2e4 <_Balloc>
 800b534:	b930      	cbnz	r0, 800b544 <__multiply+0x44>
 800b536:	4602      	mov	r2, r0
 800b538:	4b44      	ldr	r3, [pc, #272]	; (800b64c <__multiply+0x14c>)
 800b53a:	4845      	ldr	r0, [pc, #276]	; (800b650 <__multiply+0x150>)
 800b53c:	f240 115d 	movw	r1, #349	; 0x15d
 800b540:	f000 fd76 	bl	800c030 <__assert_func>
 800b544:	f100 0514 	add.w	r5, r0, #20
 800b548:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b54c:	462b      	mov	r3, r5
 800b54e:	2200      	movs	r2, #0
 800b550:	4543      	cmp	r3, r8
 800b552:	d321      	bcc.n	800b598 <__multiply+0x98>
 800b554:	f104 0314 	add.w	r3, r4, #20
 800b558:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b55c:	f109 0314 	add.w	r3, r9, #20
 800b560:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b564:	9202      	str	r2, [sp, #8]
 800b566:	1b3a      	subs	r2, r7, r4
 800b568:	3a15      	subs	r2, #21
 800b56a:	f022 0203 	bic.w	r2, r2, #3
 800b56e:	3204      	adds	r2, #4
 800b570:	f104 0115 	add.w	r1, r4, #21
 800b574:	428f      	cmp	r7, r1
 800b576:	bf38      	it	cc
 800b578:	2204      	movcc	r2, #4
 800b57a:	9201      	str	r2, [sp, #4]
 800b57c:	9a02      	ldr	r2, [sp, #8]
 800b57e:	9303      	str	r3, [sp, #12]
 800b580:	429a      	cmp	r2, r3
 800b582:	d80c      	bhi.n	800b59e <__multiply+0x9e>
 800b584:	2e00      	cmp	r6, #0
 800b586:	dd03      	ble.n	800b590 <__multiply+0x90>
 800b588:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d05a      	beq.n	800b646 <__multiply+0x146>
 800b590:	6106      	str	r6, [r0, #16]
 800b592:	b005      	add	sp, #20
 800b594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b598:	f843 2b04 	str.w	r2, [r3], #4
 800b59c:	e7d8      	b.n	800b550 <__multiply+0x50>
 800b59e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5a2:	f1ba 0f00 	cmp.w	sl, #0
 800b5a6:	d024      	beq.n	800b5f2 <__multiply+0xf2>
 800b5a8:	f104 0e14 	add.w	lr, r4, #20
 800b5ac:	46a9      	mov	r9, r5
 800b5ae:	f04f 0c00 	mov.w	ip, #0
 800b5b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b5b6:	f8d9 1000 	ldr.w	r1, [r9]
 800b5ba:	fa1f fb82 	uxth.w	fp, r2
 800b5be:	b289      	uxth	r1, r1
 800b5c0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b5c8:	f8d9 2000 	ldr.w	r2, [r9]
 800b5cc:	4461      	add	r1, ip
 800b5ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5d2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b5d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b5da:	b289      	uxth	r1, r1
 800b5dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b5e0:	4577      	cmp	r7, lr
 800b5e2:	f849 1b04 	str.w	r1, [r9], #4
 800b5e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5ea:	d8e2      	bhi.n	800b5b2 <__multiply+0xb2>
 800b5ec:	9a01      	ldr	r2, [sp, #4]
 800b5ee:	f845 c002 	str.w	ip, [r5, r2]
 800b5f2:	9a03      	ldr	r2, [sp, #12]
 800b5f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	f1b9 0f00 	cmp.w	r9, #0
 800b5fe:	d020      	beq.n	800b642 <__multiply+0x142>
 800b600:	6829      	ldr	r1, [r5, #0]
 800b602:	f104 0c14 	add.w	ip, r4, #20
 800b606:	46ae      	mov	lr, r5
 800b608:	f04f 0a00 	mov.w	sl, #0
 800b60c:	f8bc b000 	ldrh.w	fp, [ip]
 800b610:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b614:	fb09 220b 	mla	r2, r9, fp, r2
 800b618:	4492      	add	sl, r2
 800b61a:	b289      	uxth	r1, r1
 800b61c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b620:	f84e 1b04 	str.w	r1, [lr], #4
 800b624:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b628:	f8be 1000 	ldrh.w	r1, [lr]
 800b62c:	0c12      	lsrs	r2, r2, #16
 800b62e:	fb09 1102 	mla	r1, r9, r2, r1
 800b632:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b636:	4567      	cmp	r7, ip
 800b638:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b63c:	d8e6      	bhi.n	800b60c <__multiply+0x10c>
 800b63e:	9a01      	ldr	r2, [sp, #4]
 800b640:	50a9      	str	r1, [r5, r2]
 800b642:	3504      	adds	r5, #4
 800b644:	e79a      	b.n	800b57c <__multiply+0x7c>
 800b646:	3e01      	subs	r6, #1
 800b648:	e79c      	b.n	800b584 <__multiply+0x84>
 800b64a:	bf00      	nop
 800b64c:	0800d0e8 	.word	0x0800d0e8
 800b650:	0800d15c 	.word	0x0800d15c

0800b654 <__pow5mult>:
 800b654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b658:	4615      	mov	r5, r2
 800b65a:	f012 0203 	ands.w	r2, r2, #3
 800b65e:	4606      	mov	r6, r0
 800b660:	460f      	mov	r7, r1
 800b662:	d007      	beq.n	800b674 <__pow5mult+0x20>
 800b664:	4c25      	ldr	r4, [pc, #148]	; (800b6fc <__pow5mult+0xa8>)
 800b666:	3a01      	subs	r2, #1
 800b668:	2300      	movs	r3, #0
 800b66a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b66e:	f7ff fe9b 	bl	800b3a8 <__multadd>
 800b672:	4607      	mov	r7, r0
 800b674:	10ad      	asrs	r5, r5, #2
 800b676:	d03d      	beq.n	800b6f4 <__pow5mult+0xa0>
 800b678:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b67a:	b97c      	cbnz	r4, 800b69c <__pow5mult+0x48>
 800b67c:	2010      	movs	r0, #16
 800b67e:	f7fd fe05 	bl	800928c <malloc>
 800b682:	4602      	mov	r2, r0
 800b684:	6270      	str	r0, [r6, #36]	; 0x24
 800b686:	b928      	cbnz	r0, 800b694 <__pow5mult+0x40>
 800b688:	4b1d      	ldr	r3, [pc, #116]	; (800b700 <__pow5mult+0xac>)
 800b68a:	481e      	ldr	r0, [pc, #120]	; (800b704 <__pow5mult+0xb0>)
 800b68c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b690:	f000 fcce 	bl	800c030 <__assert_func>
 800b694:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b698:	6004      	str	r4, [r0, #0]
 800b69a:	60c4      	str	r4, [r0, #12]
 800b69c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6a4:	b94c      	cbnz	r4, 800b6ba <__pow5mult+0x66>
 800b6a6:	f240 2171 	movw	r1, #625	; 0x271
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f7ff ff12 	bl	800b4d4 <__i2b>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	6003      	str	r3, [r0, #0]
 800b6ba:	f04f 0900 	mov.w	r9, #0
 800b6be:	07eb      	lsls	r3, r5, #31
 800b6c0:	d50a      	bpl.n	800b6d8 <__pow5mult+0x84>
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	4622      	mov	r2, r4
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	f7ff ff1a 	bl	800b500 <__multiply>
 800b6cc:	4639      	mov	r1, r7
 800b6ce:	4680      	mov	r8, r0
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f7ff fe47 	bl	800b364 <_Bfree>
 800b6d6:	4647      	mov	r7, r8
 800b6d8:	106d      	asrs	r5, r5, #1
 800b6da:	d00b      	beq.n	800b6f4 <__pow5mult+0xa0>
 800b6dc:	6820      	ldr	r0, [r4, #0]
 800b6de:	b938      	cbnz	r0, 800b6f0 <__pow5mult+0x9c>
 800b6e0:	4622      	mov	r2, r4
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f7ff ff0b 	bl	800b500 <__multiply>
 800b6ea:	6020      	str	r0, [r4, #0]
 800b6ec:	f8c0 9000 	str.w	r9, [r0]
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	e7e4      	b.n	800b6be <__pow5mult+0x6a>
 800b6f4:	4638      	mov	r0, r7
 800b6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6fa:	bf00      	nop
 800b6fc:	0800d2a8 	.word	0x0800d2a8
 800b700:	0800d076 	.word	0x0800d076
 800b704:	0800d15c 	.word	0x0800d15c

0800b708 <__lshift>:
 800b708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b70c:	460c      	mov	r4, r1
 800b70e:	6849      	ldr	r1, [r1, #4]
 800b710:	6923      	ldr	r3, [r4, #16]
 800b712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b716:	68a3      	ldr	r3, [r4, #8]
 800b718:	4607      	mov	r7, r0
 800b71a:	4691      	mov	r9, r2
 800b71c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b720:	f108 0601 	add.w	r6, r8, #1
 800b724:	42b3      	cmp	r3, r6
 800b726:	db0b      	blt.n	800b740 <__lshift+0x38>
 800b728:	4638      	mov	r0, r7
 800b72a:	f7ff fddb 	bl	800b2e4 <_Balloc>
 800b72e:	4605      	mov	r5, r0
 800b730:	b948      	cbnz	r0, 800b746 <__lshift+0x3e>
 800b732:	4602      	mov	r2, r0
 800b734:	4b2a      	ldr	r3, [pc, #168]	; (800b7e0 <__lshift+0xd8>)
 800b736:	482b      	ldr	r0, [pc, #172]	; (800b7e4 <__lshift+0xdc>)
 800b738:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b73c:	f000 fc78 	bl	800c030 <__assert_func>
 800b740:	3101      	adds	r1, #1
 800b742:	005b      	lsls	r3, r3, #1
 800b744:	e7ee      	b.n	800b724 <__lshift+0x1c>
 800b746:	2300      	movs	r3, #0
 800b748:	f100 0114 	add.w	r1, r0, #20
 800b74c:	f100 0210 	add.w	r2, r0, #16
 800b750:	4618      	mov	r0, r3
 800b752:	4553      	cmp	r3, sl
 800b754:	db37      	blt.n	800b7c6 <__lshift+0xbe>
 800b756:	6920      	ldr	r0, [r4, #16]
 800b758:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b75c:	f104 0314 	add.w	r3, r4, #20
 800b760:	f019 091f 	ands.w	r9, r9, #31
 800b764:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b768:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b76c:	d02f      	beq.n	800b7ce <__lshift+0xc6>
 800b76e:	f1c9 0e20 	rsb	lr, r9, #32
 800b772:	468a      	mov	sl, r1
 800b774:	f04f 0c00 	mov.w	ip, #0
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	fa02 f209 	lsl.w	r2, r2, r9
 800b77e:	ea42 020c 	orr.w	r2, r2, ip
 800b782:	f84a 2b04 	str.w	r2, [sl], #4
 800b786:	f853 2b04 	ldr.w	r2, [r3], #4
 800b78a:	4298      	cmp	r0, r3
 800b78c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b790:	d8f2      	bhi.n	800b778 <__lshift+0x70>
 800b792:	1b03      	subs	r3, r0, r4
 800b794:	3b15      	subs	r3, #21
 800b796:	f023 0303 	bic.w	r3, r3, #3
 800b79a:	3304      	adds	r3, #4
 800b79c:	f104 0215 	add.w	r2, r4, #21
 800b7a0:	4290      	cmp	r0, r2
 800b7a2:	bf38      	it	cc
 800b7a4:	2304      	movcc	r3, #4
 800b7a6:	f841 c003 	str.w	ip, [r1, r3]
 800b7aa:	f1bc 0f00 	cmp.w	ip, #0
 800b7ae:	d001      	beq.n	800b7b4 <__lshift+0xac>
 800b7b0:	f108 0602 	add.w	r6, r8, #2
 800b7b4:	3e01      	subs	r6, #1
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	612e      	str	r6, [r5, #16]
 800b7ba:	4621      	mov	r1, r4
 800b7bc:	f7ff fdd2 	bl	800b364 <_Bfree>
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	e7c1      	b.n	800b752 <__lshift+0x4a>
 800b7ce:	3904      	subs	r1, #4
 800b7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7d8:	4298      	cmp	r0, r3
 800b7da:	d8f9      	bhi.n	800b7d0 <__lshift+0xc8>
 800b7dc:	e7ea      	b.n	800b7b4 <__lshift+0xac>
 800b7de:	bf00      	nop
 800b7e0:	0800d0e8 	.word	0x0800d0e8
 800b7e4:	0800d15c 	.word	0x0800d15c

0800b7e8 <__mcmp>:
 800b7e8:	b530      	push	{r4, r5, lr}
 800b7ea:	6902      	ldr	r2, [r0, #16]
 800b7ec:	690c      	ldr	r4, [r1, #16]
 800b7ee:	1b12      	subs	r2, r2, r4
 800b7f0:	d10e      	bne.n	800b810 <__mcmp+0x28>
 800b7f2:	f100 0314 	add.w	r3, r0, #20
 800b7f6:	3114      	adds	r1, #20
 800b7f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b7fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b800:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b804:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b808:	42a5      	cmp	r5, r4
 800b80a:	d003      	beq.n	800b814 <__mcmp+0x2c>
 800b80c:	d305      	bcc.n	800b81a <__mcmp+0x32>
 800b80e:	2201      	movs	r2, #1
 800b810:	4610      	mov	r0, r2
 800b812:	bd30      	pop	{r4, r5, pc}
 800b814:	4283      	cmp	r3, r0
 800b816:	d3f3      	bcc.n	800b800 <__mcmp+0x18>
 800b818:	e7fa      	b.n	800b810 <__mcmp+0x28>
 800b81a:	f04f 32ff 	mov.w	r2, #4294967295
 800b81e:	e7f7      	b.n	800b810 <__mcmp+0x28>

0800b820 <__mdiff>:
 800b820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	460c      	mov	r4, r1
 800b826:	4606      	mov	r6, r0
 800b828:	4611      	mov	r1, r2
 800b82a:	4620      	mov	r0, r4
 800b82c:	4690      	mov	r8, r2
 800b82e:	f7ff ffdb 	bl	800b7e8 <__mcmp>
 800b832:	1e05      	subs	r5, r0, #0
 800b834:	d110      	bne.n	800b858 <__mdiff+0x38>
 800b836:	4629      	mov	r1, r5
 800b838:	4630      	mov	r0, r6
 800b83a:	f7ff fd53 	bl	800b2e4 <_Balloc>
 800b83e:	b930      	cbnz	r0, 800b84e <__mdiff+0x2e>
 800b840:	4b3a      	ldr	r3, [pc, #232]	; (800b92c <__mdiff+0x10c>)
 800b842:	4602      	mov	r2, r0
 800b844:	f240 2132 	movw	r1, #562	; 0x232
 800b848:	4839      	ldr	r0, [pc, #228]	; (800b930 <__mdiff+0x110>)
 800b84a:	f000 fbf1 	bl	800c030 <__assert_func>
 800b84e:	2301      	movs	r3, #1
 800b850:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b858:	bfa4      	itt	ge
 800b85a:	4643      	movge	r3, r8
 800b85c:	46a0      	movge	r8, r4
 800b85e:	4630      	mov	r0, r6
 800b860:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b864:	bfa6      	itte	ge
 800b866:	461c      	movge	r4, r3
 800b868:	2500      	movge	r5, #0
 800b86a:	2501      	movlt	r5, #1
 800b86c:	f7ff fd3a 	bl	800b2e4 <_Balloc>
 800b870:	b920      	cbnz	r0, 800b87c <__mdiff+0x5c>
 800b872:	4b2e      	ldr	r3, [pc, #184]	; (800b92c <__mdiff+0x10c>)
 800b874:	4602      	mov	r2, r0
 800b876:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b87a:	e7e5      	b.n	800b848 <__mdiff+0x28>
 800b87c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b880:	6926      	ldr	r6, [r4, #16]
 800b882:	60c5      	str	r5, [r0, #12]
 800b884:	f104 0914 	add.w	r9, r4, #20
 800b888:	f108 0514 	add.w	r5, r8, #20
 800b88c:	f100 0e14 	add.w	lr, r0, #20
 800b890:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b894:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b898:	f108 0210 	add.w	r2, r8, #16
 800b89c:	46f2      	mov	sl, lr
 800b89e:	2100      	movs	r1, #0
 800b8a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b8a8:	fa1f f883 	uxth.w	r8, r3
 800b8ac:	fa11 f18b 	uxtah	r1, r1, fp
 800b8b0:	0c1b      	lsrs	r3, r3, #16
 800b8b2:	eba1 0808 	sub.w	r8, r1, r8
 800b8b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b8be:	fa1f f888 	uxth.w	r8, r8
 800b8c2:	1419      	asrs	r1, r3, #16
 800b8c4:	454e      	cmp	r6, r9
 800b8c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b8ca:	f84a 3b04 	str.w	r3, [sl], #4
 800b8ce:	d8e7      	bhi.n	800b8a0 <__mdiff+0x80>
 800b8d0:	1b33      	subs	r3, r6, r4
 800b8d2:	3b15      	subs	r3, #21
 800b8d4:	f023 0303 	bic.w	r3, r3, #3
 800b8d8:	3304      	adds	r3, #4
 800b8da:	3415      	adds	r4, #21
 800b8dc:	42a6      	cmp	r6, r4
 800b8de:	bf38      	it	cc
 800b8e0:	2304      	movcc	r3, #4
 800b8e2:	441d      	add	r5, r3
 800b8e4:	4473      	add	r3, lr
 800b8e6:	469e      	mov	lr, r3
 800b8e8:	462e      	mov	r6, r5
 800b8ea:	4566      	cmp	r6, ip
 800b8ec:	d30e      	bcc.n	800b90c <__mdiff+0xec>
 800b8ee:	f10c 0203 	add.w	r2, ip, #3
 800b8f2:	1b52      	subs	r2, r2, r5
 800b8f4:	f022 0203 	bic.w	r2, r2, #3
 800b8f8:	3d03      	subs	r5, #3
 800b8fa:	45ac      	cmp	ip, r5
 800b8fc:	bf38      	it	cc
 800b8fe:	2200      	movcc	r2, #0
 800b900:	441a      	add	r2, r3
 800b902:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b906:	b17b      	cbz	r3, 800b928 <__mdiff+0x108>
 800b908:	6107      	str	r7, [r0, #16]
 800b90a:	e7a3      	b.n	800b854 <__mdiff+0x34>
 800b90c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b910:	fa11 f288 	uxtah	r2, r1, r8
 800b914:	1414      	asrs	r4, r2, #16
 800b916:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b91a:	b292      	uxth	r2, r2
 800b91c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b920:	f84e 2b04 	str.w	r2, [lr], #4
 800b924:	1421      	asrs	r1, r4, #16
 800b926:	e7e0      	b.n	800b8ea <__mdiff+0xca>
 800b928:	3f01      	subs	r7, #1
 800b92a:	e7ea      	b.n	800b902 <__mdiff+0xe2>
 800b92c:	0800d0e8 	.word	0x0800d0e8
 800b930:	0800d15c 	.word	0x0800d15c

0800b934 <__d2b>:
 800b934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b938:	4689      	mov	r9, r1
 800b93a:	2101      	movs	r1, #1
 800b93c:	ec57 6b10 	vmov	r6, r7, d0
 800b940:	4690      	mov	r8, r2
 800b942:	f7ff fccf 	bl	800b2e4 <_Balloc>
 800b946:	4604      	mov	r4, r0
 800b948:	b930      	cbnz	r0, 800b958 <__d2b+0x24>
 800b94a:	4602      	mov	r2, r0
 800b94c:	4b25      	ldr	r3, [pc, #148]	; (800b9e4 <__d2b+0xb0>)
 800b94e:	4826      	ldr	r0, [pc, #152]	; (800b9e8 <__d2b+0xb4>)
 800b950:	f240 310a 	movw	r1, #778	; 0x30a
 800b954:	f000 fb6c 	bl	800c030 <__assert_func>
 800b958:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b95c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b960:	bb35      	cbnz	r5, 800b9b0 <__d2b+0x7c>
 800b962:	2e00      	cmp	r6, #0
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	d028      	beq.n	800b9ba <__d2b+0x86>
 800b968:	4668      	mov	r0, sp
 800b96a:	9600      	str	r6, [sp, #0]
 800b96c:	f7ff fd82 	bl	800b474 <__lo0bits>
 800b970:	9900      	ldr	r1, [sp, #0]
 800b972:	b300      	cbz	r0, 800b9b6 <__d2b+0x82>
 800b974:	9a01      	ldr	r2, [sp, #4]
 800b976:	f1c0 0320 	rsb	r3, r0, #32
 800b97a:	fa02 f303 	lsl.w	r3, r2, r3
 800b97e:	430b      	orrs	r3, r1
 800b980:	40c2      	lsrs	r2, r0
 800b982:	6163      	str	r3, [r4, #20]
 800b984:	9201      	str	r2, [sp, #4]
 800b986:	9b01      	ldr	r3, [sp, #4]
 800b988:	61a3      	str	r3, [r4, #24]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	bf14      	ite	ne
 800b98e:	2202      	movne	r2, #2
 800b990:	2201      	moveq	r2, #1
 800b992:	6122      	str	r2, [r4, #16]
 800b994:	b1d5      	cbz	r5, 800b9cc <__d2b+0x98>
 800b996:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b99a:	4405      	add	r5, r0
 800b99c:	f8c9 5000 	str.w	r5, [r9]
 800b9a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9a4:	f8c8 0000 	str.w	r0, [r8]
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	b003      	add	sp, #12
 800b9ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9b4:	e7d5      	b.n	800b962 <__d2b+0x2e>
 800b9b6:	6161      	str	r1, [r4, #20]
 800b9b8:	e7e5      	b.n	800b986 <__d2b+0x52>
 800b9ba:	a801      	add	r0, sp, #4
 800b9bc:	f7ff fd5a 	bl	800b474 <__lo0bits>
 800b9c0:	9b01      	ldr	r3, [sp, #4]
 800b9c2:	6163      	str	r3, [r4, #20]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	6122      	str	r2, [r4, #16]
 800b9c8:	3020      	adds	r0, #32
 800b9ca:	e7e3      	b.n	800b994 <__d2b+0x60>
 800b9cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9d4:	f8c9 0000 	str.w	r0, [r9]
 800b9d8:	6918      	ldr	r0, [r3, #16]
 800b9da:	f7ff fd2b 	bl	800b434 <__hi0bits>
 800b9de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9e2:	e7df      	b.n	800b9a4 <__d2b+0x70>
 800b9e4:	0800d0e8 	.word	0x0800d0e8
 800b9e8:	0800d15c 	.word	0x0800d15c

0800b9ec <_calloc_r>:
 800b9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9ee:	fba1 2402 	umull	r2, r4, r1, r2
 800b9f2:	b94c      	cbnz	r4, 800ba08 <_calloc_r+0x1c>
 800b9f4:	4611      	mov	r1, r2
 800b9f6:	9201      	str	r2, [sp, #4]
 800b9f8:	f7fd fcd2 	bl	80093a0 <_malloc_r>
 800b9fc:	9a01      	ldr	r2, [sp, #4]
 800b9fe:	4605      	mov	r5, r0
 800ba00:	b930      	cbnz	r0, 800ba10 <_calloc_r+0x24>
 800ba02:	4628      	mov	r0, r5
 800ba04:	b003      	add	sp, #12
 800ba06:	bd30      	pop	{r4, r5, pc}
 800ba08:	220c      	movs	r2, #12
 800ba0a:	6002      	str	r2, [r0, #0]
 800ba0c:	2500      	movs	r5, #0
 800ba0e:	e7f8      	b.n	800ba02 <_calloc_r+0x16>
 800ba10:	4621      	mov	r1, r4
 800ba12:	f7fd fc51 	bl	80092b8 <memset>
 800ba16:	e7f4      	b.n	800ba02 <_calloc_r+0x16>

0800ba18 <__ssputs_r>:
 800ba18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba1c:	688e      	ldr	r6, [r1, #8]
 800ba1e:	429e      	cmp	r6, r3
 800ba20:	4682      	mov	sl, r0
 800ba22:	460c      	mov	r4, r1
 800ba24:	4690      	mov	r8, r2
 800ba26:	461f      	mov	r7, r3
 800ba28:	d838      	bhi.n	800ba9c <__ssputs_r+0x84>
 800ba2a:	898a      	ldrh	r2, [r1, #12]
 800ba2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba30:	d032      	beq.n	800ba98 <__ssputs_r+0x80>
 800ba32:	6825      	ldr	r5, [r4, #0]
 800ba34:	6909      	ldr	r1, [r1, #16]
 800ba36:	eba5 0901 	sub.w	r9, r5, r1
 800ba3a:	6965      	ldr	r5, [r4, #20]
 800ba3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba44:	3301      	adds	r3, #1
 800ba46:	444b      	add	r3, r9
 800ba48:	106d      	asrs	r5, r5, #1
 800ba4a:	429d      	cmp	r5, r3
 800ba4c:	bf38      	it	cc
 800ba4e:	461d      	movcc	r5, r3
 800ba50:	0553      	lsls	r3, r2, #21
 800ba52:	d531      	bpl.n	800bab8 <__ssputs_r+0xa0>
 800ba54:	4629      	mov	r1, r5
 800ba56:	f7fd fca3 	bl	80093a0 <_malloc_r>
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	b950      	cbnz	r0, 800ba74 <__ssputs_r+0x5c>
 800ba5e:	230c      	movs	r3, #12
 800ba60:	f8ca 3000 	str.w	r3, [sl]
 800ba64:	89a3      	ldrh	r3, [r4, #12]
 800ba66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba6a:	81a3      	strh	r3, [r4, #12]
 800ba6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba74:	6921      	ldr	r1, [r4, #16]
 800ba76:	464a      	mov	r2, r9
 800ba78:	f7fd fc10 	bl	800929c <memcpy>
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba86:	81a3      	strh	r3, [r4, #12]
 800ba88:	6126      	str	r6, [r4, #16]
 800ba8a:	6165      	str	r5, [r4, #20]
 800ba8c:	444e      	add	r6, r9
 800ba8e:	eba5 0509 	sub.w	r5, r5, r9
 800ba92:	6026      	str	r6, [r4, #0]
 800ba94:	60a5      	str	r5, [r4, #8]
 800ba96:	463e      	mov	r6, r7
 800ba98:	42be      	cmp	r6, r7
 800ba9a:	d900      	bls.n	800ba9e <__ssputs_r+0x86>
 800ba9c:	463e      	mov	r6, r7
 800ba9e:	6820      	ldr	r0, [r4, #0]
 800baa0:	4632      	mov	r2, r6
 800baa2:	4641      	mov	r1, r8
 800baa4:	f000 fb4a 	bl	800c13c <memmove>
 800baa8:	68a3      	ldr	r3, [r4, #8]
 800baaa:	1b9b      	subs	r3, r3, r6
 800baac:	60a3      	str	r3, [r4, #8]
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	4433      	add	r3, r6
 800bab2:	6023      	str	r3, [r4, #0]
 800bab4:	2000      	movs	r0, #0
 800bab6:	e7db      	b.n	800ba70 <__ssputs_r+0x58>
 800bab8:	462a      	mov	r2, r5
 800baba:	f000 fb59 	bl	800c170 <_realloc_r>
 800babe:	4606      	mov	r6, r0
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d1e1      	bne.n	800ba88 <__ssputs_r+0x70>
 800bac4:	6921      	ldr	r1, [r4, #16]
 800bac6:	4650      	mov	r0, sl
 800bac8:	f7fd fbfe 	bl	80092c8 <_free_r>
 800bacc:	e7c7      	b.n	800ba5e <__ssputs_r+0x46>
	...

0800bad0 <_svfiprintf_r>:
 800bad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad4:	4698      	mov	r8, r3
 800bad6:	898b      	ldrh	r3, [r1, #12]
 800bad8:	061b      	lsls	r3, r3, #24
 800bada:	b09d      	sub	sp, #116	; 0x74
 800badc:	4607      	mov	r7, r0
 800bade:	460d      	mov	r5, r1
 800bae0:	4614      	mov	r4, r2
 800bae2:	d50e      	bpl.n	800bb02 <_svfiprintf_r+0x32>
 800bae4:	690b      	ldr	r3, [r1, #16]
 800bae6:	b963      	cbnz	r3, 800bb02 <_svfiprintf_r+0x32>
 800bae8:	2140      	movs	r1, #64	; 0x40
 800baea:	f7fd fc59 	bl	80093a0 <_malloc_r>
 800baee:	6028      	str	r0, [r5, #0]
 800baf0:	6128      	str	r0, [r5, #16]
 800baf2:	b920      	cbnz	r0, 800bafe <_svfiprintf_r+0x2e>
 800baf4:	230c      	movs	r3, #12
 800baf6:	603b      	str	r3, [r7, #0]
 800baf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bafc:	e0d1      	b.n	800bca2 <_svfiprintf_r+0x1d2>
 800bafe:	2340      	movs	r3, #64	; 0x40
 800bb00:	616b      	str	r3, [r5, #20]
 800bb02:	2300      	movs	r3, #0
 800bb04:	9309      	str	r3, [sp, #36]	; 0x24
 800bb06:	2320      	movs	r3, #32
 800bb08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb10:	2330      	movs	r3, #48	; 0x30
 800bb12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bcbc <_svfiprintf_r+0x1ec>
 800bb16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb1a:	f04f 0901 	mov.w	r9, #1
 800bb1e:	4623      	mov	r3, r4
 800bb20:	469a      	mov	sl, r3
 800bb22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb26:	b10a      	cbz	r2, 800bb2c <_svfiprintf_r+0x5c>
 800bb28:	2a25      	cmp	r2, #37	; 0x25
 800bb2a:	d1f9      	bne.n	800bb20 <_svfiprintf_r+0x50>
 800bb2c:	ebba 0b04 	subs.w	fp, sl, r4
 800bb30:	d00b      	beq.n	800bb4a <_svfiprintf_r+0x7a>
 800bb32:	465b      	mov	r3, fp
 800bb34:	4622      	mov	r2, r4
 800bb36:	4629      	mov	r1, r5
 800bb38:	4638      	mov	r0, r7
 800bb3a:	f7ff ff6d 	bl	800ba18 <__ssputs_r>
 800bb3e:	3001      	adds	r0, #1
 800bb40:	f000 80aa 	beq.w	800bc98 <_svfiprintf_r+0x1c8>
 800bb44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb46:	445a      	add	r2, fp
 800bb48:	9209      	str	r2, [sp, #36]	; 0x24
 800bb4a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f000 80a2 	beq.w	800bc98 <_svfiprintf_r+0x1c8>
 800bb54:	2300      	movs	r3, #0
 800bb56:	f04f 32ff 	mov.w	r2, #4294967295
 800bb5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb5e:	f10a 0a01 	add.w	sl, sl, #1
 800bb62:	9304      	str	r3, [sp, #16]
 800bb64:	9307      	str	r3, [sp, #28]
 800bb66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb6a:	931a      	str	r3, [sp, #104]	; 0x68
 800bb6c:	4654      	mov	r4, sl
 800bb6e:	2205      	movs	r2, #5
 800bb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb74:	4851      	ldr	r0, [pc, #324]	; (800bcbc <_svfiprintf_r+0x1ec>)
 800bb76:	f7f4 fb1b 	bl	80001b0 <memchr>
 800bb7a:	9a04      	ldr	r2, [sp, #16]
 800bb7c:	b9d8      	cbnz	r0, 800bbb6 <_svfiprintf_r+0xe6>
 800bb7e:	06d0      	lsls	r0, r2, #27
 800bb80:	bf44      	itt	mi
 800bb82:	2320      	movmi	r3, #32
 800bb84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb88:	0711      	lsls	r1, r2, #28
 800bb8a:	bf44      	itt	mi
 800bb8c:	232b      	movmi	r3, #43	; 0x2b
 800bb8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb92:	f89a 3000 	ldrb.w	r3, [sl]
 800bb96:	2b2a      	cmp	r3, #42	; 0x2a
 800bb98:	d015      	beq.n	800bbc6 <_svfiprintf_r+0xf6>
 800bb9a:	9a07      	ldr	r2, [sp, #28]
 800bb9c:	4654      	mov	r4, sl
 800bb9e:	2000      	movs	r0, #0
 800bba0:	f04f 0c0a 	mov.w	ip, #10
 800bba4:	4621      	mov	r1, r4
 800bba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbaa:	3b30      	subs	r3, #48	; 0x30
 800bbac:	2b09      	cmp	r3, #9
 800bbae:	d94e      	bls.n	800bc4e <_svfiprintf_r+0x17e>
 800bbb0:	b1b0      	cbz	r0, 800bbe0 <_svfiprintf_r+0x110>
 800bbb2:	9207      	str	r2, [sp, #28]
 800bbb4:	e014      	b.n	800bbe0 <_svfiprintf_r+0x110>
 800bbb6:	eba0 0308 	sub.w	r3, r0, r8
 800bbba:	fa09 f303 	lsl.w	r3, r9, r3
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	9304      	str	r3, [sp, #16]
 800bbc2:	46a2      	mov	sl, r4
 800bbc4:	e7d2      	b.n	800bb6c <_svfiprintf_r+0x9c>
 800bbc6:	9b03      	ldr	r3, [sp, #12]
 800bbc8:	1d19      	adds	r1, r3, #4
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	9103      	str	r1, [sp, #12]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	bfbb      	ittet	lt
 800bbd2:	425b      	neglt	r3, r3
 800bbd4:	f042 0202 	orrlt.w	r2, r2, #2
 800bbd8:	9307      	strge	r3, [sp, #28]
 800bbda:	9307      	strlt	r3, [sp, #28]
 800bbdc:	bfb8      	it	lt
 800bbde:	9204      	strlt	r2, [sp, #16]
 800bbe0:	7823      	ldrb	r3, [r4, #0]
 800bbe2:	2b2e      	cmp	r3, #46	; 0x2e
 800bbe4:	d10c      	bne.n	800bc00 <_svfiprintf_r+0x130>
 800bbe6:	7863      	ldrb	r3, [r4, #1]
 800bbe8:	2b2a      	cmp	r3, #42	; 0x2a
 800bbea:	d135      	bne.n	800bc58 <_svfiprintf_r+0x188>
 800bbec:	9b03      	ldr	r3, [sp, #12]
 800bbee:	1d1a      	adds	r2, r3, #4
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	9203      	str	r2, [sp, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	bfb8      	it	lt
 800bbf8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbfc:	3402      	adds	r4, #2
 800bbfe:	9305      	str	r3, [sp, #20]
 800bc00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bccc <_svfiprintf_r+0x1fc>
 800bc04:	7821      	ldrb	r1, [r4, #0]
 800bc06:	2203      	movs	r2, #3
 800bc08:	4650      	mov	r0, sl
 800bc0a:	f7f4 fad1 	bl	80001b0 <memchr>
 800bc0e:	b140      	cbz	r0, 800bc22 <_svfiprintf_r+0x152>
 800bc10:	2340      	movs	r3, #64	; 0x40
 800bc12:	eba0 000a 	sub.w	r0, r0, sl
 800bc16:	fa03 f000 	lsl.w	r0, r3, r0
 800bc1a:	9b04      	ldr	r3, [sp, #16]
 800bc1c:	4303      	orrs	r3, r0
 800bc1e:	3401      	adds	r4, #1
 800bc20:	9304      	str	r3, [sp, #16]
 800bc22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc26:	4826      	ldr	r0, [pc, #152]	; (800bcc0 <_svfiprintf_r+0x1f0>)
 800bc28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc2c:	2206      	movs	r2, #6
 800bc2e:	f7f4 fabf 	bl	80001b0 <memchr>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d038      	beq.n	800bca8 <_svfiprintf_r+0x1d8>
 800bc36:	4b23      	ldr	r3, [pc, #140]	; (800bcc4 <_svfiprintf_r+0x1f4>)
 800bc38:	bb1b      	cbnz	r3, 800bc82 <_svfiprintf_r+0x1b2>
 800bc3a:	9b03      	ldr	r3, [sp, #12]
 800bc3c:	3307      	adds	r3, #7
 800bc3e:	f023 0307 	bic.w	r3, r3, #7
 800bc42:	3308      	adds	r3, #8
 800bc44:	9303      	str	r3, [sp, #12]
 800bc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc48:	4433      	add	r3, r6
 800bc4a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc4c:	e767      	b.n	800bb1e <_svfiprintf_r+0x4e>
 800bc4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc52:	460c      	mov	r4, r1
 800bc54:	2001      	movs	r0, #1
 800bc56:	e7a5      	b.n	800bba4 <_svfiprintf_r+0xd4>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	3401      	adds	r4, #1
 800bc5c:	9305      	str	r3, [sp, #20]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	f04f 0c0a 	mov.w	ip, #10
 800bc64:	4620      	mov	r0, r4
 800bc66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc6a:	3a30      	subs	r2, #48	; 0x30
 800bc6c:	2a09      	cmp	r2, #9
 800bc6e:	d903      	bls.n	800bc78 <_svfiprintf_r+0x1a8>
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d0c5      	beq.n	800bc00 <_svfiprintf_r+0x130>
 800bc74:	9105      	str	r1, [sp, #20]
 800bc76:	e7c3      	b.n	800bc00 <_svfiprintf_r+0x130>
 800bc78:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e7f0      	b.n	800bc64 <_svfiprintf_r+0x194>
 800bc82:	ab03      	add	r3, sp, #12
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	462a      	mov	r2, r5
 800bc88:	4b0f      	ldr	r3, [pc, #60]	; (800bcc8 <_svfiprintf_r+0x1f8>)
 800bc8a:	a904      	add	r1, sp, #16
 800bc8c:	4638      	mov	r0, r7
 800bc8e:	f7fd fc9b 	bl	80095c8 <_printf_float>
 800bc92:	1c42      	adds	r2, r0, #1
 800bc94:	4606      	mov	r6, r0
 800bc96:	d1d6      	bne.n	800bc46 <_svfiprintf_r+0x176>
 800bc98:	89ab      	ldrh	r3, [r5, #12]
 800bc9a:	065b      	lsls	r3, r3, #25
 800bc9c:	f53f af2c 	bmi.w	800baf8 <_svfiprintf_r+0x28>
 800bca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bca2:	b01d      	add	sp, #116	; 0x74
 800bca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca8:	ab03      	add	r3, sp, #12
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	462a      	mov	r2, r5
 800bcae:	4b06      	ldr	r3, [pc, #24]	; (800bcc8 <_svfiprintf_r+0x1f8>)
 800bcb0:	a904      	add	r1, sp, #16
 800bcb2:	4638      	mov	r0, r7
 800bcb4:	f7fd ff2c 	bl	8009b10 <_printf_i>
 800bcb8:	e7eb      	b.n	800bc92 <_svfiprintf_r+0x1c2>
 800bcba:	bf00      	nop
 800bcbc:	0800d2b4 	.word	0x0800d2b4
 800bcc0:	0800d2be 	.word	0x0800d2be
 800bcc4:	080095c9 	.word	0x080095c9
 800bcc8:	0800ba19 	.word	0x0800ba19
 800bccc:	0800d2ba 	.word	0x0800d2ba

0800bcd0 <__sfputc_r>:
 800bcd0:	6893      	ldr	r3, [r2, #8]
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	b410      	push	{r4}
 800bcd8:	6093      	str	r3, [r2, #8]
 800bcda:	da08      	bge.n	800bcee <__sfputc_r+0x1e>
 800bcdc:	6994      	ldr	r4, [r2, #24]
 800bcde:	42a3      	cmp	r3, r4
 800bce0:	db01      	blt.n	800bce6 <__sfputc_r+0x16>
 800bce2:	290a      	cmp	r1, #10
 800bce4:	d103      	bne.n	800bcee <__sfputc_r+0x1e>
 800bce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcea:	f7fe b98f 	b.w	800a00c <__swbuf_r>
 800bcee:	6813      	ldr	r3, [r2, #0]
 800bcf0:	1c58      	adds	r0, r3, #1
 800bcf2:	6010      	str	r0, [r2, #0]
 800bcf4:	7019      	strb	r1, [r3, #0]
 800bcf6:	4608      	mov	r0, r1
 800bcf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcfc:	4770      	bx	lr

0800bcfe <__sfputs_r>:
 800bcfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd00:	4606      	mov	r6, r0
 800bd02:	460f      	mov	r7, r1
 800bd04:	4614      	mov	r4, r2
 800bd06:	18d5      	adds	r5, r2, r3
 800bd08:	42ac      	cmp	r4, r5
 800bd0a:	d101      	bne.n	800bd10 <__sfputs_r+0x12>
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	e007      	b.n	800bd20 <__sfputs_r+0x22>
 800bd10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd14:	463a      	mov	r2, r7
 800bd16:	4630      	mov	r0, r6
 800bd18:	f7ff ffda 	bl	800bcd0 <__sfputc_r>
 800bd1c:	1c43      	adds	r3, r0, #1
 800bd1e:	d1f3      	bne.n	800bd08 <__sfputs_r+0xa>
 800bd20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd24 <_vfiprintf_r>:
 800bd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd28:	460d      	mov	r5, r1
 800bd2a:	b09d      	sub	sp, #116	; 0x74
 800bd2c:	4614      	mov	r4, r2
 800bd2e:	4698      	mov	r8, r3
 800bd30:	4606      	mov	r6, r0
 800bd32:	b118      	cbz	r0, 800bd3c <_vfiprintf_r+0x18>
 800bd34:	6983      	ldr	r3, [r0, #24]
 800bd36:	b90b      	cbnz	r3, 800bd3c <_vfiprintf_r+0x18>
 800bd38:	f7ff f9be 	bl	800b0b8 <__sinit>
 800bd3c:	4b89      	ldr	r3, [pc, #548]	; (800bf64 <_vfiprintf_r+0x240>)
 800bd3e:	429d      	cmp	r5, r3
 800bd40:	d11b      	bne.n	800bd7a <_vfiprintf_r+0x56>
 800bd42:	6875      	ldr	r5, [r6, #4]
 800bd44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd46:	07d9      	lsls	r1, r3, #31
 800bd48:	d405      	bmi.n	800bd56 <_vfiprintf_r+0x32>
 800bd4a:	89ab      	ldrh	r3, [r5, #12]
 800bd4c:	059a      	lsls	r2, r3, #22
 800bd4e:	d402      	bmi.n	800bd56 <_vfiprintf_r+0x32>
 800bd50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd52:	f7ff fa54 	bl	800b1fe <__retarget_lock_acquire_recursive>
 800bd56:	89ab      	ldrh	r3, [r5, #12]
 800bd58:	071b      	lsls	r3, r3, #28
 800bd5a:	d501      	bpl.n	800bd60 <_vfiprintf_r+0x3c>
 800bd5c:	692b      	ldr	r3, [r5, #16]
 800bd5e:	b9eb      	cbnz	r3, 800bd9c <_vfiprintf_r+0x78>
 800bd60:	4629      	mov	r1, r5
 800bd62:	4630      	mov	r0, r6
 800bd64:	f7fe f9a4 	bl	800a0b0 <__swsetup_r>
 800bd68:	b1c0      	cbz	r0, 800bd9c <_vfiprintf_r+0x78>
 800bd6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd6c:	07dc      	lsls	r4, r3, #31
 800bd6e:	d50e      	bpl.n	800bd8e <_vfiprintf_r+0x6a>
 800bd70:	f04f 30ff 	mov.w	r0, #4294967295
 800bd74:	b01d      	add	sp, #116	; 0x74
 800bd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd7a:	4b7b      	ldr	r3, [pc, #492]	; (800bf68 <_vfiprintf_r+0x244>)
 800bd7c:	429d      	cmp	r5, r3
 800bd7e:	d101      	bne.n	800bd84 <_vfiprintf_r+0x60>
 800bd80:	68b5      	ldr	r5, [r6, #8]
 800bd82:	e7df      	b.n	800bd44 <_vfiprintf_r+0x20>
 800bd84:	4b79      	ldr	r3, [pc, #484]	; (800bf6c <_vfiprintf_r+0x248>)
 800bd86:	429d      	cmp	r5, r3
 800bd88:	bf08      	it	eq
 800bd8a:	68f5      	ldreq	r5, [r6, #12]
 800bd8c:	e7da      	b.n	800bd44 <_vfiprintf_r+0x20>
 800bd8e:	89ab      	ldrh	r3, [r5, #12]
 800bd90:	0598      	lsls	r0, r3, #22
 800bd92:	d4ed      	bmi.n	800bd70 <_vfiprintf_r+0x4c>
 800bd94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd96:	f7ff fa33 	bl	800b200 <__retarget_lock_release_recursive>
 800bd9a:	e7e9      	b.n	800bd70 <_vfiprintf_r+0x4c>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9309      	str	r3, [sp, #36]	; 0x24
 800bda0:	2320      	movs	r3, #32
 800bda2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bda6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdaa:	2330      	movs	r3, #48	; 0x30
 800bdac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf70 <_vfiprintf_r+0x24c>
 800bdb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdb4:	f04f 0901 	mov.w	r9, #1
 800bdb8:	4623      	mov	r3, r4
 800bdba:	469a      	mov	sl, r3
 800bdbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdc0:	b10a      	cbz	r2, 800bdc6 <_vfiprintf_r+0xa2>
 800bdc2:	2a25      	cmp	r2, #37	; 0x25
 800bdc4:	d1f9      	bne.n	800bdba <_vfiprintf_r+0x96>
 800bdc6:	ebba 0b04 	subs.w	fp, sl, r4
 800bdca:	d00b      	beq.n	800bde4 <_vfiprintf_r+0xc0>
 800bdcc:	465b      	mov	r3, fp
 800bdce:	4622      	mov	r2, r4
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f7ff ff93 	bl	800bcfe <__sfputs_r>
 800bdd8:	3001      	adds	r0, #1
 800bdda:	f000 80aa 	beq.w	800bf32 <_vfiprintf_r+0x20e>
 800bdde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bde0:	445a      	add	r2, fp
 800bde2:	9209      	str	r2, [sp, #36]	; 0x24
 800bde4:	f89a 3000 	ldrb.w	r3, [sl]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f000 80a2 	beq.w	800bf32 <_vfiprintf_r+0x20e>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdf8:	f10a 0a01 	add.w	sl, sl, #1
 800bdfc:	9304      	str	r3, [sp, #16]
 800bdfe:	9307      	str	r3, [sp, #28]
 800be00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be04:	931a      	str	r3, [sp, #104]	; 0x68
 800be06:	4654      	mov	r4, sl
 800be08:	2205      	movs	r2, #5
 800be0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be0e:	4858      	ldr	r0, [pc, #352]	; (800bf70 <_vfiprintf_r+0x24c>)
 800be10:	f7f4 f9ce 	bl	80001b0 <memchr>
 800be14:	9a04      	ldr	r2, [sp, #16]
 800be16:	b9d8      	cbnz	r0, 800be50 <_vfiprintf_r+0x12c>
 800be18:	06d1      	lsls	r1, r2, #27
 800be1a:	bf44      	itt	mi
 800be1c:	2320      	movmi	r3, #32
 800be1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be22:	0713      	lsls	r3, r2, #28
 800be24:	bf44      	itt	mi
 800be26:	232b      	movmi	r3, #43	; 0x2b
 800be28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be2c:	f89a 3000 	ldrb.w	r3, [sl]
 800be30:	2b2a      	cmp	r3, #42	; 0x2a
 800be32:	d015      	beq.n	800be60 <_vfiprintf_r+0x13c>
 800be34:	9a07      	ldr	r2, [sp, #28]
 800be36:	4654      	mov	r4, sl
 800be38:	2000      	movs	r0, #0
 800be3a:	f04f 0c0a 	mov.w	ip, #10
 800be3e:	4621      	mov	r1, r4
 800be40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be44:	3b30      	subs	r3, #48	; 0x30
 800be46:	2b09      	cmp	r3, #9
 800be48:	d94e      	bls.n	800bee8 <_vfiprintf_r+0x1c4>
 800be4a:	b1b0      	cbz	r0, 800be7a <_vfiprintf_r+0x156>
 800be4c:	9207      	str	r2, [sp, #28]
 800be4e:	e014      	b.n	800be7a <_vfiprintf_r+0x156>
 800be50:	eba0 0308 	sub.w	r3, r0, r8
 800be54:	fa09 f303 	lsl.w	r3, r9, r3
 800be58:	4313      	orrs	r3, r2
 800be5a:	9304      	str	r3, [sp, #16]
 800be5c:	46a2      	mov	sl, r4
 800be5e:	e7d2      	b.n	800be06 <_vfiprintf_r+0xe2>
 800be60:	9b03      	ldr	r3, [sp, #12]
 800be62:	1d19      	adds	r1, r3, #4
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	9103      	str	r1, [sp, #12]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	bfbb      	ittet	lt
 800be6c:	425b      	neglt	r3, r3
 800be6e:	f042 0202 	orrlt.w	r2, r2, #2
 800be72:	9307      	strge	r3, [sp, #28]
 800be74:	9307      	strlt	r3, [sp, #28]
 800be76:	bfb8      	it	lt
 800be78:	9204      	strlt	r2, [sp, #16]
 800be7a:	7823      	ldrb	r3, [r4, #0]
 800be7c:	2b2e      	cmp	r3, #46	; 0x2e
 800be7e:	d10c      	bne.n	800be9a <_vfiprintf_r+0x176>
 800be80:	7863      	ldrb	r3, [r4, #1]
 800be82:	2b2a      	cmp	r3, #42	; 0x2a
 800be84:	d135      	bne.n	800bef2 <_vfiprintf_r+0x1ce>
 800be86:	9b03      	ldr	r3, [sp, #12]
 800be88:	1d1a      	adds	r2, r3, #4
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	9203      	str	r2, [sp, #12]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	bfb8      	it	lt
 800be92:	f04f 33ff 	movlt.w	r3, #4294967295
 800be96:	3402      	adds	r4, #2
 800be98:	9305      	str	r3, [sp, #20]
 800be9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf80 <_vfiprintf_r+0x25c>
 800be9e:	7821      	ldrb	r1, [r4, #0]
 800bea0:	2203      	movs	r2, #3
 800bea2:	4650      	mov	r0, sl
 800bea4:	f7f4 f984 	bl	80001b0 <memchr>
 800bea8:	b140      	cbz	r0, 800bebc <_vfiprintf_r+0x198>
 800beaa:	2340      	movs	r3, #64	; 0x40
 800beac:	eba0 000a 	sub.w	r0, r0, sl
 800beb0:	fa03 f000 	lsl.w	r0, r3, r0
 800beb4:	9b04      	ldr	r3, [sp, #16]
 800beb6:	4303      	orrs	r3, r0
 800beb8:	3401      	adds	r4, #1
 800beba:	9304      	str	r3, [sp, #16]
 800bebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bec0:	482c      	ldr	r0, [pc, #176]	; (800bf74 <_vfiprintf_r+0x250>)
 800bec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bec6:	2206      	movs	r2, #6
 800bec8:	f7f4 f972 	bl	80001b0 <memchr>
 800becc:	2800      	cmp	r0, #0
 800bece:	d03f      	beq.n	800bf50 <_vfiprintf_r+0x22c>
 800bed0:	4b29      	ldr	r3, [pc, #164]	; (800bf78 <_vfiprintf_r+0x254>)
 800bed2:	bb1b      	cbnz	r3, 800bf1c <_vfiprintf_r+0x1f8>
 800bed4:	9b03      	ldr	r3, [sp, #12]
 800bed6:	3307      	adds	r3, #7
 800bed8:	f023 0307 	bic.w	r3, r3, #7
 800bedc:	3308      	adds	r3, #8
 800bede:	9303      	str	r3, [sp, #12]
 800bee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee2:	443b      	add	r3, r7
 800bee4:	9309      	str	r3, [sp, #36]	; 0x24
 800bee6:	e767      	b.n	800bdb8 <_vfiprintf_r+0x94>
 800bee8:	fb0c 3202 	mla	r2, ip, r2, r3
 800beec:	460c      	mov	r4, r1
 800beee:	2001      	movs	r0, #1
 800bef0:	e7a5      	b.n	800be3e <_vfiprintf_r+0x11a>
 800bef2:	2300      	movs	r3, #0
 800bef4:	3401      	adds	r4, #1
 800bef6:	9305      	str	r3, [sp, #20]
 800bef8:	4619      	mov	r1, r3
 800befa:	f04f 0c0a 	mov.w	ip, #10
 800befe:	4620      	mov	r0, r4
 800bf00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf04:	3a30      	subs	r2, #48	; 0x30
 800bf06:	2a09      	cmp	r2, #9
 800bf08:	d903      	bls.n	800bf12 <_vfiprintf_r+0x1ee>
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d0c5      	beq.n	800be9a <_vfiprintf_r+0x176>
 800bf0e:	9105      	str	r1, [sp, #20]
 800bf10:	e7c3      	b.n	800be9a <_vfiprintf_r+0x176>
 800bf12:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf16:	4604      	mov	r4, r0
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e7f0      	b.n	800befe <_vfiprintf_r+0x1da>
 800bf1c:	ab03      	add	r3, sp, #12
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	462a      	mov	r2, r5
 800bf22:	4b16      	ldr	r3, [pc, #88]	; (800bf7c <_vfiprintf_r+0x258>)
 800bf24:	a904      	add	r1, sp, #16
 800bf26:	4630      	mov	r0, r6
 800bf28:	f7fd fb4e 	bl	80095c8 <_printf_float>
 800bf2c:	4607      	mov	r7, r0
 800bf2e:	1c78      	adds	r0, r7, #1
 800bf30:	d1d6      	bne.n	800bee0 <_vfiprintf_r+0x1bc>
 800bf32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf34:	07d9      	lsls	r1, r3, #31
 800bf36:	d405      	bmi.n	800bf44 <_vfiprintf_r+0x220>
 800bf38:	89ab      	ldrh	r3, [r5, #12]
 800bf3a:	059a      	lsls	r2, r3, #22
 800bf3c:	d402      	bmi.n	800bf44 <_vfiprintf_r+0x220>
 800bf3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf40:	f7ff f95e 	bl	800b200 <__retarget_lock_release_recursive>
 800bf44:	89ab      	ldrh	r3, [r5, #12]
 800bf46:	065b      	lsls	r3, r3, #25
 800bf48:	f53f af12 	bmi.w	800bd70 <_vfiprintf_r+0x4c>
 800bf4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf4e:	e711      	b.n	800bd74 <_vfiprintf_r+0x50>
 800bf50:	ab03      	add	r3, sp, #12
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	462a      	mov	r2, r5
 800bf56:	4b09      	ldr	r3, [pc, #36]	; (800bf7c <_vfiprintf_r+0x258>)
 800bf58:	a904      	add	r1, sp, #16
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f7fd fdd8 	bl	8009b10 <_printf_i>
 800bf60:	e7e4      	b.n	800bf2c <_vfiprintf_r+0x208>
 800bf62:	bf00      	nop
 800bf64:	0800d11c 	.word	0x0800d11c
 800bf68:	0800d13c 	.word	0x0800d13c
 800bf6c:	0800d0fc 	.word	0x0800d0fc
 800bf70:	0800d2b4 	.word	0x0800d2b4
 800bf74:	0800d2be 	.word	0x0800d2be
 800bf78:	080095c9 	.word	0x080095c9
 800bf7c:	0800bcff 	.word	0x0800bcff
 800bf80:	0800d2ba 	.word	0x0800d2ba

0800bf84 <__sread>:
 800bf84:	b510      	push	{r4, lr}
 800bf86:	460c      	mov	r4, r1
 800bf88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf8c:	f000 f920 	bl	800c1d0 <_read_r>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	bfab      	itete	ge
 800bf94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf96:	89a3      	ldrhlt	r3, [r4, #12]
 800bf98:	181b      	addge	r3, r3, r0
 800bf9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf9e:	bfac      	ite	ge
 800bfa0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfa2:	81a3      	strhlt	r3, [r4, #12]
 800bfa4:	bd10      	pop	{r4, pc}

0800bfa6 <__swrite>:
 800bfa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfaa:	461f      	mov	r7, r3
 800bfac:	898b      	ldrh	r3, [r1, #12]
 800bfae:	05db      	lsls	r3, r3, #23
 800bfb0:	4605      	mov	r5, r0
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	4616      	mov	r6, r2
 800bfb6:	d505      	bpl.n	800bfc4 <__swrite+0x1e>
 800bfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f000 f898 	bl	800c0f4 <_lseek_r>
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfce:	81a3      	strh	r3, [r4, #12]
 800bfd0:	4632      	mov	r2, r6
 800bfd2:	463b      	mov	r3, r7
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfda:	f000 b817 	b.w	800c00c <_write_r>

0800bfde <__sseek>:
 800bfde:	b510      	push	{r4, lr}
 800bfe0:	460c      	mov	r4, r1
 800bfe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfe6:	f000 f885 	bl	800c0f4 <_lseek_r>
 800bfea:	1c43      	adds	r3, r0, #1
 800bfec:	89a3      	ldrh	r3, [r4, #12]
 800bfee:	bf15      	itete	ne
 800bff0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bffa:	81a3      	strheq	r3, [r4, #12]
 800bffc:	bf18      	it	ne
 800bffe:	81a3      	strhne	r3, [r4, #12]
 800c000:	bd10      	pop	{r4, pc}

0800c002 <__sclose>:
 800c002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c006:	f000 b831 	b.w	800c06c <_close_r>
	...

0800c00c <_write_r>:
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	4d07      	ldr	r5, [pc, #28]	; (800c02c <_write_r+0x20>)
 800c010:	4604      	mov	r4, r0
 800c012:	4608      	mov	r0, r1
 800c014:	4611      	mov	r1, r2
 800c016:	2200      	movs	r2, #0
 800c018:	602a      	str	r2, [r5, #0]
 800c01a:	461a      	mov	r2, r3
 800c01c:	f000 f9f1 	bl	800c402 <_write>
 800c020:	1c43      	adds	r3, r0, #1
 800c022:	d102      	bne.n	800c02a <_write_r+0x1e>
 800c024:	682b      	ldr	r3, [r5, #0]
 800c026:	b103      	cbz	r3, 800c02a <_write_r+0x1e>
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	20000544 	.word	0x20000544

0800c030 <__assert_func>:
 800c030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c032:	4614      	mov	r4, r2
 800c034:	461a      	mov	r2, r3
 800c036:	4b09      	ldr	r3, [pc, #36]	; (800c05c <__assert_func+0x2c>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4605      	mov	r5, r0
 800c03c:	68d8      	ldr	r0, [r3, #12]
 800c03e:	b14c      	cbz	r4, 800c054 <__assert_func+0x24>
 800c040:	4b07      	ldr	r3, [pc, #28]	; (800c060 <__assert_func+0x30>)
 800c042:	9100      	str	r1, [sp, #0]
 800c044:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c048:	4906      	ldr	r1, [pc, #24]	; (800c064 <__assert_func+0x34>)
 800c04a:	462b      	mov	r3, r5
 800c04c:	f000 f81e 	bl	800c08c <fiprintf>
 800c050:	f000 f8dd 	bl	800c20e <abort>
 800c054:	4b04      	ldr	r3, [pc, #16]	; (800c068 <__assert_func+0x38>)
 800c056:	461c      	mov	r4, r3
 800c058:	e7f3      	b.n	800c042 <__assert_func+0x12>
 800c05a:	bf00      	nop
 800c05c:	20000010 	.word	0x20000010
 800c060:	0800d2c5 	.word	0x0800d2c5
 800c064:	0800d2d2 	.word	0x0800d2d2
 800c068:	0800d300 	.word	0x0800d300

0800c06c <_close_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4d06      	ldr	r5, [pc, #24]	; (800c088 <_close_r+0x1c>)
 800c070:	2300      	movs	r3, #0
 800c072:	4604      	mov	r4, r0
 800c074:	4608      	mov	r0, r1
 800c076:	602b      	str	r3, [r5, #0]
 800c078:	f000 f9f4 	bl	800c464 <_close>
 800c07c:	1c43      	adds	r3, r0, #1
 800c07e:	d102      	bne.n	800c086 <_close_r+0x1a>
 800c080:	682b      	ldr	r3, [r5, #0]
 800c082:	b103      	cbz	r3, 800c086 <_close_r+0x1a>
 800c084:	6023      	str	r3, [r4, #0]
 800c086:	bd38      	pop	{r3, r4, r5, pc}
 800c088:	20000544 	.word	0x20000544

0800c08c <fiprintf>:
 800c08c:	b40e      	push	{r1, r2, r3}
 800c08e:	b503      	push	{r0, r1, lr}
 800c090:	4601      	mov	r1, r0
 800c092:	ab03      	add	r3, sp, #12
 800c094:	4805      	ldr	r0, [pc, #20]	; (800c0ac <fiprintf+0x20>)
 800c096:	f853 2b04 	ldr.w	r2, [r3], #4
 800c09a:	6800      	ldr	r0, [r0, #0]
 800c09c:	9301      	str	r3, [sp, #4]
 800c09e:	f7ff fe41 	bl	800bd24 <_vfiprintf_r>
 800c0a2:	b002      	add	sp, #8
 800c0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0a8:	b003      	add	sp, #12
 800c0aa:	4770      	bx	lr
 800c0ac:	20000010 	.word	0x20000010

0800c0b0 <_fstat_r>:
 800c0b0:	b538      	push	{r3, r4, r5, lr}
 800c0b2:	4d07      	ldr	r5, [pc, #28]	; (800c0d0 <_fstat_r+0x20>)
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	602b      	str	r3, [r5, #0]
 800c0be:	f000 fa1a 	bl	800c4f6 <_fstat>
 800c0c2:	1c43      	adds	r3, r0, #1
 800c0c4:	d102      	bne.n	800c0cc <_fstat_r+0x1c>
 800c0c6:	682b      	ldr	r3, [r5, #0]
 800c0c8:	b103      	cbz	r3, 800c0cc <_fstat_r+0x1c>
 800c0ca:	6023      	str	r3, [r4, #0]
 800c0cc:	bd38      	pop	{r3, r4, r5, pc}
 800c0ce:	bf00      	nop
 800c0d0:	20000544 	.word	0x20000544

0800c0d4 <_isatty_r>:
 800c0d4:	b538      	push	{r3, r4, r5, lr}
 800c0d6:	4d06      	ldr	r5, [pc, #24]	; (800c0f0 <_isatty_r+0x1c>)
 800c0d8:	2300      	movs	r3, #0
 800c0da:	4604      	mov	r4, r0
 800c0dc:	4608      	mov	r0, r1
 800c0de:	602b      	str	r3, [r5, #0]
 800c0e0:	f000 fb7c 	bl	800c7dc <_isatty>
 800c0e4:	1c43      	adds	r3, r0, #1
 800c0e6:	d102      	bne.n	800c0ee <_isatty_r+0x1a>
 800c0e8:	682b      	ldr	r3, [r5, #0]
 800c0ea:	b103      	cbz	r3, 800c0ee <_isatty_r+0x1a>
 800c0ec:	6023      	str	r3, [r4, #0]
 800c0ee:	bd38      	pop	{r3, r4, r5, pc}
 800c0f0:	20000544 	.word	0x20000544

0800c0f4 <_lseek_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	4d07      	ldr	r5, [pc, #28]	; (800c114 <_lseek_r+0x20>)
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	4608      	mov	r0, r1
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	2200      	movs	r2, #0
 800c100:	602a      	str	r2, [r5, #0]
 800c102:	461a      	mov	r2, r3
 800c104:	f000 f96b 	bl	800c3de <_lseek>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d102      	bne.n	800c112 <_lseek_r+0x1e>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	b103      	cbz	r3, 800c112 <_lseek_r+0x1e>
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	bd38      	pop	{r3, r4, r5, pc}
 800c114:	20000544 	.word	0x20000544

0800c118 <__ascii_mbtowc>:
 800c118:	b082      	sub	sp, #8
 800c11a:	b901      	cbnz	r1, 800c11e <__ascii_mbtowc+0x6>
 800c11c:	a901      	add	r1, sp, #4
 800c11e:	b142      	cbz	r2, 800c132 <__ascii_mbtowc+0x1a>
 800c120:	b14b      	cbz	r3, 800c136 <__ascii_mbtowc+0x1e>
 800c122:	7813      	ldrb	r3, [r2, #0]
 800c124:	600b      	str	r3, [r1, #0]
 800c126:	7812      	ldrb	r2, [r2, #0]
 800c128:	1e10      	subs	r0, r2, #0
 800c12a:	bf18      	it	ne
 800c12c:	2001      	movne	r0, #1
 800c12e:	b002      	add	sp, #8
 800c130:	4770      	bx	lr
 800c132:	4610      	mov	r0, r2
 800c134:	e7fb      	b.n	800c12e <__ascii_mbtowc+0x16>
 800c136:	f06f 0001 	mvn.w	r0, #1
 800c13a:	e7f8      	b.n	800c12e <__ascii_mbtowc+0x16>

0800c13c <memmove>:
 800c13c:	4288      	cmp	r0, r1
 800c13e:	b510      	push	{r4, lr}
 800c140:	eb01 0402 	add.w	r4, r1, r2
 800c144:	d902      	bls.n	800c14c <memmove+0x10>
 800c146:	4284      	cmp	r4, r0
 800c148:	4623      	mov	r3, r4
 800c14a:	d807      	bhi.n	800c15c <memmove+0x20>
 800c14c:	1e43      	subs	r3, r0, #1
 800c14e:	42a1      	cmp	r1, r4
 800c150:	d008      	beq.n	800c164 <memmove+0x28>
 800c152:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c156:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c15a:	e7f8      	b.n	800c14e <memmove+0x12>
 800c15c:	4402      	add	r2, r0
 800c15e:	4601      	mov	r1, r0
 800c160:	428a      	cmp	r2, r1
 800c162:	d100      	bne.n	800c166 <memmove+0x2a>
 800c164:	bd10      	pop	{r4, pc}
 800c166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c16a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c16e:	e7f7      	b.n	800c160 <memmove+0x24>

0800c170 <_realloc_r>:
 800c170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c174:	4680      	mov	r8, r0
 800c176:	4614      	mov	r4, r2
 800c178:	460e      	mov	r6, r1
 800c17a:	b921      	cbnz	r1, 800c186 <_realloc_r+0x16>
 800c17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c180:	4611      	mov	r1, r2
 800c182:	f7fd b90d 	b.w	80093a0 <_malloc_r>
 800c186:	b92a      	cbnz	r2, 800c194 <_realloc_r+0x24>
 800c188:	f7fd f89e 	bl	80092c8 <_free_r>
 800c18c:	4625      	mov	r5, r4
 800c18e:	4628      	mov	r0, r5
 800c190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c194:	f000 f842 	bl	800c21c <_malloc_usable_size_r>
 800c198:	4284      	cmp	r4, r0
 800c19a:	4607      	mov	r7, r0
 800c19c:	d802      	bhi.n	800c1a4 <_realloc_r+0x34>
 800c19e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1a2:	d812      	bhi.n	800c1ca <_realloc_r+0x5a>
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	4640      	mov	r0, r8
 800c1a8:	f7fd f8fa 	bl	80093a0 <_malloc_r>
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d0ed      	beq.n	800c18e <_realloc_r+0x1e>
 800c1b2:	42bc      	cmp	r4, r7
 800c1b4:	4622      	mov	r2, r4
 800c1b6:	4631      	mov	r1, r6
 800c1b8:	bf28      	it	cs
 800c1ba:	463a      	movcs	r2, r7
 800c1bc:	f7fd f86e 	bl	800929c <memcpy>
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	f7fd f880 	bl	80092c8 <_free_r>
 800c1c8:	e7e1      	b.n	800c18e <_realloc_r+0x1e>
 800c1ca:	4635      	mov	r5, r6
 800c1cc:	e7df      	b.n	800c18e <_realloc_r+0x1e>
	...

0800c1d0 <_read_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4d07      	ldr	r5, [pc, #28]	; (800c1f0 <_read_r+0x20>)
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	4608      	mov	r0, r1
 800c1d8:	4611      	mov	r1, r2
 800c1da:	2200      	movs	r2, #0
 800c1dc:	602a      	str	r2, [r5, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	f000 f8a5 	bl	800c32e <_read>
 800c1e4:	1c43      	adds	r3, r0, #1
 800c1e6:	d102      	bne.n	800c1ee <_read_r+0x1e>
 800c1e8:	682b      	ldr	r3, [r5, #0]
 800c1ea:	b103      	cbz	r3, 800c1ee <_read_r+0x1e>
 800c1ec:	6023      	str	r3, [r4, #0]
 800c1ee:	bd38      	pop	{r3, r4, r5, pc}
 800c1f0:	20000544 	.word	0x20000544

0800c1f4 <__ascii_wctomb>:
 800c1f4:	b149      	cbz	r1, 800c20a <__ascii_wctomb+0x16>
 800c1f6:	2aff      	cmp	r2, #255	; 0xff
 800c1f8:	bf85      	ittet	hi
 800c1fa:	238a      	movhi	r3, #138	; 0x8a
 800c1fc:	6003      	strhi	r3, [r0, #0]
 800c1fe:	700a      	strbls	r2, [r1, #0]
 800c200:	f04f 30ff 	movhi.w	r0, #4294967295
 800c204:	bf98      	it	ls
 800c206:	2001      	movls	r0, #1
 800c208:	4770      	bx	lr
 800c20a:	4608      	mov	r0, r1
 800c20c:	4770      	bx	lr

0800c20e <abort>:
 800c20e:	b508      	push	{r3, lr}
 800c210:	2006      	movs	r0, #6
 800c212:	f000 f833 	bl	800c27c <raise>
 800c216:	2001      	movs	r0, #1
 800c218:	f000 fafc 	bl	800c814 <_exit>

0800c21c <_malloc_usable_size_r>:
 800c21c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c220:	1f18      	subs	r0, r3, #4
 800c222:	2b00      	cmp	r3, #0
 800c224:	bfbc      	itt	lt
 800c226:	580b      	ldrlt	r3, [r1, r0]
 800c228:	18c0      	addlt	r0, r0, r3
 800c22a:	4770      	bx	lr

0800c22c <_raise_r>:
 800c22c:	291f      	cmp	r1, #31
 800c22e:	b538      	push	{r3, r4, r5, lr}
 800c230:	4604      	mov	r4, r0
 800c232:	460d      	mov	r5, r1
 800c234:	d904      	bls.n	800c240 <_raise_r+0x14>
 800c236:	2316      	movs	r3, #22
 800c238:	6003      	str	r3, [r0, #0]
 800c23a:	f04f 30ff 	mov.w	r0, #4294967295
 800c23e:	bd38      	pop	{r3, r4, r5, pc}
 800c240:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c242:	b112      	cbz	r2, 800c24a <_raise_r+0x1e>
 800c244:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c248:	b94b      	cbnz	r3, 800c25e <_raise_r+0x32>
 800c24a:	4620      	mov	r0, r4
 800c24c:	f000 f830 	bl	800c2b0 <_getpid_r>
 800c250:	462a      	mov	r2, r5
 800c252:	4601      	mov	r1, r0
 800c254:	4620      	mov	r0, r4
 800c256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c25a:	f000 b817 	b.w	800c28c <_kill_r>
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d00a      	beq.n	800c278 <_raise_r+0x4c>
 800c262:	1c59      	adds	r1, r3, #1
 800c264:	d103      	bne.n	800c26e <_raise_r+0x42>
 800c266:	2316      	movs	r3, #22
 800c268:	6003      	str	r3, [r0, #0]
 800c26a:	2001      	movs	r0, #1
 800c26c:	e7e7      	b.n	800c23e <_raise_r+0x12>
 800c26e:	2400      	movs	r4, #0
 800c270:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c274:	4628      	mov	r0, r5
 800c276:	4798      	blx	r3
 800c278:	2000      	movs	r0, #0
 800c27a:	e7e0      	b.n	800c23e <_raise_r+0x12>

0800c27c <raise>:
 800c27c:	4b02      	ldr	r3, [pc, #8]	; (800c288 <raise+0xc>)
 800c27e:	4601      	mov	r1, r0
 800c280:	6818      	ldr	r0, [r3, #0]
 800c282:	f7ff bfd3 	b.w	800c22c <_raise_r>
 800c286:	bf00      	nop
 800c288:	20000010 	.word	0x20000010

0800c28c <_kill_r>:
 800c28c:	b538      	push	{r3, r4, r5, lr}
 800c28e:	4d07      	ldr	r5, [pc, #28]	; (800c2ac <_kill_r+0x20>)
 800c290:	2300      	movs	r3, #0
 800c292:	4604      	mov	r4, r0
 800c294:	4608      	mov	r0, r1
 800c296:	4611      	mov	r1, r2
 800c298:	602b      	str	r3, [r5, #0]
 800c29a:	f000 fad9 	bl	800c850 <_kill>
 800c29e:	1c43      	adds	r3, r0, #1
 800c2a0:	d102      	bne.n	800c2a8 <_kill_r+0x1c>
 800c2a2:	682b      	ldr	r3, [r5, #0]
 800c2a4:	b103      	cbz	r3, 800c2a8 <_kill_r+0x1c>
 800c2a6:	6023      	str	r3, [r4, #0]
 800c2a8:	bd38      	pop	{r3, r4, r5, pc}
 800c2aa:	bf00      	nop
 800c2ac:	20000544 	.word	0x20000544

0800c2b0 <_getpid_r>:
 800c2b0:	f000 b8fe 	b.w	800c4b0 <_getpid>

0800c2b4 <findslot>:
 800c2b4:	4b0a      	ldr	r3, [pc, #40]	; (800c2e0 <findslot+0x2c>)
 800c2b6:	b510      	push	{r4, lr}
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	6818      	ldr	r0, [r3, #0]
 800c2bc:	b118      	cbz	r0, 800c2c6 <findslot+0x12>
 800c2be:	6983      	ldr	r3, [r0, #24]
 800c2c0:	b90b      	cbnz	r3, 800c2c6 <findslot+0x12>
 800c2c2:	f7fe fef9 	bl	800b0b8 <__sinit>
 800c2c6:	2c13      	cmp	r4, #19
 800c2c8:	d807      	bhi.n	800c2da <findslot+0x26>
 800c2ca:	4806      	ldr	r0, [pc, #24]	; (800c2e4 <findslot+0x30>)
 800c2cc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800c2d0:	3201      	adds	r2, #1
 800c2d2:	d002      	beq.n	800c2da <findslot+0x26>
 800c2d4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800c2d8:	bd10      	pop	{r4, pc}
 800c2da:	2000      	movs	r0, #0
 800c2dc:	e7fc      	b.n	800c2d8 <findslot+0x24>
 800c2de:	bf00      	nop
 800c2e0:	20000010 	.word	0x20000010
 800c2e4:	20000554 	.word	0x20000554

0800c2e8 <error>:
 800c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	f7fc ffa4 	bl	8009238 <__errno>
 800c2f0:	2613      	movs	r6, #19
 800c2f2:	4605      	mov	r5, r0
 800c2f4:	2700      	movs	r7, #0
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	4639      	mov	r1, r7
 800c2fa:	beab      	bkpt	0x00ab
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	602e      	str	r6, [r5, #0]
 800c300:	4620      	mov	r0, r4
 800c302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c304 <checkerror>:
 800c304:	1c43      	adds	r3, r0, #1
 800c306:	d101      	bne.n	800c30c <checkerror+0x8>
 800c308:	f7ff bfee 	b.w	800c2e8 <error>
 800c30c:	4770      	bx	lr

0800c30e <_swiread>:
 800c30e:	b530      	push	{r4, r5, lr}
 800c310:	b085      	sub	sp, #20
 800c312:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800c316:	9203      	str	r2, [sp, #12]
 800c318:	2406      	movs	r4, #6
 800c31a:	ad01      	add	r5, sp, #4
 800c31c:	4620      	mov	r0, r4
 800c31e:	4629      	mov	r1, r5
 800c320:	beab      	bkpt	0x00ab
 800c322:	4604      	mov	r4, r0
 800c324:	4620      	mov	r0, r4
 800c326:	f7ff ffed 	bl	800c304 <checkerror>
 800c32a:	b005      	add	sp, #20
 800c32c:	bd30      	pop	{r4, r5, pc}

0800c32e <_read>:
 800c32e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c330:	4615      	mov	r5, r2
 800c332:	9101      	str	r1, [sp, #4]
 800c334:	f7ff ffbe 	bl	800c2b4 <findslot>
 800c338:	9901      	ldr	r1, [sp, #4]
 800c33a:	4604      	mov	r4, r0
 800c33c:	b938      	cbnz	r0, 800c34e <_read+0x20>
 800c33e:	f7fc ff7b 	bl	8009238 <__errno>
 800c342:	2309      	movs	r3, #9
 800c344:	6003      	str	r3, [r0, #0]
 800c346:	f04f 30ff 	mov.w	r0, #4294967295
 800c34a:	b003      	add	sp, #12
 800c34c:	bd30      	pop	{r4, r5, pc}
 800c34e:	6800      	ldr	r0, [r0, #0]
 800c350:	462a      	mov	r2, r5
 800c352:	f7ff ffdc 	bl	800c30e <_swiread>
 800c356:	1c43      	adds	r3, r0, #1
 800c358:	d0f7      	beq.n	800c34a <_read+0x1c>
 800c35a:	6863      	ldr	r3, [r4, #4]
 800c35c:	1a2a      	subs	r2, r5, r0
 800c35e:	4413      	add	r3, r2
 800c360:	6063      	str	r3, [r4, #4]
 800c362:	4610      	mov	r0, r2
 800c364:	e7f1      	b.n	800c34a <_read+0x1c>

0800c366 <_swilseek>:
 800c366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c368:	460c      	mov	r4, r1
 800c36a:	4616      	mov	r6, r2
 800c36c:	f7ff ffa2 	bl	800c2b4 <findslot>
 800c370:	4605      	mov	r5, r0
 800c372:	b940      	cbnz	r0, 800c386 <_swilseek+0x20>
 800c374:	f7fc ff60 	bl	8009238 <__errno>
 800c378:	2309      	movs	r3, #9
 800c37a:	6003      	str	r3, [r0, #0]
 800c37c:	f04f 34ff 	mov.w	r4, #4294967295
 800c380:	4620      	mov	r0, r4
 800c382:	b003      	add	sp, #12
 800c384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c386:	2e02      	cmp	r6, #2
 800c388:	d903      	bls.n	800c392 <_swilseek+0x2c>
 800c38a:	f7fc ff55 	bl	8009238 <__errno>
 800c38e:	2316      	movs	r3, #22
 800c390:	e7f3      	b.n	800c37a <_swilseek+0x14>
 800c392:	2e01      	cmp	r6, #1
 800c394:	d112      	bne.n	800c3bc <_swilseek+0x56>
 800c396:	6843      	ldr	r3, [r0, #4]
 800c398:	18e4      	adds	r4, r4, r3
 800c39a:	d4f6      	bmi.n	800c38a <_swilseek+0x24>
 800c39c:	682b      	ldr	r3, [r5, #0]
 800c39e:	260a      	movs	r6, #10
 800c3a0:	e9cd 3400 	strd	r3, r4, [sp]
 800c3a4:	466f      	mov	r7, sp
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	4639      	mov	r1, r7
 800c3aa:	beab      	bkpt	0x00ab
 800c3ac:	4606      	mov	r6, r0
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	f7ff ffa8 	bl	800c304 <checkerror>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	dbe1      	blt.n	800c37c <_swilseek+0x16>
 800c3b8:	606c      	str	r4, [r5, #4]
 800c3ba:	e7e1      	b.n	800c380 <_swilseek+0x1a>
 800c3bc:	2e02      	cmp	r6, #2
 800c3be:	d1ed      	bne.n	800c39c <_swilseek+0x36>
 800c3c0:	6803      	ldr	r3, [r0, #0]
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	260c      	movs	r6, #12
 800c3c6:	466f      	mov	r7, sp
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	beab      	bkpt	0x00ab
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f7ff ff97 	bl	800c304 <checkerror>
 800c3d6:	1c43      	adds	r3, r0, #1
 800c3d8:	d0d0      	beq.n	800c37c <_swilseek+0x16>
 800c3da:	4404      	add	r4, r0
 800c3dc:	e7de      	b.n	800c39c <_swilseek+0x36>

0800c3de <_lseek>:
 800c3de:	f7ff bfc2 	b.w	800c366 <_swilseek>

0800c3e2 <_swiwrite>:
 800c3e2:	b530      	push	{r4, r5, lr}
 800c3e4:	b085      	sub	sp, #20
 800c3e6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800c3ea:	9203      	str	r2, [sp, #12]
 800c3ec:	2405      	movs	r4, #5
 800c3ee:	ad01      	add	r5, sp, #4
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	beab      	bkpt	0x00ab
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f7ff ff83 	bl	800c304 <checkerror>
 800c3fe:	b005      	add	sp, #20
 800c400:	bd30      	pop	{r4, r5, pc}

0800c402 <_write>:
 800c402:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c404:	4615      	mov	r5, r2
 800c406:	9101      	str	r1, [sp, #4]
 800c408:	f7ff ff54 	bl	800c2b4 <findslot>
 800c40c:	9901      	ldr	r1, [sp, #4]
 800c40e:	4604      	mov	r4, r0
 800c410:	b930      	cbnz	r0, 800c420 <_write+0x1e>
 800c412:	f7fc ff11 	bl	8009238 <__errno>
 800c416:	2309      	movs	r3, #9
 800c418:	6003      	str	r3, [r0, #0]
 800c41a:	f04f 30ff 	mov.w	r0, #4294967295
 800c41e:	e012      	b.n	800c446 <_write+0x44>
 800c420:	6800      	ldr	r0, [r0, #0]
 800c422:	462a      	mov	r2, r5
 800c424:	f7ff ffdd 	bl	800c3e2 <_swiwrite>
 800c428:	2800      	cmp	r0, #0
 800c42a:	dbf6      	blt.n	800c41a <_write+0x18>
 800c42c:	6862      	ldr	r2, [r4, #4]
 800c42e:	1a2b      	subs	r3, r5, r0
 800c430:	441a      	add	r2, r3
 800c432:	42a8      	cmp	r0, r5
 800c434:	6062      	str	r2, [r4, #4]
 800c436:	d105      	bne.n	800c444 <_write+0x42>
 800c438:	2000      	movs	r0, #0
 800c43a:	b003      	add	sp, #12
 800c43c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c440:	f7ff bf52 	b.w	800c2e8 <error>
 800c444:	4618      	mov	r0, r3
 800c446:	b003      	add	sp, #12
 800c448:	bd30      	pop	{r4, r5, pc}

0800c44a <_swiclose>:
 800c44a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c44c:	2402      	movs	r4, #2
 800c44e:	9001      	str	r0, [sp, #4]
 800c450:	ad01      	add	r5, sp, #4
 800c452:	4620      	mov	r0, r4
 800c454:	4629      	mov	r1, r5
 800c456:	beab      	bkpt	0x00ab
 800c458:	4604      	mov	r4, r0
 800c45a:	4620      	mov	r0, r4
 800c45c:	f7ff ff52 	bl	800c304 <checkerror>
 800c460:	b003      	add	sp, #12
 800c462:	bd30      	pop	{r4, r5, pc}

0800c464 <_close>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	4605      	mov	r5, r0
 800c468:	f7ff ff24 	bl	800c2b4 <findslot>
 800c46c:	4604      	mov	r4, r0
 800c46e:	b930      	cbnz	r0, 800c47e <_close+0x1a>
 800c470:	f7fc fee2 	bl	8009238 <__errno>
 800c474:	2309      	movs	r3, #9
 800c476:	6003      	str	r3, [r0, #0]
 800c478:	f04f 30ff 	mov.w	r0, #4294967295
 800c47c:	bd38      	pop	{r3, r4, r5, pc}
 800c47e:	3d01      	subs	r5, #1
 800c480:	2d01      	cmp	r5, #1
 800c482:	d809      	bhi.n	800c498 <_close+0x34>
 800c484:	4b09      	ldr	r3, [pc, #36]	; (800c4ac <_close+0x48>)
 800c486:	689a      	ldr	r2, [r3, #8]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d104      	bne.n	800c498 <_close+0x34>
 800c48e:	f04f 33ff 	mov.w	r3, #4294967295
 800c492:	6003      	str	r3, [r0, #0]
 800c494:	2000      	movs	r0, #0
 800c496:	e7f1      	b.n	800c47c <_close+0x18>
 800c498:	6820      	ldr	r0, [r4, #0]
 800c49a:	f7ff ffd6 	bl	800c44a <_swiclose>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d1ec      	bne.n	800c47c <_close+0x18>
 800c4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a6:	6023      	str	r3, [r4, #0]
 800c4a8:	e7e8      	b.n	800c47c <_close+0x18>
 800c4aa:	bf00      	nop
 800c4ac:	20000554 	.word	0x20000554

0800c4b0 <_getpid>:
 800c4b0:	2001      	movs	r0, #1
 800c4b2:	4770      	bx	lr

0800c4b4 <_swistat>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	460c      	mov	r4, r1
 800c4b8:	f7ff fefc 	bl	800c2b4 <findslot>
 800c4bc:	4605      	mov	r5, r0
 800c4be:	b930      	cbnz	r0, 800c4ce <_swistat+0x1a>
 800c4c0:	f7fc feba 	bl	8009238 <__errno>
 800c4c4:	2309      	movs	r3, #9
 800c4c6:	6003      	str	r3, [r0, #0]
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4cc:	bd70      	pop	{r4, r5, r6, pc}
 800c4ce:	6863      	ldr	r3, [r4, #4]
 800c4d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c4d4:	6063      	str	r3, [r4, #4]
 800c4d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4da:	64a3      	str	r3, [r4, #72]	; 0x48
 800c4dc:	260c      	movs	r6, #12
 800c4de:	4630      	mov	r0, r6
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	beab      	bkpt	0x00ab
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	f7ff ff0c 	bl	800c304 <checkerror>
 800c4ec:	1c43      	adds	r3, r0, #1
 800c4ee:	bf1c      	itt	ne
 800c4f0:	6120      	strne	r0, [r4, #16]
 800c4f2:	2000      	movne	r0, #0
 800c4f4:	e7ea      	b.n	800c4cc <_swistat+0x18>

0800c4f6 <_fstat>:
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	b510      	push	{r4, lr}
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	2258      	movs	r2, #88	; 0x58
 800c500:	4618      	mov	r0, r3
 800c502:	f7fc fed9 	bl	80092b8 <memset>
 800c506:	4601      	mov	r1, r0
 800c508:	4620      	mov	r0, r4
 800c50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c50e:	f7ff bfd1 	b.w	800c4b4 <_swistat>

0800c512 <_stat>:
 800c512:	b538      	push	{r3, r4, r5, lr}
 800c514:	460d      	mov	r5, r1
 800c516:	4604      	mov	r4, r0
 800c518:	2258      	movs	r2, #88	; 0x58
 800c51a:	2100      	movs	r1, #0
 800c51c:	4628      	mov	r0, r5
 800c51e:	f7fc fecb 	bl	80092b8 <memset>
 800c522:	4620      	mov	r0, r4
 800c524:	2100      	movs	r1, #0
 800c526:	f000 f811 	bl	800c54c <_swiopen>
 800c52a:	1c43      	adds	r3, r0, #1
 800c52c:	4604      	mov	r4, r0
 800c52e:	d00b      	beq.n	800c548 <_stat+0x36>
 800c530:	686b      	ldr	r3, [r5, #4]
 800c532:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c536:	606b      	str	r3, [r5, #4]
 800c538:	4629      	mov	r1, r5
 800c53a:	f7ff ffbb 	bl	800c4b4 <_swistat>
 800c53e:	4605      	mov	r5, r0
 800c540:	4620      	mov	r0, r4
 800c542:	f7ff ff8f 	bl	800c464 <_close>
 800c546:	462c      	mov	r4, r5
 800c548:	4620      	mov	r0, r4
 800c54a:	bd38      	pop	{r3, r4, r5, pc}

0800c54c <_swiopen>:
 800c54c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c550:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800c5fc <_swiopen+0xb0>
 800c554:	b097      	sub	sp, #92	; 0x5c
 800c556:	4607      	mov	r7, r0
 800c558:	460e      	mov	r6, r1
 800c55a:	2500      	movs	r5, #0
 800c55c:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800c560:	1c61      	adds	r1, r4, #1
 800c562:	d037      	beq.n	800c5d4 <_swiopen+0x88>
 800c564:	3501      	adds	r5, #1
 800c566:	2d14      	cmp	r5, #20
 800c568:	d1f8      	bne.n	800c55c <_swiopen+0x10>
 800c56a:	f7fc fe65 	bl	8009238 <__errno>
 800c56e:	2318      	movs	r3, #24
 800c570:	6003      	str	r3, [r0, #0]
 800c572:	f04f 34ff 	mov.w	r4, #4294967295
 800c576:	e03d      	b.n	800c5f4 <_swiopen+0xa8>
 800c578:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800c57c:	f240 6301 	movw	r3, #1537	; 0x601
 800c580:	07b2      	lsls	r2, r6, #30
 800c582:	bf48      	it	mi
 800c584:	f044 0402 	orrmi.w	r4, r4, #2
 800c588:	421e      	tst	r6, r3
 800c58a:	bf18      	it	ne
 800c58c:	f044 0404 	orrne.w	r4, r4, #4
 800c590:	0733      	lsls	r3, r6, #28
 800c592:	bf48      	it	mi
 800c594:	f024 0404 	bicmi.w	r4, r4, #4
 800c598:	4638      	mov	r0, r7
 800c59a:	bf48      	it	mi
 800c59c:	f044 0408 	orrmi.w	r4, r4, #8
 800c5a0:	9700      	str	r7, [sp, #0]
 800c5a2:	f7f3 fdf7 	bl	8000194 <strlen>
 800c5a6:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800c5aa:	2401      	movs	r4, #1
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	4649      	mov	r1, r9
 800c5b0:	beab      	bkpt	0x00ab
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	2c00      	cmp	r4, #0
 800c5b6:	db08      	blt.n	800c5ca <_swiopen+0x7e>
 800c5b8:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800c5bc:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f8c8 3004 	str.w	r3, [r8, #4]
 800c5c6:	462c      	mov	r4, r5
 800c5c8:	e014      	b.n	800c5f4 <_swiopen+0xa8>
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f7ff fe8c 	bl	800c2e8 <error>
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	e00f      	b.n	800c5f4 <_swiopen+0xa8>
 800c5d4:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800c5d8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800c5dc:	46e9      	mov	r9, sp
 800c5de:	d1cb      	bne.n	800c578 <_swiopen+0x2c>
 800c5e0:	4649      	mov	r1, r9
 800c5e2:	4638      	mov	r0, r7
 800c5e4:	f7ff ff95 	bl	800c512 <_stat>
 800c5e8:	3001      	adds	r0, #1
 800c5ea:	d0c5      	beq.n	800c578 <_swiopen+0x2c>
 800c5ec:	f7fc fe24 	bl	8009238 <__errno>
 800c5f0:	2311      	movs	r3, #17
 800c5f2:	6003      	str	r3, [r0, #0]
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	b017      	add	sp, #92	; 0x5c
 800c5f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5fc:	20000554 	.word	0x20000554

0800c600 <_get_semihosting_exts>:
 800c600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c604:	4606      	mov	r6, r0
 800c606:	460f      	mov	r7, r1
 800c608:	482a      	ldr	r0, [pc, #168]	; (800c6b4 <_get_semihosting_exts+0xb4>)
 800c60a:	2100      	movs	r1, #0
 800c60c:	4615      	mov	r5, r2
 800c60e:	f7ff ff9d 	bl	800c54c <_swiopen>
 800c612:	462a      	mov	r2, r5
 800c614:	4604      	mov	r4, r0
 800c616:	2100      	movs	r1, #0
 800c618:	4630      	mov	r0, r6
 800c61a:	f7fc fe4d 	bl	80092b8 <memset>
 800c61e:	1c63      	adds	r3, r4, #1
 800c620:	d016      	beq.n	800c650 <_get_semihosting_exts+0x50>
 800c622:	4620      	mov	r0, r4
 800c624:	f7ff fe46 	bl	800c2b4 <findslot>
 800c628:	f04f 090c 	mov.w	r9, #12
 800c62c:	4680      	mov	r8, r0
 800c62e:	4648      	mov	r0, r9
 800c630:	4641      	mov	r1, r8
 800c632:	beab      	bkpt	0x00ab
 800c634:	4680      	mov	r8, r0
 800c636:	4640      	mov	r0, r8
 800c638:	f7ff fe64 	bl	800c304 <checkerror>
 800c63c:	2803      	cmp	r0, #3
 800c63e:	dd02      	ble.n	800c646 <_get_semihosting_exts+0x46>
 800c640:	1ec3      	subs	r3, r0, #3
 800c642:	42ab      	cmp	r3, r5
 800c644:	dc08      	bgt.n	800c658 <_get_semihosting_exts+0x58>
 800c646:	4620      	mov	r0, r4
 800c648:	f7ff ff0c 	bl	800c464 <_close>
 800c64c:	f04f 34ff 	mov.w	r4, #4294967295
 800c650:	4620      	mov	r0, r4
 800c652:	b003      	add	sp, #12
 800c654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c658:	2204      	movs	r2, #4
 800c65a:	eb0d 0102 	add.w	r1, sp, r2
 800c65e:	4620      	mov	r0, r4
 800c660:	f7ff fe65 	bl	800c32e <_read>
 800c664:	2803      	cmp	r0, #3
 800c666:	ddee      	ble.n	800c646 <_get_semihosting_exts+0x46>
 800c668:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c66c:	2b53      	cmp	r3, #83	; 0x53
 800c66e:	d1ea      	bne.n	800c646 <_get_semihosting_exts+0x46>
 800c670:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c674:	2b48      	cmp	r3, #72	; 0x48
 800c676:	d1e6      	bne.n	800c646 <_get_semihosting_exts+0x46>
 800c678:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c67c:	2b46      	cmp	r3, #70	; 0x46
 800c67e:	d1e2      	bne.n	800c646 <_get_semihosting_exts+0x46>
 800c680:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c684:	2b42      	cmp	r3, #66	; 0x42
 800c686:	d1de      	bne.n	800c646 <_get_semihosting_exts+0x46>
 800c688:	2201      	movs	r2, #1
 800c68a:	4639      	mov	r1, r7
 800c68c:	4620      	mov	r0, r4
 800c68e:	f7ff fe6a 	bl	800c366 <_swilseek>
 800c692:	2800      	cmp	r0, #0
 800c694:	dbd7      	blt.n	800c646 <_get_semihosting_exts+0x46>
 800c696:	462a      	mov	r2, r5
 800c698:	4631      	mov	r1, r6
 800c69a:	4620      	mov	r0, r4
 800c69c:	f7ff fe47 	bl	800c32e <_read>
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f7ff fede 	bl	800c464 <_close>
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f7ff fe2b 	bl	800c304 <checkerror>
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	e7ce      	b.n	800c650 <_get_semihosting_exts+0x50>
 800c6b2:	bf00      	nop
 800c6b4:	0800d30b 	.word	0x0800d30b

0800c6b8 <initialise_semihosting_exts>:
 800c6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6ba:	4d0a      	ldr	r5, [pc, #40]	; (800c6e4 <initialise_semihosting_exts+0x2c>)
 800c6bc:	4c0a      	ldr	r4, [pc, #40]	; (800c6e8 <initialise_semihosting_exts+0x30>)
 800c6be:	2100      	movs	r1, #0
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	a801      	add	r0, sp, #4
 800c6c4:	6029      	str	r1, [r5, #0]
 800c6c6:	6022      	str	r2, [r4, #0]
 800c6c8:	f7ff ff9a 	bl	800c600 <_get_semihosting_exts>
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	dd07      	ble.n	800c6e0 <initialise_semihosting_exts+0x28>
 800c6d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c6d4:	f003 0201 	and.w	r2, r3, #1
 800c6d8:	f003 0302 	and.w	r3, r3, #2
 800c6dc:	602a      	str	r2, [r5, #0]
 800c6de:	6023      	str	r3, [r4, #0]
 800c6e0:	b003      	add	sp, #12
 800c6e2:	bd30      	pop	{r4, r5, pc}
 800c6e4:	200001e0 	.word	0x200001e0
 800c6e8:	200001e4 	.word	0x200001e4

0800c6ec <_has_ext_exit_extended>:
 800c6ec:	b510      	push	{r4, lr}
 800c6ee:	4c04      	ldr	r4, [pc, #16]	; (800c700 <_has_ext_exit_extended+0x14>)
 800c6f0:	6823      	ldr	r3, [r4, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	da01      	bge.n	800c6fa <_has_ext_exit_extended+0xe>
 800c6f6:	f7ff ffdf 	bl	800c6b8 <initialise_semihosting_exts>
 800c6fa:	6820      	ldr	r0, [r4, #0]
 800c6fc:	bd10      	pop	{r4, pc}
 800c6fe:	bf00      	nop
 800c700:	200001e0 	.word	0x200001e0

0800c704 <_has_ext_stdout_stderr>:
 800c704:	b510      	push	{r4, lr}
 800c706:	4c04      	ldr	r4, [pc, #16]	; (800c718 <_has_ext_stdout_stderr+0x14>)
 800c708:	6823      	ldr	r3, [r4, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	da01      	bge.n	800c712 <_has_ext_stdout_stderr+0xe>
 800c70e:	f7ff ffd3 	bl	800c6b8 <initialise_semihosting_exts>
 800c712:	6820      	ldr	r0, [r4, #0]
 800c714:	bd10      	pop	{r4, pc}
 800c716:	bf00      	nop
 800c718:	200001e4 	.word	0x200001e4

0800c71c <initialise_monitor_handles>:
 800c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c720:	b085      	sub	sp, #20
 800c722:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800c7d4 <initialise_monitor_handles+0xb8>
 800c726:	f8cd 9004 	str.w	r9, [sp, #4]
 800c72a:	2303      	movs	r3, #3
 800c72c:	2400      	movs	r4, #0
 800c72e:	9303      	str	r3, [sp, #12]
 800c730:	af01      	add	r7, sp, #4
 800c732:	9402      	str	r4, [sp, #8]
 800c734:	2501      	movs	r5, #1
 800c736:	4628      	mov	r0, r5
 800c738:	4639      	mov	r1, r7
 800c73a:	beab      	bkpt	0x00ab
 800c73c:	4605      	mov	r5, r0
 800c73e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800c7d8 <initialise_monitor_handles+0xbc>
 800c742:	4623      	mov	r3, r4
 800c744:	4c20      	ldr	r4, [pc, #128]	; (800c7c8 <initialise_monitor_handles+0xac>)
 800c746:	f8c8 5000 	str.w	r5, [r8]
 800c74a:	f04f 32ff 	mov.w	r2, #4294967295
 800c74e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800c752:	3301      	adds	r3, #1
 800c754:	2b14      	cmp	r3, #20
 800c756:	d1fa      	bne.n	800c74e <initialise_monitor_handles+0x32>
 800c758:	f7ff ffd4 	bl	800c704 <_has_ext_stdout_stderr>
 800c75c:	4d1b      	ldr	r5, [pc, #108]	; (800c7cc <initialise_monitor_handles+0xb0>)
 800c75e:	b1d0      	cbz	r0, 800c796 <initialise_monitor_handles+0x7a>
 800c760:	f04f 0a03 	mov.w	sl, #3
 800c764:	2304      	movs	r3, #4
 800c766:	f8cd 9004 	str.w	r9, [sp, #4]
 800c76a:	2601      	movs	r6, #1
 800c76c:	f8cd a00c 	str.w	sl, [sp, #12]
 800c770:	9302      	str	r3, [sp, #8]
 800c772:	4630      	mov	r0, r6
 800c774:	4639      	mov	r1, r7
 800c776:	beab      	bkpt	0x00ab
 800c778:	4683      	mov	fp, r0
 800c77a:	4b15      	ldr	r3, [pc, #84]	; (800c7d0 <initialise_monitor_handles+0xb4>)
 800c77c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c780:	f8c3 b000 	str.w	fp, [r3]
 800c784:	2308      	movs	r3, #8
 800c786:	f8cd a00c 	str.w	sl, [sp, #12]
 800c78a:	9302      	str	r3, [sp, #8]
 800c78c:	4630      	mov	r0, r6
 800c78e:	4639      	mov	r1, r7
 800c790:	beab      	bkpt	0x00ab
 800c792:	4606      	mov	r6, r0
 800c794:	602e      	str	r6, [r5, #0]
 800c796:	682b      	ldr	r3, [r5, #0]
 800c798:	3301      	adds	r3, #1
 800c79a:	bf02      	ittt	eq
 800c79c:	4b0c      	ldreq	r3, [pc, #48]	; (800c7d0 <initialise_monitor_handles+0xb4>)
 800c79e:	681b      	ldreq	r3, [r3, #0]
 800c7a0:	602b      	streq	r3, [r5, #0]
 800c7a2:	2600      	movs	r6, #0
 800c7a4:	f8d8 3000 	ldr.w	r3, [r8]
 800c7a8:	6023      	str	r3, [r4, #0]
 800c7aa:	6066      	str	r6, [r4, #4]
 800c7ac:	f7ff ffaa 	bl	800c704 <_has_ext_stdout_stderr>
 800c7b0:	b130      	cbz	r0, 800c7c0 <initialise_monitor_handles+0xa4>
 800c7b2:	4b07      	ldr	r3, [pc, #28]	; (800c7d0 <initialise_monitor_handles+0xb4>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800c7ba:	682b      	ldr	r3, [r5, #0]
 800c7bc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800c7c0:	b005      	add	sp, #20
 800c7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20000554 	.word	0x20000554
 800c7cc:	20000548 	.word	0x20000548
 800c7d0:	20000550 	.word	0x20000550
 800c7d4:	0800d321 	.word	0x0800d321
 800c7d8:	2000054c 	.word	0x2000054c

0800c7dc <_isatty>:
 800c7dc:	b570      	push	{r4, r5, r6, lr}
 800c7de:	f7ff fd69 	bl	800c2b4 <findslot>
 800c7e2:	2509      	movs	r5, #9
 800c7e4:	4604      	mov	r4, r0
 800c7e6:	b920      	cbnz	r0, 800c7f2 <_isatty+0x16>
 800c7e8:	f7fc fd26 	bl	8009238 <__errno>
 800c7ec:	6005      	str	r5, [r0, #0]
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	bd70      	pop	{r4, r5, r6, pc}
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	4621      	mov	r1, r4
 800c7f6:	beab      	bkpt	0x00ab
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	2c01      	cmp	r4, #1
 800c7fc:	d0f7      	beq.n	800c7ee <_isatty+0x12>
 800c7fe:	f7fc fd1b 	bl	8009238 <__errno>
 800c802:	2400      	movs	r4, #0
 800c804:	4605      	mov	r5, r0
 800c806:	2613      	movs	r6, #19
 800c808:	4630      	mov	r0, r6
 800c80a:	4621      	mov	r1, r4
 800c80c:	beab      	bkpt	0x00ab
 800c80e:	4606      	mov	r6, r0
 800c810:	602e      	str	r6, [r5, #0]
 800c812:	e7ec      	b.n	800c7ee <_isatty+0x12>

0800c814 <_exit>:
 800c814:	4601      	mov	r1, r0
 800c816:	b508      	push	{r3, lr}
 800c818:	4a02      	ldr	r2, [pc, #8]	; (800c824 <_exit+0x10>)
 800c81a:	f04f 30ff 	mov.w	r0, #4294967295
 800c81e:	f000 f803 	bl	800c828 <_kill_shared>
 800c822:	bf00      	nop
 800c824:	00020026 	.word	0x00020026

0800c828 <_kill_shared>:
 800c828:	b507      	push	{r0, r1, r2, lr}
 800c82a:	e9cd 2100 	strd	r2, r1, [sp]
 800c82e:	f7ff ff5d 	bl	800c6ec <_has_ext_exit_extended>
 800c832:	2800      	cmp	r0, #0
 800c834:	bf14      	ite	ne
 800c836:	2420      	movne	r4, #32
 800c838:	2418      	moveq	r4, #24
 800c83a:	f7ff ff57 	bl	800c6ec <_has_ext_exit_extended>
 800c83e:	b120      	cbz	r0, 800c84a <_kill_shared+0x22>
 800c840:	466d      	mov	r5, sp
 800c842:	4620      	mov	r0, r4
 800c844:	4629      	mov	r1, r5
 800c846:	beab      	bkpt	0x00ab
 800c848:	4604      	mov	r4, r0
 800c84a:	9d00      	ldr	r5, [sp, #0]
 800c84c:	e7f9      	b.n	800c842 <_kill_shared+0x1a>
	...

0800c850 <_kill>:
 800c850:	2906      	cmp	r1, #6
 800c852:	b508      	push	{r3, lr}
 800c854:	bf0c      	ite	eq
 800c856:	4a02      	ldreq	r2, [pc, #8]	; (800c860 <_kill+0x10>)
 800c858:	4a02      	ldrne	r2, [pc, #8]	; (800c864 <_kill+0x14>)
 800c85a:	f7ff ffe5 	bl	800c828 <_kill_shared>
 800c85e:	bf00      	nop
 800c860:	00020023 	.word	0x00020023
 800c864:	00020026 	.word	0x00020026

0800c868 <log>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	ed2d 8b02 	vpush	{d8}
 800c86e:	ec55 4b10 	vmov	r4, r5, d0
 800c872:	f000 f839 	bl	800c8e8 <__ieee754_log>
 800c876:	4622      	mov	r2, r4
 800c878:	462b      	mov	r3, r5
 800c87a:	4620      	mov	r0, r4
 800c87c:	4629      	mov	r1, r5
 800c87e:	eeb0 8a40 	vmov.f32	s16, s0
 800c882:	eef0 8a60 	vmov.f32	s17, s1
 800c886:	f7f4 f939 	bl	8000afc <__aeabi_dcmpun>
 800c88a:	b998      	cbnz	r0, 800c8b4 <log+0x4c>
 800c88c:	2200      	movs	r2, #0
 800c88e:	2300      	movs	r3, #0
 800c890:	4620      	mov	r0, r4
 800c892:	4629      	mov	r1, r5
 800c894:	f7f4 f928 	bl	8000ae8 <__aeabi_dcmpgt>
 800c898:	b960      	cbnz	r0, 800c8b4 <log+0x4c>
 800c89a:	2200      	movs	r2, #0
 800c89c:	2300      	movs	r3, #0
 800c89e:	4620      	mov	r0, r4
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	f7f4 f8f9 	bl	8000a98 <__aeabi_dcmpeq>
 800c8a6:	b160      	cbz	r0, 800c8c2 <log+0x5a>
 800c8a8:	f7fc fcc6 	bl	8009238 <__errno>
 800c8ac:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800c8d8 <log+0x70>
 800c8b0:	2322      	movs	r3, #34	; 0x22
 800c8b2:	6003      	str	r3, [r0, #0]
 800c8b4:	eeb0 0a48 	vmov.f32	s0, s16
 800c8b8:	eef0 0a68 	vmov.f32	s1, s17
 800c8bc:	ecbd 8b02 	vpop	{d8}
 800c8c0:	bd38      	pop	{r3, r4, r5, pc}
 800c8c2:	f7fc fcb9 	bl	8009238 <__errno>
 800c8c6:	ecbd 8b02 	vpop	{d8}
 800c8ca:	2321      	movs	r3, #33	; 0x21
 800c8cc:	6003      	str	r3, [r0, #0]
 800c8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8d2:	4803      	ldr	r0, [pc, #12]	; (800c8e0 <log+0x78>)
 800c8d4:	f000 b9c4 	b.w	800cc60 <nan>
 800c8d8:	00000000 	.word	0x00000000
 800c8dc:	fff00000 	.word	0xfff00000
 800c8e0:	0800d300 	.word	0x0800d300
 800c8e4:	00000000 	.word	0x00000000

0800c8e8 <__ieee754_log>:
 800c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ec:	ec51 0b10 	vmov	r0, r1, d0
 800c8f0:	ed2d 8b04 	vpush	{d8-d9}
 800c8f4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c8f8:	b083      	sub	sp, #12
 800c8fa:	460d      	mov	r5, r1
 800c8fc:	da29      	bge.n	800c952 <__ieee754_log+0x6a>
 800c8fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c902:	4303      	orrs	r3, r0
 800c904:	ee10 2a10 	vmov	r2, s0
 800c908:	d10c      	bne.n	800c924 <__ieee754_log+0x3c>
 800c90a:	49cf      	ldr	r1, [pc, #828]	; (800cc48 <__ieee754_log+0x360>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	2300      	movs	r3, #0
 800c910:	2000      	movs	r0, #0
 800c912:	f7f3 ff83 	bl	800081c <__aeabi_ddiv>
 800c916:	ec41 0b10 	vmov	d0, r0, r1
 800c91a:	b003      	add	sp, #12
 800c91c:	ecbd 8b04 	vpop	{d8-d9}
 800c920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c924:	2900      	cmp	r1, #0
 800c926:	da05      	bge.n	800c934 <__ieee754_log+0x4c>
 800c928:	460b      	mov	r3, r1
 800c92a:	f7f3 fc95 	bl	8000258 <__aeabi_dsub>
 800c92e:	2200      	movs	r2, #0
 800c930:	2300      	movs	r3, #0
 800c932:	e7ee      	b.n	800c912 <__ieee754_log+0x2a>
 800c934:	4bc5      	ldr	r3, [pc, #788]	; (800cc4c <__ieee754_log+0x364>)
 800c936:	2200      	movs	r2, #0
 800c938:	f7f3 fe46 	bl	80005c8 <__aeabi_dmul>
 800c93c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c940:	460d      	mov	r5, r1
 800c942:	4ac3      	ldr	r2, [pc, #780]	; (800cc50 <__ieee754_log+0x368>)
 800c944:	4295      	cmp	r5, r2
 800c946:	dd06      	ble.n	800c956 <__ieee754_log+0x6e>
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	f7f3 fc86 	bl	800025c <__adddf3>
 800c950:	e7e1      	b.n	800c916 <__ieee754_log+0x2e>
 800c952:	2300      	movs	r3, #0
 800c954:	e7f5      	b.n	800c942 <__ieee754_log+0x5a>
 800c956:	152c      	asrs	r4, r5, #20
 800c958:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c95c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c960:	441c      	add	r4, r3
 800c962:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c966:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c96a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c96e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c972:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c976:	ea42 0105 	orr.w	r1, r2, r5
 800c97a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c97e:	2200      	movs	r2, #0
 800c980:	4bb4      	ldr	r3, [pc, #720]	; (800cc54 <__ieee754_log+0x36c>)
 800c982:	f7f3 fc69 	bl	8000258 <__aeabi_dsub>
 800c986:	1cab      	adds	r3, r5, #2
 800c988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	4682      	mov	sl, r0
 800c990:	468b      	mov	fp, r1
 800c992:	f04f 0200 	mov.w	r2, #0
 800c996:	dc53      	bgt.n	800ca40 <__ieee754_log+0x158>
 800c998:	2300      	movs	r3, #0
 800c99a:	f7f4 f87d 	bl	8000a98 <__aeabi_dcmpeq>
 800c99e:	b1d0      	cbz	r0, 800c9d6 <__ieee754_log+0xee>
 800c9a0:	2c00      	cmp	r4, #0
 800c9a2:	f000 8122 	beq.w	800cbea <__ieee754_log+0x302>
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f7f3 fda4 	bl	80004f4 <__aeabi_i2d>
 800c9ac:	a390      	add	r3, pc, #576	; (adr r3, 800cbf0 <__ieee754_log+0x308>)
 800c9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460f      	mov	r7, r1
 800c9b6:	f7f3 fe07 	bl	80005c8 <__aeabi_dmul>
 800c9ba:	a38f      	add	r3, pc, #572	; (adr r3, 800cbf8 <__ieee754_log+0x310>)
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	460d      	mov	r5, r1
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	4639      	mov	r1, r7
 800c9c8:	f7f3 fdfe 	bl	80005c8 <__aeabi_dmul>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	e7ba      	b.n	800c94c <__ieee754_log+0x64>
 800c9d6:	a38a      	add	r3, pc, #552	; (adr r3, 800cc00 <__ieee754_log+0x318>)
 800c9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9dc:	4650      	mov	r0, sl
 800c9de:	4659      	mov	r1, fp
 800c9e0:	f7f3 fdf2 	bl	80005c8 <__aeabi_dmul>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	499b      	ldr	r1, [pc, #620]	; (800cc58 <__ieee754_log+0x370>)
 800c9ec:	f7f3 fc34 	bl	8000258 <__aeabi_dsub>
 800c9f0:	4652      	mov	r2, sl
 800c9f2:	4606      	mov	r6, r0
 800c9f4:	460f      	mov	r7, r1
 800c9f6:	465b      	mov	r3, fp
 800c9f8:	4650      	mov	r0, sl
 800c9fa:	4659      	mov	r1, fp
 800c9fc:	f7f3 fde4 	bl	80005c8 <__aeabi_dmul>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	4630      	mov	r0, r6
 800ca06:	4639      	mov	r1, r7
 800ca08:	f7f3 fdde 	bl	80005c8 <__aeabi_dmul>
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	460f      	mov	r7, r1
 800ca10:	b914      	cbnz	r4, 800ca18 <__ieee754_log+0x130>
 800ca12:	4632      	mov	r2, r6
 800ca14:	463b      	mov	r3, r7
 800ca16:	e0a2      	b.n	800cb5e <__ieee754_log+0x276>
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f7f3 fd6b 	bl	80004f4 <__aeabi_i2d>
 800ca1e:	a374      	add	r3, pc, #464	; (adr r3, 800cbf0 <__ieee754_log+0x308>)
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	4680      	mov	r8, r0
 800ca26:	4689      	mov	r9, r1
 800ca28:	f7f3 fdce 	bl	80005c8 <__aeabi_dmul>
 800ca2c:	a372      	add	r3, pc, #456	; (adr r3, 800cbf8 <__ieee754_log+0x310>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	4604      	mov	r4, r0
 800ca34:	460d      	mov	r5, r1
 800ca36:	4640      	mov	r0, r8
 800ca38:	4649      	mov	r1, r9
 800ca3a:	f7f3 fdc5 	bl	80005c8 <__aeabi_dmul>
 800ca3e:	e0a7      	b.n	800cb90 <__ieee754_log+0x2a8>
 800ca40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca44:	f7f3 fc0a 	bl	800025c <__adddf3>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	4650      	mov	r0, sl
 800ca4e:	4659      	mov	r1, fp
 800ca50:	f7f3 fee4 	bl	800081c <__aeabi_ddiv>
 800ca54:	ec41 0b18 	vmov	d8, r0, r1
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f7f3 fd4b 	bl	80004f4 <__aeabi_i2d>
 800ca5e:	ec53 2b18 	vmov	r2, r3, d8
 800ca62:	ec41 0b19 	vmov	d9, r0, r1
 800ca66:	ec51 0b18 	vmov	r0, r1, d8
 800ca6a:	f7f3 fdad 	bl	80005c8 <__aeabi_dmul>
 800ca6e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ca72:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ca76:	9301      	str	r3, [sp, #4]
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4680      	mov	r8, r0
 800ca7e:	4689      	mov	r9, r1
 800ca80:	f7f3 fda2 	bl	80005c8 <__aeabi_dmul>
 800ca84:	a360      	add	r3, pc, #384	; (adr r3, 800cc08 <__ieee754_log+0x320>)
 800ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	460f      	mov	r7, r1
 800ca8e:	f7f3 fd9b 	bl	80005c8 <__aeabi_dmul>
 800ca92:	a35f      	add	r3, pc, #380	; (adr r3, 800cc10 <__ieee754_log+0x328>)
 800ca94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca98:	f7f3 fbe0 	bl	800025c <__adddf3>
 800ca9c:	4632      	mov	r2, r6
 800ca9e:	463b      	mov	r3, r7
 800caa0:	f7f3 fd92 	bl	80005c8 <__aeabi_dmul>
 800caa4:	a35c      	add	r3, pc, #368	; (adr r3, 800cc18 <__ieee754_log+0x330>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	f7f3 fbd7 	bl	800025c <__adddf3>
 800caae:	4632      	mov	r2, r6
 800cab0:	463b      	mov	r3, r7
 800cab2:	f7f3 fd89 	bl	80005c8 <__aeabi_dmul>
 800cab6:	a35a      	add	r3, pc, #360	; (adr r3, 800cc20 <__ieee754_log+0x338>)
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	f7f3 fbce 	bl	800025c <__adddf3>
 800cac0:	4642      	mov	r2, r8
 800cac2:	464b      	mov	r3, r9
 800cac4:	f7f3 fd80 	bl	80005c8 <__aeabi_dmul>
 800cac8:	a357      	add	r3, pc, #348	; (adr r3, 800cc28 <__ieee754_log+0x340>)
 800caca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cace:	4680      	mov	r8, r0
 800cad0:	4689      	mov	r9, r1
 800cad2:	4630      	mov	r0, r6
 800cad4:	4639      	mov	r1, r7
 800cad6:	f7f3 fd77 	bl	80005c8 <__aeabi_dmul>
 800cada:	a355      	add	r3, pc, #340	; (adr r3, 800cc30 <__ieee754_log+0x348>)
 800cadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae0:	f7f3 fbbc 	bl	800025c <__adddf3>
 800cae4:	4632      	mov	r2, r6
 800cae6:	463b      	mov	r3, r7
 800cae8:	f7f3 fd6e 	bl	80005c8 <__aeabi_dmul>
 800caec:	a352      	add	r3, pc, #328	; (adr r3, 800cc38 <__ieee754_log+0x350>)
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	f7f3 fbb3 	bl	800025c <__adddf3>
 800caf6:	4632      	mov	r2, r6
 800caf8:	463b      	mov	r3, r7
 800cafa:	f7f3 fd65 	bl	80005c8 <__aeabi_dmul>
 800cafe:	460b      	mov	r3, r1
 800cb00:	4602      	mov	r2, r0
 800cb02:	4649      	mov	r1, r9
 800cb04:	4640      	mov	r0, r8
 800cb06:	f7f3 fba9 	bl	800025c <__adddf3>
 800cb0a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cb0e:	9b01      	ldr	r3, [sp, #4]
 800cb10:	3551      	adds	r5, #81	; 0x51
 800cb12:	431d      	orrs	r5, r3
 800cb14:	2d00      	cmp	r5, #0
 800cb16:	4680      	mov	r8, r0
 800cb18:	4689      	mov	r9, r1
 800cb1a:	dd48      	ble.n	800cbae <__ieee754_log+0x2c6>
 800cb1c:	4b4e      	ldr	r3, [pc, #312]	; (800cc58 <__ieee754_log+0x370>)
 800cb1e:	2200      	movs	r2, #0
 800cb20:	4650      	mov	r0, sl
 800cb22:	4659      	mov	r1, fp
 800cb24:	f7f3 fd50 	bl	80005c8 <__aeabi_dmul>
 800cb28:	4652      	mov	r2, sl
 800cb2a:	465b      	mov	r3, fp
 800cb2c:	f7f3 fd4c 	bl	80005c8 <__aeabi_dmul>
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	4606      	mov	r6, r0
 800cb36:	460f      	mov	r7, r1
 800cb38:	4640      	mov	r0, r8
 800cb3a:	4649      	mov	r1, r9
 800cb3c:	f7f3 fb8e 	bl	800025c <__adddf3>
 800cb40:	ec53 2b18 	vmov	r2, r3, d8
 800cb44:	f7f3 fd40 	bl	80005c8 <__aeabi_dmul>
 800cb48:	4680      	mov	r8, r0
 800cb4a:	4689      	mov	r9, r1
 800cb4c:	b964      	cbnz	r4, 800cb68 <__ieee754_log+0x280>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	4630      	mov	r0, r6
 800cb54:	4639      	mov	r1, r7
 800cb56:	f7f3 fb7f 	bl	8000258 <__aeabi_dsub>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	4650      	mov	r0, sl
 800cb60:	4659      	mov	r1, fp
 800cb62:	f7f3 fb79 	bl	8000258 <__aeabi_dsub>
 800cb66:	e6d6      	b.n	800c916 <__ieee754_log+0x2e>
 800cb68:	a321      	add	r3, pc, #132	; (adr r3, 800cbf0 <__ieee754_log+0x308>)
 800cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6e:	ec51 0b19 	vmov	r0, r1, d9
 800cb72:	f7f3 fd29 	bl	80005c8 <__aeabi_dmul>
 800cb76:	a320      	add	r3, pc, #128	; (adr r3, 800cbf8 <__ieee754_log+0x310>)
 800cb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	460d      	mov	r5, r1
 800cb80:	ec51 0b19 	vmov	r0, r1, d9
 800cb84:	f7f3 fd20 	bl	80005c8 <__aeabi_dmul>
 800cb88:	4642      	mov	r2, r8
 800cb8a:	464b      	mov	r3, r9
 800cb8c:	f7f3 fb66 	bl	800025c <__adddf3>
 800cb90:	4602      	mov	r2, r0
 800cb92:	460b      	mov	r3, r1
 800cb94:	4630      	mov	r0, r6
 800cb96:	4639      	mov	r1, r7
 800cb98:	f7f3 fb5e 	bl	8000258 <__aeabi_dsub>
 800cb9c:	4652      	mov	r2, sl
 800cb9e:	465b      	mov	r3, fp
 800cba0:	f7f3 fb5a 	bl	8000258 <__aeabi_dsub>
 800cba4:	4602      	mov	r2, r0
 800cba6:	460b      	mov	r3, r1
 800cba8:	4620      	mov	r0, r4
 800cbaa:	4629      	mov	r1, r5
 800cbac:	e7d9      	b.n	800cb62 <__ieee754_log+0x27a>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4650      	mov	r0, sl
 800cbb4:	4659      	mov	r1, fp
 800cbb6:	f7f3 fb4f 	bl	8000258 <__aeabi_dsub>
 800cbba:	ec53 2b18 	vmov	r2, r3, d8
 800cbbe:	f7f3 fd03 	bl	80005c8 <__aeabi_dmul>
 800cbc2:	4606      	mov	r6, r0
 800cbc4:	460f      	mov	r7, r1
 800cbc6:	2c00      	cmp	r4, #0
 800cbc8:	f43f af23 	beq.w	800ca12 <__ieee754_log+0x12a>
 800cbcc:	a308      	add	r3, pc, #32	; (adr r3, 800cbf0 <__ieee754_log+0x308>)
 800cbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd2:	ec51 0b19 	vmov	r0, r1, d9
 800cbd6:	f7f3 fcf7 	bl	80005c8 <__aeabi_dmul>
 800cbda:	a307      	add	r3, pc, #28	; (adr r3, 800cbf8 <__ieee754_log+0x310>)
 800cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	460d      	mov	r5, r1
 800cbe4:	ec51 0b19 	vmov	r0, r1, d9
 800cbe8:	e727      	b.n	800ca3a <__ieee754_log+0x152>
 800cbea:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800cc40 <__ieee754_log+0x358>
 800cbee:	e694      	b.n	800c91a <__ieee754_log+0x32>
 800cbf0:	fee00000 	.word	0xfee00000
 800cbf4:	3fe62e42 	.word	0x3fe62e42
 800cbf8:	35793c76 	.word	0x35793c76
 800cbfc:	3dea39ef 	.word	0x3dea39ef
 800cc00:	55555555 	.word	0x55555555
 800cc04:	3fd55555 	.word	0x3fd55555
 800cc08:	df3e5244 	.word	0xdf3e5244
 800cc0c:	3fc2f112 	.word	0x3fc2f112
 800cc10:	96cb03de 	.word	0x96cb03de
 800cc14:	3fc74664 	.word	0x3fc74664
 800cc18:	94229359 	.word	0x94229359
 800cc1c:	3fd24924 	.word	0x3fd24924
 800cc20:	55555593 	.word	0x55555593
 800cc24:	3fe55555 	.word	0x3fe55555
 800cc28:	d078c69f 	.word	0xd078c69f
 800cc2c:	3fc39a09 	.word	0x3fc39a09
 800cc30:	1d8e78af 	.word	0x1d8e78af
 800cc34:	3fcc71c5 	.word	0x3fcc71c5
 800cc38:	9997fa04 	.word	0x9997fa04
 800cc3c:	3fd99999 	.word	0x3fd99999
	...
 800cc48:	c3500000 	.word	0xc3500000
 800cc4c:	43500000 	.word	0x43500000
 800cc50:	7fefffff 	.word	0x7fefffff
 800cc54:	3ff00000 	.word	0x3ff00000
 800cc58:	3fe00000 	.word	0x3fe00000
 800cc5c:	00000000 	.word	0x00000000

0800cc60 <nan>:
 800cc60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cc68 <nan+0x8>
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop
 800cc68:	00000000 	.word	0x00000000
 800cc6c:	7ff80000 	.word	0x7ff80000

0800cc70 <_init>:
 800cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc72:	bf00      	nop
 800cc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc76:	bc08      	pop	{r3}
 800cc78:	469e      	mov	lr, r3
 800cc7a:	4770      	bx	lr

0800cc7c <_fini>:
 800cc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7e:	bf00      	nop
 800cc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc82:	bc08      	pop	{r3}
 800cc84:	469e      	mov	lr, r3
 800cc86:	4770      	bx	lr


projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1d8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800c318  0800c318  0001c318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c94c  0800c94c  0001c94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c950  0800c950  0001c950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000004  0800c954  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000360  200001e0  0800cb30  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000540  0800cb30  00020540  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e66d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004240  00000000  00000000  0003e87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001b78  00000000  00000000  00042ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001a20  00000000  00000000  00044638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00021fb6  00000000  00000000  00046058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f14f  00000000  00000000  0006800e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cfbca  00000000  00000000  0008715d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00156d27  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000864c  00000000  00000000  00156d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c300 	.word	0x0800c300

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800c300 	.word	0x0800c300

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c64:	4a2f      	ldr	r2, [pc, #188]	; (8000d24 <MX_ADC1_Init+0xd8>)
 8000c66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c82:	2204      	movs	r2, #4
 8000c84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cc4:	221c      	movs	r2, #28
 8000cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cda:	4811      	ldr	r0, [pc, #68]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000cdc:	f001 fe7e 	bl	80029dc <HAL_ADC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000ce6:	f000 fd49 	bl	800177c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_ADC1_Init+0xdc>)
 8000cec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf6:	237f      	movs	r3, #127	; 0x7f
 8000cf8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_ADC1_Init+0xd4>)
 8000d08:	f002 f8d6 	bl	8002eb8 <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000d12:	f000 fd33 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200001fc 	.word	0x200001fc
 8000d24:	50040000 	.word	0x50040000
 8000d28:	14f00020 	.word	0x14f00020

08000d2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	2224      	movs	r2, #36	; 0x24
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f008 f8d5 	bl	8008efc <memset>
  if(adcHandle->Instance==ADC1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <HAL_ADC_MspInit+0x80>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d123      	bne.n	8000da4 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d60:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL;
 8000d62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d66:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f004 fe67 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d78:	f000 fd00 	bl	800177c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d80:	f7ff ff4a 	bl	8000c18 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff ff47 	bl	8000c18 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f003 f942 	bl	8004028 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000da4:	bf00      	nop
 8000da6:	3740      	adds	r7, #64	; 0x40
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	50040000 	.word	0x50040000

08000db0 <read_raw>:
	 voltage =raw*VDDA/4095;
	 //printf("voltage in adc_control %.5f\n", voltage);
	 return voltage;
}

uint16_t read_raw(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
		 HAL_ADC_Start(&hadc1);
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <read_raw+0x30>)
 8000db8:	f001 ff5c 	bl	8002c74 <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <read_raw+0x30>)
 8000dc2:	f001 ffde 	bl	8002d82 <HAL_ADC_PollForConversion>
		 uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <read_raw+0x30>)
 8000dc8:	f002 f868 	bl	8002e9c <HAL_ADC_GetValue>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	80fb      	strh	r3, [r7, #6]
		 HAL_ADC_Stop(&hadc1);
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <read_raw+0x30>)
 8000dd2:	f001 ffa3 	bl	8002d1c <HAL_ADC_Stop>
		 //printf("voltage in adc_control %.5f\n", voltage);
		 return raw;
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200001fc 	.word	0x200001fc

08000de4 <process_arguments>:
#include <string.h>
#include "main.h"
#include "command_processor.h"


void process_arguments(char* args, uint32_t* global_args){
 8000de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000de8:	b08b      	sub	sp, #44	; 0x2c
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
	uint32_t size = strlen(args);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff f9cf 	bl	8000194 <strlen>
 8000df6:	61b8      	str	r0, [r7, #24]
	uint32_t global_i = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
	// '()' is minimum string, if not return
	if (size<2){
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d978      	bls.n	8000ef4 <process_arguments+0x110>
		return;
	}
	// if first char is not (, something is wrong
	if (args[0] != '('){
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b28      	cmp	r3, #40	; 0x28
 8000e08:	d176      	bne.n	8000ef8 <process_arguments+0x114>
		return;
	}
	// last separation symbol
	uint32_t last_symbol_i = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
	// main loop, go char by char and add to args
	for (uint32_t i=1; i<size; i++){
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	e06a      	b.n	8000eea <process_arguments+0x106>
		// if closing parenthessis ) is found, return
		uint8_t c = args[i];
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	75fb      	strb	r3, [r7, #23]

		// parse int
		if (c == ',' || c == ')'){
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	2b2c      	cmp	r3, #44	; 0x2c
 8000e22:	d002      	beq.n	8000e2a <process_arguments+0x46>
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b29      	cmp	r3, #41	; 0x29
 8000e28:	d159      	bne.n	8000ede <process_arguments+0xfa>
 8000e2a:	466b      	mov	r3, sp
 8000e2c:	461e      	mov	r6, r3
			// if not long enough string is found, e.g. (,,)
			if (i-last_symbol_i-1 <= 0){
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d103      	bne.n	8000e40 <process_arguments+0x5c>
				last_symbol_i = i;
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	46b5      	mov	sp, r6
 8000e3e:	e051      	b.n	8000ee4 <process_arguments+0x100>
				continue;
			}
			char arg_as_str[i - last_symbol_i];
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	1ad1      	subs	r1, r2, r3
 8000e46:	460b      	mov	r3, r1
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	461d      	mov	r5, r3
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	00eb      	lsls	r3, r5, #3
 8000e5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e60:	00e2      	lsls	r2, r4, #3
 8000e62:	2300      	movs	r3, #0
 8000e64:	4688      	mov	r8, r1
 8000e66:	4699      	mov	r9, r3
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e7c:	1dcb      	adds	r3, r1, #7
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	ebad 0d03 	sub.w	sp, sp, r3
 8000e86:	466b      	mov	r3, sp
 8000e88:	3300      	adds	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
			// add delimiting symbol
			arg_as_str[i - last_symbol_i-1] = '\0';
 8000e8c:	69fa      	ldr	r2, [r7, #28]
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	3b01      	subs	r3, #1
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	2100      	movs	r1, #0
 8000e98:	54d1      	strb	r1, [r2, r3]
			memcpy(arg_as_str, args+last_symbol_i+1, i - last_symbol_i-1);
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	18d1      	adds	r1, r2, r3
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f008 f817 	bl	8008ee0 <memcpy>
			last_symbol_i = i;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	623b      	str	r3, [r7, #32]
			// add to global_args
			uint32_t parsed_int = atoi(arg_as_str);
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f007 ffdc 	bl	8008e74 <atoi>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60bb      	str	r3, [r7, #8]
			global_args[global_i] = parsed_int;
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	601a      	str	r2, [r3, #0]
			global_i++;
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	3301      	adds	r3, #1
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
			if (global_i > MAX_ARG_LEN){
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	2b0a      	cmp	r3, #10
 8000ed6:	d901      	bls.n	8000edc <process_arguments+0xf8>
 8000ed8:	46b5      	mov	sp, r6
 8000eda:	e010      	b.n	8000efe <process_arguments+0x11a>
 8000edc:	46b5      	mov	sp, r6
				return;
			}
		}
		if (c == ')'){
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
 8000ee0:	2b29      	cmp	r3, #41	; 0x29
 8000ee2:	d00b      	beq.n	8000efc <process_arguments+0x118>
	for (uint32_t i=1; i<size; i++){
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d390      	bcc.n	8000e14 <process_arguments+0x30>
 8000ef2:	e004      	b.n	8000efe <process_arguments+0x11a>
		return;
 8000ef4:	bf00      	nop
 8000ef6:	e002      	b.n	8000efe <process_arguments+0x11a>
		return;
 8000ef8:	bf00      	nop
 8000efa:	e000      	b.n	8000efe <process_arguments+0x11a>
					return;
 8000efc:	bf00      	nop
		}
	}
}
 8000efe:	372c      	adds	r7, #44	; 0x2c
 8000f00:	46bd      	mov	sp, r7
 8000f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000f08 <process_command_string>:

// Process string commands
void process_command_string(char* string, command_t* global_command, uint32_t* global_args){
 8000f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f0c:	b08f      	sub	sp, #60	; 0x3c
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6178      	str	r0, [r7, #20]
 8000f12:	6139      	str	r1, [r7, #16]
 8000f14:	60fa      	str	r2, [r7, #12]
 8000f16:	466b      	mov	r3, sp
 8000f18:	461e      	mov	r6, r3
	char AMS_substr[4];
	AMS_substr[3] = '\0';
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	77fb      	strb	r3, [r7, #31]
	memcpy(AMS_substr, &string[0], 3);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	2203      	movs	r2, #3
 8000f24:	6979      	ldr	r1, [r7, #20]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f007 ffda 	bl	8008ee0 <memcpy>
	// If command doesnt begin with AMS set global_command to NONE and return
	if (strcmp(AMS_substr, "AMS") != 0){
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	498b      	ldr	r1, [pc, #556]	; (8001160 <process_command_string+0x258>)
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f924 	bl	8000180 <strcmp>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <process_command_string+0x40>
		*global_command = AMS_NONE;
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	46b5      	mov	sp, r6
 8000f46:	e107      	b.n	8001158 <process_command_string+0x250>
		return;
	}
	// find string between _ and (
	uint8_t start_index = strchr(string, '_') - string;
 8000f48:	215f      	movs	r1, #95	; 0x5f
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f008 fde6 	bl	8009b1c <strchr>
 8000f50:	4602      	mov	r2, r0
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t end_index = strchr(string, '(') - string;
 8000f5a:	2128      	movs	r1, #40	; 0x28
 8000f5c:	6978      	ldr	r0, [r7, #20]
 8000f5e:	f008 fddd 	bl	8009b1c <strchr>
 8000f62:	4602      	mov	r2, r0
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	char command[end_index - start_index];
 8000f6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000f70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f74:	1ad1      	subs	r1, r2, r3
 8000f76:	1e4b      	subs	r3, r1, #1
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
 8000f7a:	460a      	mov	r2, r1
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	603a      	str	r2, [r7, #0]
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	00c3      	lsls	r3, r0, #3
 8000f8e:	6838      	ldr	r0, [r7, #0]
 8000f90:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f94:	6838      	ldr	r0, [r7, #0]
 8000f96:	00c2      	lsls	r2, r0, #3
 8000f98:	460a      	mov	r2, r1
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	4692      	mov	sl, r2
 8000f9e:	469b      	mov	fp, r3
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	3307      	adds	r3, #7
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	ebad 0d03 	sub.w	sp, sp, r3
 8000fc0:	466b      	mov	r3, sp
 8000fc2:	3300      	adds	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	command[end_index - start_index - 1] = '\0';
 8000fc6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000fca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	54d1      	strb	r1, [r2, r3]
	memcpy(command, &string[start_index+1], end_index-start_index-1);
 8000fd8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fdc:	3301      	adds	r3, #1
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	18d1      	adds	r1, r2, r3
 8000fe2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000fe6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	3b01      	subs	r3, #1
 8000fee:	461a      	mov	r2, r3
 8000ff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ff2:	f007 ff75 	bl	8008ee0 <memcpy>
	// set command based on string

	if (strcmp(command, "VERSION") == 0){
 8000ff6:	495b      	ldr	r1, [pc, #364]	; (8001164 <process_command_string+0x25c>)
 8000ff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ffa:	f7ff f8c1 	bl	8000180 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d103      	bne.n	800100c <process_command_string+0x104>
		*global_command = AMS_VERSION;
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2203      	movs	r2, #3
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e047      	b.n	800109c <process_command_string+0x194>
	}else if (strcmp(command, "SWEEP") == 0){
 800100c:	4956      	ldr	r1, [pc, #344]	; (8001168 <process_command_string+0x260>)
 800100e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001010:	f7ff f8b6 	bl	8000180 <strcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <process_command_string+0x120>
		*global_command = AMS_SWEEP;
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
		printf("SETTING\n");
 8001020:	4852      	ldr	r0, [pc, #328]	; (800116c <process_command_string+0x264>)
 8001022:	f008 fd43 	bl	8009aac <puts>
 8001026:	e039      	b.n	800109c <process_command_string+0x194>
	}else if (strcmp(command, "REGISTER")== 0){
 8001028:	4951      	ldr	r1, [pc, #324]	; (8001170 <process_command_string+0x268>)
 800102a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800102c:	f7ff f8a8 	bl	8000180 <strcmp>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d103      	bne.n	800103e <process_command_string+0x136>
		*global_command = AMS_REGISTER;
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2202      	movs	r2, #2
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e02e      	b.n	800109c <process_command_string+0x194>
	}else if (strcmp(command, "SINGLE")== 0){
 800103e:	494d      	ldr	r1, [pc, #308]	; (8001174 <process_command_string+0x26c>)
 8001040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001042:	f7ff f89d 	bl	8000180 <strcmp>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d103      	bne.n	8001054 <process_command_string+0x14c>
		*global_command = AMS_SINGLE;
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	2204      	movs	r2, #4
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	e023      	b.n	800109c <process_command_string+0x194>
	}else if (strcmp(command, "HOWAREYOU")== 0){
 8001054:	4948      	ldr	r1, [pc, #288]	; (8001178 <process_command_string+0x270>)
 8001056:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001058:	f7ff f892 	bl	8000180 <strcmp>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <process_command_string+0x162>
		*global_command = AMS_HOWAREYOU;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2205      	movs	r2, #5
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e018      	b.n	800109c <process_command_string+0x194>
	}else if (strcmp(command, "STOP")== 0){
 800106a:	4944      	ldr	r1, [pc, #272]	; (800117c <process_command_string+0x274>)
 800106c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800106e:	f7ff f887 	bl	8000180 <strcmp>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <process_command_string+0x178>
		*global_command = AMS_STOP;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	2206      	movs	r2, #6
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e00d      	b.n	800109c <process_command_string+0x194>
	}else if (strcmp(command, "CHECK")== 0){
 8001080:	493f      	ldr	r1, [pc, #252]	; (8001180 <process_command_string+0x278>)
 8001082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001084:	f7ff f87c 	bl	8000180 <strcmp>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d103      	bne.n	8001096 <process_command_string+0x18e>
		*global_command = AMS_CHECK;
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	2207      	movs	r2, #7
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	e002      	b.n	800109c <process_command_string+0x194>
	}else{
		*global_command = AMS_NONE;
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
	}
	// process arguments (max length is 10)
	memcpy(command, &string[start_index], end_index-start_index+1);
 800109c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	18d1      	adds	r1, r2, r3
 80010a4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80010a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	3301      	adds	r3, #1
 80010b0:	461a      	mov	r2, r3
 80010b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010b4:	f007 ff14 	bl	8008ee0 <memcpy>
	uint8_t total_end_index = strchr(string, ')') - string;
 80010b8:	2129      	movs	r1, #41	; 0x29
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f008 fd2e 	bl	8009b1c <strchr>
 80010c0:	4602      	mov	r2, r0
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	char args[total_end_index - end_index + 2];
 80010ca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	1c99      	adds	r1, r3, #2
 80010d6:	1e4b      	subs	r3, r1, #1
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
 80010da:	460a      	mov	r2, r1
 80010dc:	2300      	movs	r3, #0
 80010de:	4690      	mov	r8, r2
 80010e0:	4699      	mov	r9, r3
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010f6:	460a      	mov	r2, r1
 80010f8:	2300      	movs	r3, #0
 80010fa:	4614      	mov	r4, r2
 80010fc:	461d      	mov	r5, r3
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	00eb      	lsls	r3, r5, #3
 8001108:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800110c:	00e2      	lsls	r2, r4, #3
 800110e:	460b      	mov	r3, r1
 8001110:	3307      	adds	r3, #7
 8001112:	08db      	lsrs	r3, r3, #3
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	ebad 0d03 	sub.w	sp, sp, r3
 800111a:	466b      	mov	r3, sp
 800111c:	3300      	adds	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
	args[total_end_index - end_index + 1] = '\0';
 8001120:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001124:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	3301      	adds	r3, #1
 800112c:	6a3a      	ldr	r2, [r7, #32]
 800112e:	2100      	movs	r1, #0
 8001130:	54d1      	strb	r1, [r2, r3]
	memcpy(args, &string[end_index], total_end_index-end_index+1);
 8001132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	18d1      	adds	r1, r2, r3
 800113a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800113e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	3301      	adds	r3, #1
 8001146:	461a      	mov	r2, r3
 8001148:	6a38      	ldr	r0, [r7, #32]
 800114a:	f007 fec9 	bl	8008ee0 <memcpy>

	process_arguments(args, global_args);
 800114e:	68f9      	ldr	r1, [r7, #12]
 8001150:	6a38      	ldr	r0, [r7, #32]
 8001152:	f7ff fe47 	bl	8000de4 <process_arguments>
 8001156:	46b5      	mov	sp, r6
}
 8001158:	373c      	adds	r7, #60	; 0x3c
 800115a:	46bd      	mov	sp, r7
 800115c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001160:	0800c318 	.word	0x0800c318
 8001164:	0800c31c 	.word	0x0800c31c
 8001168:	0800c324 	.word	0x0800c324
 800116c:	0800c32c 	.word	0x0800c32c
 8001170:	0800c334 	.word	0x0800c334
 8001174:	0800c340 	.word	0x0800c340
 8001178:	0800c348 	.word	0x0800c348
 800117c:	0800c354 	.word	0x0800c354
 8001180:	0800c35c 	.word	0x0800c35c

08001184 <LL_AHB1_GRP1_EnableClock>:
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800118c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011a8:	68fb      	ldr	r3, [r7, #12]
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011ba:	2004      	movs	r0, #4
 80011bc:	f7ff ffe2 	bl	8001184 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff ffdf 	bl	8001184 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	200b      	movs	r0, #11
 80011cc:	f002 fcab 	bl	8003b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011d0:	200b      	movs	r0, #11
 80011d2:	f002 fcc2 	bl	8003b5a <HAL_NVIC_EnableIRQ>

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}

080011da <LL_AHB2_GRP1_EnableClock>:
{
 80011da:	b480      	push	{r7}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4013      	ands	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff ffda 	bl	80011da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2002      	movs	r0, #2
 8001228:	f7ff ffd7 	bl	80011da <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|LED_RED_Pin
 800122c:	2200      	movs	r2, #0
 800122e:	f641 011c 	movw	r1, #6172	; 0x181c
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f003 f85f 	bl	80042f8 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2102      	movs	r1, #2
 800123e:	4825      	ldr	r0, [pc, #148]	; (80012d4 <MX_GPIO_Init+0xc8>)
 8001240:	f003 f85a 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2130      	movs	r1, #48	; 0x30
 8001248:	4822      	ldr	r0, [pc, #136]	; (80012d4 <MX_GPIO_Init+0xc8>)
 800124a:	f003 f855 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PAPin
                           PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|LED_RED_Pin
 800124e:	f641 031c 	movw	r3, #6172	; 0x181c
 8001252:	607b      	str	r3, [r7, #4]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f002 fede 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800126c:	2340      	movs	r3, #64	; 0x40
 800126e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f002 fed2 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001284:	2304      	movs	r3, #4
 8001286:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	480f      	ldr	r0, [pc, #60]	; (80012d4 <MX_GPIO_Init+0xc8>)
 8001296:	f002 fec7 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800129a:	2301      	movs	r3, #1
 800129c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	480a      	ldr	r0, [pc, #40]	; (80012d4 <MX_GPIO_Init+0xc8>)
 80012ac:	f002 febc 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012b0:	2332      	movs	r3, #50	; 0x32
 80012b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4803      	ldr	r0, [pc, #12]	; (80012d4 <MX_GPIO_Init+0xc8>)
 80012c6:	f002 feaf 	bl	8004028 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	48000400 	.word	0x48000400

080012d8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_IPCC_Init+0x20>)
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <MX_IPCC_Init+0x24>)
 8001314:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_IPCC_Init+0x20>)
 8001318:	f003 f820 	bl	800435c <HAL_IPCC_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001322:	f000 fa2b 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000260 	.word	0x20000260
 8001330:	58000c00 	.word	0x58000c00

08001334 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <HAL_IPCC_MspInit+0x44>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d113      	bne.n	800136e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001346:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800134a:	f7ff ffc5 	bl	80012d8 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	202c      	movs	r0, #44	; 0x2c
 8001354:	f002 fbe7 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001358:	202c      	movs	r0, #44	; 0x2c
 800135a:	f002 fbfe 	bl	8003b5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	202d      	movs	r0, #45	; 0x2d
 8001364:	f002 fbdf 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001368:	202d      	movs	r0, #45	; 0x2d
 800136a:	f002 fbf6 	bl	8003b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	58000c00 	.word	0x58000c00

0800137c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001384:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001388:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d013      	beq.n	80013bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001394:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001398:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800139c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00b      	beq.n	80013bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013a4:	e000      	b.n	80013a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80013a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f9      	beq.n	80013a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e009      	b.n	80013f0 <_write+0x26>
    ITM_SendChar(*ptr++);
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	60ba      	str	r2, [r7, #8]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ffc9 	bl	800137c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf1      	blt.n	80013dc <_write+0x12>
  }
  return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001412:	d105      	bne.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f002 ff84 	bl	8004328 <HAL_GPIO_TogglePin>
	}
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <do_commands>:
char RxBuffer[RX_BFR_SIZE];
command_t global_command = AMS_NONE;
uint32_t global_args[MAX_ARG_LEN];

char strbuf[100];
void do_commands(){
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
	// check if there is command and if is, then process it
	if (global_command == AMS_SWEEP){
 800142e:	4b5b      	ldr	r3, [pc, #364]	; (800159c <do_commands+0x174>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d15e      	bne.n	80014f4 <do_commands+0xcc>
		EnableRFOutput();
 8001436:	f000 f9b0 	bl	800179a <EnableRFOutput>
		uint32_t from = global_args[0];
 800143a:	4b59      	ldr	r3, [pc, #356]	; (80015a0 <do_commands+0x178>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	613b      	str	r3, [r7, #16]
		uint32_t to = global_args[1];
 8001440:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <do_commands+0x178>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	60fb      	str	r3, [r7, #12]
		uint32_t step = global_args[2];
 8001446:	4b56      	ldr	r3, [pc, #344]	; (80015a0 <do_commands+0x178>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	60bb      	str	r3, [r7, #8]
		uint32_t i;
		for (i=from; i<=to; i+=step){
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	e022      	b.n	8001498 <do_commands+0x70>
			  //printf("setting %d MHz\n", i);
			  if (global_command==AMS_STOP)
 8001452:	4b52      	ldr	r3, [pc, #328]	; (800159c <do_commands+0x174>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b06      	cmp	r3, #6
 8001458:	f000 809c 	beq.w	8001594 <do_commands+0x16c>
				  return;
			  set_requested_frequency(i);
 800145c:	6978      	ldr	r0, [r7, #20]
 800145e:	f000 fab3 	bl	80019c8 <set_requested_frequency>
			  HAL_Delay(1);
 8001462:	2001      	movs	r0, #1
 8001464:	f001 f880 	bl	8002568 <HAL_Delay>
			  uint16_t raw = read_raw();
 8001468:	f7ff fca2 	bl	8000db0 <read_raw>
 800146c:	4603      	mov	r3, r0
 800146e:	80bb      	strh	r3, [r7, #4]
			  sprintf(strbuf, "{%lu, %u}", i, raw);
 8001470:	88bb      	ldrh	r3, [r7, #4]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	494b      	ldr	r1, [pc, #300]	; (80015a4 <do_commands+0x17c>)
 8001476:	484c      	ldr	r0, [pc, #304]	; (80015a8 <do_commands+0x180>)
 8001478:	f008 fb30 	bl	8009adc <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)&strbuf, strlen(strbuf), UART_TIMEOUT);
 800147c:	484a      	ldr	r0, [pc, #296]	; (80015a8 <do_commands+0x180>)
 800147e:	f7fe fe89 	bl	8000194 <strlen>
 8001482:	4603      	mov	r3, r0
 8001484:	b29a      	uxth	r2, r3
 8001486:	2364      	movs	r3, #100	; 0x64
 8001488:	4947      	ldr	r1, [pc, #284]	; (80015a8 <do_commands+0x180>)
 800148a:	4848      	ldr	r0, [pc, #288]	; (80015ac <do_commands+0x184>)
 800148c:	f005 fbbc 	bl	8006c08 <HAL_UART_Transmit>
		for (i=from; i<=to; i+=step){
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d9d8      	bls.n	8001452 <do_commands+0x2a>
		 }
		// send last frequency
		if (i!=to){
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d016      	beq.n	80014d6 <do_commands+0xae>
			set_requested_frequency(to);
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 fa8d 	bl	80019c8 <set_requested_frequency>
			//HAL_Delay(1);
			uint16_t raw = read_raw();
 80014ae:	f7ff fc7f 	bl	8000db0 <read_raw>
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
			sprintf(strbuf, "{%lu, %u}", to, raw);
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	493a      	ldr	r1, [pc, #232]	; (80015a4 <do_commands+0x17c>)
 80014bc:	483a      	ldr	r0, [pc, #232]	; (80015a8 <do_commands+0x180>)
 80014be:	f008 fb0d 	bl	8009adc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)&strbuf, strlen(strbuf), UART_TIMEOUT);
 80014c2:	4839      	ldr	r0, [pc, #228]	; (80015a8 <do_commands+0x180>)
 80014c4:	f7fe fe66 	bl	8000194 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	2364      	movs	r3, #100	; 0x64
 80014ce:	4936      	ldr	r1, [pc, #216]	; (80015a8 <do_commands+0x180>)
 80014d0:	4836      	ldr	r0, [pc, #216]	; (80015ac <do_commands+0x184>)
 80014d2:	f005 fb99 	bl	8006c08 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)";", 2, UART_TIMEOUT);
 80014d6:	2364      	movs	r3, #100	; 0x64
 80014d8:	2202      	movs	r2, #2
 80014da:	4935      	ldr	r1, [pc, #212]	; (80015b0 <do_commands+0x188>)
 80014dc:	4833      	ldr	r0, [pc, #204]	; (80015ac <do_commands+0x184>)
 80014de:	f005 fb93 	bl	8006c08 <HAL_UART_Transmit>
		printf("Done\n");
 80014e2:	4834      	ldr	r0, [pc, #208]	; (80015b4 <do_commands+0x18c>)
 80014e4:	f008 fae2 	bl	8009aac <puts>
		global_command = AMS_NONE;
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <do_commands+0x174>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
		DisableRFOutput();
 80014ee:	f000 f95e 	bl	80017ae <DisableRFOutput>
 80014f2:	e050      	b.n	8001596 <do_commands+0x16e>

	}else if (global_command == AMS_VERSION){
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <do_commands+0x174>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d119      	bne.n	8001530 <do_commands+0x108>
		strcpy(strbuf, "AMS_MSG(Antenna Measurement System Version 0.1);");
 80014fc:	4a2a      	ldr	r2, [pc, #168]	; (80015a8 <do_commands+0x180>)
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <do_commands+0x190>)
 8001500:	4614      	mov	r4, r2
 8001502:	461d      	mov	r5, r3
 8001504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001510:	682b      	ldr	r3, [r5, #0]
 8001512:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 8001514:	4824      	ldr	r0, [pc, #144]	; (80015a8 <do_commands+0x180>)
 8001516:	f7fe fe3d 	bl	8000194 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	b29b      	uxth	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	4921      	ldr	r1, [pc, #132]	; (80015a8 <do_commands+0x180>)
 8001522:	4822      	ldr	r0, [pc, #136]	; (80015ac <do_commands+0x184>)
 8001524:	f005 fbfe 	bl	8006d24 <HAL_UART_Transmit_IT>
		global_command = AMS_NONE;
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <do_commands+0x174>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	e032      	b.n	8001596 <do_commands+0x16e>

	}else if (global_command == AMS_HOWAREYOU){
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <do_commands+0x174>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b05      	cmp	r3, #5
 8001536:	d115      	bne.n	8001564 <do_commands+0x13c>
		strcpy(strbuf, "AMS_MSG(I am fine and working. So far so good.\n I feel bit exhausted, but ya know, that's life.);");
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <do_commands+0x180>)
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <do_commands+0x194>)
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	2362      	movs	r3, #98	; 0x62
 8001542:	461a      	mov	r2, r3
 8001544:	f007 fccc 	bl	8008ee0 <memcpy>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 8001548:	4817      	ldr	r0, [pc, #92]	; (80015a8 <do_commands+0x180>)
 800154a:	f7fe fe23 	bl	8000194 <strlen>
 800154e:	4603      	mov	r3, r0
 8001550:	b29b      	uxth	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	4914      	ldr	r1, [pc, #80]	; (80015a8 <do_commands+0x180>)
 8001556:	4815      	ldr	r0, [pc, #84]	; (80015ac <do_commands+0x184>)
 8001558:	f005 fbe4 	bl	8006d24 <HAL_UART_Transmit_IT>
		global_command = AMS_NONE;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <do_commands+0x174>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
 8001562:	e018      	b.n	8001596 <do_commands+0x16e>

	}else if (global_command == AMS_CHECK){
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <do_commands+0x174>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b07      	cmp	r3, #7
 800156a:	d114      	bne.n	8001596 <do_commands+0x16e>
		strcpy(strbuf, "AMS_OK;");
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <do_commands+0x180>)
 800156e:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <do_commands+0x198>)
 8001570:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001574:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&strbuf, strlen(strbuf));
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <do_commands+0x180>)
 800157a:	f7fe fe0b 	bl	8000194 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29b      	uxth	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	4908      	ldr	r1, [pc, #32]	; (80015a8 <do_commands+0x180>)
 8001586:	4809      	ldr	r0, [pc, #36]	; (80015ac <do_commands+0x184>)
 8001588:	f005 fbcc 	bl	8006d24 <HAL_UART_Transmit_IT>
		global_command = AMS_NONE;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <do_commands+0x174>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
 8001592:	e000      	b.n	8001596 <do_commands+0x16e>
				  return;
 8001594:	bf00      	nop
	}
}
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bdb0      	pop	{r4, r5, r7, pc}
 800159c:	200002dc 	.word	0x200002dc
 80015a0:	200002e0 	.word	0x200002e0
 80015a4:	0800c364 	.word	0x0800c364
 80015a8:	20000308 	.word	0x20000308
 80015ac:	20000498 	.word	0x20000498
 80015b0:	0800c370 	.word	0x0800c370
 80015b4:	0800c374 	.word	0x0800c374
 80015b8:	0800c37c 	.word	0x0800c37c
 80015bc:	0800c3b0 	.word	0x0800c3b0
 80015c0:	0800c414 	.word	0x0800c414

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ca:	f000 ff47 	bl	800245c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ce:	f000 f84f 	bl	8001670 <SystemClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80015d2:	f7ff fe9b 	bl	800130c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d6:	f7ff fe19 	bl	800120c <MX_GPIO_Init>
  MX_DMA_Init();
 80015da:	f7ff fdec 	bl	80011b6 <MX_DMA_Init>
  MX_SPI1_Init();
 80015de:	f000 fbc1 	bl	8001d64 <MX_SPI1_Init>
  MX_ADC1_Init();
 80015e2:	f7ff fb33 	bl	8000c4c <MX_ADC1_Init>
  MX_TIM2_Init();
 80015e6:	f000 fd81 	bl	80020ec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80015ea:	f000 fe17 	bl	800221c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80015ee:	4819      	ldr	r0, [pc, #100]	; (8001654 <main+0x90>)
 80015f0:	f004 fece 	bl	8006390 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *) RxBuffer, RX_BFR_SIZE);
 80015f4:	2240      	movs	r2, #64	; 0x40
 80015f6:	4918      	ldr	r1, [pc, #96]	; (8001658 <main+0x94>)
 80015f8:	4818      	ldr	r0, [pc, #96]	; (800165c <main+0x98>)
 80015fa:	f007 fb98 	bl	8008d2e <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting STM32\n");
 80015fe:	4818      	ldr	r0, [pc, #96]	; (8001660 <main+0x9c>)
 8001600:	f008 fa54 	bl	8009aac <puts>
  printf("Starting MAX\n");
 8001604:	4817      	ldr	r0, [pc, #92]	; (8001664 <main+0xa0>)
 8001606:	f008 fa51 	bl	8009aac <puts>
  EnableChip();
 800160a:	f000 f8bc 	bl	8001786 <EnableChip>
  // just to be sure PLL RF output is turned off
  DisableRFOutput();
 800160e:	f000 f8ce 	bl	80017ae <DisableRFOutput>
  // PLL Must be initialized on PowerUp
  init_PLL();
 8001612:	f000 fa47 	bl	8001aa4 <init_PLL>

  // PLL must be set to default configuration specified in write_regs_SOFT
  write_regs_SOFT();
 8001616:	f000 fa91 	bl	8001b3c <write_regs_SOFT>
  setIntegerMode();
 800161a:	f000 f9c7 	bl	80019ac <setIntegerMode>

  //calibrate();
  for (int i=0; i<4; i++){
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	e00b      	b.n	800163c <main+0x78>
	  printf("RFA PWR: %d\n", i);
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4810      	ldr	r0, [pc, #64]	; (8001668 <main+0xa4>)
 8001628:	f008 f9ba 	bl	80099a0 <iprintf>
	  setRFA_PWR(i);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f95b 	bl	80018e8 <setRFA_PWR>
	  program_PLL();
 8001632:	f000 fb0b 	bl	8001c4c <program_PLL>
  for (int i=0; i<4; i++){
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3301      	adds	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b03      	cmp	r3, #3
 8001640:	ddf0      	ble.n	8001624 <main+0x60>
	  //HAL_Delay(1);
  }
  //print_registers();
  printf("Setting test frequency to 65MHz\n");
 8001642:	480a      	ldr	r0, [pc, #40]	; (800166c <main+0xa8>)
 8001644:	f008 fa32 	bl	8009aac <puts>
  set_requested_frequency(65);
 8001648:	2041      	movs	r0, #65	; 0x41
 800164a:	f000 f9bd 	bl	80019c8 <set_requested_frequency>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  do_commands();
 800164e:	f7ff feeb 	bl	8001428 <do_commands>
 8001652:	e7fc      	b.n	800164e <main+0x8a>
 8001654:	2000044c 	.word	0x2000044c
 8001658:	2000029c 	.word	0x2000029c
 800165c:	20000498 	.word	0x20000498
 8001660:	0800c41c 	.word	0x0800c41c
 8001664:	0800c42c 	.word	0x0800c42c
 8001668:	0800c43c 	.word	0x0800c43c
 800166c:	0800c44c 	.word	0x0800c44c

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b09a      	sub	sp, #104	; 0x68
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	2248      	movs	r2, #72	; 0x48
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f007 fc3c 	bl	8008efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]
 8001692:	615a      	str	r2, [r3, #20]
 8001694:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001696:	2323      	movs	r3, #35	; 0x23
 8001698:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800169a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016a6:	2301      	movs	r3, #1
 80016a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016aa:	2340      	movs	r3, #64	; 0x40
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016ae:	2300      	movs	r3, #0
 80016b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016b2:	2360      	movs	r3, #96	; 0x60
 80016b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b6:	2302      	movs	r3, #2
 80016b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016ba:	2301      	movs	r3, #1
 80016bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 64;
 80016c2:	2340      	movs	r3, #64	; 0x40
 80016c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016c6:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80016ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80016cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80016d2:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80016d6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d8:	f107 0320 	add.w	r3, r7, #32
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fad7 	bl	8004c90 <HAL_RCC_OscConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80016e8:	f000 f848 	bl	800177c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80016ec:	236f      	movs	r3, #111	; 0x6f
 80016ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2303      	movs	r3, #3
 80016f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2101      	movs	r1, #1
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fe29 	bl	8005364 <HAL_RCC_ClockConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001718:	f000 f830 	bl	800177c <Error_Handler>
  }
}
 800171c:	bf00      	nop
 800171e:	3768      	adds	r7, #104	; 0x68
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]

		/* start the DMA again */
		printf("Size %d\n", Size);
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	4619      	mov	r1, r3
 8001734:	480b      	ldr	r0, [pc, #44]	; (8001764 <HAL_UARTEx_RxEventCallback+0x40>)
 8001736:	f008 f933 	bl	80099a0 <iprintf>
		printf(RxBuffer);
 800173a:	480b      	ldr	r0, [pc, #44]	; (8001768 <HAL_UARTEx_RxEventCallback+0x44>)
 800173c:	f008 f930 	bl	80099a0 <iprintf>
		printf("Received\n");
 8001740:	480a      	ldr	r0, [pc, #40]	; (800176c <HAL_UARTEx_RxEventCallback+0x48>)
 8001742:	f008 f9b3 	bl	8009aac <puts>
		process_command_string(RxBuffer, &global_command, global_args);
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001748:	490a      	ldr	r1, [pc, #40]	; (8001774 <HAL_UARTEx_RxEventCallback+0x50>)
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <HAL_UARTEx_RxEventCallback+0x44>)
 800174c:	f7ff fbdc 	bl	8000f08 <process_command_string>
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *) RxBuffer, RX_BFR_SIZE);
 8001750:	2240      	movs	r2, #64	; 0x40
 8001752:	4905      	ldr	r1, [pc, #20]	; (8001768 <HAL_UARTEx_RxEventCallback+0x44>)
 8001754:	4808      	ldr	r0, [pc, #32]	; (8001778 <HAL_UARTEx_RxEventCallback+0x54>)
 8001756:	f007 faea 	bl	8008d2e <HAL_UARTEx_ReceiveToIdle_IT>
		//__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);

}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	0800c46c 	.word	0x0800c46c
 8001768:	2000029c 	.word	0x2000029c
 800176c:	0800c478 	.word	0x0800c478
 8001770:	200002e0 	.word	0x200002e0
 8001774:	200002dc 	.word	0x200002dc
 8001778:	20000498 	.word	0x20000498

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x8>

08001786 <EnableChip>:
/**
  * @brief Turn MAX2870 PLL on
  * By setting CE pin high
  * @retval
  */
void EnableChip(){
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	2104      	movs	r1, #4
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f002 fdb1 	bl	80042f8 <HAL_GPIO_WritePin>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}

0800179a <EnableRFOutput>:

void DisableChip(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
}

void EnableRFOutput(){
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	2108      	movs	r1, #8
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a6:	f002 fda7 	bl	80042f8 <HAL_GPIO_WritePin>
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}

080017ae <DisableRFOutput>:

void DisableRFOutput(){
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2108      	movs	r1, #8
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ba:	f002 fd9d 	bl	80042f8 <HAL_GPIO_WritePin>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <setDIVA>:
	uint32_t SHDN_BIT = 1 << 5;
	write_reg(reg2 & ~(SHDN_BIT));
}

// permitted n values: 1, 2, 4, 8, 16, 32, 64, 128
void setDIVA(uint8_t n){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
	uint32_t diva_value = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
	//sets DIVA to 111
	switch (n){
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b80      	cmp	r3, #128	; 0x80
 80017d6:	d04e      	beq.n	8001876 <setDIVA+0xb2>
 80017d8:	2b80      	cmp	r3, #128	; 0x80
 80017da:	dc7e      	bgt.n	80018da <setDIVA+0x116>
 80017dc:	2b20      	cmp	r3, #32
 80017de:	dc47      	bgt.n	8001870 <setDIVA+0xac>
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	dd7a      	ble.n	80018da <setDIVA+0x116>
 80017e4:	3b01      	subs	r3, #1
 80017e6:	2b1f      	cmp	r3, #31
 80017e8:	d877      	bhi.n	80018da <setDIVA+0x116>
 80017ea:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <setDIVA+0x2c>)
 80017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f0:	080018af 	.word	0x080018af
 80017f4:	080018a7 	.word	0x080018a7
 80017f8:	080018db 	.word	0x080018db
 80017fc:	0800189f 	.word	0x0800189f
 8001800:	080018db 	.word	0x080018db
 8001804:	080018db 	.word	0x080018db
 8001808:	080018db 	.word	0x080018db
 800180c:	08001897 	.word	0x08001897
 8001810:	080018db 	.word	0x080018db
 8001814:	080018db 	.word	0x080018db
 8001818:	080018db 	.word	0x080018db
 800181c:	080018db 	.word	0x080018db
 8001820:	080018db 	.word	0x080018db
 8001824:	080018db 	.word	0x080018db
 8001828:	080018db 	.word	0x080018db
 800182c:	0800188f 	.word	0x0800188f
 8001830:	080018db 	.word	0x080018db
 8001834:	080018db 	.word	0x080018db
 8001838:	080018db 	.word	0x080018db
 800183c:	080018db 	.word	0x080018db
 8001840:	080018db 	.word	0x080018db
 8001844:	080018db 	.word	0x080018db
 8001848:	080018db 	.word	0x080018db
 800184c:	080018db 	.word	0x080018db
 8001850:	080018db 	.word	0x080018db
 8001854:	080018db 	.word	0x080018db
 8001858:	080018db 	.word	0x080018db
 800185c:	080018db 	.word	0x080018db
 8001860:	080018db 	.word	0x080018db
 8001864:	080018db 	.word	0x080018db
 8001868:	080018db 	.word	0x080018db
 800186c:	08001887 	.word	0x08001887
 8001870:	2b40      	cmp	r3, #64	; 0x40
 8001872:	d004      	beq.n	800187e <setDIVA+0xba>
		case 1:
			diva_value = 0b000 << 20;
			break;
		default:
			// do not set diva mask
			return;
 8001874:	e031      	b.n	80018da <setDIVA+0x116>
			diva_value = 0b111 << 20;
 8001876:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 800187a:	617b      	str	r3, [r7, #20]
			break;
 800187c:	e01a      	b.n	80018b4 <setDIVA+0xf0>
			diva_value = 0b110 << 20;
 800187e:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
 8001882:	617b      	str	r3, [r7, #20]
			break;
 8001884:	e016      	b.n	80018b4 <setDIVA+0xf0>
			diva_value = 0b101 << 20;
 8001886:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
 800188a:	617b      	str	r3, [r7, #20]
			break;
 800188c:	e012      	b.n	80018b4 <setDIVA+0xf0>
			diva_value = 0b100 << 20;
 800188e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001892:	617b      	str	r3, [r7, #20]
			break;
 8001894:	e00e      	b.n	80018b4 <setDIVA+0xf0>
			diva_value = 0b011 << 20;
 8001896:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800189a:	617b      	str	r3, [r7, #20]
			break;
 800189c:	e00a      	b.n	80018b4 <setDIVA+0xf0>
			diva_value = 0b010 << 20;
 800189e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018a2:	617b      	str	r3, [r7, #20]
			break;
 80018a4:	e006      	b.n	80018b4 <setDIVA+0xf0>
			diva_value = 0b001 << 20;
 80018a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018aa:	617b      	str	r3, [r7, #20]
			break;
 80018ac:	e002      	b.n	80018b4 <setDIVA+0xf0>
			diva_value = 0b000 << 20;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
			break;
 80018b2:	bf00      	nop
			break;
	}
	uint32_t DIVA_MASK = 0b111 << 20;
 80018b4:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 80018b8:	613b      	str	r3, [r7, #16]
	uint32_t new_reg4 = reg4 & ~(DIVA_MASK);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	43da      	mvns	r2, r3
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <setDIVA+0x120>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4013      	ands	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
	uint32_t newnewreg4 = new_reg4 | ((diva_value)&DIVA_MASK);
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60bb      	str	r3, [r7, #8]
	write_reg(newnewreg4);
 80018d2:	68b8      	ldr	r0, [r7, #8]
 80018d4:	f000 f974 	bl	8001bc0 <write_reg>
 80018d8:	e000      	b.n	80018dc <setDIVA+0x118>
			return;
 80018da:	bf00      	nop
}
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000037c 	.word	0x2000037c

080018e8 <setRFA_PWR>:

//00, 01, 02, 03
void setRFA_PWR(uint8_t rfa_pwr){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	if (rfa_pwr > 4 || rfa_pwr < 0){
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d813      	bhi.n	8001920 <setRFA_PWR+0x38>
		return;//invalid value
	}
	// bits 4 and 3
	uint32_t RFA_PWR_MASK = 0b11 << 3;
 80018f8:	2318      	movs	r3, #24
 80018fa:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg4 = reg4 & ~(RFA_PWR_MASK);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	43da      	mvns	r2, r3
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <setRFA_PWR+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
	uint32_t newnewreg4 = newreg4 | ((rfa_pwr << 3)&RFA_PWR_MASK);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	461a      	mov	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	4013      	ands	r3, r2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg4);
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 f951 	bl	8001bc0 <write_reg>
 800191e:	e000      	b.n	8001922 <setRFA_PWR+0x3a>
		return;//invalid value
 8001920:	bf00      	nop
}
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2000037c 	.word	0x2000037c

0800192c <setN>:

void setN(uint16_t N){
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
	// set mask
	uint32_t N_MASK = 0xFFFF << 15;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <setN+0x38>)
 8001938:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg0 = reg0 & ~(N_MASK);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	43da      	mvns	r2, r3
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <setN+0x3c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
	// set bits that are supposed to one to one
	uint32_t newnewreg0 = newreg0 | ((N << 15)&N_MASK);
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	03db      	lsls	r3, r3, #15
 800194a:	461a      	mov	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	4013      	ands	r3, r2
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg0);
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f932 	bl	8001bc0 <write_reg>
}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	7fff8000 	.word	0x7fff8000
 8001968:	2000036c 	.word	0x2000036c

0800196c <setR>:

void setR(uint16_t R){
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
	// bits 4 and 3
	uint32_t R_MASK = 0xFFC << 12;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <setR+0x38>)
 8001978:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg2 = reg2 & ~(R_MASK);
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	43da      	mvns	r2, r3
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <setR+0x3c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
	uint32_t newnewreg2 = newreg2 | ((R << 14)&R_MASK);
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	039b      	lsls	r3, r3, #14
 800198a:	461a      	mov	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	4013      	ands	r3, r2
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg2);
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f912 	bl	8001bc0 <write_reg>
}
 800199c:	bf00      	nop
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	00ffc000 	.word	0x00ffc000
 80019a8:	20000374 	.word	0x20000374

080019ac <setIntegerMode>:

void enableRFA(){
	write_reg(reg4 | (1<<5));
}

void setIntegerMode(){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	write_reg(reg0 | (1<<31));
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <setIntegerMode+0x18>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f901 	bl	8001bc0 <write_reg>
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000036c 	.word	0x2000036c

080019c8 <set_requested_frequency>:

// freq is in MHz
void set_requested_frequency(uint32_t freq){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	// first determine required DIVA value
	float divided_by_235 = freq/23.5;
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7fe fd7f 	bl	80004d4 <__aeabi_ui2d>
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <set_requested_frequency+0xd8>)
 80019dc:	f7fe ff1e 	bl	800081c <__aeabi_ddiv>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff f8c6 	bl	8000b78 <__aeabi_d2f>
 80019ec:	4603      	mov	r3, r0
 80019ee:	61fb      	str	r3, [r7, #28]
	float band = log2(divided_by_235);
 80019f0:	69f8      	ldr	r0, [r7, #28]
 80019f2:	f7fe fd91 	bl	8000518 <__aeabi_f2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	ec43 2b10 	vmov	d0, r2, r3
 80019fe:	f00a fa7b 	bl	800bef8 <log>
 8001a02:	ec51 0b10 	vmov	r0, r1, d0
 8001a06:	a324      	add	r3, pc, #144	; (adr r3, 8001a98 <set_requested_frequency+0xd0>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	f7fe ff06 	bl	800081c <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f8ae 	bl	8000b78 <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	61bb      	str	r3, [r7, #24]
	uint32_t band_i = band;
 8001a20:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a28:	ee17 3a90 	vmov	r3, s15
 8001a2c:	617b      	str	r3, [r7, #20]
	uint32_t DIVA_caluclated = 128>>band_i;
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa42 f303 	asr.w	r3, r2, r3
 8001a36:	613b      	str	r3, [r7, #16]

	uint32_t R_value = 1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t N_1MHZ_step = 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	623b      	str	r3, [r7, #32]
	if (DIVA_caluclated<32){
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b1f      	cmp	r3, #31
 8001a44:	d804      	bhi.n	8001a50 <set_requested_frequency+0x88>
		R_value = 32/DIVA_caluclated;
 8001a46:	2220      	movs	r2, #32
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (DIVA_caluclated>32){
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	2b20      	cmp	r3, #32
 8001a54:	d902      	bls.n	8001a5c <set_requested_frequency+0x94>
		N_1MHZ_step = DIVA_caluclated/32;
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	623b      	str	r3, [r7, #32]
	}
	uint32_t N_value = N_1MHZ_step * freq;
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	60fb      	str	r3, [r7, #12]
	//printf("%d\n", DIVA_caluclated);
	//printf("R: %d\n", R_value);
	//printf("N: %d\n", N_value);
	setN(N_value);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff5e 	bl	800192c <setN>
	setDIVA(DIVA_caluclated);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fea5 	bl	80017c4 <setDIVA>
	setR(R_value);
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff74 	bl	800196c <setR>
	program_PLL();
 8001a84:	f000 f8e2 	bl	8001c4c <program_PLL>
	// give time to allow PLL to lock into frequency
	HAL_Delay(1);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f000 fd6d 	bl	8002568 <HAL_Delay>
}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	fefa39ef 	.word	0xfefa39ef
 8001a9c:	3fe62e42 	.word	0x3fe62e42
 8001aa0:	40378000 	.word	0x40378000

08001aa4 <init_PLL>:
/**
  * @brief Initialize chip as specified in datasheet
  * @retval GPIO_PinState Lock Detect
  */
void init_PLL(){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	// Zapis registrov default hodnotami
	write_reg(default_reg5);
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <init_PLL+0x8c>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f888 	bl	8001bc0 <write_reg>
	// disable RF outputs
	write_reg(default_reg4 & ~((1 << 5) | (1<<8)));
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <init_PLL+0x90>)
 8001ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f882 	bl	8001bc0 <write_reg>
	write_reg(default_reg3);
 8001abc:	230b      	movs	r3, #11
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f87e 	bl	8001bc0 <write_reg>
	write_reg(default_reg2);
 8001ac4:	f244 0342 	movw	r3, #16450	; 0x4042
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 f879 	bl	8001bc0 <write_reg>
	write_reg(default_reg1);
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <init_PLL+0x94>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f875 	bl	8001bc0 <write_reg>
	write_reg(default_reg0);
 8001ad6:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f870 	bl	8001bc0 <write_reg>
	program_PLL();
 8001ae0:	f000 f8b4 	bl	8001c4c <program_PLL>
	// 20 ms between writes as specified in datasheet
	HAL_Delay(20);
 8001ae4:	2014      	movs	r0, #20
 8001ae6:	f000 fd3f 	bl	8002568 <HAL_Delay>
	write_reg(default_reg5);
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <init_PLL+0x8c>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f867 	bl	8001bc0 <write_reg>
	write_reg(default_reg4 & ~((1 << 5) | (1<<8)));
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <init_PLL+0x90>)
 8001af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f861 	bl	8001bc0 <write_reg>
	write_reg(default_reg3);
 8001afe:	230b      	movs	r3, #11
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f85d 	bl	8001bc0 <write_reg>
	write_reg(default_reg2);
 8001b06:	f244 0342 	movw	r3, #16450	; 0x4042
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f858 	bl	8001bc0 <write_reg>
	write_reg(default_reg1);
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <init_PLL+0x94>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f854 	bl	8001bc0 <write_reg>
	write_reg(default_reg0);
 8001b18:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f84f 	bl	8001bc0 <write_reg>
	program_PLL();
 8001b22:	f000 f893 	bl	8001c4c <program_PLL>
	HAL_Delay(20);
 8001b26:	2014      	movs	r0, #20
 8001b28:	f000 fd1e 	bl	8002568 <HAL_Delay>
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	00400005 	.word	0x00400005
 8001b34:	6180b23c 	.word	0x6180b23c
 8001b38:	2000fff9 	.word	0x2000fff9

08001b3c <write_regs_SOFT>:

void write_regs_SOFT(){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
	//write to registers
	uint32_t reg0 = 0x80320000;
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <write_regs_SOFT+0x50>)
 8001b44:	617b      	str	r3, [r7, #20]
	uint32_t reg1 = 0x80033E81;
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <write_regs_SOFT+0x54>)
 8001b48:	613b      	str	r3, [r7, #16]
	uint32_t reg2 = 0x0C004042;
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <write_regs_SOFT+0x58>)
 8001b4c:	60fb      	str	r3, [r7, #12]
	uint32_t reg3 = 0x00000133;
 8001b4e:	f240 1333 	movw	r3, #307	; 0x133
 8001b52:	60bb      	str	r3, [r7, #8]
	uint32_t reg4 = 0x629802FC;
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <write_regs_SOFT+0x5c>)
 8001b56:	607b      	str	r3, [r7, #4]
	uint32_t reg5 = 0x00400005;
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <write_regs_SOFT+0x60>)
 8001b5a:	603b      	str	r3, [r7, #0]
	write_reg(reg5);
 8001b5c:	6838      	ldr	r0, [r7, #0]
 8001b5e:	f000 f82f 	bl	8001bc0 <write_reg>
	write_reg(reg4);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f82c 	bl	8001bc0 <write_reg>
	write_reg(reg3);
 8001b68:	68b8      	ldr	r0, [r7, #8]
 8001b6a:	f000 f829 	bl	8001bc0 <write_reg>
	write_reg(reg2);
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 f826 	bl	8001bc0 <write_reg>
	write_reg(reg1);
 8001b74:	6938      	ldr	r0, [r7, #16]
 8001b76:	f000 f823 	bl	8001bc0 <write_reg>
	write_reg(reg0);
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f000 f820 	bl	8001bc0 <write_reg>
	program_PLL();
 8001b80:	f000 f864 	bl	8001c4c <program_PLL>
}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	80320000 	.word	0x80320000
 8001b90:	80033e81 	.word	0x80033e81
 8001b94:	0c004042 	.word	0x0c004042
 8001b98:	629802fc 	.word	0x629802fc
 8001b9c:	00400005 	.word	0x00400005

08001ba0 <swap_words>:

// big endian to little endian for 32bits
uint32_t swap_words(uint32_t rozumne){
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	uint32_t swapped = (rozumne >> 16) | (rozumne << 16);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001bae:	60fb      	str	r3, [r7, #12]
	return swapped;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <write_reg>:

// preforms write to register
void write_reg(uint32_t data){
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	// determine register address
	uint32_t reg_addr = data & 0b111;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

	switch (reg_addr){
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d826      	bhi.n	8001c24 <write_reg+0x64>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <write_reg+0x1c>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001bf5 	.word	0x08001bf5
 8001be0:	08001bfd 	.word	0x08001bfd
 8001be4:	08001c05 	.word	0x08001c05
 8001be8:	08001c0d 	.word	0x08001c0d
 8001bec:	08001c15 	.word	0x08001c15
 8001bf0:	08001c1d 	.word	0x08001c1d
			case 0:
				reg0 = data;
 8001bf4:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <write_reg+0x74>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
				break;
 8001bfa:	e014      	b.n	8001c26 <write_reg+0x66>
			case 1:
				reg1 = data;
 8001bfc:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <write_reg+0x78>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
				break;
 8001c02:	e010      	b.n	8001c26 <write_reg+0x66>
			case 2:
				reg2 = data;
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <write_reg+0x7c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
				break;
 8001c0a:	e00c      	b.n	8001c26 <write_reg+0x66>
			case 3:
				reg3 = data;
 8001c0c:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <write_reg+0x80>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
				break;
 8001c12:	e008      	b.n	8001c26 <write_reg+0x66>
			case 4:
				reg4 = data;
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <write_reg+0x84>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
				break;
 8001c1a:	e004      	b.n	8001c26 <write_reg+0x66>
			case 5:
				reg5 = data;
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <write_reg+0x88>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
				break;
 8001c22:	e000      	b.n	8001c26 <write_reg+0x66>
			default:
				// invalid addressLED_GPIO_Port
				break;
 8001c24:	bf00      	nop
	}
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	2000036c 	.word	0x2000036c
 8001c38:	20000370 	.word	0x20000370
 8001c3c:	20000374 	.word	0x20000374
 8001c40:	20000378 	.word	0x20000378
 8001c44:	2000037c 	.word	0x2000037c
 8001c48:	20000380 	.word	0x20000380

08001c4c <program_PLL>:

// sends all registers to PLL
void program_PLL(){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	write_to_PLL(reg5);
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <program_PLL+0x44>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f827 	bl	8001ca8 <write_to_PLL>
	write_to_PLL(reg4);
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <program_PLL+0x48>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f822 	bl	8001ca8 <write_to_PLL>
	write_to_PLL(reg3);
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <program_PLL+0x4c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 f81d 	bl	8001ca8 <write_to_PLL>
	write_to_PLL(reg2);
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <program_PLL+0x50>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f818 	bl	8001ca8 <write_to_PLL>
	write_to_PLL(reg1);
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <program_PLL+0x54>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f813 	bl	8001ca8 <write_to_PLL>
	write_to_PLL(reg0);
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <program_PLL+0x58>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f80e 	bl	8001ca8 <write_to_PLL>
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000380 	.word	0x20000380
 8001c94:	2000037c 	.word	0x2000037c
 8001c98:	20000378 	.word	0x20000378
 8001c9c:	20000374 	.word	0x20000374
 8001ca0:	20000370 	.word	0x20000370
 8001ca4:	2000036c 	.word	0x2000036c

08001ca8 <write_to_PLL>:

uint8_t write_to_PLL(uint32_t data){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	// endianness swap
	uint32_t swapped_data = swap_words(data);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff75 	bl	8001ba0 <swap_words>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	60bb      	str	r3, [r7, #8]
	uint16_t* pData = (uint16_t*)&swapped_data;
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2110      	movs	r1, #16
 8001cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc8:	f002 fb16 	bl	80042f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f000 fc4b 	bl	8002568 <HAL_Delay>
	//HAL_StatusTypeDef result =  HAL_SPI_Transmit(&hspi1, (uint8_t*)pData, 2, 1000);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)pData, 2, 100);
 8001cd2:	2364      	movs	r3, #100	; 0x64
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	68f9      	ldr	r1, [r7, #12]
 8001cd8:	4808      	ldr	r0, [pc, #32]	; (8001cfc <write_to_PLL+0x54>)
 8001cda:	f004 f82f 	bl	8005d3c <HAL_SPI_Transmit>
	//printf("SPI Transmit result: %x\n", result);
	HAL_Delay(1);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f000 fc42 	bl	8002568 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2110      	movs	r1, #16
 8001ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cec:	f002 fb04 	bl	80042f8 <HAL_GPIO_WritePin>

	return 0;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000384 	.word	0x20000384

08001d00 <LL_AHB2_GRP1_EnableClock>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d24:	68fb      	ldr	r3, [r7, #12]
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4013      	ands	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <MX_SPI1_Init+0x78>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d7c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d80:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001d84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001d9c:	2238      	movs	r2, #56	; 0x38
 8001d9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001db4:	2207      	movs	r2, #7
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_SPI1_Init+0x74>)
 8001dc6:	f003 ff16 	bl	8005bf6 <HAL_SPI_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001dd0:	f7ff fcd4 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000384 	.word	0x20000384
 8001ddc:	40013000 	.word	0x40013000

08001de0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a24      	ldr	r2, [pc, #144]	; (8001e90 <HAL_SPI_MspInit+0xb0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d142      	bne.n	8001e88 <HAL_SPI_MspInit+0xa8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e02:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e06:	f7ff ff94 	bl	8001d32 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff ff78 	bl	8001d00 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e10:	23a0      	movs	r3, #160	; 0xa0
 8001e12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e20:	2305      	movs	r3, #5
 8001e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2e:	f002 f8fb 	bl	8004028 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_SPI_MspInit+0xb4>)
 8001e34:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <HAL_SPI_MspInit+0xb8>)
 8001e36:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <HAL_SPI_MspInit+0xb4>)
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_SPI_MspInit+0xb4>)
 8001e40:	2210      	movs	r2, #16
 8001e42:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_SPI_MspInit+0xb4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_SPI_MspInit+0xb4>)
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e50:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HAL_SPI_MspInit+0xb4>)
 8001e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e56:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_SPI_MspInit+0xb4>)
 8001e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e5e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_SPI_MspInit+0xb4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_SPI_MspInit+0xb4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e6c:	4809      	ldr	r0, [pc, #36]	; (8001e94 <HAL_SPI_MspInit+0xb4>)
 8001e6e:	f001 fe8f 	bl	8003b90 <HAL_DMA_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_SPI_MspInit+0x9c>
    {
      Error_Handler();
 8001e78:	f7ff fc80 	bl	800177c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <HAL_SPI_MspInit+0xb4>)
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
 8001e82:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_SPI_MspInit+0xb4>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40013000 	.word	0x40013000
 8001e94:	200003e8 	.word	0x200003e8
 8001e98:	40020008 	.word	0x40020008

08001e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <NMI_Handler+0x4>

08001eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <HardFault_Handler+0x4>

08001eb6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <MemManage_Handler+0x4>

08001ebc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <BusFault_Handler+0x4>

08001ec2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <UsageFault_Handler+0x4>

08001ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef6:	f000 fb0b 	bl	8002510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <DMA1_Channel1_IRQHandler+0x10>)
 8001f06:	f001 ff8d 	bl	8003e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200003e8 	.word	0x200003e8

08001f14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <TIM2_IRQHandler+0x10>)
 8001f1a:	f004 fa87 	bl	800642c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	2000044c 	.word	0x2000044c

08001f28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <USART1_IRQHandler+0x10>)
 8001f2e:	f004 ff8d 	bl	8006e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000498 	.word	0x20000498

08001f3c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <IPCC_C1_RX_IRQHandler+0x10>)
 8001f42:	f002 fa8b 	bl	800445c <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000260 	.word	0x20000260

08001f50 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <IPCC_C1_TX_IRQHandler+0x10>)
 8001f56:	f002 fa33 	bl	80043c0 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000260 	.word	0x20000260

08001f64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return 1;
 8001f68:	2301      	movs	r3, #1
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_kill>:

int _kill(int pid, int sig)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f7e:	f006 ff7d 	bl	8008e7c <__errno>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2216      	movs	r2, #22
 8001f86:	601a      	str	r2, [r3, #0]
  return -1;
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <_exit>:

void _exit (int status)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ffe7 	bl	8001f74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fa6:	e7fe      	b.n	8001fa6 <_exit+0x12>

08001fa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	e00a      	b.n	8001fd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fba:	f3af 8000 	nop.w
 8001fbe:	4601      	mov	r1, r0
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	60ba      	str	r2, [r7, #8]
 8001fc6:	b2ca      	uxtb	r2, r1
 8001fc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dbf0      	blt.n	8001fba <_read+0x12>
  }

  return len;
 8001fd8:	687b      	ldr	r3, [r7, #4]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800200a:	605a      	str	r2, [r3, #4]
  return 0;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <_isatty>:

int _isatty(int file)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <_sbrk+0x5c>)
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <_sbrk+0x60>)
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <_sbrk+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <_sbrk+0x64>)
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <_sbrk+0x68>)
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	429a      	cmp	r2, r3
 800207a:	d207      	bcs.n	800208c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800207c:	f006 fefe 	bl	8008e7c <__errno>
 8002080:	4603      	mov	r3, r0
 8002082:	220c      	movs	r2, #12
 8002084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	e009      	b.n	80020a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <_sbrk+0x64>)
 800209c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209e:	68fb      	ldr	r3, [r7, #12]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20010000 	.word	0x20010000
 80020ac:	00000400 	.word	0x00000400
 80020b0:	20000448 	.word	0x20000448
 80020b4:	20000540 	.word	0x20000540

080020b8 <LL_APB1_GRP1_EnableClock>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4013      	ands	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020dc:	68fb      	ldr	r3, [r7, #12]
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <MX_TIM2_Init+0x98>)
 800210c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002110:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <MX_TIM2_Init+0x98>)
 8002114:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002118:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <MX_TIM2_Init+0x98>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_TIM2_Init+0x98>)
 8002122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002126:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <MX_TIM2_Init+0x98>)
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <MX_TIM2_Init+0x98>)
 8002130:	2280      	movs	r2, #128	; 0x80
 8002132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002134:	4813      	ldr	r0, [pc, #76]	; (8002184 <MX_TIM2_Init+0x98>)
 8002136:	f004 f8d3 	bl	80062e0 <HAL_TIM_Base_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002140:	f7ff fb1c 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002148:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	4619      	mov	r1, r3
 8002150:	480c      	ldr	r0, [pc, #48]	; (8002184 <MX_TIM2_Init+0x98>)
 8002152:	f004 fa8a 	bl	800666a <HAL_TIM_ConfigClockSource>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800215c:	f7ff fb0e 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002160:	2300      	movs	r3, #0
 8002162:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	4619      	mov	r1, r3
 800216c:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_TIM2_Init+0x98>)
 800216e:	f004 fc6d 	bl	8006a4c <HAL_TIMEx_MasterConfigSynchronization>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002178:	f7ff fb00 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	2000044c 	.word	0x2000044c

08002188 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002198:	d10a      	bne.n	80021b0 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff ff8c 	bl	80020b8 <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2100      	movs	r1, #0
 80021a4:	201c      	movs	r0, #28
 80021a6:	f001 fcbe 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021aa:	201c      	movs	r0, #28
 80021ac:	f001 fcd5 	bl	8003b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <LL_AHB2_GRP1_EnableClock>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4013      	ands	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021dc:	68fb      	ldr	r3, [r7, #12]
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_APB2_GRP1_EnableClock>:
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4313      	orrs	r3, r2
 8002200:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4013      	ands	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002220:	4b22      	ldr	r3, [pc, #136]	; (80022ac <MX_USART1_UART_Init+0x90>)
 8002222:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <MX_USART1_UART_Init+0x94>)
 8002224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <MX_USART1_UART_Init+0x90>)
 8002228:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800222c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <MX_USART1_UART_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <MX_USART1_UART_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <MX_USART1_UART_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_USART1_UART_Init+0x90>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <MX_USART1_UART_Init+0x90>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b17      	ldr	r3, [pc, #92]	; (80022ac <MX_USART1_UART_Init+0x90>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <MX_USART1_UART_Init+0x90>)
 8002254:	2200      	movs	r2, #0
 8002256:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002258:	4b14      	ldr	r3, [pc, #80]	; (80022ac <MX_USART1_UART_Init+0x90>)
 800225a:	2200      	movs	r2, #0
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <MX_USART1_UART_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002264:	4811      	ldr	r0, [pc, #68]	; (80022ac <MX_USART1_UART_Init+0x90>)
 8002266:	f004 fc7f 	bl	8006b68 <HAL_UART_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002270:	f7ff fa84 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002274:	2100      	movs	r1, #0
 8002276:	480d      	ldr	r0, [pc, #52]	; (80022ac <MX_USART1_UART_Init+0x90>)
 8002278:	f006 fcdd 	bl	8008c36 <HAL_UARTEx_SetTxFifoThreshold>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002282:	f7ff fa7b 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002286:	2100      	movs	r1, #0
 8002288:	4808      	ldr	r0, [pc, #32]	; (80022ac <MX_USART1_UART_Init+0x90>)
 800228a:	f006 fd12 	bl	8008cb2 <HAL_UARTEx_SetRxFifoThreshold>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002294:	f7ff fa72 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002298:	4804      	ldr	r0, [pc, #16]	; (80022ac <MX_USART1_UART_Init+0x90>)
 800229a:	f006 fc93 	bl	8008bc4 <HAL_UARTEx_DisableFifoMode>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022a4:	f7ff fa6a 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000498 	.word	0x20000498
 80022b0:	40013800 	.word	0x40013800

080022b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b090      	sub	sp, #64	; 0x40
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	2224      	movs	r2, #36	; 0x24
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f006 fe11 	bl	8008efc <memset>
  if(uartHandle->Instance==USART1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1a      	ldr	r2, [pc, #104]	; (8002348 <HAL_UART_MspInit+0x94>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d12c      	bne.n	800233e <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 fba5 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022fc:	f7ff fa3e 	bl	800177c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002300:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002304:	f7ff ff71 	bl	80021ea <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002308:	2002      	movs	r0, #2
 800230a:	f7ff ff55 	bl	80021b8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800230e:	23c0      	movs	r3, #192	; 0xc0
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800231e:	2307      	movs	r3, #7
 8002320:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002326:	4619      	mov	r1, r3
 8002328:	4808      	ldr	r0, [pc, #32]	; (800234c <HAL_UART_MspInit+0x98>)
 800232a:	f001 fe7d 	bl	8004028 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	2024      	movs	r0, #36	; 0x24
 8002334:	f001 fbf7 	bl	8003b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002338:	2024      	movs	r0, #36	; 0x24
 800233a:	f001 fc0e 	bl	8003b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800233e:	bf00      	nop
 8002340:	3740      	adds	r7, #64	; 0x40
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40013800 	.word	0x40013800
 800234c:	48000400 	.word	0x48000400

08002350 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002350:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002352:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002354:	3304      	adds	r3, #4

08002356 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002356:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002358:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800235a:	d3f9      	bcc.n	8002350 <CopyDataInit>
  bx lr
 800235c:	4770      	bx	lr

0800235e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800235e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002360:	3004      	adds	r0, #4

08002362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002362:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002364:	d3fb      	bcc.n	800235e <FillZerobss>
  bx lr
 8002366:	4770      	bx	lr

08002368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8002368:	480c      	ldr	r0, [pc, #48]	; (800239c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800236a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800236c:	f000 f828 	bl	80023c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <LoopForever+0x8>)
 8002372:	490c      	ldr	r1, [pc, #48]	; (80023a4 <LoopForever+0xc>)
 8002374:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <LoopForever+0x10>)
 8002376:	2300      	movs	r3, #0
 8002378:	f7ff ffed 	bl	8002356 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800237c:	480b      	ldr	r0, [pc, #44]	; (80023ac <LoopForever+0x14>)
 800237e:	490c      	ldr	r1, [pc, #48]	; (80023b0 <LoopForever+0x18>)
 8002380:	2300      	movs	r3, #0
 8002382:	f7ff ffee 	bl	8002362 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002386:	480b      	ldr	r0, [pc, #44]	; (80023b4 <LoopForever+0x1c>)
 8002388:	490b      	ldr	r1, [pc, #44]	; (80023b8 <LoopForever+0x20>)
 800238a:	2300      	movs	r3, #0
 800238c:	f7ff ffe9 	bl	8002362 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002390:	f006 fd7a 	bl	8008e88 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002394:	f7ff f916 	bl	80015c4 <main>

08002398 <LoopForever>:

LoopForever:
  b LoopForever
 8002398:	e7fe      	b.n	8002398 <LoopForever>
 800239a:	0000      	.short	0x0000
   ldr   r0, =_estack
 800239c:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 80023a0:	20000004 	.word	0x20000004
 80023a4:	200001e0 	.word	0x200001e0
 80023a8:	0800c954 	.word	0x0800c954
  INIT_BSS _sbss, _ebss
 80023ac:	200001e0 	.word	0x200001e0
 80023b0:	20000540 	.word	0x20000540
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80023b4:	20030000 	.word	0x20030000
 80023b8:	20030000 	.word	0x20030000

080023bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC1_IRQHandler>
	...

080023c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80023c4:	4b22      	ldr	r3, [pc, #136]	; (8002450 <SystemInit+0x90>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	4a21      	ldr	r2, [pc, #132]	; (8002450 <SystemInit+0x90>)
 80023cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80023e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80023ec:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80023ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <SystemInit+0x94>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800240a:	f023 0305 	bic.w	r3, r3, #5
 800240e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002416:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800241a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242a:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <SystemInit+0x98>)
 800242c:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800242e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00
 8002454:	faf6fefb 	.word	0xfaf6fefb
 8002458:	22041000 	.word	0x22041000

0800245c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_Init+0x3c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_Init+0x3c>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002472:	2003      	movs	r0, #3
 8002474:	f001 fb4c 	bl	8003b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002478:	2000      	movs	r0, #0
 800247a:	f000 f80f 	bl	800249c <HAL_InitTick>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	71fb      	strb	r3, [r7, #7]
 8002488:	e001      	b.n	800248e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800248a:	f7ff fd07 	bl	8001e9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800248e:	79fb      	ldrb	r3, [r7, #7]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	58004000 	.word	0x58004000

0800249c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <HAL_InitTick+0x6c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d024      	beq.n	80024fa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024b0:	f003 f904 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_InitTick+0x6c>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	4618      	mov	r0, r3
 80024ca:	f001 fb54 	bl	8003b76 <HAL_SYSTICK_Config>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10f      	bne.n	80024f4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	d809      	bhi.n	80024ee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024da:	2200      	movs	r2, #0
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	f04f 30ff 	mov.w	r0, #4294967295
 80024e2:	f001 fb20 	bl	8003b26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024e6:	4a09      	ldr	r2, [pc, #36]	; (800250c <HAL_InitTick+0x70>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	e007      	b.n	80024fe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e004      	b.n	80024fe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	e001      	b.n	80024fe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000000c 	.word	0x2000000c
 800250c:	20000008 	.word	0x20000008

08002510 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_IncTick+0x20>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x24>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_IncTick+0x24>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	2000000c 	.word	0x2000000c
 8002534:	2000052c 	.word	0x2000052c

08002538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return uwTick;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_GetTick+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	2000052c 	.word	0x2000052c

08002550 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_GetTickPrio+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000008 	.word	0x20000008

08002568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7ff ffe2 	bl	8002538 <HAL_GetTick>
 8002574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d005      	beq.n	800258e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_Delay+0x44>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800258e:	bf00      	nop
 8002590:	f7ff ffd2 	bl	8002538 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d8f7      	bhi.n	8002590 <HAL_Delay+0x28>
  {
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000000c 	.word	0x2000000c

080025b0 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3360      	adds	r3, #96	; 0x60
 800262a:	461a      	mov	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <LL_ADC_SetOffset+0x44>)
 800263a:	4013      	ands	r3, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	4313      	orrs	r3, r2
 8002648:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	03fff000 	.word	0x03fff000

08002660 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3360      	adds	r3, #96	; 0x60
 800266e:	461a      	mov	r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3360      	adds	r3, #96	; 0x60
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026da:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3330      	adds	r3, #48	; 0x30
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	4413      	add	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	211f      	movs	r1, #31
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	401a      	ands	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	f003 011f 	and.w	r1, r3, #31
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	431a      	orrs	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3314      	adds	r3, #20
 8002750:	461a      	mov	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	0e5b      	lsrs	r3, r3, #25
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	4413      	add	r3, r2
 800275e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	0d1b      	lsrs	r3, r3, #20
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2107      	movs	r1, #7
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	401a      	ands	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	0d1b      	lsrs	r3, r3, #20
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	431a      	orrs	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b0:	43db      	mvns	r3, r3
 80027b2:	401a      	ands	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0318 	and.w	r3, r3, #24
 80027ba:	4908      	ldr	r1, [pc, #32]	; (80027dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80027bc:	40d9      	lsrs	r1, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	400b      	ands	r3, r1
 80027c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c6:	431a      	orrs	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	0007ffff 	.word	0x0007ffff

080027e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6093      	str	r3, [r2, #8]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002818:	d101      	bne.n	800281e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800283c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002840:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002864:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002868:	d101      	bne.n	800286e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800288c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028b8:	f043 0202 	orr.w	r2, r3, #2
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <LL_ADC_IsEnabled+0x18>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <LL_ADC_IsEnabled+0x1a>
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d101      	bne.n	800290a <LL_ADC_IsDisableOngoing+0x18>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <LL_ADC_IsDisableOngoing+0x1a>
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002928:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800292c:	f043 0204 	orr.w	r2, r3, #4
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002950:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002954:	f043 0210 	orr.w	r2, r3, #16
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b04      	cmp	r3, #4
 800297a:	d101      	bne.n	8002980 <LL_ADC_REG_IsConversionOngoing+0x18>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800299e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a2:	f043 0220 	orr.w	r2, r3, #32
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d101      	bne.n	80029ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e12e      	b.n	8002c58 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7fe f98f 	bl	8000d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff feef 	bl	8002804 <LL_ADC_IsDeepPowerDownEnabled>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d004      	beq.n	8002a36 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fed5 	bl	80027e0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff0a 	bl	8002854 <LL_ADC_IsInternalRegulatorEnabled>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d115      	bne.n	8002a72 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff feee 	bl	800282c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a50:	4b83      	ldr	r3, [pc, #524]	; (8002c60 <HAL_ADC_Init+0x284>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	099b      	lsrs	r3, r3, #6
 8002a56:	4a83      	ldr	r2, [pc, #524]	; (8002c64 <HAL_ADC_Init+0x288>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	3301      	adds	r3, #1
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a64:	e002      	b.n	8002a6c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f9      	bne.n	8002a66 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff feec 	bl	8002854 <LL_ADC_IsInternalRegulatorEnabled>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10d      	bne.n	8002a9e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a86:	f043 0210 	orr.w	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	f043 0201 	orr.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff60 	bl	8002968 <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 80c7 	bne.w	8002c46 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 80c3 	bne.w	8002c46 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ac8:	f043 0202 	orr.w	r2, r3, #2
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fef9 	bl	80028cc <LL_ADC_IsEnabled>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10b      	bne.n	8002af8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ae0:	4861      	ldr	r0, [pc, #388]	; (8002c68 <HAL_ADC_Init+0x28c>)
 8002ae2:	f7ff fef3 	bl	80028cc <LL_ADC_IsEnabled>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4619      	mov	r1, r3
 8002af2:	485e      	ldr	r0, [pc, #376]	; (8002c6c <HAL_ADC_Init+0x290>)
 8002af4:	f7ff fd5c 	bl	80025b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7e5b      	ldrb	r3, [r3, #25]
 8002afc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b16:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002b18:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d106      	bne.n	8002b38 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	045b      	lsls	r3, r3, #17
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d009      	beq.n	8002b54 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	4b45      	ldr	r3, [pc, #276]	; (8002c70 <HAL_ADC_Init+0x294>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	69b9      	ldr	r1, [r7, #24]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fefb 	bl	8002968 <LL_ADC_REG_IsConversionOngoing>
 8002b72:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff1c 	bl	80029b6 <LL_ADC_INJ_IsConversionOngoing>
 8002b7e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d13d      	bne.n	8002c02 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d13a      	bne.n	8002c02 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b90:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b98:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba8:	f023 0302 	bic.w	r3, r3, #2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	69b9      	ldr	r1, [r7, #24]
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d118      	bne.n	8002bf2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002bca:	f023 0304 	bic.w	r3, r3, #4
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bdc:	4311      	orrs	r1, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002be2:	430a      	orrs	r2, r1
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	611a      	str	r2, [r3, #16]
 8002bf0:	e007      	b.n	8002c02 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10c      	bne.n	8002c24 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f023 010f 	bic.w	r1, r3, #15
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	1e5a      	subs	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
 8002c22:	e007      	b.n	8002c34 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 020f 	bic.w	r2, r2, #15
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f023 0303 	bic.w	r3, r3, #3
 8002c3c:	f043 0201 	orr.w	r2, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
 8002c44:	e007      	b.n	8002c56 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f043 0210 	orr.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c56:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000004 	.word	0x20000004
 8002c64:	053e2d63 	.word	0x053e2d63
 8002c68:	50040000 	.word	0x50040000
 8002c6c:	50040300 	.word	0x50040300
 8002c70:	fff0c007 	.word	0xfff0c007

08002c74 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fe71 	bl	8002968 <LL_ADC_REG_IsConversionOngoing>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d140      	bne.n	8002d0e <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_Start+0x26>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e03c      	b.n	8002d14 <HAL_ADC_Start+0xa0>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fd8a 	bl	80037bc <ADC_Enable>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d128      	bne.n	8002d04 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd2:	d106      	bne.n	8002ce2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f023 0206 	bic.w	r2, r3, #6
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	659a      	str	r2, [r3, #88]	; 0x58
 8002ce0:	e002      	b.n	8002ce8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	221c      	movs	r2, #28
 8002cee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fe0b 	bl	8002918 <LL_ADC_REG_StartConversion>
 8002d02:	e006      	b.n	8002d12 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d0c:	e001      	b.n	8002d12 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_Stop+0x16>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e023      	b.n	8002d7a <HAL_ADC_Stop+0x5e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002d3a:	2103      	movs	r1, #3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fc81 	bl	8003644 <ADC_ConversionStop>
 8002d42:	4603      	mov	r3, r0
 8002d44:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d111      	bne.n	8002d70 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fdaf 	bl	80038b0 <ADC_Disable>
 8002d52:	4603      	mov	r3, r0
 8002d54:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d109      	bne.n	8002d70 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	f043 0201 	orr.w	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d102      	bne.n	8002d9a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002d94:	2308      	movs	r3, #8
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e010      	b.n	8002dbc <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	f043 0220 	orr.w	r2, r3, #32
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e06d      	b.n	8002e94 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002db8:	2304      	movs	r3, #4
 8002dba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dbc:	f7ff fbbc 	bl	8002538 <HAL_GetTick>
 8002dc0:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002dc2:	e021      	b.n	8002e08 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dca:	d01d      	beq.n	8002e08 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002dcc:	f7ff fbb4 	bl	8002538 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d302      	bcc.n	8002de2 <HAL_ADC_PollForConversion+0x60>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d112      	bne.n	8002e08 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	f043 0204 	orr.w	r2, r3, #4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e045      	b.n	8002e94 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0d6      	beq.n	8002dc4 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fc4b 	bl	80026c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01c      	beq.n	8002e6c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7e5b      	ldrb	r3, [r3, #25]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d118      	bne.n	8002e6c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d111      	bne.n	8002e6c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d104      	bne.n	8002e7c <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2208      	movs	r2, #8
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	e00a      	b.n	8002e92 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	220c      	movs	r2, #12
 8002e90:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b0b6      	sub	sp, #216	; 0xd8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x22>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e39f      	b.n	800361a <HAL_ADC_ConfigChannel+0x762>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fd3e 	bl	8002968 <LL_ADC_REG_IsConversionOngoing>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 8384 	bne.w	80035fc <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	f7ff fbf1 	bl	80026e8 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fd2c 	bl	8002968 <LL_ADC_REG_IsConversionOngoing>
 8002f10:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fd4c 	bl	80029b6 <LL_ADC_INJ_IsConversionOngoing>
 8002f1e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f040 81a6 	bne.w	8003278 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 81a1 	bne.w	8003278 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6819      	ldr	r1, [r3, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f7ff fbfc 	bl	8002740 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	08db      	lsrs	r3, r3, #3
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d00a      	beq.n	8002f80 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6919      	ldr	r1, [r3, #16]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f7a:	f7ff fb4d 	bl	8002618 <LL_ADC_SetOffset>
 8002f7e:	e17b      	b.n	8003278 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fb6a 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10a      	bne.n	8002fac <HAL_ADC_ConfigChannel+0xf4>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fb5f 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	0e9b      	lsrs	r3, r3, #26
 8002fa6:	f003 021f 	and.w	r2, r3, #31
 8002faa:	e01e      	b.n	8002fea <HAL_ADC_ConfigChannel+0x132>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fb54 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	e004      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d105      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x14a>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	0e9b      	lsrs	r3, r3, #26
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	e018      	b.n	8003034 <HAL_ADC_ConfigChannel+0x17c>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800301a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800301e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003026:	2320      	movs	r3, #32
 8003028:	e004      	b.n	8003034 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800302a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	429a      	cmp	r2, r3
 8003036:	d106      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2200      	movs	r2, #0
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fb23 	bl	800268c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2101      	movs	r1, #1
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fb07 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10a      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x1ba>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2101      	movs	r1, #1
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fafc 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8003068:	4603      	mov	r3, r0
 800306a:	0e9b      	lsrs	r3, r3, #26
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	e01e      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x1f8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2101      	movs	r1, #1
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff faf1 	bl	8002660 <LL_ADC_GetOffsetChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003090:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80030a0:	2320      	movs	r3, #32
 80030a2:	e004      	b.n	80030ae <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80030a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d105      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x210>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	0e9b      	lsrs	r3, r3, #26
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	e018      	b.n	80030fa <HAL_ADC_ConfigChannel+0x242>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80030dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80030e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80030ec:	2320      	movs	r3, #32
 80030ee:	e004      	b.n	80030fa <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80030f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d106      	bne.n	800310c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2200      	movs	r2, #0
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fac0 	bl	800268c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2102      	movs	r1, #2
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff faa4 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8003118:	4603      	mov	r3, r0
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10a      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x280>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2102      	movs	r1, #2
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fa99 	bl	8002660 <LL_ADC_GetOffsetChannel>
 800312e:	4603      	mov	r3, r0
 8003130:	0e9b      	lsrs	r3, r3, #26
 8003132:	f003 021f 	and.w	r2, r3, #31
 8003136:	e01e      	b.n	8003176 <HAL_ADC_ConfigChannel+0x2be>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2102      	movs	r1, #2
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fa8e 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8003144:	4603      	mov	r3, r0
 8003146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003156:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800315a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800315e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003166:	2320      	movs	r3, #32
 8003168:	e004      	b.n	8003174 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800316a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317e:	2b00      	cmp	r3, #0
 8003180:	d105      	bne.n	800318e <HAL_ADC_ConfigChannel+0x2d6>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	0e9b      	lsrs	r3, r3, #26
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	e016      	b.n	80031bc <HAL_ADC_ConfigChannel+0x304>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80031ae:	2320      	movs	r3, #32
 80031b0:	e004      	b.n	80031bc <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80031b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031b6:	fab3 f383 	clz	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	429a      	cmp	r2, r3
 80031be:	d106      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2200      	movs	r2, #0
 80031c6:	2102      	movs	r1, #2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fa5f 	bl	800268c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2103      	movs	r1, #3
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fa43 	bl	8002660 <LL_ADC_GetOffsetChannel>
 80031da:	4603      	mov	r3, r0
 80031dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x342>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2103      	movs	r1, #3
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fa38 	bl	8002660 <LL_ADC_GetOffsetChannel>
 80031f0:	4603      	mov	r3, r0
 80031f2:	0e9b      	lsrs	r3, r3, #26
 80031f4:	f003 021f 	and.w	r2, r3, #31
 80031f8:	e017      	b.n	800322a <HAL_ADC_ConfigChannel+0x372>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2103      	movs	r1, #3
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fa2d 	bl	8002660 <LL_ADC_GetOffsetChannel>
 8003206:	4603      	mov	r3, r0
 8003208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003214:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800321c:	2320      	movs	r3, #32
 800321e:	e003      	b.n	8003228 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003232:	2b00      	cmp	r3, #0
 8003234:	d105      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x38a>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	0e9b      	lsrs	r3, r3, #26
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	e011      	b.n	8003266 <HAL_ADC_ConfigChannel+0x3ae>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003252:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800325a:	2320      	movs	r3, #32
 800325c:	e003      	b.n	8003266 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800325e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	429a      	cmp	r2, r3
 8003268:	d106      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	2103      	movs	r1, #3
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fa0a 	bl	800268c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fb25 	bl	80028cc <LL_ADC_IsEnabled>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	f040 81c2 	bne.w	800360e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6819      	ldr	r1, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	461a      	mov	r2, r3
 8003298:	f7ff fa7e 	bl	8002798 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4a8e      	ldr	r2, [pc, #568]	; (80034dc <HAL_ADC_ConfigChannel+0x624>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	f040 8130 	bne.w	8003508 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10b      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x418>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	0e9b      	lsrs	r3, r3, #26
 80032be:	3301      	adds	r3, #1
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2b09      	cmp	r3, #9
 80032c6:	bf94      	ite	ls
 80032c8:	2301      	movls	r3, #1
 80032ca:	2300      	movhi	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e019      	b.n	8003304 <HAL_ADC_ConfigChannel+0x44c>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80032de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80032e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80032e8:	2320      	movs	r3, #32
 80032ea:	e003      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80032ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2b09      	cmp	r3, #9
 80032fc:	bf94      	ite	ls
 80032fe:	2301      	movls	r3, #1
 8003300:	2300      	movhi	r3, #0
 8003302:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003304:	2b00      	cmp	r3, #0
 8003306:	d079      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003310:	2b00      	cmp	r3, #0
 8003312:	d107      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x46c>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0e9b      	lsrs	r3, r3, #26
 800331a:	3301      	adds	r3, #1
 800331c:	069b      	lsls	r3, r3, #26
 800331e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003322:	e015      	b.n	8003350 <HAL_ADC_ConfigChannel+0x498>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003334:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800333c:	2320      	movs	r3, #32
 800333e:	e003      	b.n	8003348 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	3301      	adds	r3, #1
 800334a:	069b      	lsls	r3, r3, #26
 800334c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003358:	2b00      	cmp	r3, #0
 800335a:	d109      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x4b8>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	0e9b      	lsrs	r3, r3, #26
 8003362:	3301      	adds	r3, #1
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	2101      	movs	r1, #1
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	e017      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x4e8>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800337e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003380:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003388:	2320      	movs	r3, #32
 800338a:	e003      	b.n	8003394 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800338c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	3301      	adds	r3, #1
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	2101      	movs	r1, #1
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	ea42 0103 	orr.w	r1, r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x50e>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0e9b      	lsrs	r3, r3, #26
 80033b6:	3301      	adds	r3, #1
 80033b8:	f003 021f 	and.w	r2, r3, #31
 80033bc:	4613      	mov	r3, r2
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	4413      	add	r3, r2
 80033c2:	051b      	lsls	r3, r3, #20
 80033c4:	e018      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x540>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80033d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80033de:	2320      	movs	r3, #32
 80033e0:	e003      	b.n	80033ea <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80033e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e4:	fab3 f383 	clz	r3, r3
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4613      	mov	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4413      	add	r3, r2
 80033f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f8:	430b      	orrs	r3, r1
 80033fa:	e080      	b.n	80034fe <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003404:	2b00      	cmp	r3, #0
 8003406:	d107      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x560>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	0e9b      	lsrs	r3, r3, #26
 800340e:	3301      	adds	r3, #1
 8003410:	069b      	lsls	r3, r3, #26
 8003412:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003416:	e015      	b.n	8003444 <HAL_ADC_ConfigChannel+0x58c>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003430:	2320      	movs	r3, #32
 8003432:	e003      	b.n	800343c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	3301      	adds	r3, #1
 800343e:	069b      	lsls	r3, r3, #26
 8003440:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344c:	2b00      	cmp	r3, #0
 800344e:	d109      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x5ac>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	0e9b      	lsrs	r3, r3, #26
 8003456:	3301      	adds	r3, #1
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2101      	movs	r1, #1
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	e017      	b.n	8003494 <HAL_ADC_ConfigChannel+0x5dc>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	fa93 f3a3 	rbit	r3, r3
 8003470:	61fb      	str	r3, [r7, #28]
  return result;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800347c:	2320      	movs	r3, #32
 800347e:	e003      	b.n	8003488 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	3301      	adds	r3, #1
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	2101      	movs	r1, #1
 8003490:	fa01 f303 	lsl.w	r3, r1, r3
 8003494:	ea42 0103 	orr.w	r1, r2, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x608>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0e9b      	lsrs	r3, r3, #26
 80034aa:	3301      	adds	r3, #1
 80034ac:	f003 021f 	and.w	r2, r3, #31
 80034b0:	4613      	mov	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4413      	add	r3, r2
 80034b6:	3b1e      	subs	r3, #30
 80034b8:	051b      	lsls	r3, r3, #20
 80034ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034be:	e01d      	b.n	80034fc <HAL_ADC_ConfigChannel+0x644>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	613b      	str	r3, [r7, #16]
  return result;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d103      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80034d8:	2320      	movs	r3, #32
 80034da:	e005      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x630>
 80034dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	3301      	adds	r3, #1
 80034ea:	f003 021f 	and.w	r2, r3, #31
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	3b1e      	subs	r3, #30
 80034f6:	051b      	lsls	r3, r3, #20
 80034f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034fc:	430b      	orrs	r3, r1
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	6892      	ldr	r2, [r2, #8]
 8003502:	4619      	mov	r1, r3
 8003504:	f7ff f91c 	bl	8002740 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b45      	ldr	r3, [pc, #276]	; (8003624 <HAL_ADC_ConfigChannel+0x76c>)
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d07c      	beq.n	800360e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003514:	4844      	ldr	r0, [pc, #272]	; (8003628 <HAL_ADC_ConfigChannel+0x770>)
 8003516:	f7ff f871 	bl	80025fc <LL_ADC_GetCommonPathInternalCh>
 800351a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800351e:	4843      	ldr	r0, [pc, #268]	; (800362c <HAL_ADC_ConfigChannel+0x774>)
 8003520:	f7ff f9d4 	bl	80028cc <LL_ADC_IsEnabled>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d15e      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a40      	ldr	r2, [pc, #256]	; (8003630 <HAL_ADC_ConfigChannel+0x778>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d127      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x6cc>
 8003534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d121      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a39      	ldr	r2, [pc, #228]	; (800362c <HAL_ADC_ConfigChannel+0x774>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d161      	bne.n	800360e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800354a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800354e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003552:	4619      	mov	r1, r3
 8003554:	4834      	ldr	r0, [pc, #208]	; (8003628 <HAL_ADC_ConfigChannel+0x770>)
 8003556:	f7ff f83e 	bl	80025d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800355a:	4b36      	ldr	r3, [pc, #216]	; (8003634 <HAL_ADC_ConfigChannel+0x77c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	099b      	lsrs	r3, r3, #6
 8003560:	4a35      	ldr	r2, [pc, #212]	; (8003638 <HAL_ADC_ConfigChannel+0x780>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	099b      	lsrs	r3, r3, #6
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003574:	e002      	b.n	800357c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3b01      	subs	r3, #1
 800357a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f9      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003582:	e044      	b.n	800360e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2c      	ldr	r2, [pc, #176]	; (800363c <HAL_ADC_ConfigChannel+0x784>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d113      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x6fe>
 800358e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10d      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a23      	ldr	r2, [pc, #140]	; (800362c <HAL_ADC_ConfigChannel+0x774>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d134      	bne.n	800360e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80035a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ac:	4619      	mov	r1, r3
 80035ae:	481e      	ldr	r0, [pc, #120]	; (8003628 <HAL_ADC_ConfigChannel+0x770>)
 80035b0:	f7ff f811 	bl	80025d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b4:	e02b      	b.n	800360e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a21      	ldr	r2, [pc, #132]	; (8003640 <HAL_ADC_ConfigChannel+0x788>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d126      	bne.n	800360e <HAL_ADC_ConfigChannel+0x756>
 80035c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d120      	bne.n	800360e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a16      	ldr	r2, [pc, #88]	; (800362c <HAL_ADC_ConfigChannel+0x774>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d11b      	bne.n	800360e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80035d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035de:	4619      	mov	r1, r3
 80035e0:	4811      	ldr	r0, [pc, #68]	; (8003628 <HAL_ADC_ConfigChannel+0x770>)
 80035e2:	f7fe fff8 	bl	80025d6 <LL_ADC_SetCommonPathInternalCh>
 80035e6:	e012      	b.n	800360e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80035fa:	e008      	b.n	800360e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003616:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800361a:	4618      	mov	r0, r3
 800361c:	37d8      	adds	r7, #216	; 0xd8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	80080000 	.word	0x80080000
 8003628:	50040300 	.word	0x50040300
 800362c:	50040000 	.word	0x50040000
 8003630:	c7520000 	.word	0xc7520000
 8003634:	20000004 	.word	0x20000004
 8003638:	053e2d63 	.word	0x053e2d63
 800363c:	cb840000 	.word	0xcb840000
 8003640:	80000001 	.word	0x80000001

08003644 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff f984 	bl	8002968 <LL_ADC_REG_IsConversionOngoing>
 8003660:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff f9a5 	bl	80029b6 <LL_ADC_INJ_IsConversionOngoing>
 800366c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d103      	bne.n	800367c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8098 	beq.w	80037ac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d02a      	beq.n	80036e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	7e5b      	ldrb	r3, [r3, #25]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d126      	bne.n	80036e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	7e1b      	ldrb	r3, [r3, #24]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d122      	bne.n	80036e0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800369a:	2301      	movs	r3, #1
 800369c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800369e:	e014      	b.n	80036ca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	4a45      	ldr	r2, [pc, #276]	; (80037b8 <ADC_ConversionStop+0x174>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d90d      	bls.n	80036c4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ac:	f043 0210 	orr.w	r2, r3, #16
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	f043 0201 	orr.w	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e074      	b.n	80037ae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	3301      	adds	r3, #1
 80036c8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d1e3      	bne.n	80036a0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2240      	movs	r2, #64	; 0x40
 80036de:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d014      	beq.n	8003710 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff f93c 	bl	8002968 <LL_ADC_REG_IsConversionOngoing>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00c      	beq.n	8003710 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff f8f9 	bl	80028f2 <LL_ADC_IsDisableOngoing>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d104      	bne.n	8003710 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff f918 	bl	8002940 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d014      	beq.n	8003740 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff f94b 	bl	80029b6 <LL_ADC_INJ_IsConversionOngoing>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff f8e1 	bl	80028f2 <LL_ADC_IsDisableOngoing>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff f927 	bl	800298e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d005      	beq.n	8003752 <ADC_ConversionStop+0x10e>
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d105      	bne.n	8003758 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800374c:	230c      	movs	r3, #12
 800374e:	617b      	str	r3, [r7, #20]
        break;
 8003750:	e005      	b.n	800375e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003752:	2308      	movs	r3, #8
 8003754:	617b      	str	r3, [r7, #20]
        break;
 8003756:	e002      	b.n	800375e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003758:	2304      	movs	r3, #4
 800375a:	617b      	str	r3, [r7, #20]
        break;
 800375c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800375e:	f7fe feeb 	bl	8002538 <HAL_GetTick>
 8003762:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003764:	e01b      	b.n	800379e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003766:	f7fe fee7 	bl	8002538 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b05      	cmp	r3, #5
 8003772:	d914      	bls.n	800379e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	f043 0210 	orr.w	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e007      	b.n	80037ae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1dc      	bne.n	8003766 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	a33fffff 	.word	0xa33fffff

080037bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff f87d 	bl	80028cc <LL_ADC_IsEnabled>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d15e      	bne.n	8003896 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	4b30      	ldr	r3, [pc, #192]	; (80038a0 <ADC_Enable+0xe4>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	f043 0210 	orr.w	r2, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	f043 0201 	orr.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e04a      	b.n	8003898 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff f838 	bl	800287c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800380c:	4825      	ldr	r0, [pc, #148]	; (80038a4 <ADC_Enable+0xe8>)
 800380e:	f7fe fef5 	bl	80025fc <LL_ADC_GetCommonPathInternalCh>
 8003812:	4603      	mov	r3, r0
 8003814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00f      	beq.n	800383c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800381c:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <ADC_Enable+0xec>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	4a22      	ldr	r2, [pc, #136]	; (80038ac <ADC_Enable+0xf0>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	3301      	adds	r3, #1
 800382c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800382e:	e002      	b.n	8003836 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	3b01      	subs	r3, #1
 8003834:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1f9      	bne.n	8003830 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800383c:	f7fe fe7c 	bl	8002538 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003842:	e021      	b.n	8003888 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff f83f 	bl	80028cc <LL_ADC_IsEnabled>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff f80f 	bl	800287c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800385e:	f7fe fe6b 	bl	8002538 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d90d      	bls.n	8003888 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	f043 0210 	orr.w	r2, r3, #16
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e007      	b.n	8003898 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	d1d6      	bne.n	8003844 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	8000003f 	.word	0x8000003f
 80038a4:	50040300 	.word	0x50040300
 80038a8:	20000004 	.word	0x20000004
 80038ac:	053e2d63 	.word	0x053e2d63

080038b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff f818 	bl	80028f2 <LL_ADC_IsDisableOngoing>
 80038c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fe ffff 	bl	80028cc <LL_ADC_IsEnabled>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d047      	beq.n	8003964 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d144      	bne.n	8003964 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 030d 	and.w	r3, r3, #13
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d10c      	bne.n	8003902 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fe ffd9 	bl	80028a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2203      	movs	r2, #3
 80038f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038fa:	f7fe fe1d 	bl	8002538 <HAL_GetTick>
 80038fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003900:	e029      	b.n	8003956 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f043 0210 	orr.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e023      	b.n	8003966 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800391e:	f7fe fe0b 	bl	8002538 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d914      	bls.n	8003956 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e007      	b.n	8003966 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1dc      	bne.n	800391e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <__NVIC_SetPriorityGrouping>:
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800398c:	4013      	ands	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800399c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a2:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	60d3      	str	r3, [r2, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_GetPriorityGrouping>:
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <__NVIC_GetPriorityGrouping+0x18>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 0307 	and.w	r3, r3, #7
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <__NVIC_EnableIRQ>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	db0b      	blt.n	80039fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	4907      	ldr	r1, [pc, #28]	; (8003a0c <__NVIC_EnableIRQ+0x38>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2001      	movs	r0, #1
 80039f6:	fa00 f202 	lsl.w	r2, r0, r2
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	e000e100 	.word	0xe000e100

08003a10 <__NVIC_SetPriority>:
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	db0a      	blt.n	8003a3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	490c      	ldr	r1, [pc, #48]	; (8003a5c <__NVIC_SetPriority+0x4c>)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	440b      	add	r3, r1
 8003a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a38:	e00a      	b.n	8003a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4908      	ldr	r1, [pc, #32]	; (8003a60 <__NVIC_SetPriority+0x50>)
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	3b04      	subs	r3, #4
 8003a48:	0112      	lsls	r2, r2, #4
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	761a      	strb	r2, [r3, #24]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000e100 	.word	0xe000e100
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <NVIC_EncodePriority>:
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	; 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f1c3 0307 	rsb	r3, r3, #7
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	bf28      	it	cs
 8003a82:	2304      	movcs	r3, #4
 8003a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d902      	bls.n	8003a94 <NVIC_EncodePriority+0x30>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3b03      	subs	r3, #3
 8003a92:	e000      	b.n	8003a96 <NVIC_EncodePriority+0x32>
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aac:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43d9      	mvns	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	4313      	orrs	r3, r2
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3724      	adds	r7, #36	; 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <SysTick_Config>:
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003adc:	d301      	bcc.n	8003ae2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e00f      	b.n	8003b02 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <SysTick_Config+0x40>)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aea:	210f      	movs	r1, #15
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f7ff ff8e 	bl	8003a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <SysTick_Config+0x40>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afa:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <SysTick_Config+0x40>)
 8003afc:	2207      	movs	r2, #7
 8003afe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000e010 	.word	0xe000e010

08003b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff29 	bl	8003970 <__NVIC_SetPriorityGrouping>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b34:	f7ff ff40 	bl	80039b8 <__NVIC_GetPriorityGrouping>
 8003b38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	6978      	ldr	r0, [r7, #20]
 8003b40:	f7ff ff90 	bl	8003a64 <NVIC_EncodePriority>
 8003b44:	4602      	mov	r2, r0
 8003b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff5f 	bl	8003a10 <__NVIC_SetPriority>
}
 8003b52:	bf00      	nop
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	4603      	mov	r3, r0
 8003b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ff33 	bl	80039d4 <__NVIC_EnableIRQ>
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff ffa4 	bl	8003acc <SysTick_Config>
 8003b84:	4603      	mov	r3, r0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e078      	b.n	8003c94 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4b3c      	ldr	r3, [pc, #240]	; (8003c9c <HAL_DMA_Init+0x10c>)
 8003baa:	4413      	add	r3, r2
 8003bac:	4a3c      	ldr	r2, [pc, #240]	; (8003ca0 <HAL_DMA_Init+0x110>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	009a      	lsls	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a39      	ldr	r2, [pc, #228]	; (8003ca4 <HAL_DMA_Init+0x114>)
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f9b6 	bl	8003f84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c20:	d102      	bne.n	8003c28 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c30:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003c34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c3e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d010      	beq.n	8003c6a <HAL_DMA_Init+0xda>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d80c      	bhi.n	8003c6a <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f9c3 	bl	8003fdc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	e008      	b.n	8003c7c <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	bffdfff8 	.word	0xbffdfff8
 8003ca0:	cccccccd 	.word	0xcccccccd
 8003ca4:	40020000 	.word	0x40020000

08003ca8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e04f      	b.n	8003d5a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d008      	beq.n	8003cd8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e040      	b.n	8003d5a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 020e 	bic.w	r2, r2, #14
 8003ce6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cf6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	f003 021c 	and.w	r2, r3, #28
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	2101      	movs	r1, #1
 8003d16:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00c      	beq.n	8003d48 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d005      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2204      	movs	r2, #4
 8003d82:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
 8003d88:	e047      	b.n	8003e1a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 020e 	bic.w	r2, r2, #14
 8003d98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003db8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f003 021c 	and.w	r2, r3, #28
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dcc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dd6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00c      	beq.n	8003dfa <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003df8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	4798      	blx	r3
    }
  }
  return status;
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	f003 031c 	and.w	r3, r3, #28
 8003e44:	2204      	movs	r2, #4
 8003e46:	409a      	lsls	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d026      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x7a>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d021      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d107      	bne.n	8003e78 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0204 	bic.w	r2, r2, #4
 8003e76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	f003 021c 	and.w	r2, r3, #28
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	2104      	movs	r1, #4
 8003e86:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d071      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e9c:	e06c      	b.n	8003f78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	f003 031c 	and.w	r3, r3, #28
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d02e      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xec>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d029      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 020a 	bic.w	r2, r2, #10
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	f003 021c 	and.w	r2, r3, #28
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	2102      	movs	r1, #2
 8003ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d038      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f0e:	e033      	b.n	8003f78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	f003 031c 	and.w	r3, r3, #28
 8003f18:	2208      	movs	r2, #8
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d02a      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x156>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d025      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 020e 	bic.w	r2, r2, #14
 8003f3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f003 021c 	and.w	r2, r3, #28
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
}
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f98:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	3b08      	subs	r3, #8
 8003fa8:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a08      	ldr	r2, [pc, #32]	; (8003fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003fb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	cccccccd 	.word	0xcccccccd
 8003fd8:	40020880 	.word	0x40020880

08003fdc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a09      	ldr	r2, [pc, #36]	; (8004024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004000:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3b01      	subs	r3, #1
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2201      	movs	r2, #1
 800400c:	409a      	lsls	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	1000823f 	.word	0x1000823f
 8004024:	40020940 	.word	0x40020940

08004028 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004036:	e146      	b.n	80042c6 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	2101      	movs	r1, #1
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	fa01 f303 	lsl.w	r3, r1, r3
 8004044:	4013      	ands	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 8138 	beq.w	80042c0 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d005      	beq.n	8004068 <HAL_GPIO_Init+0x40>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d130      	bne.n	80040ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	2203      	movs	r2, #3
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4013      	ands	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800409e:	2201      	movs	r2, #1
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	091b      	lsrs	r3, r3, #4
 80040b4:	f003 0201 	and.w	r2, r3, #1
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d017      	beq.n	8004106 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	2203      	movs	r2, #3
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d123      	bne.n	800415a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	08da      	lsrs	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3208      	adds	r2, #8
 800411a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	220f      	movs	r2, #15
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	08da      	lsrs	r2, r3, #3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3208      	adds	r2, #8
 8004154:	6939      	ldr	r1, [r7, #16]
 8004156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	2203      	movs	r2, #3
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4013      	ands	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0203 	and.w	r2, r3, #3
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8092 	beq.w	80042c0 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800419c:	4a51      	ldr	r2, [pc, #324]	; (80042e4 <HAL_GPIO_Init+0x2bc>)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	089b      	lsrs	r3, r3, #2
 80041a2:	3302      	adds	r3, #2
 80041a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	220f      	movs	r2, #15
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041c6:	d013      	beq.n	80041f0 <HAL_GPIO_Init+0x1c8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a47      	ldr	r2, [pc, #284]	; (80042e8 <HAL_GPIO_Init+0x2c0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00d      	beq.n	80041ec <HAL_GPIO_Init+0x1c4>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a46      	ldr	r2, [pc, #280]	; (80042ec <HAL_GPIO_Init+0x2c4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d007      	beq.n	80041e8 <HAL_GPIO_Init+0x1c0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a45      	ldr	r2, [pc, #276]	; (80042f0 <HAL_GPIO_Init+0x2c8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d101      	bne.n	80041e4 <HAL_GPIO_Init+0x1bc>
 80041e0:	2304      	movs	r3, #4
 80041e2:	e006      	b.n	80041f2 <HAL_GPIO_Init+0x1ca>
 80041e4:	2307      	movs	r3, #7
 80041e6:	e004      	b.n	80041f2 <HAL_GPIO_Init+0x1ca>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e002      	b.n	80041f2 <HAL_GPIO_Init+0x1ca>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <HAL_GPIO_Init+0x1ca>
 80041f0:	2300      	movs	r3, #0
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	f002 0203 	and.w	r2, r2, #3
 80041f8:	0092      	lsls	r2, r2, #2
 80041fa:	4093      	lsls	r3, r2
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004202:	4938      	ldr	r1, [pc, #224]	; (80042e4 <HAL_GPIO_Init+0x2bc>)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	089b      	lsrs	r3, r3, #2
 8004208:	3302      	adds	r3, #2
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004210:	4b38      	ldr	r3, [pc, #224]	; (80042f4 <HAL_GPIO_Init+0x2cc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	43db      	mvns	r3, r3
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4013      	ands	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004234:	4a2f      	ldr	r2, [pc, #188]	; (80042f4 <HAL_GPIO_Init+0x2cc>)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800423a:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <HAL_GPIO_Init+0x2cc>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	43db      	mvns	r3, r3
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4013      	ands	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800425e:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <HAL_GPIO_Init+0x2cc>)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004264:	4b23      	ldr	r3, [pc, #140]	; (80042f4 <HAL_GPIO_Init+0x2cc>)
 8004266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800426a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	43db      	mvns	r3, r3
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800428a:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <HAL_GPIO_Init+0x2cc>)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004292:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <HAL_GPIO_Init+0x2cc>)
 8004294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	43db      	mvns	r3, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042b8:	4a0e      	ldr	r2, [pc, #56]	; (80042f4 <HAL_GPIO_Init+0x2cc>)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3301      	adds	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f47f aeb1 	bne.w	8004038 <HAL_GPIO_Init+0x10>
  }
}
 80042d6:	bf00      	nop
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40010000 	.word	0x40010000
 80042e8:	48000400 	.word	0x48000400
 80042ec:	48000800 	.word	0x48000800
 80042f0:	48001000 	.word	0x48001000
 80042f4:	58000800 	.word	0x58000800

080042f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
 8004304:	4613      	mov	r3, r2
 8004306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004308:	787b      	ldrb	r3, [r7, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800430e:	887a      	ldrh	r2, [r7, #2]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004314:	e002      	b.n	800431c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004316:	887a      	ldrh	r2, [r7, #2]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4013      	ands	r3, r2
 8004340:	041a      	lsls	r2, r3, #16
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	43d9      	mvns	r1, r3
 8004346:	887b      	ldrh	r3, [r7, #2]
 8004348:	400b      	ands	r3, r1
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	619a      	str	r2, [r3, #24]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01e      	beq.n	80043ac <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800436e:	4b13      	ldr	r3, [pc, #76]	; (80043bc <HAL_IPCC_Init+0x60>)
 8004370:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fc ffd8 	bl	8001334 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004384:	68b8      	ldr	r0, [r7, #8]
 8004386:	f000 f8f5 	bl	8004574 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f8c6 	bl	8004528 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80043aa:	e001      	b.n	80043b0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	58000c00 	.word	0x58000c00

080043c0 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80043cc:	4b22      	ldr	r3, [pc, #136]	; (8004458 <HAL_IPCC_TX_IRQHandler+0x98>)
 80043ce:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80043da:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	041b      	lsls	r3, r3, #16
 80043e2:	43db      	mvns	r3, r3
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4013      	ands	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80043ea:	e02c      	b.n	8004446 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	3310      	adds	r3, #16
 80043f4:	2201      	movs	r2, #1
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4013      	ands	r3, r2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01c      	beq.n	8004440 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	3306      	adds	r3, #6
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	3306      	adds	r3, #6
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	6939      	ldr	r1, [r7, #16]
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	43db      	mvns	r3, r3
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4013      	ands	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	3301      	adds	r3, #1
 8004444:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1cf      	bne.n	80043ec <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	58000c00 	.word	0x58000c00

0800445c <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004468:	4b20      	ldr	r3, [pc, #128]	; (80044ec <HAL_IPCC_RX_IRQHandler+0x90>)
 800446a:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 800446c:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <HAL_IPCC_RX_IRQHandler+0x94>)
 800446e:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	43db      	mvns	r3, r3
 8004476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800447a:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	4013      	ands	r3, r2
 8004484:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8004486:	e029      	b.n	80044dc <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	2201      	movs	r2, #1
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4013      	ands	r3, r2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01a      	beq.n	80044d6 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	69b9      	ldr	r1, [r7, #24]
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	43db      	mvns	r3, r3
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	4013      	ands	r3, r2
 80044d4:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	3301      	adds	r3, #1
 80044da:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1d2      	bne.n	8004488 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
 80044e6:	3720      	adds	r7, #32
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	58000c00 	.word	0x58000c00
 80044f0:	58000c10 	.word	0x58000c10

080044f4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e00f      	b.n	8004556 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	4a0b      	ldr	r2, [pc, #44]	; (800456c <IPCC_SetDefaultCallbacks+0x44>)
 8004540:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3306      	adds	r3, #6
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	4a08      	ldr	r2, [pc, #32]	; (8004570 <IPCC_SetDefaultCallbacks+0x48>)
 800454e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3301      	adds	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b05      	cmp	r3, #5
 800455a:	d9ec      	bls.n	8004536 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	080044f5 	.word	0x080044f5
 8004570:	0800450f 	.word	0x0800450f

08004574 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004588:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	223f      	movs	r2, #63	; 0x3f
 800458e:	609a      	str	r2, [r3, #8]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045aa:	6013      	str	r3, [r2, #0]
}
 80045ac:	bf00      	nop
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	58000400 	.word	0x58000400

080045bc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80045c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ce:	d101      	bne.n	80045d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80045e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800460c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004610:	6013      	str	r3, [r2, #0]
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800462e:	d101      	bne.n	8004634 <LL_RCC_HSE_IsReady+0x18>
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <LL_RCC_HSE_IsReady+0x1a>
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800464e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004652:	6013      	str	r3, [r2, #0]
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800466c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004670:	6013      	str	r3, [r2, #0]
}
 8004672:	bf00      	nop
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468e:	d101      	bne.n	8004694 <LL_RCC_HSI_IsReady+0x18>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <LL_RCC_HSI_IsReady+0x1a>
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046ba:	4313      	orrs	r3, r2
 80046bc:	604b      	str	r3, [r1, #4]
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80046ca:	b480      	push	{r7}
 80046cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80046ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80046e2:	bf00      	nop
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80046f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800470e:	b480      	push	{r7}
 8004710:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b02      	cmp	r3, #2
 8004720:	d101      	bne.n	8004726 <LL_RCC_HSI48_IsReady+0x18>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <LL_RCC_HSI48_IsReady+0x1a>
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8004732:	b480      	push	{r7}
 8004734:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800474a:	bf00      	nop
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004776:	b480      	push	{r7}
 8004778:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800477a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004786:	f043 0304 	orr.w	r3, r3, #4
 800478a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800478e:	bf00      	nop
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800479c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047a8:	f023 0304 	bic.w	r3, r3, #4
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047b0:	bf00      	nop
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80047ba:	b480      	push	{r7}
 80047bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80047be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d101      	bne.n	80047d2 <LL_RCC_LSE_IsReady+0x18>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <LL_RCC_LSE_IsReady+0x1a>
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80047de:	b480      	push	{r7}
 80047e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80047e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047f6:	bf00      	nop
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004818:	bf00      	nop
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004822:	b480      	push	{r7}
 8004824:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b02      	cmp	r3, #2
 8004834:	d101      	bne.n	800483a <LL_RCC_LSI1_IsReady+0x18>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <LL_RCC_LSI1_IsReady+0x1a>
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004846:	b480      	push	{r7}
 8004848:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800484a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004856:	f043 0304 	orr.w	r3, r3, #4
 800485a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800486c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004878:	f023 0304 	bic.w	r3, r3, #4
 800487c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800488a:	b480      	push	{r7}
 800488c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800488e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b08      	cmp	r3, #8
 800489c:	d101      	bne.n	80048a2 <LL_RCC_LSI2_IsReady+0x18>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <LL_RCC_LSI2_IsReady+0x1a>
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80048b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80048e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80048fa:	b480      	push	{r7}
 80048fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80048fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	6013      	str	r3, [r2, #0]
}
 800490e:	bf00      	nop
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800491c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b02      	cmp	r3, #2
 8004928:	d101      	bne.n	800492e <LL_RCC_MSI_IsReady+0x16>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <LL_RCC_MSI_IsReady+0x18>
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800494c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004972:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2bb0      	cmp	r3, #176	; 0xb0
 8004978:	d901      	bls.n	800497e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800497a:	23b0      	movs	r3, #176	; 0xb0
 800497c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800497e:	687b      	ldr	r3, [r7, #4]
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049a6:	4313      	orrs	r3, r2
 80049a8:	604b      	str	r3, [r1, #4]
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80049be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f023 0203 	bic.w	r2, r3, #3
 80049c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80049de:	b480      	push	{r7}
 80049e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80049e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 030c 	and.w	r3, r3, #12
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80049fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a5a:	f023 020f 	bic.w	r2, r3, #15
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	608b      	str	r3, [r1, #8]
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	608b      	str	r3, [r1, #8]
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b26:	6013      	str	r3, [r2, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004b32:	b480      	push	{r7}
 8004b34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b44:	6013      	str	r3, [r2, #0]
}
 8004b46:	bf00      	nop
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b62:	d101      	bne.n	8004b68 <LL_RCC_PLL_IsReady+0x18>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <LL_RCC_PLL_IsReady+0x1a>
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0303 	and.w	r3, r3, #3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d101      	bne.n	8004bee <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c0e:	d101      	bne.n	8004c14 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d101      	bne.n	8004c3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c58:	d101      	bne.n	8004c5e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c7c:	d101      	bne.n	8004c82 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
	...

08004c90 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c90:	b590      	push	{r4, r7, lr}
 8004c92:	b08d      	sub	sp, #52	; 0x34
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e35c      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 808d 	beq.w	8004dca <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb0:	f7ff fe95 	bl	80049de <LL_RCC_GetSysClkSource>
 8004cb4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cb6:	f7ff ff82 	bl	8004bbe <LL_RCC_PLL_GetMainSource>
 8004cba:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d005      	beq.n	8004cce <HAL_RCC_OscConfig+0x3e>
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	2b0c      	cmp	r3, #12
 8004cc6:	d147      	bne.n	8004d58 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d144      	bne.n	8004d58 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e340      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004cde:	f7ff fe40 	bl	8004962 <LL_RCC_MSI_GetRange>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	429c      	cmp	r4, r3
 8004ce6:	d914      	bls.n	8004d12 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fd0f 	bl	8005710 <RCC_SetFlashLatencyFromMSIRange>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e32f      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fe1a 	bl	800493a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fe3e 	bl	800498c <LL_RCC_MSI_SetCalibTrimming>
 8004d10:	e013      	b.n	8004d3a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fe0f 	bl	800493a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fe33 	bl	800498c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fcf0 	bl	8005710 <RCC_SetFlashLatencyFromMSIRange>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e310      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d3a:	f000 fcbf 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4aa4      	ldr	r2, [pc, #656]	; (8004fd4 <HAL_RCC_OscConfig+0x344>)
 8004d42:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d44:	4ba4      	ldr	r3, [pc, #656]	; (8004fd8 <HAL_RCC_OscConfig+0x348>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fd fba7 	bl	800249c <HAL_InitTick>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d039      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e301      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01e      	beq.n	8004d9e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d60:	f7ff fdbc 	bl	80048dc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d64:	f7fd fbe8 	bl	8002538 <HAL_GetTick>
 8004d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d6c:	f7fd fbe4 	bl	8002538 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e2ee      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004d7e:	f7ff fdcb 	bl	8004918 <LL_RCC_MSI_IsReady>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f1      	beq.n	8004d6c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fdd4 	bl	800493a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fdf8 	bl	800498c <LL_RCC_MSI_SetCalibTrimming>
 8004d9c:	e015      	b.n	8004dca <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d9e:	f7ff fdac 	bl	80048fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004da2:	f7fd fbc9 	bl	8002538 <HAL_GetTick>
 8004da6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004daa:	f7fd fbc5 	bl	8002538 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e2cf      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004dbc:	f7ff fdac 	bl	8004918 <LL_RCC_MSI_IsReady>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f1      	bne.n	8004daa <HAL_RCC_OscConfig+0x11a>
 8004dc6:	e000      	b.n	8004dca <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004dc8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d047      	beq.n	8004e66 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd6:	f7ff fe02 	bl	80049de <LL_RCC_GetSysClkSource>
 8004dda:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ddc:	f7ff feef 	bl	8004bbe <LL_RCC_PLL_GetMainSource>
 8004de0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_OscConfig+0x164>
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2b0c      	cmp	r3, #12
 8004dec:	d108      	bne.n	8004e00 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d105      	bne.n	8004e00 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d134      	bne.n	8004e66 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e2ad      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d102      	bne.n	8004e10 <HAL_RCC_OscConfig+0x180>
 8004e0a:	f7ff fbe9 	bl	80045e0 <LL_RCC_HSE_Enable>
 8004e0e:	e001      	b.n	8004e14 <HAL_RCC_OscConfig+0x184>
 8004e10:	f7ff fbf5 	bl	80045fe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d012      	beq.n	8004e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fd fb8c 	bl	8002538 <HAL_GetTick>
 8004e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e24:	f7fd fb88 	bl	8002538 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	; 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e292      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004e36:	f7ff fbf1 	bl	800461c <LL_RCC_HSE_IsReady>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f1      	beq.n	8004e24 <HAL_RCC_OscConfig+0x194>
 8004e40:	e011      	b.n	8004e66 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e42:	f7fd fb79 	bl	8002538 <HAL_GetTick>
 8004e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e4a:	f7fd fb75 	bl	8002538 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b64      	cmp	r3, #100	; 0x64
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e27f      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e5c:	f7ff fbde 	bl	800461c <LL_RCC_HSE_IsReady>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f1      	bne.n	8004e4a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d04c      	beq.n	8004f0c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e72:	f7ff fdb4 	bl	80049de <LL_RCC_GetSysClkSource>
 8004e76:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e78:	f7ff fea1 	bl	8004bbe <LL_RCC_PLL_GetMainSource>
 8004e7c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_OscConfig+0x200>
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b0c      	cmp	r3, #12
 8004e88:	d10e      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e25f      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fbfd 	bl	80046a0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ea6:	e031      	b.n	8004f0c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d019      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb0:	f7ff fbc6 	bl	8004640 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fd fb40 	bl	8002538 <HAL_GetTick>
 8004eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ebc:	f7fd fb3c 	bl	8002538 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e246      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004ece:	f7ff fbd5 	bl	800467c <LL_RCC_HSI_IsReady>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f1      	beq.n	8004ebc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fbdf 	bl	80046a0 <LL_RCC_HSI_SetCalibTrimming>
 8004ee2:	e013      	b.n	8004f0c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ee4:	f7ff fbbb 	bl	800465e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fd fb26 	bl	8002538 <HAL_GetTick>
 8004eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef0:	f7fd fb22 	bl	8002538 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e22c      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004f02:	f7ff fbbb 	bl	800467c <LL_RCC_HSI_IsReady>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f1      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80a3 	beq.w	800506c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d076      	beq.n	800501c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d046      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004f3a:	f7ff fc72 	bl	8004822 <LL_RCC_LSI1_IsReady>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d113      	bne.n	8004f6c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004f44:	f7ff fc4b 	bl	80047de <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f48:	f7fd faf6 	bl	8002538 <HAL_GetTick>
 8004f4c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f50:	f7fd faf2 	bl	8002538 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e1fc      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004f62:	f7ff fc5e 	bl	8004822 <LL_RCC_LSI1_IsReady>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0f1      	beq.n	8004f50 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004f6c:	f7ff fc6b 	bl	8004846 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fd fae2 	bl	8002538 <HAL_GetTick>
 8004f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f78:	f7fd fade 	bl	8002538 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e1e8      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f8a:	f7ff fc7e 	bl	800488a <LL_RCC_LSI2_IsReady>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f1      	beq.n	8004f78 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fc88 	bl	80048ae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004f9e:	f7ff fc2f 	bl	8004800 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fd fac9 	bl	8002538 <HAL_GetTick>
 8004fa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004faa:	f7fd fac5 	bl	8002538 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e1cf      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004fbc:	f7ff fc31 	bl	8004822 <LL_RCC_LSI1_IsReady>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f1      	bne.n	8004faa <HAL_RCC_OscConfig+0x31a>
 8004fc6:	e051      	b.n	800506c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004fc8:	f7ff fc09 	bl	80047de <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fd fab4 	bl	8002538 <HAL_GetTick>
 8004fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004fd2:	e00c      	b.n	8004fee <HAL_RCC_OscConfig+0x35e>
 8004fd4:	20000004 	.word	0x20000004
 8004fd8:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fdc:	f7fd faac 	bl	8002538 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e1b6      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004fee:	f7ff fc18 	bl	8004822 <LL_RCC_LSI1_IsReady>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f1      	beq.n	8004fdc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004ff8:	f7ff fc36 	bl	8004868 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ffe:	f7fd fa9b 	bl	8002538 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b03      	cmp	r3, #3
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e1a5      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005010:	f7ff fc3b 	bl	800488a <LL_RCC_LSI2_IsReady>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f1      	bne.n	8004ffe <HAL_RCC_OscConfig+0x36e>
 800501a:	e027      	b.n	800506c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800501c:	f7ff fc24 	bl	8004868 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005020:	f7fd fa8a 	bl	8002538 <HAL_GetTick>
 8005024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005028:	f7fd fa86 	bl	8002538 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b03      	cmp	r3, #3
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e190      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800503a:	f7ff fc26 	bl	800488a <LL_RCC_LSI2_IsReady>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f1      	bne.n	8005028 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005044:	f7ff fbdc 	bl	8004800 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005048:	f7fd fa76 	bl	8002538 <HAL_GetTick>
 800504c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005050:	f7fd fa72 	bl	8002538 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e17c      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005062:	f7ff fbde 	bl	8004822 <LL_RCC_LSI1_IsReady>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f1      	bne.n	8005050 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d05b      	beq.n	8005130 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005078:	4ba7      	ldr	r3, [pc, #668]	; (8005318 <HAL_RCC_OscConfig+0x688>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d114      	bne.n	80050ae <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005084:	f7ff fa8a 	bl	800459c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005088:	f7fd fa56 	bl	8002538 <HAL_GetTick>
 800508c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005090:	f7fd fa52 	bl	8002538 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e15c      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a2:	4b9d      	ldr	r3, [pc, #628]	; (8005318 <HAL_RCC_OscConfig+0x688>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d102      	bne.n	80050bc <HAL_RCC_OscConfig+0x42c>
 80050b6:	f7ff fb3c 	bl	8004732 <LL_RCC_LSE_Enable>
 80050ba:	e00c      	b.n	80050d6 <HAL_RCC_OscConfig+0x446>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d104      	bne.n	80050ce <HAL_RCC_OscConfig+0x43e>
 80050c4:	f7ff fb57 	bl	8004776 <LL_RCC_LSE_EnableBypass>
 80050c8:	f7ff fb33 	bl	8004732 <LL_RCC_LSE_Enable>
 80050cc:	e003      	b.n	80050d6 <HAL_RCC_OscConfig+0x446>
 80050ce:	f7ff fb41 	bl	8004754 <LL_RCC_LSE_Disable>
 80050d2:	f7ff fb61 	bl	8004798 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d014      	beq.n	8005108 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050de:	f7fd fa2b 	bl	8002538 <HAL_GetTick>
 80050e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80050e4:	e00a      	b.n	80050fc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e6:	f7fd fa27 	bl	8002538 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e12f      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() == 0U)
 80050fc:	f7ff fb5d 	bl	80047ba <LL_RCC_LSE_IsReady>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0ef      	beq.n	80050e6 <HAL_RCC_OscConfig+0x456>
 8005106:	e013      	b.n	8005130 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005108:	f7fd fa16 	bl	8002538 <HAL_GetTick>
 800510c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800510e:	e00a      	b.n	8005126 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005110:	f7fd fa12 	bl	8002538 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	; 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e11a      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005126:	f7ff fb48 	bl	80047ba <LL_RCC_LSE_IsReady>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1ef      	bne.n	8005110 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d02c      	beq.n	8005196 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	2b00      	cmp	r3, #0
 8005142:	d014      	beq.n	800516e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005144:	f7ff fac1 	bl	80046ca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005148:	f7fd f9f6 	bl	8002538 <HAL_GetTick>
 800514c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005150:	f7fd f9f2 	bl	8002538 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e0fc      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005162:	f7ff fad4 	bl	800470e <LL_RCC_HSI48_IsReady>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f1      	beq.n	8005150 <HAL_RCC_OscConfig+0x4c0>
 800516c:	e013      	b.n	8005196 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800516e:	f7ff fabd 	bl	80046ec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005172:	f7fd f9e1 	bl	8002538 <HAL_GetTick>
 8005176:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800517a:	f7fd f9dd 	bl	8002538 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e0e7      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800518c:	f7ff fabf 	bl	800470e <LL_RCC_HSI48_IsReady>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f1      	bne.n	800517a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 80dd 	beq.w	800535a <HAL_RCC_OscConfig+0x6ca>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051a0:	f7ff fc1d 	bl	80049de <LL_RCC_GetSysClkSource>
 80051a4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80051a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	f040 80a6 	bne.w	8005304 <HAL_RCC_OscConfig+0x674>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0203 	and.w	r2, r3, #3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d123      	bne.n	800520e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d11c      	bne.n	800520e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d114      	bne.n	800520e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d10d      	bne.n	800520e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d106      	bne.n	800520e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d054      	beq.n	80052b8 <HAL_RCC_OscConfig+0x628>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b0c      	cmp	r3, #12
 8005212:	d04f      	beq.n	80052b4 <HAL_RCC_OscConfig+0x624>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005214:	f7ff fc8d 	bl	8004b32 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005218:	f7fd f98e 	bl	8002538 <HAL_GetTick>
 800521c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x5a2>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005220:	f7fd f98a 	bl	8002538 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x5a2>
              {
                return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e094      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ef      	bne.n	8005220 <HAL_RCC_OscConfig+0x590>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	4b35      	ldr	r3, [pc, #212]	; (800531c <HAL_RCC_OscConfig+0x68c>)
 8005248:	4013      	ands	r3, r2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005252:	4311      	orrs	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005258:	0212      	lsls	r2, r2, #8
 800525a:	4311      	orrs	r1, r2
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005260:	4311      	orrs	r1, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005266:	4311      	orrs	r1, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800526c:	430a      	orrs	r2, r1
 800526e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005272:	4313      	orrs	r3, r2
 8005274:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005276:	f7ff fc4d 	bl	8004b14 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800527a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005288:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800528a:	f7fd f955 	bl	8002538 <HAL_GetTick>
 800528e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x614>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005292:	f7fd f951 	bl	8002538 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x614>
              {
                return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e05b      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0ef      	beq.n	8005292 <HAL_RCC_OscConfig+0x602>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052b2:	e052      	b.n	800535a <HAL_RCC_OscConfig+0x6ca>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e051      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d149      	bne.n	800535a <HAL_RCC_OscConfig+0x6ca>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052c6:	f7ff fc25 	bl	8004b14 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052da:	f7fd f92d 	bl	8002538 <HAL_GetTick>
 80052de:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x664>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e2:	f7fd f929 	bl	8002538 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x664>
            {
              return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e033      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0ef      	beq.n	80052e2 <HAL_RCC_OscConfig+0x652>
 8005302:	e02a      	b.n	800535a <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b0c      	cmp	r3, #12
 8005308:	d025      	beq.n	8005356 <HAL_RCC_OscConfig+0x6c6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530a:	f7ff fc12 	bl	8004b32 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530e:	f7fd f913 	bl	8002538 <HAL_GetTick>
 8005312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005314:	e00d      	b.n	8005332 <HAL_RCC_OscConfig+0x6a2>
 8005316:	bf00      	nop
 8005318:	58000400 	.word	0x58000400
 800531c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005320:	f7fd f90a 	bl	8002538 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x6a2>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e014      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1ef      	bne.n	8005320 <HAL_RCC_OscConfig+0x690>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8005340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800534a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	60d3      	str	r3, [r2, #12]
 8005354:	e001      	b.n	800535a <HAL_RCC_OscConfig+0x6ca>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <HAL_RCC_OscConfig+0x6cc>
      }
    }
  }
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3734      	adds	r7, #52	; 0x34
 8005360:	46bd      	mov	sp, r7
 8005362:	bd90      	pop	{r4, r7, pc}

08005364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e12d      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005378:	4b98      	ldr	r3, [pc, #608]	; (80055dc <HAL_RCC_ClockConfig+0x278>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d91b      	bls.n	80053be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b95      	ldr	r3, [pc, #596]	; (80055dc <HAL_RCC_ClockConfig+0x278>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f023 0207 	bic.w	r2, r3, #7
 800538e:	4993      	ldr	r1, [pc, #588]	; (80055dc <HAL_RCC_ClockConfig+0x278>)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005396:	f7fd f8cf 	bl	8002538 <HAL_GetTick>
 800539a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800539e:	f7fd f8cb 	bl	8002538 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e111      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b0:	4b8a      	ldr	r3, [pc, #552]	; (80055dc <HAL_RCC_ClockConfig+0x278>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d1ef      	bne.n	800539e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d016      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fb11 	bl	80049f6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053d4:	f7fd f8b0 	bl	8002538 <HAL_GetTick>
 80053d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053dc:	f7fd f8ac 	bl	8002538 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e0f2      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80053ee:	f7ff fbf2 	bl	8004bd6 <LL_RCC_IsActiveFlag_HPRE>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f1      	beq.n	80053dc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b00      	cmp	r3, #0
 8005402:	d016      	beq.n	8005432 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fb08 	bl	8004a1e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800540e:	f7fd f893 	bl	8002538 <HAL_GetTick>
 8005412:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005414:	e008      	b.n	8005428 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005416:	f7fd f88f 	bl	8002538 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e0d5      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005428:	f7ff fbe7 	bl	8004bfa <LL_RCC_IsActiveFlag_C2HPRE>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f1      	beq.n	8005416 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d016      	beq.n	800546c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff fb01 	bl	8004a4a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005448:	f7fd f876 	bl	8002538 <HAL_GetTick>
 800544c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800544e:	e008      	b.n	8005462 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005450:	f7fd f872 	bl	8002538 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e0b8      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005462:	f7ff fbdd 	bl	8004c20 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f1      	beq.n	8005450 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d016      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fafb 	bl	8004a78 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005482:	f7fd f859 	bl	8002538 <HAL_GetTick>
 8005486:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005488:	e008      	b.n	800549c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800548a:	f7fd f855 	bl	8002538 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e09b      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800549c:	f7ff fbd3 	bl	8004c46 <LL_RCC_IsActiveFlag_PPRE1>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f1      	beq.n	800548a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d017      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff faf1 	bl	8004aa0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054be:	f7fd f83b 	bl	8002538 <HAL_GetTick>
 80054c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054c6:	f7fd f837 	bl	8002538 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e07d      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80054d8:	f7ff fbc7 	bl	8004c6a <LL_RCC_IsActiveFlag_PPRE2>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f1      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d043      	beq.n	8005576 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d106      	bne.n	8005504 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80054f6:	f7ff f891 	bl	800461c <LL_RCC_HSE_IsReady>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d11e      	bne.n	800553e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e067      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b03      	cmp	r3, #3
 800550a:	d106      	bne.n	800551a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800550c:	f7ff fb20 	bl	8004b50 <LL_RCC_PLL_IsReady>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d113      	bne.n	800553e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e05c      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005522:	f7ff f9f9 	bl	8004918 <LL_RCC_MSI_IsReady>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d108      	bne.n	800553e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e051      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005530:	f7ff f8a4 	bl	800467c <LL_RCC_HSI_IsReady>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e04a      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff fa37 	bl	80049b6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005548:	f7fc fff6 	bl	8002538 <HAL_GetTick>
 800554c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554e:	e00a      	b.n	8005566 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005550:	f7fc fff2 	bl	8002538 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	f241 3288 	movw	r2, #5000	; 0x1388
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e036      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005566:	f7ff fa3a 	bl	80049de <LL_RCC_GetSysClkSource>
 800556a:	4602      	mov	r2, r0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	429a      	cmp	r2, r3
 8005574:	d1ec      	bne.n	8005550 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005576:	4b19      	ldr	r3, [pc, #100]	; (80055dc <HAL_RCC_ClockConfig+0x278>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d21b      	bcs.n	80055bc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005584:	4b15      	ldr	r3, [pc, #84]	; (80055dc <HAL_RCC_ClockConfig+0x278>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f023 0207 	bic.w	r2, r3, #7
 800558c:	4913      	ldr	r1, [pc, #76]	; (80055dc <HAL_RCC_ClockConfig+0x278>)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	4313      	orrs	r3, r2
 8005592:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005594:	f7fc ffd0 	bl	8002538 <HAL_GetTick>
 8005598:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559a:	e008      	b.n	80055ae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800559c:	f7fc ffcc 	bl	8002538 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e012      	b.n	80055d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <HAL_RCC_ClockConfig+0x278>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d1ef      	bne.n	800559c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80055bc:	f000 f87e 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 80055c0:	4603      	mov	r3, r0
 80055c2:	4a07      	ldr	r2, [pc, #28]	; (80055e0 <HAL_RCC_ClockConfig+0x27c>)
 80055c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80055c6:	f7fc ffc3 	bl	8002550 <HAL_GetTickPrio>
 80055ca:	4603      	mov	r3, r0
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fc ff65 	bl	800249c <HAL_InitTick>
 80055d2:	4603      	mov	r3, r0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	58004000 	.word	0x58004000
 80055e0:	20000004 	.word	0x20000004

080055e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e4:	b590      	push	{r4, r7, lr}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ea:	f7ff f9f8 	bl	80049de <LL_RCC_GetSysClkSource>
 80055ee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80055f6:	f7ff f9b4 	bl	8004962 <LL_RCC_MSI_GetRange>
 80055fa:	4603      	mov	r3, r0
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	4a2b      	ldr	r2, [pc, #172]	; (80056b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	e04b      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b04      	cmp	r3, #4
 8005610:	d102      	bne.n	8005618 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005612:	4b28      	ldr	r3, [pc, #160]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	e045      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b08      	cmp	r3, #8
 800561c:	d10a      	bne.n	8005634 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800561e:	f7fe ffcd 	bl	80045bc <LL_RCC_HSE_IsEnabledDiv2>
 8005622:	4603      	mov	r3, r0
 8005624:	2b01      	cmp	r3, #1
 8005626:	d102      	bne.n	800562e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005628:	4b22      	ldr	r3, [pc, #136]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e03a      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800562e:	4b22      	ldr	r3, [pc, #136]	; (80056b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e037      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005634:	f7ff fac3 	bl	8004bbe <LL_RCC_PLL_GetMainSource>
 8005638:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d003      	beq.n	8005648 <HAL_RCC_GetSysClockFreq+0x64>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b03      	cmp	r3, #3
 8005644:	d003      	beq.n	800564e <HAL_RCC_GetSysClockFreq+0x6a>
 8005646:	e00d      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005648:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800564a:	60bb      	str	r3, [r7, #8]
        break;
 800564c:	e015      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800564e:	f7fe ffb5 	bl	80045bc <LL_RCC_HSE_IsEnabledDiv2>
 8005652:	4603      	mov	r3, r0
 8005654:	2b01      	cmp	r3, #1
 8005656:	d102      	bne.n	800565e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005658:	4b16      	ldr	r3, [pc, #88]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800565a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800565c:	e00d      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800565e:	4b16      	ldr	r3, [pc, #88]	; (80056b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005660:	60bb      	str	r3, [r7, #8]
        break;
 8005662:	e00a      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005664:	f7ff f97d 	bl	8004962 <LL_RCC_MSI_GetRange>
 8005668:	4603      	mov	r3, r0
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	4a0f      	ldr	r2, [pc, #60]	; (80056b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005676:	60bb      	str	r3, [r7, #8]
        break;
 8005678:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800567a:	f7ff fa7b 	bl	8004b74 <LL_RCC_PLL_GetN>
 800567e:	4602      	mov	r2, r0
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	fb03 f402 	mul.w	r4, r3, r2
 8005686:	f7ff fa8e 	bl	8004ba6 <LL_RCC_PLL_GetDivider>
 800568a:	4603      	mov	r3, r0
 800568c:	091b      	lsrs	r3, r3, #4
 800568e:	3301      	adds	r3, #1
 8005690:	fbb4 f4f3 	udiv	r4, r4, r3
 8005694:	f7ff fa7b 	bl	8004b8e <LL_RCC_PLL_GetR>
 8005698:	4603      	mov	r3, r0
 800569a:	0f5b      	lsrs	r3, r3, #29
 800569c:	3301      	adds	r3, #1
 800569e:	fbb4 f3f3 	udiv	r3, r4, r3
 80056a2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80056a4:	68fb      	ldr	r3, [r7, #12]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd90      	pop	{r4, r7, pc}
 80056ae:	bf00      	nop
 80056b0:	0800c504 	.word	0x0800c504
 80056b4:	00f42400 	.word	0x00f42400
 80056b8:	01e84800 	.word	0x01e84800

080056bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056bc:	b598      	push	{r3, r4, r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80056c0:	f7ff ff90 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 80056c4:	4604      	mov	r4, r0
 80056c6:	f7ff f9ff 	bl	8004ac8 <LL_RCC_GetAHBPrescaler>
 80056ca:	4603      	mov	r3, r0
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	4a03      	ldr	r2, [pc, #12]	; (80056e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80056d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80056dc:	4618      	mov	r0, r3
 80056de:	bd98      	pop	{r3, r4, r7, pc}
 80056e0:	0800c4a4 	.word	0x0800c4a4

080056e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056e4:	b598      	push	{r3, r4, r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80056e8:	f7ff ffe8 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 80056ec:	4604      	mov	r4, r0
 80056ee:	f7ff fa05 	bl	8004afc <LL_RCC_GetAPB2Prescaler>
 80056f2:	4603      	mov	r3, r0
 80056f4:	0adb      	lsrs	r3, r3, #11
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	4a04      	ldr	r2, [pc, #16]	; (800570c <HAL_RCC_GetPCLK2Freq+0x28>)
 80056fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd98      	pop	{r3, r4, r7, pc}
 800570c:	0800c4e4 	.word	0x0800c4e4

08005710 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2bb0      	cmp	r3, #176	; 0xb0
 800571c:	d903      	bls.n	8005726 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800571e:	4b14      	ldr	r3, [pc, #80]	; (8005770 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e007      	b.n	8005736 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	091b      	lsrs	r3, r3, #4
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	4a10      	ldr	r2, [pc, #64]	; (8005770 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005734:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005736:	f7ff f9d3 	bl	8004ae0 <LL_RCC_GetAHB4Prescaler>
 800573a:	4603      	mov	r3, r0
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	4a0c      	ldr	r2, [pc, #48]	; (8005774 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4a09      	ldr	r2, [pc, #36]	; (8005778 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	0c9b      	lsrs	r3, r3, #18
 800575a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f80c 	bl	800577c <RCC_SetFlashLatency>
 8005764:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	0800c504 	.word	0x0800c504
 8005774:	0800c4a4 	.word	0x0800c4a4
 8005778:	431bde83 	.word	0x431bde83

0800577c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800577c:	b590      	push	{r4, r7, lr}
 800577e:	b08f      	sub	sp, #60	; 0x3c
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <RCC_SetFlashLatency+0x9c>)
 8005788:	f107 041c 	add.w	r4, r7, #28
 800578c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800578e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005792:	4b22      	ldr	r3, [pc, #136]	; (800581c <RCC_SetFlashLatency+0xa0>)
 8005794:	f107 040c 	add.w	r4, r7, #12
 8005798:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800579a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800579e:	2300      	movs	r3, #0
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	633b      	str	r3, [r7, #48]	; 0x30
 80057a6:	e013      	b.n	80057d0 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	3338      	adds	r3, #56	; 0x38
 80057ae:	443b      	add	r3, r7
 80057b0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d807      	bhi.n	80057ca <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	3338      	adds	r3, #56	; 0x38
 80057c0:	443b      	add	r3, r7
 80057c2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80057c8:	e005      	b.n	80057d6 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	3301      	adds	r3, #1
 80057ce:	633b      	str	r3, [r7, #48]	; 0x30
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d9e8      	bls.n	80057a8 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80057d6:	4b12      	ldr	r3, [pc, #72]	; (8005820 <RCC_SetFlashLatency+0xa4>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f023 0207 	bic.w	r2, r3, #7
 80057de:	4910      	ldr	r1, [pc, #64]	; (8005820 <RCC_SetFlashLatency+0xa4>)
 80057e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e2:	4313      	orrs	r3, r2
 80057e4:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057e6:	f7fc fea7 	bl	8002538 <HAL_GetTick>
 80057ea:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057ec:	e008      	b.n	8005800 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057ee:	f7fc fea3 	bl	8002538 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e007      	b.n	8005810 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <RCC_SetFlashLatency+0xa4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800580a:	429a      	cmp	r2, r3
 800580c:	d1ef      	bne.n	80057ee <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	373c      	adds	r7, #60	; 0x3c
 8005814:	46bd      	mov	sp, r7
 8005816:	bd90      	pop	{r4, r7, pc}
 8005818:	0800c484 	.word	0x0800c484
 800581c:	0800c494 	.word	0x0800c494
 8005820:	58004000 	.word	0x58004000

08005824 <LL_RCC_LSE_IsEnabled>:
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <LL_RCC_LSE_IsEnabled+0x18>
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <LL_RCC_LSE_IsEnabled+0x1a>
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <LL_RCC_LSE_IsReady>:
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800584c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d101      	bne.n	8005860 <LL_RCC_LSE_IsReady+0x18>
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <LL_RCC_LSE_IsReady+0x1a>
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <LL_RCC_SetRFWKPClockSource>:
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800587c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005880:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <LL_RCC_SetUSARTClockSource>:
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80058a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a8:	f023 0203 	bic.w	r2, r3, #3
 80058ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <LL_RCC_SetI2CClockSource>:
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80058cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	091b      	lsrs	r3, r3, #4
 80058d8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80058dc:	43db      	mvns	r3, r3
 80058de:	401a      	ands	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80058e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <LL_RCC_SetLPTIMClockSource>:
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	0c1b      	lsrs	r3, r3, #16
 8005912:	041b      	lsls	r3, r3, #16
 8005914:	43db      	mvns	r3, r3
 8005916:	401a      	ands	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	041b      	lsls	r3, r3, #16
 800591c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <LL_RCC_SetRNGClockSource>:
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800593a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005942:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <LL_RCC_SetCLK48ClockSource>:
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <LL_RCC_SetADCClockSource>:
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800599e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <LL_RCC_SetRTCClockSource>:
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80059be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <LL_RCC_GetRTCClockSource>:
{
 80059e2:	b480      	push	{r7}
 80059e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80059e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <LL_RCC_ForceBackupDomainReset>:
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <LL_RCC_ReleaseBackupDomainReset>:
{
 8005a1e:	b480      	push	{r7}
 8005a20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a36:	bf00      	nop
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005a48:	2300      	movs	r3, #0
 8005a4a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d046      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005a5c:	f7ff ffc1 	bl	80059e2 <LL_RCC_GetRTCClockSource>
 8005a60:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d03c      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a6c:	f7fe fd96 	bl	800459c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d105      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff ff9b 	bl	80059b6 <LL_RCC_SetRTCClockSource>
 8005a80:	e02e      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005a8c:	f7ff ffb6 	bl	80059fc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005a90:	f7ff ffc5 	bl	8005a1e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005aac:	f7ff feba 	bl	8005824 <LL_RCC_LSE_IsEnabled>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d114      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ab6:	f7fc fd3f 	bl	8002538 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005abc:	e00b      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005abe:	f7fc fd3b 	bl	8002538 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d902      	bls.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	77fb      	strb	r3, [r7, #31]
              break;
 8005ad4:	e004      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ad6:	f7ff feb7 	bl	8005848 <LL_RCC_LSE_IsReady>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d1ee      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005ae0:	7ffb      	ldrb	r3, [r7, #31]
 8005ae2:	77bb      	strb	r3, [r7, #30]
 8005ae4:	e001      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae6:	7ffb      	ldrb	r3, [r7, #31]
 8005ae8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d004      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fecc 	bl	8005898 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff fef4 	bl	80058fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d004      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fee9 	bl	80058fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff fec1 	bl	80058c4 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02b      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b56:	d008      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b60:	d003      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d105      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff fedf 	bl	8005932 <LL_RCC_SetRNGClockSource>
 8005b74:	e00a      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	2000      	movs	r0, #0
 8005b82:	f7ff fed6 	bl	8005932 <LL_RCC_SetRNGClockSource>
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff fee9 	bl	800595e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005b94:	d107      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ba4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d011      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff fee7 	bl	800598a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc4:	d107      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd4:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff fe40 	bl	800586c <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005bec:	7fbb      	ldrb	r3, [r7, #30]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3720      	adds	r7, #32
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e095      	b.n	8005d34 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d108      	bne.n	8005c22 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c18:	d009      	beq.n	8005c2e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	61da      	str	r2, [r3, #28]
 8005c20:	e005      	b.n	8005c2e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7fc f8c9 	bl	8001de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2202      	movs	r2, #2
 8005c52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c64:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c6e:	d902      	bls.n	8005c76 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e002      	b.n	8005c7c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c84:	d007      	beq.n	8005c96 <HAL_SPI_Init+0xa0>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c8e:	d002      	beq.n	8005c96 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd8:	ea42 0103 	orr.w	r1, r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	0c1b      	lsrs	r3, r3, #16
 8005cf2:	f003 0204 	and.w	r2, r3, #4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d12:	ea42 0103 	orr.w	r1, r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <HAL_SPI_Transmit+0x22>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e158      	b.n	8006010 <HAL_SPI_Transmit+0x2d4>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d66:	f7fc fbe7 	bl	8002538 <HAL_GetTick>
 8005d6a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d6c:	88fb      	ldrh	r3, [r7, #6]
 8005d6e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d002      	beq.n	8005d82 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d80:	e13d      	b.n	8005ffe <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_SPI_Transmit+0x52>
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d92:	e134      	b.n	8005ffe <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2203      	movs	r2, #3
 8005d98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	88fa      	ldrh	r2, [r7, #6]
 8005dac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	88fa      	ldrh	r2, [r7, #6]
 8005db2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dde:	d10f      	bne.n	8005e00 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dfe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	d007      	beq.n	8005e1e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e26:	d94b      	bls.n	8005ec0 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <HAL_SPI_Transmit+0xfa>
 8005e30:	8afb      	ldrh	r3, [r7, #22]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d13e      	bne.n	8005eb4 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	1c9a      	adds	r2, r3, #2
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e5a:	e02b      	b.n	8005eb4 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d112      	bne.n	8005e90 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	881a      	ldrh	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	1c9a      	adds	r2, r3, #2
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e8e:	e011      	b.n	8005eb4 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e90:	f7fc fb52 	bl	8002538 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d803      	bhi.n	8005ea8 <HAL_SPI_Transmit+0x16c>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d102      	bne.n	8005eae <HAL_SPI_Transmit+0x172>
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005eb2:	e0a4      	b.n	8005ffe <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1ce      	bne.n	8005e5c <HAL_SPI_Transmit+0x120>
 8005ebe:	e07c      	b.n	8005fba <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_SPI_Transmit+0x192>
 8005ec8:	8afb      	ldrh	r3, [r7, #22]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d170      	bne.n	8005fb0 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d912      	bls.n	8005efe <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	881a      	ldrh	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	1c9a      	adds	r2, r3, #2
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b02      	subs	r3, #2
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005efc:	e058      	b.n	8005fb0 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	330c      	adds	r3, #12
 8005f08:	7812      	ldrb	r2, [r2, #0]
 8005f0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f24:	e044      	b.n	8005fb0 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d12b      	bne.n	8005f8c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d912      	bls.n	8005f64 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	881a      	ldrh	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	1c9a      	adds	r2, r3, #2
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b02      	subs	r3, #2
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f62:	e025      	b.n	8005fb0 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	7812      	ldrb	r2, [r2, #0]
 8005f70:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f8a:	e011      	b.n	8005fb0 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f8c:	f7fc fad4 	bl	8002538 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d803      	bhi.n	8005fa4 <HAL_SPI_Transmit+0x268>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa2:	d102      	bne.n	8005faa <HAL_SPI_Transmit+0x26e>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d102      	bne.n	8005fb0 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fae:	e026      	b.n	8005ffe <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1b5      	bne.n	8005f26 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f948 	bl	8006254 <SPI_EndRxTxTransaction>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10a      	bne.n	8005fee <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fd8:	2300      	movs	r3, #0
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	613b      	str	r3, [r7, #16]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	77fb      	strb	r3, [r7, #31]
 8005ffa:	e000      	b.n	8005ffe <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005ffc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800600e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3720      	adds	r7, #32
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	603b      	str	r3, [r7, #0]
 8006024:	4613      	mov	r3, r2
 8006026:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006028:	f7fc fa86 	bl	8002538 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	1a9b      	subs	r3, r3, r2
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	4413      	add	r3, r2
 8006036:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006038:	f7fc fa7e 	bl	8002538 <HAL_GetTick>
 800603c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800603e:	4b39      	ldr	r3, [pc, #228]	; (8006124 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	015b      	lsls	r3, r3, #5
 8006044:	0d1b      	lsrs	r3, r3, #20
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	fb02 f303 	mul.w	r3, r2, r3
 800604c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800604e:	e054      	b.n	80060fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006056:	d050      	beq.n	80060fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006058:	f7fc fa6e 	bl	8002538 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	429a      	cmp	r2, r3
 8006066:	d902      	bls.n	800606e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d13d      	bne.n	80060ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800607c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006086:	d111      	bne.n	80060ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006090:	d004      	beq.n	800609c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800609a:	d107      	bne.n	80060ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b4:	d10f      	bne.n	80060d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e017      	b.n	800611a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4013      	ands	r3, r2
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	429a      	cmp	r2, r3
 8006108:	bf0c      	ite	eq
 800610a:	2301      	moveq	r3, #1
 800610c:	2300      	movne	r3, #0
 800610e:	b2db      	uxtb	r3, r3
 8006110:	461a      	mov	r2, r3
 8006112:	79fb      	ldrb	r3, [r7, #7]
 8006114:	429a      	cmp	r2, r3
 8006116:	d19b      	bne.n	8006050 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3720      	adds	r7, #32
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20000004 	.word	0x20000004

08006128 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	; 0x28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800613a:	f7fc f9fd 	bl	8002538 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	4413      	add	r3, r2
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800614a:	f7fc f9f5 	bl	8002538 <HAL_GetTick>
 800614e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	330c      	adds	r3, #12
 8006156:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006158:	4b3d      	ldr	r3, [pc, #244]	; (8006250 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	00da      	lsls	r2, r3, #3
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	0d1b      	lsrs	r3, r3, #20
 8006168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616a:	fb02 f303 	mul.w	r3, r2, r3
 800616e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006170:	e060      	b.n	8006234 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006178:	d107      	bne.n	800618a <SPI_WaitFifoStateUntilTimeout+0x62>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d104      	bne.n	800618a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006188:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006190:	d050      	beq.n	8006234 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006192:	f7fc f9d1 	bl	8002538 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619e:	429a      	cmp	r2, r3
 80061a0:	d902      	bls.n	80061a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d13d      	bne.n	8006224 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061c0:	d111      	bne.n	80061e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ca:	d004      	beq.n	80061d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d4:	d107      	bne.n	80061e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ee:	d10f      	bne.n	8006210 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800620e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e010      	b.n	8006246 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	3b01      	subs	r3, #1
 8006232:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4013      	ands	r3, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d196      	bne.n	8006172 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3728      	adds	r7, #40	; 0x28
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000004 	.word	0x20000004

08006254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2200      	movs	r2, #0
 8006268:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f7ff ff5b 	bl	8006128 <SPI_WaitFifoStateUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d007      	beq.n	8006288 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627c:	f043 0220 	orr.w	r2, r3, #32
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e027      	b.n	80062d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2200      	movs	r2, #0
 8006290:	2180      	movs	r1, #128	; 0x80
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7ff fec0 	bl	8006018 <SPI_WaitFlagStateUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a2:	f043 0220 	orr.w	r2, r3, #32
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e014      	b.n	80062d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f7ff ff34 	bl	8006128 <SPI_WaitFifoStateUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ca:	f043 0220 	orr.w	r2, r3, #32
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e000      	b.n	80062d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e049      	b.n	8006386 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fb ff3e 	bl	8002188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3304      	adds	r3, #4
 800631c:	4619      	mov	r1, r3
 800631e:	4610      	mov	r0, r2
 8006320:	f000 fa94 	bl	800684c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d001      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e036      	b.n	8006416 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a17      	ldr	r2, [pc, #92]	; (8006424 <HAL_TIM_Base_Start_IT+0x94>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x44>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d2:	d115      	bne.n	8006400 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	4b13      	ldr	r3, [pc, #76]	; (8006428 <HAL_TIM_Base_Start_IT+0x98>)
 80063dc:	4013      	ands	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b06      	cmp	r3, #6
 80063e4:	d015      	beq.n	8006412 <HAL_TIM_Base_Start_IT+0x82>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ec:	d011      	beq.n	8006412 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f042 0201 	orr.w	r2, r2, #1
 80063fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063fe:	e008      	b.n	8006412 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e000      	b.n	8006414 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006412:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40012c00 	.word	0x40012c00
 8006428:	00010007 	.word	0x00010007

0800642c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b02      	cmp	r3, #2
 8006440:	d122      	bne.n	8006488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b02      	cmp	r3, #2
 800644e:	d11b      	bne.n	8006488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0202 	mvn.w	r2, #2
 8006458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f9ce 	bl	8006810 <HAL_TIM_IC_CaptureCallback>
 8006474:	e005      	b.n	8006482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f9c0 	bl	80067fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f9d1 	bl	8006824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	2b04      	cmp	r3, #4
 8006494:	d122      	bne.n	80064dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d11b      	bne.n	80064dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f06f 0204 	mvn.w	r2, #4
 80064ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2202      	movs	r2, #2
 80064b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f9a4 	bl	8006810 <HAL_TIM_IC_CaptureCallback>
 80064c8:	e005      	b.n	80064d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f996 	bl	80067fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f9a7 	bl	8006824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d122      	bne.n	8006530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d11b      	bne.n	8006530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0208 	mvn.w	r2, #8
 8006500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2204      	movs	r2, #4
 8006506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f97a 	bl	8006810 <HAL_TIM_IC_CaptureCallback>
 800651c:	e005      	b.n	800652a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f96c 	bl	80067fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f97d 	bl	8006824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	2b10      	cmp	r3, #16
 800653c:	d122      	bne.n	8006584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b10      	cmp	r3, #16
 800654a:	d11b      	bne.n	8006584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0210 	mvn.w	r2, #16
 8006554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2208      	movs	r2, #8
 800655a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f950 	bl	8006810 <HAL_TIM_IC_CaptureCallback>
 8006570:	e005      	b.n	800657e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f942 	bl	80067fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f953 	bl	8006824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b01      	cmp	r3, #1
 8006590:	d10e      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b01      	cmp	r3, #1
 800659e:	d107      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0201 	mvn.w	r2, #1
 80065a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fa ff29 	bl	8001402 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ba:	2b80      	cmp	r3, #128	; 0x80
 80065bc:	d10e      	bne.n	80065dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c8:	2b80      	cmp	r3, #128	; 0x80
 80065ca:	d107      	bne.n	80065dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 faa2 	bl	8006b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ea:	d10e      	bne.n	800660a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b80      	cmp	r3, #128	; 0x80
 80065f8:	d107      	bne.n	800660a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fa95 	bl	8006b34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b40      	cmp	r3, #64	; 0x40
 8006616:	d10e      	bne.n	8006636 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006622:	2b40      	cmp	r3, #64	; 0x40
 8006624:	d107      	bne.n	8006636 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800662e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f901 	bl	8006838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b20      	cmp	r3, #32
 8006642:	d10e      	bne.n	8006662 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b20      	cmp	r3, #32
 8006650:	d107      	bne.n	8006662 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f06f 0220 	mvn.w	r2, #32
 800665a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fa55 	bl	8006b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_TIM_ConfigClockSource+0x1c>
 8006682:	2302      	movs	r3, #2
 8006684:	e0b6      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x18a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2202      	movs	r2, #2
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80066a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066b0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066c2:	d03e      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0xd8>
 80066c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066c8:	f200 8087 	bhi.w	80067da <HAL_TIM_ConfigClockSource+0x170>
 80066cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d0:	f000 8086 	beq.w	80067e0 <HAL_TIM_ConfigClockSource+0x176>
 80066d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d8:	d87f      	bhi.n	80067da <HAL_TIM_ConfigClockSource+0x170>
 80066da:	2b70      	cmp	r3, #112	; 0x70
 80066dc:	d01a      	beq.n	8006714 <HAL_TIM_ConfigClockSource+0xaa>
 80066de:	2b70      	cmp	r3, #112	; 0x70
 80066e0:	d87b      	bhi.n	80067da <HAL_TIM_ConfigClockSource+0x170>
 80066e2:	2b60      	cmp	r3, #96	; 0x60
 80066e4:	d050      	beq.n	8006788 <HAL_TIM_ConfigClockSource+0x11e>
 80066e6:	2b60      	cmp	r3, #96	; 0x60
 80066e8:	d877      	bhi.n	80067da <HAL_TIM_ConfigClockSource+0x170>
 80066ea:	2b50      	cmp	r3, #80	; 0x50
 80066ec:	d03c      	beq.n	8006768 <HAL_TIM_ConfigClockSource+0xfe>
 80066ee:	2b50      	cmp	r3, #80	; 0x50
 80066f0:	d873      	bhi.n	80067da <HAL_TIM_ConfigClockSource+0x170>
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	d058      	beq.n	80067a8 <HAL_TIM_ConfigClockSource+0x13e>
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d86f      	bhi.n	80067da <HAL_TIM_ConfigClockSource+0x170>
 80066fa:	2b30      	cmp	r3, #48	; 0x30
 80066fc:	d064      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0x15e>
 80066fe:	2b30      	cmp	r3, #48	; 0x30
 8006700:	d86b      	bhi.n	80067da <HAL_TIM_ConfigClockSource+0x170>
 8006702:	2b20      	cmp	r3, #32
 8006704:	d060      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0x15e>
 8006706:	2b20      	cmp	r3, #32
 8006708:	d867      	bhi.n	80067da <HAL_TIM_ConfigClockSource+0x170>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d05c      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0x15e>
 800670e:	2b10      	cmp	r3, #16
 8006710:	d05a      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0x15e>
 8006712:	e062      	b.n	80067da <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	6899      	ldr	r1, [r3, #8]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f000 f972 	bl	8006a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006736:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	609a      	str	r2, [r3, #8]
      break;
 8006740:	e04f      	b.n	80067e2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6899      	ldr	r1, [r3, #8]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f000 f95b 	bl	8006a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006764:	609a      	str	r2, [r3, #8]
      break;
 8006766:	e03c      	b.n	80067e2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6818      	ldr	r0, [r3, #0]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	6859      	ldr	r1, [r3, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	461a      	mov	r2, r3
 8006776:	f000 f8cd 	bl	8006914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2150      	movs	r1, #80	; 0x50
 8006780:	4618      	mov	r0, r3
 8006782:	f000 f926 	bl	80069d2 <TIM_ITRx_SetConfig>
      break;
 8006786:	e02c      	b.n	80067e2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	6859      	ldr	r1, [r3, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	461a      	mov	r2, r3
 8006796:	f000 f8ec 	bl	8006972 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2160      	movs	r1, #96	; 0x60
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 f916 	bl	80069d2 <TIM_ITRx_SetConfig>
      break;
 80067a6:	e01c      	b.n	80067e2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	6859      	ldr	r1, [r3, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	461a      	mov	r2, r3
 80067b6:	f000 f8ad 	bl	8006914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2140      	movs	r1, #64	; 0x40
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 f906 	bl	80069d2 <TIM_ITRx_SetConfig>
      break;
 80067c6:	e00c      	b.n	80067e2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f000 f8fd 	bl	80069d2 <TIM_ITRx_SetConfig>
      break;
 80067d8:	e003      	b.n	80067e2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	73fb      	strb	r3, [r7, #15]
      break;
 80067de:	e000      	b.n	80067e2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80067e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a2a      	ldr	r2, [pc, #168]	; (8006908 <TIM_Base_SetConfig+0xbc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d003      	beq.n	800686c <TIM_Base_SetConfig+0x20>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686a:	d108      	bne.n	800687e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a21      	ldr	r2, [pc, #132]	; (8006908 <TIM_Base_SetConfig+0xbc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00b      	beq.n	800689e <TIM_Base_SetConfig+0x52>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688c:	d007      	beq.n	800689e <TIM_Base_SetConfig+0x52>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1e      	ldr	r2, [pc, #120]	; (800690c <TIM_Base_SetConfig+0xc0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_Base_SetConfig+0x52>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a1d      	ldr	r2, [pc, #116]	; (8006910 <TIM_Base_SetConfig+0xc4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d108      	bne.n	80068b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a0c      	ldr	r2, [pc, #48]	; (8006908 <TIM_Base_SetConfig+0xbc>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d007      	beq.n	80068ec <TIM_Base_SetConfig+0xa0>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a0b      	ldr	r2, [pc, #44]	; (800690c <TIM_Base_SetConfig+0xc0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_Base_SetConfig+0xa0>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a0a      	ldr	r2, [pc, #40]	; (8006910 <TIM_Base_SetConfig+0xc4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d103      	bne.n	80068f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	615a      	str	r2, [r3, #20]
}
 80068fa:	bf00      	nop
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40014400 	.word	0x40014400
 8006910:	40014800 	.word	0x40014800

08006914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f023 0201 	bic.w	r2, r3, #1
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800693e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f023 030a 	bic.w	r3, r3, #10
 8006950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	621a      	str	r2, [r3, #32]
}
 8006966:	bf00      	nop
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006972:	b480      	push	{r7}
 8006974:	b087      	sub	sp, #28
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	f023 0210 	bic.w	r2, r3, #16
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800699c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	031b      	lsls	r3, r3, #12
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80069e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f043 0307 	orr.w	r3, r3, #7
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	609a      	str	r2, [r3, #8]
}
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	021a      	lsls	r2, r3, #8
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	609a      	str	r2, [r3, #8]
}
 8006a40:	bf00      	nop
 8006a42:	371c      	adds	r7, #28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e04a      	b.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1f      	ldr	r2, [pc, #124]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d108      	bne.n	8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a12      	ldr	r2, [pc, #72]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d004      	beq.n	8006ace <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006acc:	d10c      	bne.n	8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40012c00 	.word	0x40012c00

08006b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <LL_RCC_GetUSARTClockSource>:
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4013      	ands	r3, r2
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e042      	b.n	8006c00 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d106      	bne.n	8006b92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7fb fb91 	bl	80022b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2224      	movs	r2, #36	; 0x24
 8006b96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fc90 	bl	80074d0 <UART_SetConfig>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e022      	b.n	8006c00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fdc0 	bl	8007748 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006be6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0201 	orr.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fe47 	bl	800788c <UART_CheckIdleState>
 8006bfe:	4603      	mov	r3, r0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08a      	sub	sp, #40	; 0x28
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	4613      	mov	r3, r2
 8006c16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d17b      	bne.n	8006d1a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <HAL_UART_Transmit+0x26>
 8006c28:	88fb      	ldrh	r3, [r7, #6]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e074      	b.n	8006d1c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2221      	movs	r2, #33	; 0x21
 8006c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c42:	f7fb fc79 	bl	8002538 <HAL_GetTick>
 8006c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	88fa      	ldrh	r2, [r7, #6]
 8006c4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	88fa      	ldrh	r2, [r7, #6]
 8006c54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c60:	d108      	bne.n	8006c74 <HAL_UART_Transmit+0x6c>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d104      	bne.n	8006c74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	e003      	b.n	8006c7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c7c:	e030      	b.n	8006ce0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2200      	movs	r2, #0
 8006c86:	2180      	movs	r1, #128	; 0x80
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fea9 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e03d      	b.n	8006d1c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10b      	bne.n	8006cbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	3302      	adds	r3, #2
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	e007      	b.n	8006cce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	781a      	ldrb	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1c8      	bne.n	8006c7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2140      	movs	r1, #64	; 0x40
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 fe72 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d005      	beq.n	8006d0e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e006      	b.n	8006d1c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	e000      	b.n	8006d1c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d1a:	2302      	movs	r3, #2
  }
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b091      	sub	sp, #68	; 0x44
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d178      	bne.n	8006e2e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <HAL_UART_Transmit_IT+0x24>
 8006d42:	88fb      	ldrh	r3, [r7, #6]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e071      	b.n	8006e30 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	88fa      	ldrh	r2, [r7, #6]
 8006d56:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	88fa      	ldrh	r2, [r7, #6]
 8006d5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2221      	movs	r2, #33	; 0x21
 8006d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d80:	d12a      	bne.n	8006dd8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d8a:	d107      	bne.n	8006d9c <HAL_UART_Transmit_IT+0x78>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d103      	bne.n	8006d9c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4a29      	ldr	r2, [pc, #164]	; (8006e3c <HAL_UART_Transmit_IT+0x118>)
 8006d98:	679a      	str	r2, [r3, #120]	; 0x78
 8006d9a:	e002      	b.n	8006da2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4a28      	ldr	r2, [pc, #160]	; (8006e40 <HAL_UART_Transmit_IT+0x11c>)
 8006da0:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3308      	adds	r3, #8
 8006da8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dc2:	637a      	str	r2, [r7, #52]	; 0x34
 8006dc4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e5      	bne.n	8006da2 <HAL_UART_Transmit_IT+0x7e>
 8006dd6:	e028      	b.n	8006e2a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de0:	d107      	bne.n	8006df2 <HAL_UART_Transmit_IT+0xce>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d103      	bne.n	8006df2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4a15      	ldr	r2, [pc, #84]	; (8006e44 <HAL_UART_Transmit_IT+0x120>)
 8006dee:	679a      	str	r2, [r3, #120]	; 0x78
 8006df0:	e002      	b.n	8006df8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4a14      	ldr	r2, [pc, #80]	; (8006e48 <HAL_UART_Transmit_IT+0x124>)
 8006df6:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	613b      	str	r3, [r7, #16]
   return(result);
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e16:	623b      	str	r3, [r7, #32]
 8006e18:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	69f9      	ldr	r1, [r7, #28]
 8006e1c:	6a3a      	ldr	r2, [r7, #32]
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e6      	bne.n	8006df8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e000      	b.n	8006e30 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006e2e:	2302      	movs	r3, #2
  }
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3744      	adds	r7, #68	; 0x44
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	08008047 	.word	0x08008047
 8006e40:	08007f67 	.word	0x08007f67
 8006e44:	08007ea5 	.word	0x08007ea5
 8006e48:	08007ded 	.word	0x08007ded

08006e4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b0ba      	sub	sp, #232	; 0xe8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e76:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d11b      	bne.n	8006ec0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d015      	beq.n	8006ec0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d105      	bne.n	8006eac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d009      	beq.n	8006ec0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 82e3 	beq.w	800747c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	4798      	blx	r3
      }
      return;
 8006ebe:	e2dd      	b.n	800747c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ec0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8123 	beq.w	8007110 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006eca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006ece:	4b8d      	ldr	r3, [pc, #564]	; (8007104 <HAL_UART_IRQHandler+0x2b8>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ed6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006eda:	4b8b      	ldr	r3, [pc, #556]	; (8007108 <HAL_UART_IRQHandler+0x2bc>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 8116 	beq.w	8007110 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d011      	beq.n	8006f14 <HAL_UART_IRQHandler+0xc8>
 8006ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2201      	movs	r2, #1
 8006f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0a:	f043 0201 	orr.w	r2, r3, #1
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d011      	beq.n	8006f44 <HAL_UART_IRQHandler+0xf8>
 8006f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00b      	beq.n	8006f44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2202      	movs	r2, #2
 8006f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3a:	f043 0204 	orr.w	r2, r3, #4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d011      	beq.n	8006f74 <HAL_UART_IRQHandler+0x128>
 8006f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2204      	movs	r2, #4
 8006f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6a:	f043 0202 	orr.w	r2, r3, #2
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f78:	f003 0308 	and.w	r3, r3, #8
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d017      	beq.n	8006fb0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f84:	f003 0320 	and.w	r3, r3, #32
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d105      	bne.n	8006f98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006f90:	4b5c      	ldr	r3, [pc, #368]	; (8007104 <HAL_UART_IRQHandler+0x2b8>)
 8006f92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00b      	beq.n	8006fb0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2208      	movs	r2, #8
 8006f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa6:	f043 0208 	orr.w	r2, r3, #8
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d012      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x196>
 8006fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00c      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd8:	f043 0220 	orr.w	r2, r3, #32
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 8249 	beq.w	8007480 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d013      	beq.n	8007022 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ffe:	f003 0320 	and.w	r3, r3, #32
 8007002:	2b00      	cmp	r3, #0
 8007004:	d105      	bne.n	8007012 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800700a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007028:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d005      	beq.n	8007046 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800703a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800703e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007042:	2b00      	cmp	r3, #0
 8007044:	d054      	beq.n	80070f0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fe54 	bl	8007cf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007056:	2b40      	cmp	r3, #64	; 0x40
 8007058:	d146      	bne.n	80070e8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3308      	adds	r3, #8
 8007060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3308      	adds	r3, #8
 8007082:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007086:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800708a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007092:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800709e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1d9      	bne.n	800705a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d017      	beq.n	80070e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b6:	4a15      	ldr	r2, [pc, #84]	; (800710c <HAL_UART_IRQHandler+0x2c0>)
 80070b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fc fe50 	bl	8003d66 <HAL_DMA_Abort_IT>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d019      	beq.n	8007100 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80070da:	4610      	mov	r0, r2
 80070dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070de:	e00f      	b.n	8007100 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f9eb 	bl	80074bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e6:	e00b      	b.n	8007100 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f9e7 	bl	80074bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ee:	e007      	b.n	8007100 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f9e3 	bl	80074bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80070fe:	e1bf      	b.n	8007480 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007100:	bf00      	nop
    return;
 8007102:	e1bd      	b.n	8007480 <HAL_UART_IRQHandler+0x634>
 8007104:	10000001 	.word	0x10000001
 8007108:	04000120 	.word	0x04000120
 800710c:	08007dc1 	.word	0x08007dc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007114:	2b01      	cmp	r3, #1
 8007116:	f040 8153 	bne.w	80073c0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 814c 	beq.w	80073c0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 8145 	beq.w	80073c0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2210      	movs	r2, #16
 800713c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007148:	2b40      	cmp	r3, #64	; 0x40
 800714a:	f040 80bb 	bne.w	80072c4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800715c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 818f 	beq.w	8007484 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800716c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007170:	429a      	cmp	r2, r3
 8007172:	f080 8187 	bcs.w	8007484 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800717c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b00      	cmp	r3, #0
 8007190:	f040 8087 	bne.w	80072a2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1da      	bne.n	8007194 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3308      	adds	r3, #8
 80071e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071f0:	f023 0301 	bic.w	r3, r3, #1
 80071f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3308      	adds	r3, #8
 80071fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007202:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007206:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007208:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800720a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e1      	bne.n	80071de <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3308      	adds	r3, #8
 8007220:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800722a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800722c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3308      	adds	r3, #8
 800723a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800723e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007240:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007246:	e841 2300 	strex	r3, r2, [r1]
 800724a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800724c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1e3      	bne.n	800721a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2220      	movs	r2, #32
 8007256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800726e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007270:	f023 0310 	bic.w	r3, r3, #16
 8007274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007282:	65bb      	str	r3, [r7, #88]	; 0x58
 8007284:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e4      	bne.n	8007260 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800729c:	4618      	mov	r0, r3
 800729e:	f7fc fd03 	bl	8003ca8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2202      	movs	r2, #2
 80072a6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7fa fa31 	bl	8001724 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072c2:	e0df      	b.n	8007484 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 80d1 	beq.w	8007488 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80072e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 80cc 	beq.w	8007488 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007304:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007312:	647b      	str	r3, [r7, #68]	; 0x44
 8007314:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e4      	bne.n	80072f0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3308      	adds	r3, #8
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	623b      	str	r3, [r7, #32]
   return(result);
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800733c:	f023 0301 	bic.w	r3, r3, #1
 8007340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3308      	adds	r3, #8
 800734a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800734e:	633a      	str	r2, [r7, #48]	; 0x30
 8007350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e1      	bne.n	8007326 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	60fb      	str	r3, [r7, #12]
   return(result);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0310 	bic.w	r3, r3, #16
 800738a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007398:	61fb      	str	r3, [r7, #28]
 800739a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	69b9      	ldr	r1, [r7, #24]
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	617b      	str	r3, [r7, #20]
   return(result);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e4      	bne.n	8007376 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7fa f9b3 	bl	8001724 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073be:	e063      	b.n	8007488 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00e      	beq.n	80073ea <HAL_UART_IRQHandler+0x59e>
 80073cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d008      	beq.n	80073ea <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80073e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fbd0 	bl	8008b88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073e8:	e051      	b.n	800748e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80073ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d014      	beq.n	8007420 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80073f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d105      	bne.n	800740e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d008      	beq.n	8007420 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007412:	2b00      	cmp	r3, #0
 8007414:	d03a      	beq.n	800748c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
    }
    return;
 800741e:	e035      	b.n	800748c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <HAL_UART_IRQHandler+0x5f4>
 800742c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fe79 	bl	8008130 <UART_EndTransmit_IT>
    return;
 800743e:	e026      	b.n	800748e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007444:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d009      	beq.n	8007460 <HAL_UART_IRQHandler+0x614>
 800744c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007450:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f001 fba9 	bl	8008bb0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800745e:	e016      	b.n	800748e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d010      	beq.n	800748e <HAL_UART_IRQHandler+0x642>
 800746c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007470:	2b00      	cmp	r3, #0
 8007472:	da0c      	bge.n	800748e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 fb91 	bl	8008b9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800747a:	e008      	b.n	800748e <HAL_UART_IRQHandler+0x642>
      return;
 800747c:	bf00      	nop
 800747e:	e006      	b.n	800748e <HAL_UART_IRQHandler+0x642>
    return;
 8007480:	bf00      	nop
 8007482:	e004      	b.n	800748e <HAL_UART_IRQHandler+0x642>
      return;
 8007484:	bf00      	nop
 8007486:	e002      	b.n	800748e <HAL_UART_IRQHandler+0x642>
      return;
 8007488:	bf00      	nop
 800748a:	e000      	b.n	800748e <HAL_UART_IRQHandler+0x642>
    return;
 800748c:	bf00      	nop
  }
}
 800748e:	37e8      	adds	r7, #232	; 0xe8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b8f      	ldr	r3, [pc, #572]	; (8007738 <UART_SetConfig+0x268>)
 80074fc:	4013      	ands	r3, r2
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	6979      	ldr	r1, [r7, #20]
 8007504:	430b      	orrs	r3, r1
 8007506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	617b      	str	r3, [r7, #20]
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007538:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	6979      	ldr	r1, [r7, #20]
 8007542:	430b      	orrs	r3, r1
 8007544:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	f023 010f 	bic.w	r1, r3, #15
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a76      	ldr	r2, [pc, #472]	; (800773c <UART_SetConfig+0x26c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d11f      	bne.n	80075a6 <UART_SetConfig+0xd6>
 8007566:	2003      	movs	r0, #3
 8007568:	f7ff faee 	bl	8006b48 <LL_RCC_GetUSARTClockSource>
 800756c:	4603      	mov	r3, r0
 800756e:	2b03      	cmp	r3, #3
 8007570:	d816      	bhi.n	80075a0 <UART_SetConfig+0xd0>
 8007572:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <UART_SetConfig+0xa8>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	08007589 	.word	0x08007589
 800757c:	08007595 	.word	0x08007595
 8007580:	0800758f 	.word	0x0800758f
 8007584:	0800759b 	.word	0x0800759b
 8007588:	2301      	movs	r3, #1
 800758a:	77fb      	strb	r3, [r7, #31]
 800758c:	e00d      	b.n	80075aa <UART_SetConfig+0xda>
 800758e:	2302      	movs	r3, #2
 8007590:	77fb      	strb	r3, [r7, #31]
 8007592:	e00a      	b.n	80075aa <UART_SetConfig+0xda>
 8007594:	2304      	movs	r3, #4
 8007596:	77fb      	strb	r3, [r7, #31]
 8007598:	e007      	b.n	80075aa <UART_SetConfig+0xda>
 800759a:	2308      	movs	r3, #8
 800759c:	77fb      	strb	r3, [r7, #31]
 800759e:	e004      	b.n	80075aa <UART_SetConfig+0xda>
 80075a0:	2310      	movs	r3, #16
 80075a2:	77fb      	strb	r3, [r7, #31]
 80075a4:	e001      	b.n	80075aa <UART_SetConfig+0xda>
 80075a6:	2310      	movs	r3, #16
 80075a8:	77fb      	strb	r3, [r7, #31]
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b2:	d15e      	bne.n	8007672 <UART_SetConfig+0x1a2>
#endif /* LPUART1 */
  {
    switch (clocksource)
 80075b4:	7ffb      	ldrb	r3, [r7, #31]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	2b07      	cmp	r3, #7
 80075ba:	d822      	bhi.n	8007602 <UART_SetConfig+0x132>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <UART_SetConfig+0xf4>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075e5 	.word	0x080075e5
 80075c8:	080075ed 	.word	0x080075ed
 80075cc:	08007603 	.word	0x08007603
 80075d0:	080075f3 	.word	0x080075f3
 80075d4:	08007603 	.word	0x08007603
 80075d8:	08007603 	.word	0x08007603
 80075dc:	08007603 	.word	0x08007603
 80075e0:	080075fb 	.word	0x080075fb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075e4:	f7fe f87e 	bl	80056e4 <HAL_RCC_GetPCLK2Freq>
 80075e8:	61b8      	str	r0, [r7, #24]
        break;
 80075ea:	e00f      	b.n	800760c <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075ec:	4b54      	ldr	r3, [pc, #336]	; (8007740 <UART_SetConfig+0x270>)
 80075ee:	61bb      	str	r3, [r7, #24]
        break;
 80075f0:	e00c      	b.n	800760c <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075f2:	f7fd fff7 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 80075f6:	61b8      	str	r0, [r7, #24]
        break;
 80075f8:	e008      	b.n	800760c <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075fe:	61bb      	str	r3, [r7, #24]
        break;
 8007600:	e004      	b.n	800760c <UART_SetConfig+0x13c>
      default:
        pclk = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	77bb      	strb	r3, [r7, #30]
        break;
 800760a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d07e      	beq.n	8007710 <UART_SetConfig+0x240>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	4a4b      	ldr	r2, [pc, #300]	; (8007744 <UART_SetConfig+0x274>)
 8007618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800761c:	461a      	mov	r2, r3
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	fbb3 f3f2 	udiv	r3, r3, r2
 8007624:	005a      	lsls	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	085b      	lsrs	r3, r3, #1
 800762c:	441a      	add	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	fbb2 f3f3 	udiv	r3, r2, r3
 8007636:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b0f      	cmp	r3, #15
 800763c:	d916      	bls.n	800766c <UART_SetConfig+0x19c>
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007644:	d212      	bcs.n	800766c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	b29b      	uxth	r3, r3
 800764a:	f023 030f 	bic.w	r3, r3, #15
 800764e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	085b      	lsrs	r3, r3, #1
 8007654:	b29b      	uxth	r3, r3
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	b29a      	uxth	r2, r3
 800765c:	89fb      	ldrh	r3, [r7, #14]
 800765e:	4313      	orrs	r3, r2
 8007660:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	89fa      	ldrh	r2, [r7, #14]
 8007668:	60da      	str	r2, [r3, #12]
 800766a:	e051      	b.n	8007710 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	77bb      	strb	r3, [r7, #30]
 8007670:	e04e      	b.n	8007710 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007672:	7ffb      	ldrb	r3, [r7, #31]
 8007674:	3b01      	subs	r3, #1
 8007676:	2b07      	cmp	r3, #7
 8007678:	d821      	bhi.n	80076be <UART_SetConfig+0x1ee>
 800767a:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <UART_SetConfig+0x1b0>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	080076a1 	.word	0x080076a1
 8007684:	080076a9 	.word	0x080076a9
 8007688:	080076bf 	.word	0x080076bf
 800768c:	080076af 	.word	0x080076af
 8007690:	080076bf 	.word	0x080076bf
 8007694:	080076bf 	.word	0x080076bf
 8007698:	080076bf 	.word	0x080076bf
 800769c:	080076b7 	.word	0x080076b7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076a0:	f7fe f820 	bl	80056e4 <HAL_RCC_GetPCLK2Freq>
 80076a4:	61b8      	str	r0, [r7, #24]
        break;
 80076a6:	e00f      	b.n	80076c8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a8:	4b25      	ldr	r3, [pc, #148]	; (8007740 <UART_SetConfig+0x270>)
 80076aa:	61bb      	str	r3, [r7, #24]
        break;
 80076ac:	e00c      	b.n	80076c8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ae:	f7fd ff99 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 80076b2:	61b8      	str	r0, [r7, #24]
        break;
 80076b4:	e008      	b.n	80076c8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ba:	61bb      	str	r3, [r7, #24]
        break;
 80076bc:	e004      	b.n	80076c8 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	77bb      	strb	r3, [r7, #30]
        break;
 80076c6:	bf00      	nop
    }

    if (pclk != 0U)
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d020      	beq.n	8007710 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <UART_SetConfig+0x274>)
 80076d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076d8:	461a      	mov	r2, r3
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	085b      	lsrs	r3, r3, #1
 80076e6:	441a      	add	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b0f      	cmp	r3, #15
 80076f6:	d909      	bls.n	800770c <UART_SetConfig+0x23c>
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076fe:	d205      	bcs.n	800770c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	b29a      	uxth	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60da      	str	r2, [r3, #12]
 800770a:	e001      	b.n	8007710 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800772c:	7fbb      	ldrb	r3, [r7, #30]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	cfff69f3 	.word	0xcfff69f3
 800773c:	40013800 	.word	0x40013800
 8007740:	00f42400 	.word	0x00f42400
 8007744:	0800c544 	.word	0x0800c544

08007748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00a      	beq.n	8007772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	f003 0308 	and.w	r3, r3, #8
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	f003 0310 	and.w	r3, r3, #16
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01a      	beq.n	800785e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007846:	d10a      	bne.n	800785e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	605a      	str	r2, [r3, #4]
  }
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b098      	sub	sp, #96	; 0x60
 8007890:	af02      	add	r7, sp, #8
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800789c:	f7fa fe4c 	bl	8002538 <HAL_GetTick>
 80078a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0308 	and.w	r3, r3, #8
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d12f      	bne.n	8007910 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b8:	2200      	movs	r2, #0
 80078ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f88e 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d022      	beq.n	8007910 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078de:	653b      	str	r3, [r7, #80]	; 0x50
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078e8:	647b      	str	r3, [r7, #68]	; 0x44
 80078ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e6      	bne.n	80078ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e063      	b.n	80079d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b04      	cmp	r3, #4
 800791c:	d149      	bne.n	80079b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800791e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007926:	2200      	movs	r2, #0
 8007928:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f857 	bl	80079e0 <UART_WaitOnFlagUntilTimeout>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d03c      	beq.n	80079b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	623b      	str	r3, [r7, #32]
   return(result);
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800794c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007956:	633b      	str	r3, [r7, #48]	; 0x30
 8007958:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800795c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e6      	bne.n	8007938 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	60fb      	str	r3, [r7, #12]
   return(result);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	64bb      	str	r3, [r7, #72]	; 0x48
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3308      	adds	r3, #8
 8007988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800798a:	61fa      	str	r2, [r7, #28]
 800798c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	69b9      	ldr	r1, [r7, #24]
 8007990:	69fa      	ldr	r2, [r7, #28]
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	617b      	str	r3, [r7, #20]
   return(result);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e5      	bne.n	800796a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e012      	b.n	80079d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3758      	adds	r7, #88	; 0x58
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f0:	e049      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f8:	d045      	beq.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079fa:	f7fa fd9d 	bl	8002538 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d302      	bcc.n	8007a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e048      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0304 	and.w	r3, r3, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d031      	beq.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d110      	bne.n	8007a52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2208      	movs	r2, #8
 8007a36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f95b 	bl	8007cf4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2208      	movs	r2, #8
 8007a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e029      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a60:	d111      	bne.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f941 	bl	8007cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e00f      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69da      	ldr	r2, [r3, #28]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	bf0c      	ite	eq
 8007a96:	2301      	moveq	r3, #1
 8007a98:	2300      	movne	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d0a6      	beq.n	80079f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b0a3      	sub	sp, #140	; 0x8c
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	4613      	mov	r3, r2
 8007abc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	88fa      	ldrh	r2, [r7, #6]
 8007ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	88fa      	ldrh	r2, [r7, #6]
 8007ad0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae2:	d10e      	bne.n	8007b02 <UART_Start_Receive_IT+0x52>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d105      	bne.n	8007af8 <UART_Start_Receive_IT+0x48>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007af2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007af6:	e02d      	b.n	8007b54 <UART_Start_Receive_IT+0xa4>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	22ff      	movs	r2, #255	; 0xff
 8007afc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b00:	e028      	b.n	8007b54 <UART_Start_Receive_IT+0xa4>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10d      	bne.n	8007b26 <UART_Start_Receive_IT+0x76>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d104      	bne.n	8007b1c <UART_Start_Receive_IT+0x6c>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	22ff      	movs	r2, #255	; 0xff
 8007b16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b1a:	e01b      	b.n	8007b54 <UART_Start_Receive_IT+0xa4>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	227f      	movs	r2, #127	; 0x7f
 8007b20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b24:	e016      	b.n	8007b54 <UART_Start_Receive_IT+0xa4>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b2e:	d10d      	bne.n	8007b4c <UART_Start_Receive_IT+0x9c>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d104      	bne.n	8007b42 <UART_Start_Receive_IT+0x92>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	227f      	movs	r2, #127	; 0x7f
 8007b3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b40:	e008      	b.n	8007b54 <UART_Start_Receive_IT+0xa4>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	223f      	movs	r2, #63	; 0x3f
 8007b46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b4a:	e003      	b.n	8007b54 <UART_Start_Receive_IT+0xa4>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2222      	movs	r2, #34	; 0x22
 8007b60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3308      	adds	r3, #8
 8007b6a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b76:	f043 0301 	orr.w	r3, r3, #1
 8007b7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007b88:	673a      	str	r2, [r7, #112]	; 0x70
 8007b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007b8e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e3      	bne.n	8007b64 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ba4:	d14f      	bne.n	8007c46 <UART_Start_Receive_IT+0x196>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bac:	88fa      	ldrh	r2, [r7, #6]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d349      	bcc.n	8007c46 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bba:	d107      	bne.n	8007bcc <UART_Start_Receive_IT+0x11c>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d103      	bne.n	8007bcc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4a47      	ldr	r2, [pc, #284]	; (8007ce4 <UART_Start_Receive_IT+0x234>)
 8007bc8:	675a      	str	r2, [r3, #116]	; 0x74
 8007bca:	e002      	b.n	8007bd2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4a46      	ldr	r2, [pc, #280]	; (8007ce8 <UART_Start_Receive_IT+0x238>)
 8007bd0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01a      	beq.n	8007c10 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bfe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e4      	bne.n	8007bda <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3308      	adds	r3, #8
 8007c16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007c30:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e5      	bne.n	8007c10 <UART_Start_Receive_IT+0x160>
 8007c44:	e046      	b.n	8007cd4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c4e:	d107      	bne.n	8007c60 <UART_Start_Receive_IT+0x1b0>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d103      	bne.n	8007c60 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4a24      	ldr	r2, [pc, #144]	; (8007cec <UART_Start_Receive_IT+0x23c>)
 8007c5c:	675a      	str	r2, [r3, #116]	; 0x74
 8007c5e:	e002      	b.n	8007c66 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4a23      	ldr	r2, [pc, #140]	; (8007cf0 <UART_Start_Receive_IT+0x240>)
 8007c64:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d019      	beq.n	8007ca2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007c82:	677b      	str	r3, [r7, #116]	; 0x74
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e6      	bne.n	8007c6e <UART_Start_Receive_IT+0x1be>
 8007ca0:	e018      	b.n	8007cd4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f043 0320 	orr.w	r3, r3, #32
 8007cb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cc0:	623b      	str	r3, [r7, #32]
 8007cc2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	69f9      	ldr	r1, [r7, #28]
 8007cc6:	6a3a      	ldr	r2, [r7, #32]
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e6      	bne.n	8007ca2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	378c      	adds	r7, #140	; 0x8c
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	0800882d 	.word	0x0800882d
 8007ce8:	080084d9 	.word	0x080084d9
 8007cec:	0800832f 	.word	0x0800832f
 8007cf0:	08008187 	.word	0x08008187

08007cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b095      	sub	sp, #84	; 0x54
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d22:	e841 2300 	strex	r3, r2, [r1]
 8007d26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e6      	bne.n	8007cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3308      	adds	r3, #8
 8007d34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d44:	f023 0301 	bic.w	r3, r3, #1
 8007d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e3      	bne.n	8007d2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d118      	bne.n	8007da0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f023 0310 	bic.w	r3, r3, #16
 8007d82:	647b      	str	r3, [r7, #68]	; 0x44
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d8c:	61bb      	str	r3, [r7, #24]
 8007d8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	6979      	ldr	r1, [r7, #20]
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	e841 2300 	strex	r3, r2, [r1]
 8007d98:	613b      	str	r3, [r7, #16]
   return(result);
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e6      	bne.n	8007d6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2220      	movs	r2, #32
 8007da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007db4:	bf00      	nop
 8007db6:	3754      	adds	r7, #84	; 0x54
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f7ff fb6c 	bl	80074bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007de4:	bf00      	nop
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b08f      	sub	sp, #60	; 0x3c
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfa:	2b21      	cmp	r3, #33	; 0x21
 8007dfc:	d14c      	bne.n	8007e98 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d132      	bne.n	8007e70 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	461a      	mov	r2, r3
 8007e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e2a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e6      	bne.n	8007e0a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e50:	633b      	str	r3, [r7, #48]	; 0x30
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	61bb      	str	r3, [r7, #24]
 8007e5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6979      	ldr	r1, [r7, #20]
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	613b      	str	r3, [r7, #16]
   return(result);
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e6      	bne.n	8007e3c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007e6e:	e013      	b.n	8007e98 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e74:	781a      	ldrb	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007e98:	bf00      	nop
 8007e9a:	373c      	adds	r7, #60	; 0x3c
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b091      	sub	sp, #68	; 0x44
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb2:	2b21      	cmp	r3, #33	; 0x21
 8007eb4:	d151      	bne.n	8007f5a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d132      	bne.n	8007f28 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	e853 3f00 	ldrex	r3, [r3]
 8007ece:	623b      	str	r3, [r7, #32]
   return(result);
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8007ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e6      	bne.n	8007ec2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f08:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f12:	61fb      	str	r3, [r7, #28]
 8007f14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f16:	69b9      	ldr	r1, [r7, #24]
 8007f18:	69fa      	ldr	r2, [r7, #28]
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	617b      	str	r3, [r7, #20]
   return(result);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e6      	bne.n	8007ef4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007f26:	e018      	b.n	8007f5a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f3c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f42:	1c9a      	adds	r2, r3, #2
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	3b01      	subs	r3, #1
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007f5a:	bf00      	nop
 8007f5c:	3744      	adds	r7, #68	; 0x44
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b091      	sub	sp, #68	; 0x44
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f74:	2b21      	cmp	r3, #33	; 0x21
 8007f76:	d160      	bne.n	800803a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007f80:	e057      	b.n	8008032 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d133      	bne.n	8007ff6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3308      	adds	r3, #8
 8007fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fae:	633a      	str	r2, [r7, #48]	; 0x30
 8007fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e5      	bne.n	8007f8e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	69b9      	ldr	r1, [r7, #24]
 8007fe6:	69fa      	ldr	r2, [r7, #28]
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	617b      	str	r3, [r7, #20]
   return(result);
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e6      	bne.n	8007fc2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007ff4:	e021      	b.n	800803a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69db      	ldr	r3, [r3, #28]
 8007ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008000:	2b00      	cmp	r3, #0
 8008002:	d013      	beq.n	800802c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008008:	781a      	ldrb	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800802c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800802e:	3b01      	subs	r3, #1
 8008030:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008032:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1a4      	bne.n	8007f82 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008038:	e7ff      	b.n	800803a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800803a:	bf00      	nop
 800803c:	3744      	adds	r7, #68	; 0x44
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008046:	b480      	push	{r7}
 8008048:	b091      	sub	sp, #68	; 0x44
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008054:	2b21      	cmp	r3, #33	; 0x21
 8008056:	d165      	bne.n	8008124 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800805e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008060:	e05c      	b.n	800811c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008068:	b29b      	uxth	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d133      	bne.n	80080d6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3308      	adds	r3, #8
 8008074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	e853 3f00 	ldrex	r3, [r3]
 800807c:	61fb      	str	r3, [r7, #28]
   return(result);
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008084:	637b      	str	r3, [r7, #52]	; 0x34
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3308      	adds	r3, #8
 800808c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800808e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008090:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e5      	bne.n	800806e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b6:	633b      	str	r3, [r7, #48]	; 0x30
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	61bb      	str	r3, [r7, #24]
 80080c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6979      	ldr	r1, [r7, #20]
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	613b      	str	r3, [r7, #16]
   return(result);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e6      	bne.n	80080a2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80080d4:	e026      	b.n	8008124 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d018      	beq.n	8008116 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080f8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080fe:	1c9a      	adds	r2, r3, #2
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800810a:	b29b      	uxth	r3, r3
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008116:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008118:	3b01      	subs	r3, #1
 800811a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800811c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800811e:	2b00      	cmp	r3, #0
 8008120:	d19f      	bne.n	8008062 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008122:	e7ff      	b.n	8008124 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008124:	bf00      	nop
 8008126:	3744      	adds	r7, #68	; 0x44
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	60bb      	str	r3, [r7, #8]
   return(result);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800814c:	61fb      	str	r3, [r7, #28]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	61bb      	str	r3, [r7, #24]
 8008158:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6979      	ldr	r1, [r7, #20]
 800815c:	69ba      	ldr	r2, [r7, #24]
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	613b      	str	r3, [r7, #16]
   return(result);
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e6      	bne.n	8008138 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2220      	movs	r2, #32
 800816e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff f98b 	bl	8007494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800817e:	bf00      	nop
 8008180:	3720      	adds	r7, #32
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b09c      	sub	sp, #112	; 0x70
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008194:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800819e:	2b22      	cmp	r3, #34	; 0x22
 80081a0:	f040 80b9 	bne.w	8008316 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80081b2:	b2d9      	uxtb	r1, r3
 80081b4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081be:	400a      	ands	r2, r1
 80081c0:	b2d2      	uxtb	r2, r2
 80081c2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f040 809c 	bne.w	8008326 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008202:	66bb      	str	r3, [r7, #104]	; 0x68
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800820c:	65bb      	str	r3, [r7, #88]	; 0x58
 800820e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800821a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e6      	bne.n	80081ee <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3308      	adds	r3, #8
 8008226:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	e853 3f00 	ldrex	r3, [r3]
 800822e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008232:	f023 0301 	bic.w	r3, r3, #1
 8008236:	667b      	str	r3, [r7, #100]	; 0x64
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3308      	adds	r3, #8
 800823e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008240:	647a      	str	r2, [r7, #68]	; 0x44
 8008242:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008244:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008248:	e841 2300 	strex	r3, r2, [r1]
 800824c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800824e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e5      	bne.n	8008220 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	671a      	str	r2, [r3, #112]	; 0x70
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
        }
      }
#else
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d018      	beq.n	80082a8 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	623b      	str	r3, [r7, #32]
   return(result);
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800828a:	663b      	str	r3, [r7, #96]	; 0x60
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008294:	633b      	str	r3, [r7, #48]	; 0x30
 8008296:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800829a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e6      	bne.n	8008276 <UART_RxISR_8BIT+0xf0>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d12e      	bne.n	800830e <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	e853 3f00 	ldrex	r3, [r3]
 80082c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0310 	bic.w	r3, r3, #16
 80082ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	461a      	mov	r2, r3
 80082d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082d4:	61fb      	str	r3, [r7, #28]
 80082d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	69b9      	ldr	r1, [r7, #24]
 80082da:	69fa      	ldr	r2, [r7, #28]
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	617b      	str	r3, [r7, #20]
   return(result);
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e6      	bne.n	80082b6 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	f003 0310 	and.w	r3, r3, #16
 80082f2:	2b10      	cmp	r3, #16
 80082f4:	d103      	bne.n	80082fe <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2210      	movs	r2, #16
 80082fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7f9 fa0c 	bl	8001724 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800830c:	e00b      	b.n	8008326 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7ff f8ca 	bl	80074a8 <HAL_UART_RxCpltCallback>
}
 8008314:	e007      	b.n	8008326 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	699a      	ldr	r2, [r3, #24]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f042 0208 	orr.w	r2, r2, #8
 8008324:	619a      	str	r2, [r3, #24]
}
 8008326:	bf00      	nop
 8008328:	3770      	adds	r7, #112	; 0x70
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b09c      	sub	sp, #112	; 0x70
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800833c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008346:	2b22      	cmp	r3, #34	; 0x22
 8008348:	f040 80b9 	bne.w	80084be <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835a:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800835c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008360:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008364:	4013      	ands	r3, r2
 8008366:	b29a      	uxth	r2, r3
 8008368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800836a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008370:	1c9a      	adds	r2, r3, #2
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800837c:	b29b      	uxth	r3, r3
 800837e:	3b01      	subs	r3, #1
 8008380:	b29a      	uxth	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800838e:	b29b      	uxth	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	f040 809c 	bne.w	80084ce <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80083a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083aa:	667b      	str	r3, [r7, #100]	; 0x64
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083b4:	657b      	str	r3, [r7, #84]	; 0x54
 80083b6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e6      	bne.n	8008396 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3308      	adds	r3, #8
 80083ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d2:	e853 3f00 	ldrex	r3, [r3]
 80083d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	f023 0301 	bic.w	r3, r3, #1
 80083de:	663b      	str	r3, [r7, #96]	; 0x60
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3308      	adds	r3, #8
 80083e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083e8:	643a      	str	r2, [r7, #64]	; 0x40
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083f0:	e841 2300 	strex	r3, r2, [r1]
 80083f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e5      	bne.n	80083c8 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2220      	movs	r2, #32
 8008400:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	671a      	str	r2, [r3, #112]	; 0x70
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
        }
      }
#else
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d018      	beq.n	8008450 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	e853 3f00 	ldrex	r3, [r3]
 800842a:	61fb      	str	r3, [r7, #28]
   return(result);
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800843c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800843e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008444:	e841 2300 	strex	r3, r2, [r1]
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1e6      	bne.n	800841e <UART_RxISR_16BIT+0xf0>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008454:	2b01      	cmp	r3, #1
 8008456:	d12e      	bne.n	80084b6 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	60bb      	str	r3, [r7, #8]
   return(result);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f023 0310 	bic.w	r3, r3, #16
 8008472:	65bb      	str	r3, [r7, #88]	; 0x58
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800847c:	61bb      	str	r3, [r7, #24]
 800847e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6979      	ldr	r1, [r7, #20]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	613b      	str	r3, [r7, #16]
   return(result);
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e6      	bne.n	800845e <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f003 0310 	and.w	r3, r3, #16
 800849a:	2b10      	cmp	r3, #16
 800849c:	d103      	bne.n	80084a6 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2210      	movs	r2, #16
 80084a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7f9 f938 	bl	8001724 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084b4:	e00b      	b.n	80084ce <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fe fff6 	bl	80074a8 <HAL_UART_RxCpltCallback>
}
 80084bc:	e007      	b.n	80084ce <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699a      	ldr	r2, [r3, #24]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f042 0208 	orr.w	r2, r2, #8
 80084cc:	619a      	str	r2, [r3, #24]
}
 80084ce:	bf00      	nop
 80084d0:	3770      	adds	r7, #112	; 0x70
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b0ac      	sub	sp, #176	; 0xb0
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800850e:	2b22      	cmp	r3, #34	; 0x22
 8008510:	f040 817d 	bne.w	800880e <UART_RxISR_8BIT_FIFOEN+0x336>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800851a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800851e:	e120      	b.n	8008762 <UART_RxISR_8BIT_FIFOEN+0x28a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800852a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800852e:	b2d9      	uxtb	r1, r3
 8008530:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008534:	b2da      	uxtb	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800853a:	400a      	ands	r2, r1
 800853c:	b2d2      	uxtb	r2, r2
 800853e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008550:	b29b      	uxth	r3, r3
 8008552:	3b01      	subs	r3, #1
 8008554:	b29a      	uxth	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800856a:	f003 0307 	and.w	r3, r3, #7
 800856e:	2b00      	cmp	r3, #0
 8008570:	d053      	beq.n	800861a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d011      	beq.n	80085a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800857e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2201      	movs	r2, #1
 8008590:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008598:	f043 0201 	orr.w	r2, r3, #1
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d011      	beq.n	80085d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80085ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00b      	beq.n	80085d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2202      	movs	r2, #2
 80085c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c8:	f043 0204 	orr.w	r2, r3, #4
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085d6:	f003 0304 	and.w	r3, r3, #4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d011      	beq.n	8008602 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80085de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00b      	beq.n	8008602 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2204      	movs	r2, #4
 80085f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f8:	f043 0202 	orr.w	r2, r3, #2
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008608:	2b00      	cmp	r3, #0
 800860a:	d006      	beq.n	800861a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7fe ff55 	bl	80074bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008620:	b29b      	uxth	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	f040 809d 	bne.w	8008762 <UART_RxISR_8BIT_FIFOEN+0x28a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800863c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	461a      	mov	r2, r3
 8008646:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800864a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800864c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008650:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e4      	bne.n	8008628 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3308      	adds	r3, #8
 8008664:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800866e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008674:	f023 0301 	bic.w	r3, r3, #1
 8008678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3308      	adds	r3, #8
 8008682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008686:	66ba      	str	r2, [r7, #104]	; 0x68
 8008688:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800868c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e1      	bne.n	800865e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2220      	movs	r2, #32
 800869e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	671a      	str	r2, [r3, #112]	; 0x70
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
          }
        }
#else
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01a      	beq.n	80086f2 <UART_RxISR_8BIT_FIFOEN+0x21a>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80086ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086de:	657b      	str	r3, [r7, #84]	; 0x54
 80086e0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e4      	bne.n	80086bc <UART_RxISR_8BIT_FIFOEN+0x1e4>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d130      	bne.n	800875c <UART_RxISR_8BIT_FIFOEN+0x284>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008708:	e853 3f00 	ldrex	r3, [r3]
 800870c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	f023 0310 	bic.w	r3, r3, #16
 8008714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	461a      	mov	r2, r3
 800871e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008722:	643b      	str	r3, [r7, #64]	; 0x40
 8008724:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800872a:	e841 2300 	strex	r3, r2, [r1]
 800872e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e4      	bne.n	8008700 <UART_RxISR_8BIT_FIFOEN+0x228>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b10      	cmp	r3, #16
 8008742:	d103      	bne.n	800874c <UART_RxISR_8BIT_FIFOEN+0x274>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2210      	movs	r2, #16
 800874a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7f8 ffe5 	bl	8001724 <HAL_UARTEx_RxEventCallback>
 800875a:	e002      	b.n	8008762 <UART_RxISR_8BIT_FIFOEN+0x28a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7fe fea3 	bl	80074a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008762:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008766:	2b00      	cmp	r3, #0
 8008768:	d006      	beq.n	8008778 <UART_RxISR_8BIT_FIFOEN+0x2a0>
 800876a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800876e:	f003 0320 	and.w	r3, r3, #32
 8008772:	2b00      	cmp	r3, #0
 8008774:	f47f aed4 	bne.w	8008520 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800877e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008782:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008786:	2b00      	cmp	r3, #0
 8008788:	d049      	beq.n	800881e <UART_RxISR_8BIT_FIFOEN+0x346>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008790:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008794:	429a      	cmp	r2, r3
 8008796:	d242      	bcs.n	800881e <UART_RxISR_8BIT_FIFOEN+0x346>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3308      	adds	r3, #8
 800879e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3308      	adds	r3, #8
 80087b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80087bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e3      	bne.n	8008798 <UART_RxISR_8BIT_FIFOEN+0x2c0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a15      	ldr	r2, [pc, #84]	; (8008828 <UART_RxISR_8BIT_FIFOEN+0x350>)
 80087d4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f043 0320 	orr.w	r3, r3, #32
 80087ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087f8:	61bb      	str	r3, [r7, #24]
 80087fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	6979      	ldr	r1, [r7, #20]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	613b      	str	r3, [r7, #16]
   return(result);
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e4      	bne.n	80087d6 <UART_RxISR_8BIT_FIFOEN+0x2fe>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800880c:	e007      	b.n	800881e <UART_RxISR_8BIT_FIFOEN+0x346>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699a      	ldr	r2, [r3, #24]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f042 0208 	orr.w	r2, r2, #8
 800881c:	619a      	str	r2, [r3, #24]
}
 800881e:	bf00      	nop
 8008820:	37b0      	adds	r7, #176	; 0xb0
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	08008187 	.word	0x08008187

0800882c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b0ae      	sub	sp, #184	; 0xb8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800883a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008862:	2b22      	cmp	r3, #34	; 0x22
 8008864:	f040 8181 	bne.w	8008b6a <UART_RxISR_16BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800886e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008872:	e124      	b.n	8008abe <UART_RxISR_16BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008886:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800888a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800888e:	4013      	ands	r3, r2
 8008890:	b29a      	uxth	r2, r3
 8008892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008896:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889c:	1c9a      	adds	r2, r3, #2
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	3b01      	subs	r3, #1
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80088be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088c2:	f003 0307 	and.w	r3, r3, #7
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d053      	beq.n	8008972 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d011      	beq.n	80088fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80088d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00b      	beq.n	80088fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2201      	movs	r2, #1
 80088e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f0:	f043 0201 	orr.w	r2, r3, #1
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d011      	beq.n	800892a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00b      	beq.n	800892a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2202      	movs	r2, #2
 8008918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008920:	f043 0204 	orr.w	r2, r3, #4
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800892a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800892e:	f003 0304 	and.w	r3, r3, #4
 8008932:	2b00      	cmp	r3, #0
 8008934:	d011      	beq.n	800895a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00b      	beq.n	800895a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2204      	movs	r2, #4
 8008948:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008950:	f043 0202 	orr.w	r2, r3, #2
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008960:	2b00      	cmp	r3, #0
 8008962:	d006      	beq.n	8008972 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7fe fda9 	bl	80074bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008978:	b29b      	uxth	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	f040 809f 	bne.w	8008abe <UART_RxISR_16BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800898e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	461a      	mov	r2, r3
 800899e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089a6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80089aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80089b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e2      	bne.n	8008980 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3308      	adds	r3, #8
 80089c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80089ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089d0:	f023 0301 	bic.w	r3, r3, #1
 80089d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3308      	adds	r3, #8
 80089de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80089e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80089e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80089e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089ea:	e841 2300 	strex	r3, r2, [r1]
 80089ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1e1      	bne.n	80089ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2220      	movs	r2, #32
 80089fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	671a      	str	r2, [r3, #112]	; 0x70
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
          }
        }
#else
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01a      	beq.n	8008a4e <UART_RxISR_16BIT_FIFOEN+0x222>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e4      	bne.n	8008a18 <UART_RxISR_16BIT_FIFOEN+0x1ec>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d130      	bne.n	8008ab8 <UART_RxISR_16BIT_FIFOEN+0x28c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6c:	f023 0310 	bic.w	r3, r3, #16
 8008a70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a86:	e841 2300 	strex	r3, r2, [r1]
 8008a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1e4      	bne.n	8008a5c <UART_RxISR_16BIT_FIFOEN+0x230>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	f003 0310 	and.w	r3, r3, #16
 8008a9c:	2b10      	cmp	r3, #16
 8008a9e:	d103      	bne.n	8008aa8 <UART_RxISR_16BIT_FIFOEN+0x27c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2210      	movs	r2, #16
 8008aa6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7f8 fe37 	bl	8001724 <HAL_UARTEx_RxEventCallback>
 8008ab6:	e002      	b.n	8008abe <UART_RxISR_16BIT_FIFOEN+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7fe fcf5 	bl	80074a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008abe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d006      	beq.n	8008ad4 <UART_RxISR_16BIT_FIFOEN+0x2a8>
 8008ac6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f47f aed0 	bne.w	8008874 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ada:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ade:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d049      	beq.n	8008b7a <UART_RxISR_16BIT_FIFOEN+0x34e>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008aec:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d242      	bcs.n	8008b7a <UART_RxISR_16BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3308      	adds	r3, #8
 8008afa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	623b      	str	r3, [r7, #32]
   return(result);
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3308      	adds	r3, #8
 8008b14:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b18:	633a      	str	r2, [r7, #48]	; 0x30
 8008b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e3      	bne.n	8008af4 <UART_RxISR_16BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a15      	ldr	r2, [pc, #84]	; (8008b84 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8008b30:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	e853 3f00 	ldrex	r3, [r3]
 8008b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f043 0320 	orr.w	r3, r3, #32
 8008b46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b54:	61fb      	str	r3, [r7, #28]
 8008b56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b58:	69b9      	ldr	r1, [r7, #24]
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	617b      	str	r3, [r7, #20]
   return(result);
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e4      	bne.n	8008b32 <UART_RxISR_16BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b68:	e007      	b.n	8008b7a <UART_RxISR_16BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	699a      	ldr	r2, [r3, #24]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0208 	orr.w	r2, r2, #8
 8008b78:	619a      	str	r2, [r3, #24]
}
 8008b7a:	bf00      	nop
 8008b7c:	37b8      	adds	r7, #184	; 0xb8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	0800832f 	.word	0x0800832f

08008b88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d101      	bne.n	8008bda <HAL_UARTEx_DisableFifoMode+0x16>
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	e027      	b.n	8008c2a <HAL_UARTEx_DisableFifoMode+0x66>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2224      	movs	r2, #36	; 0x24
 8008be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0201 	bic.w	r2, r2, #1
 8008c00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d101      	bne.n	8008c4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e02d      	b.n	8008caa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2224      	movs	r2, #36	; 0x24
 8008c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0201 	bic.w	r2, r2, #1
 8008c74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f8a4 	bl	8008dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d101      	bne.n	8008cca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	e02d      	b.n	8008d26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2224      	movs	r2, #36	; 0x24
 8008cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0201 	bic.w	r2, r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f866 	bl	8008dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b08c      	sub	sp, #48	; 0x30
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	60b9      	str	r1, [r7, #8]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d42:	2b20      	cmp	r3, #32
 8008d44:	d142      	bne.n	8008dcc <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8008d4c:	88fb      	ldrh	r3, [r7, #6]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e03b      	b.n	8008dce <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	461a      	mov	r2, r3
 8008d66:	68b9      	ldr	r1, [r7, #8]
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f7fe fea1 	bl	8007ab0 <UART_Start_Receive_IT>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d124      	bne.n	8008dc6 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d11d      	bne.n	8008dc0 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2210      	movs	r2, #16
 8008d8a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	617b      	str	r3, [r7, #20]
   return(result);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f043 0310 	orr.w	r3, r3, #16
 8008da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008daa:	627b      	str	r3, [r7, #36]	; 0x24
 8008dac:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	6a39      	ldr	r1, [r7, #32]
 8008db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e6      	bne.n	8008d8c <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8008dbe:	e002      	b.n	8008dc6 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008dca:	e000      	b.n	8008dce <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008dcc:	2302      	movs	r3, #2
  }
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3730      	adds	r7, #48	; 0x30
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d108      	bne.n	8008dfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008df8:	e031      	b.n	8008e5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008dfa:	2308      	movs	r3, #8
 8008dfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008dfe:	2308      	movs	r3, #8
 8008e00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	0e5b      	lsrs	r3, r3, #25
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	f003 0307 	and.w	r3, r3, #7
 8008e10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	0f5b      	lsrs	r3, r3, #29
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	7b3a      	ldrb	r2, [r7, #12]
 8008e26:	4911      	ldr	r1, [pc, #68]	; (8008e6c <UARTEx_SetNbDataToProcess+0x94>)
 8008e28:	5c8a      	ldrb	r2, [r1, r2]
 8008e2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e2e:	7b3a      	ldrb	r2, [r7, #12]
 8008e30:	490f      	ldr	r1, [pc, #60]	; (8008e70 <UARTEx_SetNbDataToProcess+0x98>)
 8008e32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e34:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	7b7a      	ldrb	r2, [r7, #13]
 8008e44:	4909      	ldr	r1, [pc, #36]	; (8008e6c <UARTEx_SetNbDataToProcess+0x94>)
 8008e46:	5c8a      	ldrb	r2, [r1, r2]
 8008e48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e4c:	7b7a      	ldrb	r2, [r7, #13]
 8008e4e:	4908      	ldr	r1, [pc, #32]	; (8008e70 <UARTEx_SetNbDataToProcess+0x98>)
 8008e50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e52:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e5e:	bf00      	nop
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	0800c55c 	.word	0x0800c55c
 8008e70:	0800c564 	.word	0x0800c564

08008e74 <atoi>:
 8008e74:	220a      	movs	r2, #10
 8008e76:	2100      	movs	r1, #0
 8008e78:	f000 bee0 	b.w	8009c3c <strtol>

08008e7c <__errno>:
 8008e7c:	4b01      	ldr	r3, [pc, #4]	; (8008e84 <__errno+0x8>)
 8008e7e:	6818      	ldr	r0, [r3, #0]
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000010 	.word	0x20000010

08008e88 <__libc_init_array>:
 8008e88:	b570      	push	{r4, r5, r6, lr}
 8008e8a:	4d0d      	ldr	r5, [pc, #52]	; (8008ec0 <__libc_init_array+0x38>)
 8008e8c:	4c0d      	ldr	r4, [pc, #52]	; (8008ec4 <__libc_init_array+0x3c>)
 8008e8e:	1b64      	subs	r4, r4, r5
 8008e90:	10a4      	asrs	r4, r4, #2
 8008e92:	2600      	movs	r6, #0
 8008e94:	42a6      	cmp	r6, r4
 8008e96:	d109      	bne.n	8008eac <__libc_init_array+0x24>
 8008e98:	4d0b      	ldr	r5, [pc, #44]	; (8008ec8 <__libc_init_array+0x40>)
 8008e9a:	4c0c      	ldr	r4, [pc, #48]	; (8008ecc <__libc_init_array+0x44>)
 8008e9c:	f003 fa30 	bl	800c300 <_init>
 8008ea0:	1b64      	subs	r4, r4, r5
 8008ea2:	10a4      	asrs	r4, r4, #2
 8008ea4:	2600      	movs	r6, #0
 8008ea6:	42a6      	cmp	r6, r4
 8008ea8:	d105      	bne.n	8008eb6 <__libc_init_array+0x2e>
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb0:	4798      	blx	r3
 8008eb2:	3601      	adds	r6, #1
 8008eb4:	e7ee      	b.n	8008e94 <__libc_init_array+0xc>
 8008eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eba:	4798      	blx	r3
 8008ebc:	3601      	adds	r6, #1
 8008ebe:	e7f2      	b.n	8008ea6 <__libc_init_array+0x1e>
 8008ec0:	0800c94c 	.word	0x0800c94c
 8008ec4:	0800c94c 	.word	0x0800c94c
 8008ec8:	0800c94c 	.word	0x0800c94c
 8008ecc:	0800c950 	.word	0x0800c950

08008ed0 <malloc>:
 8008ed0:	4b02      	ldr	r3, [pc, #8]	; (8008edc <malloc+0xc>)
 8008ed2:	4601      	mov	r1, r0
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	f000 b885 	b.w	8008fe4 <_malloc_r>
 8008eda:	bf00      	nop
 8008edc:	20000010 	.word	0x20000010

08008ee0 <memcpy>:
 8008ee0:	440a      	add	r2, r1
 8008ee2:	4291      	cmp	r1, r2
 8008ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ee8:	d100      	bne.n	8008eec <memcpy+0xc>
 8008eea:	4770      	bx	lr
 8008eec:	b510      	push	{r4, lr}
 8008eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ef6:	4291      	cmp	r1, r2
 8008ef8:	d1f9      	bne.n	8008eee <memcpy+0xe>
 8008efa:	bd10      	pop	{r4, pc}

08008efc <memset>:
 8008efc:	4402      	add	r2, r0
 8008efe:	4603      	mov	r3, r0
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d100      	bne.n	8008f06 <memset+0xa>
 8008f04:	4770      	bx	lr
 8008f06:	f803 1b01 	strb.w	r1, [r3], #1
 8008f0a:	e7f9      	b.n	8008f00 <memset+0x4>

08008f0c <_free_r>:
 8008f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f0e:	2900      	cmp	r1, #0
 8008f10:	d044      	beq.n	8008f9c <_free_r+0x90>
 8008f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f16:	9001      	str	r0, [sp, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f1e:	bfb8      	it	lt
 8008f20:	18e4      	addlt	r4, r4, r3
 8008f22:	f001 fff3 	bl	800af0c <__malloc_lock>
 8008f26:	4a1e      	ldr	r2, [pc, #120]	; (8008fa0 <_free_r+0x94>)
 8008f28:	9801      	ldr	r0, [sp, #4]
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	b933      	cbnz	r3, 8008f3c <_free_r+0x30>
 8008f2e:	6063      	str	r3, [r4, #4]
 8008f30:	6014      	str	r4, [r2, #0]
 8008f32:	b003      	add	sp, #12
 8008f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f38:	f001 bfee 	b.w	800af18 <__malloc_unlock>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d908      	bls.n	8008f52 <_free_r+0x46>
 8008f40:	6825      	ldr	r5, [r4, #0]
 8008f42:	1961      	adds	r1, r4, r5
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf01      	itttt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	1949      	addeq	r1, r1, r5
 8008f4e:	6021      	streq	r1, [r4, #0]
 8008f50:	e7ed      	b.n	8008f2e <_free_r+0x22>
 8008f52:	461a      	mov	r2, r3
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	b10b      	cbz	r3, 8008f5c <_free_r+0x50>
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	d9fa      	bls.n	8008f52 <_free_r+0x46>
 8008f5c:	6811      	ldr	r1, [r2, #0]
 8008f5e:	1855      	adds	r5, r2, r1
 8008f60:	42a5      	cmp	r5, r4
 8008f62:	d10b      	bne.n	8008f7c <_free_r+0x70>
 8008f64:	6824      	ldr	r4, [r4, #0]
 8008f66:	4421      	add	r1, r4
 8008f68:	1854      	adds	r4, r2, r1
 8008f6a:	42a3      	cmp	r3, r4
 8008f6c:	6011      	str	r1, [r2, #0]
 8008f6e:	d1e0      	bne.n	8008f32 <_free_r+0x26>
 8008f70:	681c      	ldr	r4, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	6053      	str	r3, [r2, #4]
 8008f76:	4421      	add	r1, r4
 8008f78:	6011      	str	r1, [r2, #0]
 8008f7a:	e7da      	b.n	8008f32 <_free_r+0x26>
 8008f7c:	d902      	bls.n	8008f84 <_free_r+0x78>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	6003      	str	r3, [r0, #0]
 8008f82:	e7d6      	b.n	8008f32 <_free_r+0x26>
 8008f84:	6825      	ldr	r5, [r4, #0]
 8008f86:	1961      	adds	r1, r4, r5
 8008f88:	428b      	cmp	r3, r1
 8008f8a:	bf04      	itt	eq
 8008f8c:	6819      	ldreq	r1, [r3, #0]
 8008f8e:	685b      	ldreq	r3, [r3, #4]
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	bf04      	itt	eq
 8008f94:	1949      	addeq	r1, r1, r5
 8008f96:	6021      	streq	r1, [r4, #0]
 8008f98:	6054      	str	r4, [r2, #4]
 8008f9a:	e7ca      	b.n	8008f32 <_free_r+0x26>
 8008f9c:	b003      	add	sp, #12
 8008f9e:	bd30      	pop	{r4, r5, pc}
 8008fa0:	20000530 	.word	0x20000530

08008fa4 <sbrk_aligned>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	4e0e      	ldr	r6, [pc, #56]	; (8008fe0 <sbrk_aligned+0x3c>)
 8008fa8:	460c      	mov	r4, r1
 8008faa:	6831      	ldr	r1, [r6, #0]
 8008fac:	4605      	mov	r5, r0
 8008fae:	b911      	cbnz	r1, 8008fb6 <sbrk_aligned+0x12>
 8008fb0:	f000 fd84 	bl	8009abc <_sbrk_r>
 8008fb4:	6030      	str	r0, [r6, #0]
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f000 fd7f 	bl	8009abc <_sbrk_r>
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	d00a      	beq.n	8008fd8 <sbrk_aligned+0x34>
 8008fc2:	1cc4      	adds	r4, r0, #3
 8008fc4:	f024 0403 	bic.w	r4, r4, #3
 8008fc8:	42a0      	cmp	r0, r4
 8008fca:	d007      	beq.n	8008fdc <sbrk_aligned+0x38>
 8008fcc:	1a21      	subs	r1, r4, r0
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f000 fd74 	bl	8009abc <_sbrk_r>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d101      	bne.n	8008fdc <sbrk_aligned+0x38>
 8008fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fdc:	4620      	mov	r0, r4
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	20000534 	.word	0x20000534

08008fe4 <_malloc_r>:
 8008fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe8:	1ccd      	adds	r5, r1, #3
 8008fea:	f025 0503 	bic.w	r5, r5, #3
 8008fee:	3508      	adds	r5, #8
 8008ff0:	2d0c      	cmp	r5, #12
 8008ff2:	bf38      	it	cc
 8008ff4:	250c      	movcc	r5, #12
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	db01      	blt.n	8009000 <_malloc_r+0x1c>
 8008ffc:	42a9      	cmp	r1, r5
 8008ffe:	d905      	bls.n	800900c <_malloc_r+0x28>
 8009000:	230c      	movs	r3, #12
 8009002:	603b      	str	r3, [r7, #0]
 8009004:	2600      	movs	r6, #0
 8009006:	4630      	mov	r0, r6
 8009008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800900c:	4e2e      	ldr	r6, [pc, #184]	; (80090c8 <_malloc_r+0xe4>)
 800900e:	f001 ff7d 	bl	800af0c <__malloc_lock>
 8009012:	6833      	ldr	r3, [r6, #0]
 8009014:	461c      	mov	r4, r3
 8009016:	bb34      	cbnz	r4, 8009066 <_malloc_r+0x82>
 8009018:	4629      	mov	r1, r5
 800901a:	4638      	mov	r0, r7
 800901c:	f7ff ffc2 	bl	8008fa4 <sbrk_aligned>
 8009020:	1c43      	adds	r3, r0, #1
 8009022:	4604      	mov	r4, r0
 8009024:	d14d      	bne.n	80090c2 <_malloc_r+0xde>
 8009026:	6834      	ldr	r4, [r6, #0]
 8009028:	4626      	mov	r6, r4
 800902a:	2e00      	cmp	r6, #0
 800902c:	d140      	bne.n	80090b0 <_malloc_r+0xcc>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	4631      	mov	r1, r6
 8009032:	4638      	mov	r0, r7
 8009034:	eb04 0803 	add.w	r8, r4, r3
 8009038:	f000 fd40 	bl	8009abc <_sbrk_r>
 800903c:	4580      	cmp	r8, r0
 800903e:	d13a      	bne.n	80090b6 <_malloc_r+0xd2>
 8009040:	6821      	ldr	r1, [r4, #0]
 8009042:	3503      	adds	r5, #3
 8009044:	1a6d      	subs	r5, r5, r1
 8009046:	f025 0503 	bic.w	r5, r5, #3
 800904a:	3508      	adds	r5, #8
 800904c:	2d0c      	cmp	r5, #12
 800904e:	bf38      	it	cc
 8009050:	250c      	movcc	r5, #12
 8009052:	4629      	mov	r1, r5
 8009054:	4638      	mov	r0, r7
 8009056:	f7ff ffa5 	bl	8008fa4 <sbrk_aligned>
 800905a:	3001      	adds	r0, #1
 800905c:	d02b      	beq.n	80090b6 <_malloc_r+0xd2>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	442b      	add	r3, r5
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	e00e      	b.n	8009084 <_malloc_r+0xa0>
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	1b52      	subs	r2, r2, r5
 800906a:	d41e      	bmi.n	80090aa <_malloc_r+0xc6>
 800906c:	2a0b      	cmp	r2, #11
 800906e:	d916      	bls.n	800909e <_malloc_r+0xba>
 8009070:	1961      	adds	r1, r4, r5
 8009072:	42a3      	cmp	r3, r4
 8009074:	6025      	str	r5, [r4, #0]
 8009076:	bf18      	it	ne
 8009078:	6059      	strne	r1, [r3, #4]
 800907a:	6863      	ldr	r3, [r4, #4]
 800907c:	bf08      	it	eq
 800907e:	6031      	streq	r1, [r6, #0]
 8009080:	5162      	str	r2, [r4, r5]
 8009082:	604b      	str	r3, [r1, #4]
 8009084:	4638      	mov	r0, r7
 8009086:	f104 060b 	add.w	r6, r4, #11
 800908a:	f001 ff45 	bl	800af18 <__malloc_unlock>
 800908e:	f026 0607 	bic.w	r6, r6, #7
 8009092:	1d23      	adds	r3, r4, #4
 8009094:	1af2      	subs	r2, r6, r3
 8009096:	d0b6      	beq.n	8009006 <_malloc_r+0x22>
 8009098:	1b9b      	subs	r3, r3, r6
 800909a:	50a3      	str	r3, [r4, r2]
 800909c:	e7b3      	b.n	8009006 <_malloc_r+0x22>
 800909e:	6862      	ldr	r2, [r4, #4]
 80090a0:	42a3      	cmp	r3, r4
 80090a2:	bf0c      	ite	eq
 80090a4:	6032      	streq	r2, [r6, #0]
 80090a6:	605a      	strne	r2, [r3, #4]
 80090a8:	e7ec      	b.n	8009084 <_malloc_r+0xa0>
 80090aa:	4623      	mov	r3, r4
 80090ac:	6864      	ldr	r4, [r4, #4]
 80090ae:	e7b2      	b.n	8009016 <_malloc_r+0x32>
 80090b0:	4634      	mov	r4, r6
 80090b2:	6876      	ldr	r6, [r6, #4]
 80090b4:	e7b9      	b.n	800902a <_malloc_r+0x46>
 80090b6:	230c      	movs	r3, #12
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	4638      	mov	r0, r7
 80090bc:	f001 ff2c 	bl	800af18 <__malloc_unlock>
 80090c0:	e7a1      	b.n	8009006 <_malloc_r+0x22>
 80090c2:	6025      	str	r5, [r4, #0]
 80090c4:	e7de      	b.n	8009084 <_malloc_r+0xa0>
 80090c6:	bf00      	nop
 80090c8:	20000530 	.word	0x20000530

080090cc <__cvt>:
 80090cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090d0:	ec55 4b10 	vmov	r4, r5, d0
 80090d4:	2d00      	cmp	r5, #0
 80090d6:	460e      	mov	r6, r1
 80090d8:	4619      	mov	r1, r3
 80090da:	462b      	mov	r3, r5
 80090dc:	bfbb      	ittet	lt
 80090de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80090e2:	461d      	movlt	r5, r3
 80090e4:	2300      	movge	r3, #0
 80090e6:	232d      	movlt	r3, #45	; 0x2d
 80090e8:	700b      	strb	r3, [r1, #0]
 80090ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090f0:	4691      	mov	r9, r2
 80090f2:	f023 0820 	bic.w	r8, r3, #32
 80090f6:	bfbc      	itt	lt
 80090f8:	4622      	movlt	r2, r4
 80090fa:	4614      	movlt	r4, r2
 80090fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009100:	d005      	beq.n	800910e <__cvt+0x42>
 8009102:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009106:	d100      	bne.n	800910a <__cvt+0x3e>
 8009108:	3601      	adds	r6, #1
 800910a:	2102      	movs	r1, #2
 800910c:	e000      	b.n	8009110 <__cvt+0x44>
 800910e:	2103      	movs	r1, #3
 8009110:	ab03      	add	r3, sp, #12
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	ab02      	add	r3, sp, #8
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	ec45 4b10 	vmov	d0, r4, r5
 800911c:	4653      	mov	r3, sl
 800911e:	4632      	mov	r2, r6
 8009120:	f000 fee2 	bl	8009ee8 <_dtoa_r>
 8009124:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009128:	4607      	mov	r7, r0
 800912a:	d102      	bne.n	8009132 <__cvt+0x66>
 800912c:	f019 0f01 	tst.w	r9, #1
 8009130:	d022      	beq.n	8009178 <__cvt+0xac>
 8009132:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009136:	eb07 0906 	add.w	r9, r7, r6
 800913a:	d110      	bne.n	800915e <__cvt+0x92>
 800913c:	783b      	ldrb	r3, [r7, #0]
 800913e:	2b30      	cmp	r3, #48	; 0x30
 8009140:	d10a      	bne.n	8009158 <__cvt+0x8c>
 8009142:	2200      	movs	r2, #0
 8009144:	2300      	movs	r3, #0
 8009146:	4620      	mov	r0, r4
 8009148:	4629      	mov	r1, r5
 800914a:	f7f7 fca5 	bl	8000a98 <__aeabi_dcmpeq>
 800914e:	b918      	cbnz	r0, 8009158 <__cvt+0x8c>
 8009150:	f1c6 0601 	rsb	r6, r6, #1
 8009154:	f8ca 6000 	str.w	r6, [sl]
 8009158:	f8da 3000 	ldr.w	r3, [sl]
 800915c:	4499      	add	r9, r3
 800915e:	2200      	movs	r2, #0
 8009160:	2300      	movs	r3, #0
 8009162:	4620      	mov	r0, r4
 8009164:	4629      	mov	r1, r5
 8009166:	f7f7 fc97 	bl	8000a98 <__aeabi_dcmpeq>
 800916a:	b108      	cbz	r0, 8009170 <__cvt+0xa4>
 800916c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009170:	2230      	movs	r2, #48	; 0x30
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	454b      	cmp	r3, r9
 8009176:	d307      	bcc.n	8009188 <__cvt+0xbc>
 8009178:	9b03      	ldr	r3, [sp, #12]
 800917a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800917c:	1bdb      	subs	r3, r3, r7
 800917e:	4638      	mov	r0, r7
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	b004      	add	sp, #16
 8009184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009188:	1c59      	adds	r1, r3, #1
 800918a:	9103      	str	r1, [sp, #12]
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	e7f0      	b.n	8009172 <__cvt+0xa6>

08009190 <__exponent>:
 8009190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009192:	4603      	mov	r3, r0
 8009194:	2900      	cmp	r1, #0
 8009196:	bfb8      	it	lt
 8009198:	4249      	neglt	r1, r1
 800919a:	f803 2b02 	strb.w	r2, [r3], #2
 800919e:	bfb4      	ite	lt
 80091a0:	222d      	movlt	r2, #45	; 0x2d
 80091a2:	222b      	movge	r2, #43	; 0x2b
 80091a4:	2909      	cmp	r1, #9
 80091a6:	7042      	strb	r2, [r0, #1]
 80091a8:	dd2a      	ble.n	8009200 <__exponent+0x70>
 80091aa:	f10d 0407 	add.w	r4, sp, #7
 80091ae:	46a4      	mov	ip, r4
 80091b0:	270a      	movs	r7, #10
 80091b2:	46a6      	mov	lr, r4
 80091b4:	460a      	mov	r2, r1
 80091b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80091ba:	fb07 1516 	mls	r5, r7, r6, r1
 80091be:	3530      	adds	r5, #48	; 0x30
 80091c0:	2a63      	cmp	r2, #99	; 0x63
 80091c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80091c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80091ca:	4631      	mov	r1, r6
 80091cc:	dcf1      	bgt.n	80091b2 <__exponent+0x22>
 80091ce:	3130      	adds	r1, #48	; 0x30
 80091d0:	f1ae 0502 	sub.w	r5, lr, #2
 80091d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80091d8:	1c44      	adds	r4, r0, #1
 80091da:	4629      	mov	r1, r5
 80091dc:	4561      	cmp	r1, ip
 80091de:	d30a      	bcc.n	80091f6 <__exponent+0x66>
 80091e0:	f10d 0209 	add.w	r2, sp, #9
 80091e4:	eba2 020e 	sub.w	r2, r2, lr
 80091e8:	4565      	cmp	r5, ip
 80091ea:	bf88      	it	hi
 80091ec:	2200      	movhi	r2, #0
 80091ee:	4413      	add	r3, r2
 80091f0:	1a18      	subs	r0, r3, r0
 80091f2:	b003      	add	sp, #12
 80091f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80091fe:	e7ed      	b.n	80091dc <__exponent+0x4c>
 8009200:	2330      	movs	r3, #48	; 0x30
 8009202:	3130      	adds	r1, #48	; 0x30
 8009204:	7083      	strb	r3, [r0, #2]
 8009206:	70c1      	strb	r1, [r0, #3]
 8009208:	1d03      	adds	r3, r0, #4
 800920a:	e7f1      	b.n	80091f0 <__exponent+0x60>

0800920c <_printf_float>:
 800920c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009210:	ed2d 8b02 	vpush	{d8}
 8009214:	b08d      	sub	sp, #52	; 0x34
 8009216:	460c      	mov	r4, r1
 8009218:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800921c:	4616      	mov	r6, r2
 800921e:	461f      	mov	r7, r3
 8009220:	4605      	mov	r5, r0
 8009222:	f001 fe07 	bl	800ae34 <_localeconv_r>
 8009226:	f8d0 a000 	ldr.w	sl, [r0]
 800922a:	4650      	mov	r0, sl
 800922c:	f7f6 ffb2 	bl	8000194 <strlen>
 8009230:	2300      	movs	r3, #0
 8009232:	930a      	str	r3, [sp, #40]	; 0x28
 8009234:	6823      	ldr	r3, [r4, #0]
 8009236:	9305      	str	r3, [sp, #20]
 8009238:	f8d8 3000 	ldr.w	r3, [r8]
 800923c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009240:	3307      	adds	r3, #7
 8009242:	f023 0307 	bic.w	r3, r3, #7
 8009246:	f103 0208 	add.w	r2, r3, #8
 800924a:	f8c8 2000 	str.w	r2, [r8]
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009256:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800925a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800925e:	9307      	str	r3, [sp, #28]
 8009260:	f8cd 8018 	str.w	r8, [sp, #24]
 8009264:	ee08 0a10 	vmov	s16, r0
 8009268:	4b9f      	ldr	r3, [pc, #636]	; (80094e8 <_printf_float+0x2dc>)
 800926a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800926e:	f04f 32ff 	mov.w	r2, #4294967295
 8009272:	f7f7 fc43 	bl	8000afc <__aeabi_dcmpun>
 8009276:	bb88      	cbnz	r0, 80092dc <_printf_float+0xd0>
 8009278:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800927c:	4b9a      	ldr	r3, [pc, #616]	; (80094e8 <_printf_float+0x2dc>)
 800927e:	f04f 32ff 	mov.w	r2, #4294967295
 8009282:	f7f7 fc1d 	bl	8000ac0 <__aeabi_dcmple>
 8009286:	bb48      	cbnz	r0, 80092dc <_printf_float+0xd0>
 8009288:	2200      	movs	r2, #0
 800928a:	2300      	movs	r3, #0
 800928c:	4640      	mov	r0, r8
 800928e:	4649      	mov	r1, r9
 8009290:	f7f7 fc0c 	bl	8000aac <__aeabi_dcmplt>
 8009294:	b110      	cbz	r0, 800929c <_printf_float+0x90>
 8009296:	232d      	movs	r3, #45	; 0x2d
 8009298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800929c:	4b93      	ldr	r3, [pc, #588]	; (80094ec <_printf_float+0x2e0>)
 800929e:	4894      	ldr	r0, [pc, #592]	; (80094f0 <_printf_float+0x2e4>)
 80092a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80092a4:	bf94      	ite	ls
 80092a6:	4698      	movls	r8, r3
 80092a8:	4680      	movhi	r8, r0
 80092aa:	2303      	movs	r3, #3
 80092ac:	6123      	str	r3, [r4, #16]
 80092ae:	9b05      	ldr	r3, [sp, #20]
 80092b0:	f023 0204 	bic.w	r2, r3, #4
 80092b4:	6022      	str	r2, [r4, #0]
 80092b6:	f04f 0900 	mov.w	r9, #0
 80092ba:	9700      	str	r7, [sp, #0]
 80092bc:	4633      	mov	r3, r6
 80092be:	aa0b      	add	r2, sp, #44	; 0x2c
 80092c0:	4621      	mov	r1, r4
 80092c2:	4628      	mov	r0, r5
 80092c4:	f000 f9d8 	bl	8009678 <_printf_common>
 80092c8:	3001      	adds	r0, #1
 80092ca:	f040 8090 	bne.w	80093ee <_printf_float+0x1e2>
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295
 80092d2:	b00d      	add	sp, #52	; 0x34
 80092d4:	ecbd 8b02 	vpop	{d8}
 80092d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092dc:	4642      	mov	r2, r8
 80092de:	464b      	mov	r3, r9
 80092e0:	4640      	mov	r0, r8
 80092e2:	4649      	mov	r1, r9
 80092e4:	f7f7 fc0a 	bl	8000afc <__aeabi_dcmpun>
 80092e8:	b140      	cbz	r0, 80092fc <_printf_float+0xf0>
 80092ea:	464b      	mov	r3, r9
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	bfbc      	itt	lt
 80092f0:	232d      	movlt	r3, #45	; 0x2d
 80092f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092f6:	487f      	ldr	r0, [pc, #508]	; (80094f4 <_printf_float+0x2e8>)
 80092f8:	4b7f      	ldr	r3, [pc, #508]	; (80094f8 <_printf_float+0x2ec>)
 80092fa:	e7d1      	b.n	80092a0 <_printf_float+0x94>
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009302:	9206      	str	r2, [sp, #24]
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	d13f      	bne.n	8009388 <_printf_float+0x17c>
 8009308:	2306      	movs	r3, #6
 800930a:	6063      	str	r3, [r4, #4]
 800930c:	9b05      	ldr	r3, [sp, #20]
 800930e:	6861      	ldr	r1, [r4, #4]
 8009310:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009314:	2300      	movs	r3, #0
 8009316:	9303      	str	r3, [sp, #12]
 8009318:	ab0a      	add	r3, sp, #40	; 0x28
 800931a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800931e:	ab09      	add	r3, sp, #36	; 0x24
 8009320:	ec49 8b10 	vmov	d0, r8, r9
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	6022      	str	r2, [r4, #0]
 8009328:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800932c:	4628      	mov	r0, r5
 800932e:	f7ff fecd 	bl	80090cc <__cvt>
 8009332:	9b06      	ldr	r3, [sp, #24]
 8009334:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009336:	2b47      	cmp	r3, #71	; 0x47
 8009338:	4680      	mov	r8, r0
 800933a:	d108      	bne.n	800934e <_printf_float+0x142>
 800933c:	1cc8      	adds	r0, r1, #3
 800933e:	db02      	blt.n	8009346 <_printf_float+0x13a>
 8009340:	6863      	ldr	r3, [r4, #4]
 8009342:	4299      	cmp	r1, r3
 8009344:	dd41      	ble.n	80093ca <_printf_float+0x1be>
 8009346:	f1ab 0b02 	sub.w	fp, fp, #2
 800934a:	fa5f fb8b 	uxtb.w	fp, fp
 800934e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009352:	d820      	bhi.n	8009396 <_printf_float+0x18a>
 8009354:	3901      	subs	r1, #1
 8009356:	465a      	mov	r2, fp
 8009358:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800935c:	9109      	str	r1, [sp, #36]	; 0x24
 800935e:	f7ff ff17 	bl	8009190 <__exponent>
 8009362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009364:	1813      	adds	r3, r2, r0
 8009366:	2a01      	cmp	r2, #1
 8009368:	4681      	mov	r9, r0
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	dc02      	bgt.n	8009374 <_printf_float+0x168>
 800936e:	6822      	ldr	r2, [r4, #0]
 8009370:	07d2      	lsls	r2, r2, #31
 8009372:	d501      	bpl.n	8009378 <_printf_float+0x16c>
 8009374:	3301      	adds	r3, #1
 8009376:	6123      	str	r3, [r4, #16]
 8009378:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800937c:	2b00      	cmp	r3, #0
 800937e:	d09c      	beq.n	80092ba <_printf_float+0xae>
 8009380:	232d      	movs	r3, #45	; 0x2d
 8009382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009386:	e798      	b.n	80092ba <_printf_float+0xae>
 8009388:	9a06      	ldr	r2, [sp, #24]
 800938a:	2a47      	cmp	r2, #71	; 0x47
 800938c:	d1be      	bne.n	800930c <_printf_float+0x100>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1bc      	bne.n	800930c <_printf_float+0x100>
 8009392:	2301      	movs	r3, #1
 8009394:	e7b9      	b.n	800930a <_printf_float+0xfe>
 8009396:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800939a:	d118      	bne.n	80093ce <_printf_float+0x1c2>
 800939c:	2900      	cmp	r1, #0
 800939e:	6863      	ldr	r3, [r4, #4]
 80093a0:	dd0b      	ble.n	80093ba <_printf_float+0x1ae>
 80093a2:	6121      	str	r1, [r4, #16]
 80093a4:	b913      	cbnz	r3, 80093ac <_printf_float+0x1a0>
 80093a6:	6822      	ldr	r2, [r4, #0]
 80093a8:	07d0      	lsls	r0, r2, #31
 80093aa:	d502      	bpl.n	80093b2 <_printf_float+0x1a6>
 80093ac:	3301      	adds	r3, #1
 80093ae:	440b      	add	r3, r1
 80093b0:	6123      	str	r3, [r4, #16]
 80093b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80093b4:	f04f 0900 	mov.w	r9, #0
 80093b8:	e7de      	b.n	8009378 <_printf_float+0x16c>
 80093ba:	b913      	cbnz	r3, 80093c2 <_printf_float+0x1b6>
 80093bc:	6822      	ldr	r2, [r4, #0]
 80093be:	07d2      	lsls	r2, r2, #31
 80093c0:	d501      	bpl.n	80093c6 <_printf_float+0x1ba>
 80093c2:	3302      	adds	r3, #2
 80093c4:	e7f4      	b.n	80093b0 <_printf_float+0x1a4>
 80093c6:	2301      	movs	r3, #1
 80093c8:	e7f2      	b.n	80093b0 <_printf_float+0x1a4>
 80093ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80093ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d0:	4299      	cmp	r1, r3
 80093d2:	db05      	blt.n	80093e0 <_printf_float+0x1d4>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	6121      	str	r1, [r4, #16]
 80093d8:	07d8      	lsls	r0, r3, #31
 80093da:	d5ea      	bpl.n	80093b2 <_printf_float+0x1a6>
 80093dc:	1c4b      	adds	r3, r1, #1
 80093de:	e7e7      	b.n	80093b0 <_printf_float+0x1a4>
 80093e0:	2900      	cmp	r1, #0
 80093e2:	bfd4      	ite	le
 80093e4:	f1c1 0202 	rsble	r2, r1, #2
 80093e8:	2201      	movgt	r2, #1
 80093ea:	4413      	add	r3, r2
 80093ec:	e7e0      	b.n	80093b0 <_printf_float+0x1a4>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	055a      	lsls	r2, r3, #21
 80093f2:	d407      	bmi.n	8009404 <_printf_float+0x1f8>
 80093f4:	6923      	ldr	r3, [r4, #16]
 80093f6:	4642      	mov	r2, r8
 80093f8:	4631      	mov	r1, r6
 80093fa:	4628      	mov	r0, r5
 80093fc:	47b8      	blx	r7
 80093fe:	3001      	adds	r0, #1
 8009400:	d12c      	bne.n	800945c <_printf_float+0x250>
 8009402:	e764      	b.n	80092ce <_printf_float+0xc2>
 8009404:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009408:	f240 80e0 	bls.w	80095cc <_printf_float+0x3c0>
 800940c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009410:	2200      	movs	r2, #0
 8009412:	2300      	movs	r3, #0
 8009414:	f7f7 fb40 	bl	8000a98 <__aeabi_dcmpeq>
 8009418:	2800      	cmp	r0, #0
 800941a:	d034      	beq.n	8009486 <_printf_float+0x27a>
 800941c:	4a37      	ldr	r2, [pc, #220]	; (80094fc <_printf_float+0x2f0>)
 800941e:	2301      	movs	r3, #1
 8009420:	4631      	mov	r1, r6
 8009422:	4628      	mov	r0, r5
 8009424:	47b8      	blx	r7
 8009426:	3001      	adds	r0, #1
 8009428:	f43f af51 	beq.w	80092ce <_printf_float+0xc2>
 800942c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009430:	429a      	cmp	r2, r3
 8009432:	db02      	blt.n	800943a <_printf_float+0x22e>
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	07d8      	lsls	r0, r3, #31
 8009438:	d510      	bpl.n	800945c <_printf_float+0x250>
 800943a:	ee18 3a10 	vmov	r3, s16
 800943e:	4652      	mov	r2, sl
 8009440:	4631      	mov	r1, r6
 8009442:	4628      	mov	r0, r5
 8009444:	47b8      	blx	r7
 8009446:	3001      	adds	r0, #1
 8009448:	f43f af41 	beq.w	80092ce <_printf_float+0xc2>
 800944c:	f04f 0800 	mov.w	r8, #0
 8009450:	f104 091a 	add.w	r9, r4, #26
 8009454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009456:	3b01      	subs	r3, #1
 8009458:	4543      	cmp	r3, r8
 800945a:	dc09      	bgt.n	8009470 <_printf_float+0x264>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	079b      	lsls	r3, r3, #30
 8009460:	f100 8105 	bmi.w	800966e <_printf_float+0x462>
 8009464:	68e0      	ldr	r0, [r4, #12]
 8009466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009468:	4298      	cmp	r0, r3
 800946a:	bfb8      	it	lt
 800946c:	4618      	movlt	r0, r3
 800946e:	e730      	b.n	80092d2 <_printf_float+0xc6>
 8009470:	2301      	movs	r3, #1
 8009472:	464a      	mov	r2, r9
 8009474:	4631      	mov	r1, r6
 8009476:	4628      	mov	r0, r5
 8009478:	47b8      	blx	r7
 800947a:	3001      	adds	r0, #1
 800947c:	f43f af27 	beq.w	80092ce <_printf_float+0xc2>
 8009480:	f108 0801 	add.w	r8, r8, #1
 8009484:	e7e6      	b.n	8009454 <_printf_float+0x248>
 8009486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009488:	2b00      	cmp	r3, #0
 800948a:	dc39      	bgt.n	8009500 <_printf_float+0x2f4>
 800948c:	4a1b      	ldr	r2, [pc, #108]	; (80094fc <_printf_float+0x2f0>)
 800948e:	2301      	movs	r3, #1
 8009490:	4631      	mov	r1, r6
 8009492:	4628      	mov	r0, r5
 8009494:	47b8      	blx	r7
 8009496:	3001      	adds	r0, #1
 8009498:	f43f af19 	beq.w	80092ce <_printf_float+0xc2>
 800949c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094a0:	4313      	orrs	r3, r2
 80094a2:	d102      	bne.n	80094aa <_printf_float+0x29e>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	07d9      	lsls	r1, r3, #31
 80094a8:	d5d8      	bpl.n	800945c <_printf_float+0x250>
 80094aa:	ee18 3a10 	vmov	r3, s16
 80094ae:	4652      	mov	r2, sl
 80094b0:	4631      	mov	r1, r6
 80094b2:	4628      	mov	r0, r5
 80094b4:	47b8      	blx	r7
 80094b6:	3001      	adds	r0, #1
 80094b8:	f43f af09 	beq.w	80092ce <_printf_float+0xc2>
 80094bc:	f04f 0900 	mov.w	r9, #0
 80094c0:	f104 0a1a 	add.w	sl, r4, #26
 80094c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c6:	425b      	negs	r3, r3
 80094c8:	454b      	cmp	r3, r9
 80094ca:	dc01      	bgt.n	80094d0 <_printf_float+0x2c4>
 80094cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ce:	e792      	b.n	80093f6 <_printf_float+0x1ea>
 80094d0:	2301      	movs	r3, #1
 80094d2:	4652      	mov	r2, sl
 80094d4:	4631      	mov	r1, r6
 80094d6:	4628      	mov	r0, r5
 80094d8:	47b8      	blx	r7
 80094da:	3001      	adds	r0, #1
 80094dc:	f43f aef7 	beq.w	80092ce <_printf_float+0xc2>
 80094e0:	f109 0901 	add.w	r9, r9, #1
 80094e4:	e7ee      	b.n	80094c4 <_printf_float+0x2b8>
 80094e6:	bf00      	nop
 80094e8:	7fefffff 	.word	0x7fefffff
 80094ec:	0800c570 	.word	0x0800c570
 80094f0:	0800c574 	.word	0x0800c574
 80094f4:	0800c57c 	.word	0x0800c57c
 80094f8:	0800c578 	.word	0x0800c578
 80094fc:	0800c580 	.word	0x0800c580
 8009500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009504:	429a      	cmp	r2, r3
 8009506:	bfa8      	it	ge
 8009508:	461a      	movge	r2, r3
 800950a:	2a00      	cmp	r2, #0
 800950c:	4691      	mov	r9, r2
 800950e:	dc37      	bgt.n	8009580 <_printf_float+0x374>
 8009510:	f04f 0b00 	mov.w	fp, #0
 8009514:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009518:	f104 021a 	add.w	r2, r4, #26
 800951c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800951e:	9305      	str	r3, [sp, #20]
 8009520:	eba3 0309 	sub.w	r3, r3, r9
 8009524:	455b      	cmp	r3, fp
 8009526:	dc33      	bgt.n	8009590 <_printf_float+0x384>
 8009528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800952c:	429a      	cmp	r2, r3
 800952e:	db3b      	blt.n	80095a8 <_printf_float+0x39c>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	07da      	lsls	r2, r3, #31
 8009534:	d438      	bmi.n	80095a8 <_printf_float+0x39c>
 8009536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009538:	9a05      	ldr	r2, [sp, #20]
 800953a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800953c:	1a9a      	subs	r2, r3, r2
 800953e:	eba3 0901 	sub.w	r9, r3, r1
 8009542:	4591      	cmp	r9, r2
 8009544:	bfa8      	it	ge
 8009546:	4691      	movge	r9, r2
 8009548:	f1b9 0f00 	cmp.w	r9, #0
 800954c:	dc35      	bgt.n	80095ba <_printf_float+0x3ae>
 800954e:	f04f 0800 	mov.w	r8, #0
 8009552:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009556:	f104 0a1a 	add.w	sl, r4, #26
 800955a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	eba3 0309 	sub.w	r3, r3, r9
 8009564:	4543      	cmp	r3, r8
 8009566:	f77f af79 	ble.w	800945c <_printf_float+0x250>
 800956a:	2301      	movs	r3, #1
 800956c:	4652      	mov	r2, sl
 800956e:	4631      	mov	r1, r6
 8009570:	4628      	mov	r0, r5
 8009572:	47b8      	blx	r7
 8009574:	3001      	adds	r0, #1
 8009576:	f43f aeaa 	beq.w	80092ce <_printf_float+0xc2>
 800957a:	f108 0801 	add.w	r8, r8, #1
 800957e:	e7ec      	b.n	800955a <_printf_float+0x34e>
 8009580:	4613      	mov	r3, r2
 8009582:	4631      	mov	r1, r6
 8009584:	4642      	mov	r2, r8
 8009586:	4628      	mov	r0, r5
 8009588:	47b8      	blx	r7
 800958a:	3001      	adds	r0, #1
 800958c:	d1c0      	bne.n	8009510 <_printf_float+0x304>
 800958e:	e69e      	b.n	80092ce <_printf_float+0xc2>
 8009590:	2301      	movs	r3, #1
 8009592:	4631      	mov	r1, r6
 8009594:	4628      	mov	r0, r5
 8009596:	9205      	str	r2, [sp, #20]
 8009598:	47b8      	blx	r7
 800959a:	3001      	adds	r0, #1
 800959c:	f43f ae97 	beq.w	80092ce <_printf_float+0xc2>
 80095a0:	9a05      	ldr	r2, [sp, #20]
 80095a2:	f10b 0b01 	add.w	fp, fp, #1
 80095a6:	e7b9      	b.n	800951c <_printf_float+0x310>
 80095a8:	ee18 3a10 	vmov	r3, s16
 80095ac:	4652      	mov	r2, sl
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1be      	bne.n	8009536 <_printf_float+0x32a>
 80095b8:	e689      	b.n	80092ce <_printf_float+0xc2>
 80095ba:	9a05      	ldr	r2, [sp, #20]
 80095bc:	464b      	mov	r3, r9
 80095be:	4442      	add	r2, r8
 80095c0:	4631      	mov	r1, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	d1c1      	bne.n	800954e <_printf_float+0x342>
 80095ca:	e680      	b.n	80092ce <_printf_float+0xc2>
 80095cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ce:	2a01      	cmp	r2, #1
 80095d0:	dc01      	bgt.n	80095d6 <_printf_float+0x3ca>
 80095d2:	07db      	lsls	r3, r3, #31
 80095d4:	d538      	bpl.n	8009648 <_printf_float+0x43c>
 80095d6:	2301      	movs	r3, #1
 80095d8:	4642      	mov	r2, r8
 80095da:	4631      	mov	r1, r6
 80095dc:	4628      	mov	r0, r5
 80095de:	47b8      	blx	r7
 80095e0:	3001      	adds	r0, #1
 80095e2:	f43f ae74 	beq.w	80092ce <_printf_float+0xc2>
 80095e6:	ee18 3a10 	vmov	r3, s16
 80095ea:	4652      	mov	r2, sl
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f ae6b 	beq.w	80092ce <_printf_float+0xc2>
 80095f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095fc:	2200      	movs	r2, #0
 80095fe:	2300      	movs	r3, #0
 8009600:	f7f7 fa4a 	bl	8000a98 <__aeabi_dcmpeq>
 8009604:	b9d8      	cbnz	r0, 800963e <_printf_float+0x432>
 8009606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009608:	f108 0201 	add.w	r2, r8, #1
 800960c:	3b01      	subs	r3, #1
 800960e:	4631      	mov	r1, r6
 8009610:	4628      	mov	r0, r5
 8009612:	47b8      	blx	r7
 8009614:	3001      	adds	r0, #1
 8009616:	d10e      	bne.n	8009636 <_printf_float+0x42a>
 8009618:	e659      	b.n	80092ce <_printf_float+0xc2>
 800961a:	2301      	movs	r3, #1
 800961c:	4652      	mov	r2, sl
 800961e:	4631      	mov	r1, r6
 8009620:	4628      	mov	r0, r5
 8009622:	47b8      	blx	r7
 8009624:	3001      	adds	r0, #1
 8009626:	f43f ae52 	beq.w	80092ce <_printf_float+0xc2>
 800962a:	f108 0801 	add.w	r8, r8, #1
 800962e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009630:	3b01      	subs	r3, #1
 8009632:	4543      	cmp	r3, r8
 8009634:	dcf1      	bgt.n	800961a <_printf_float+0x40e>
 8009636:	464b      	mov	r3, r9
 8009638:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800963c:	e6dc      	b.n	80093f8 <_printf_float+0x1ec>
 800963e:	f04f 0800 	mov.w	r8, #0
 8009642:	f104 0a1a 	add.w	sl, r4, #26
 8009646:	e7f2      	b.n	800962e <_printf_float+0x422>
 8009648:	2301      	movs	r3, #1
 800964a:	4642      	mov	r2, r8
 800964c:	e7df      	b.n	800960e <_printf_float+0x402>
 800964e:	2301      	movs	r3, #1
 8009650:	464a      	mov	r2, r9
 8009652:	4631      	mov	r1, r6
 8009654:	4628      	mov	r0, r5
 8009656:	47b8      	blx	r7
 8009658:	3001      	adds	r0, #1
 800965a:	f43f ae38 	beq.w	80092ce <_printf_float+0xc2>
 800965e:	f108 0801 	add.w	r8, r8, #1
 8009662:	68e3      	ldr	r3, [r4, #12]
 8009664:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009666:	1a5b      	subs	r3, r3, r1
 8009668:	4543      	cmp	r3, r8
 800966a:	dcf0      	bgt.n	800964e <_printf_float+0x442>
 800966c:	e6fa      	b.n	8009464 <_printf_float+0x258>
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	f104 0919 	add.w	r9, r4, #25
 8009676:	e7f4      	b.n	8009662 <_printf_float+0x456>

08009678 <_printf_common>:
 8009678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800967c:	4616      	mov	r6, r2
 800967e:	4699      	mov	r9, r3
 8009680:	688a      	ldr	r2, [r1, #8]
 8009682:	690b      	ldr	r3, [r1, #16]
 8009684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009688:	4293      	cmp	r3, r2
 800968a:	bfb8      	it	lt
 800968c:	4613      	movlt	r3, r2
 800968e:	6033      	str	r3, [r6, #0]
 8009690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009694:	4607      	mov	r7, r0
 8009696:	460c      	mov	r4, r1
 8009698:	b10a      	cbz	r2, 800969e <_printf_common+0x26>
 800969a:	3301      	adds	r3, #1
 800969c:	6033      	str	r3, [r6, #0]
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	0699      	lsls	r1, r3, #26
 80096a2:	bf42      	ittt	mi
 80096a4:	6833      	ldrmi	r3, [r6, #0]
 80096a6:	3302      	addmi	r3, #2
 80096a8:	6033      	strmi	r3, [r6, #0]
 80096aa:	6825      	ldr	r5, [r4, #0]
 80096ac:	f015 0506 	ands.w	r5, r5, #6
 80096b0:	d106      	bne.n	80096c0 <_printf_common+0x48>
 80096b2:	f104 0a19 	add.w	sl, r4, #25
 80096b6:	68e3      	ldr	r3, [r4, #12]
 80096b8:	6832      	ldr	r2, [r6, #0]
 80096ba:	1a9b      	subs	r3, r3, r2
 80096bc:	42ab      	cmp	r3, r5
 80096be:	dc26      	bgt.n	800970e <_printf_common+0x96>
 80096c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096c4:	1e13      	subs	r3, r2, #0
 80096c6:	6822      	ldr	r2, [r4, #0]
 80096c8:	bf18      	it	ne
 80096ca:	2301      	movne	r3, #1
 80096cc:	0692      	lsls	r2, r2, #26
 80096ce:	d42b      	bmi.n	8009728 <_printf_common+0xb0>
 80096d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096d4:	4649      	mov	r1, r9
 80096d6:	4638      	mov	r0, r7
 80096d8:	47c0      	blx	r8
 80096da:	3001      	adds	r0, #1
 80096dc:	d01e      	beq.n	800971c <_printf_common+0xa4>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	68e5      	ldr	r5, [r4, #12]
 80096e2:	6832      	ldr	r2, [r6, #0]
 80096e4:	f003 0306 	and.w	r3, r3, #6
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	bf08      	it	eq
 80096ec:	1aad      	subeq	r5, r5, r2
 80096ee:	68a3      	ldr	r3, [r4, #8]
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	bf0c      	ite	eq
 80096f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096f8:	2500      	movne	r5, #0
 80096fa:	4293      	cmp	r3, r2
 80096fc:	bfc4      	itt	gt
 80096fe:	1a9b      	subgt	r3, r3, r2
 8009700:	18ed      	addgt	r5, r5, r3
 8009702:	2600      	movs	r6, #0
 8009704:	341a      	adds	r4, #26
 8009706:	42b5      	cmp	r5, r6
 8009708:	d11a      	bne.n	8009740 <_printf_common+0xc8>
 800970a:	2000      	movs	r0, #0
 800970c:	e008      	b.n	8009720 <_printf_common+0xa8>
 800970e:	2301      	movs	r3, #1
 8009710:	4652      	mov	r2, sl
 8009712:	4649      	mov	r1, r9
 8009714:	4638      	mov	r0, r7
 8009716:	47c0      	blx	r8
 8009718:	3001      	adds	r0, #1
 800971a:	d103      	bne.n	8009724 <_printf_common+0xac>
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009724:	3501      	adds	r5, #1
 8009726:	e7c6      	b.n	80096b6 <_printf_common+0x3e>
 8009728:	18e1      	adds	r1, r4, r3
 800972a:	1c5a      	adds	r2, r3, #1
 800972c:	2030      	movs	r0, #48	; 0x30
 800972e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009732:	4422      	add	r2, r4
 8009734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800973c:	3302      	adds	r3, #2
 800973e:	e7c7      	b.n	80096d0 <_printf_common+0x58>
 8009740:	2301      	movs	r3, #1
 8009742:	4622      	mov	r2, r4
 8009744:	4649      	mov	r1, r9
 8009746:	4638      	mov	r0, r7
 8009748:	47c0      	blx	r8
 800974a:	3001      	adds	r0, #1
 800974c:	d0e6      	beq.n	800971c <_printf_common+0xa4>
 800974e:	3601      	adds	r6, #1
 8009750:	e7d9      	b.n	8009706 <_printf_common+0x8e>
	...

08009754 <_printf_i>:
 8009754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009758:	7e0f      	ldrb	r7, [r1, #24]
 800975a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800975c:	2f78      	cmp	r7, #120	; 0x78
 800975e:	4691      	mov	r9, r2
 8009760:	4680      	mov	r8, r0
 8009762:	460c      	mov	r4, r1
 8009764:	469a      	mov	sl, r3
 8009766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800976a:	d807      	bhi.n	800977c <_printf_i+0x28>
 800976c:	2f62      	cmp	r7, #98	; 0x62
 800976e:	d80a      	bhi.n	8009786 <_printf_i+0x32>
 8009770:	2f00      	cmp	r7, #0
 8009772:	f000 80d8 	beq.w	8009926 <_printf_i+0x1d2>
 8009776:	2f58      	cmp	r7, #88	; 0x58
 8009778:	f000 80a3 	beq.w	80098c2 <_printf_i+0x16e>
 800977c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009784:	e03a      	b.n	80097fc <_printf_i+0xa8>
 8009786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800978a:	2b15      	cmp	r3, #21
 800978c:	d8f6      	bhi.n	800977c <_printf_i+0x28>
 800978e:	a101      	add	r1, pc, #4	; (adr r1, 8009794 <_printf_i+0x40>)
 8009790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009794:	080097ed 	.word	0x080097ed
 8009798:	08009801 	.word	0x08009801
 800979c:	0800977d 	.word	0x0800977d
 80097a0:	0800977d 	.word	0x0800977d
 80097a4:	0800977d 	.word	0x0800977d
 80097a8:	0800977d 	.word	0x0800977d
 80097ac:	08009801 	.word	0x08009801
 80097b0:	0800977d 	.word	0x0800977d
 80097b4:	0800977d 	.word	0x0800977d
 80097b8:	0800977d 	.word	0x0800977d
 80097bc:	0800977d 	.word	0x0800977d
 80097c0:	0800990d 	.word	0x0800990d
 80097c4:	08009831 	.word	0x08009831
 80097c8:	080098ef 	.word	0x080098ef
 80097cc:	0800977d 	.word	0x0800977d
 80097d0:	0800977d 	.word	0x0800977d
 80097d4:	0800992f 	.word	0x0800992f
 80097d8:	0800977d 	.word	0x0800977d
 80097dc:	08009831 	.word	0x08009831
 80097e0:	0800977d 	.word	0x0800977d
 80097e4:	0800977d 	.word	0x0800977d
 80097e8:	080098f7 	.word	0x080098f7
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	1d1a      	adds	r2, r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	602a      	str	r2, [r5, #0]
 80097f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097fc:	2301      	movs	r3, #1
 80097fe:	e0a3      	b.n	8009948 <_printf_i+0x1f4>
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	6829      	ldr	r1, [r5, #0]
 8009804:	0606      	lsls	r6, r0, #24
 8009806:	f101 0304 	add.w	r3, r1, #4
 800980a:	d50a      	bpl.n	8009822 <_printf_i+0xce>
 800980c:	680e      	ldr	r6, [r1, #0]
 800980e:	602b      	str	r3, [r5, #0]
 8009810:	2e00      	cmp	r6, #0
 8009812:	da03      	bge.n	800981c <_printf_i+0xc8>
 8009814:	232d      	movs	r3, #45	; 0x2d
 8009816:	4276      	negs	r6, r6
 8009818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800981c:	485e      	ldr	r0, [pc, #376]	; (8009998 <_printf_i+0x244>)
 800981e:	230a      	movs	r3, #10
 8009820:	e019      	b.n	8009856 <_printf_i+0x102>
 8009822:	680e      	ldr	r6, [r1, #0]
 8009824:	602b      	str	r3, [r5, #0]
 8009826:	f010 0f40 	tst.w	r0, #64	; 0x40
 800982a:	bf18      	it	ne
 800982c:	b236      	sxthne	r6, r6
 800982e:	e7ef      	b.n	8009810 <_printf_i+0xbc>
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	6820      	ldr	r0, [r4, #0]
 8009834:	1d19      	adds	r1, r3, #4
 8009836:	6029      	str	r1, [r5, #0]
 8009838:	0601      	lsls	r1, r0, #24
 800983a:	d501      	bpl.n	8009840 <_printf_i+0xec>
 800983c:	681e      	ldr	r6, [r3, #0]
 800983e:	e002      	b.n	8009846 <_printf_i+0xf2>
 8009840:	0646      	lsls	r6, r0, #25
 8009842:	d5fb      	bpl.n	800983c <_printf_i+0xe8>
 8009844:	881e      	ldrh	r6, [r3, #0]
 8009846:	4854      	ldr	r0, [pc, #336]	; (8009998 <_printf_i+0x244>)
 8009848:	2f6f      	cmp	r7, #111	; 0x6f
 800984a:	bf0c      	ite	eq
 800984c:	2308      	moveq	r3, #8
 800984e:	230a      	movne	r3, #10
 8009850:	2100      	movs	r1, #0
 8009852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009856:	6865      	ldr	r5, [r4, #4]
 8009858:	60a5      	str	r5, [r4, #8]
 800985a:	2d00      	cmp	r5, #0
 800985c:	bfa2      	ittt	ge
 800985e:	6821      	ldrge	r1, [r4, #0]
 8009860:	f021 0104 	bicge.w	r1, r1, #4
 8009864:	6021      	strge	r1, [r4, #0]
 8009866:	b90e      	cbnz	r6, 800986c <_printf_i+0x118>
 8009868:	2d00      	cmp	r5, #0
 800986a:	d04d      	beq.n	8009908 <_printf_i+0x1b4>
 800986c:	4615      	mov	r5, r2
 800986e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009872:	fb03 6711 	mls	r7, r3, r1, r6
 8009876:	5dc7      	ldrb	r7, [r0, r7]
 8009878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800987c:	4637      	mov	r7, r6
 800987e:	42bb      	cmp	r3, r7
 8009880:	460e      	mov	r6, r1
 8009882:	d9f4      	bls.n	800986e <_printf_i+0x11a>
 8009884:	2b08      	cmp	r3, #8
 8009886:	d10b      	bne.n	80098a0 <_printf_i+0x14c>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	07de      	lsls	r6, r3, #31
 800988c:	d508      	bpl.n	80098a0 <_printf_i+0x14c>
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	6861      	ldr	r1, [r4, #4]
 8009892:	4299      	cmp	r1, r3
 8009894:	bfde      	ittt	le
 8009896:	2330      	movle	r3, #48	; 0x30
 8009898:	f805 3c01 	strble.w	r3, [r5, #-1]
 800989c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098a0:	1b52      	subs	r2, r2, r5
 80098a2:	6122      	str	r2, [r4, #16]
 80098a4:	f8cd a000 	str.w	sl, [sp]
 80098a8:	464b      	mov	r3, r9
 80098aa:	aa03      	add	r2, sp, #12
 80098ac:	4621      	mov	r1, r4
 80098ae:	4640      	mov	r0, r8
 80098b0:	f7ff fee2 	bl	8009678 <_printf_common>
 80098b4:	3001      	adds	r0, #1
 80098b6:	d14c      	bne.n	8009952 <_printf_i+0x1fe>
 80098b8:	f04f 30ff 	mov.w	r0, #4294967295
 80098bc:	b004      	add	sp, #16
 80098be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c2:	4835      	ldr	r0, [pc, #212]	; (8009998 <_printf_i+0x244>)
 80098c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098c8:	6829      	ldr	r1, [r5, #0]
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80098d0:	6029      	str	r1, [r5, #0]
 80098d2:	061d      	lsls	r5, r3, #24
 80098d4:	d514      	bpl.n	8009900 <_printf_i+0x1ac>
 80098d6:	07df      	lsls	r7, r3, #31
 80098d8:	bf44      	itt	mi
 80098da:	f043 0320 	orrmi.w	r3, r3, #32
 80098de:	6023      	strmi	r3, [r4, #0]
 80098e0:	b91e      	cbnz	r6, 80098ea <_printf_i+0x196>
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	f023 0320 	bic.w	r3, r3, #32
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	2310      	movs	r3, #16
 80098ec:	e7b0      	b.n	8009850 <_printf_i+0xfc>
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	f043 0320 	orr.w	r3, r3, #32
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	2378      	movs	r3, #120	; 0x78
 80098f8:	4828      	ldr	r0, [pc, #160]	; (800999c <_printf_i+0x248>)
 80098fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098fe:	e7e3      	b.n	80098c8 <_printf_i+0x174>
 8009900:	0659      	lsls	r1, r3, #25
 8009902:	bf48      	it	mi
 8009904:	b2b6      	uxthmi	r6, r6
 8009906:	e7e6      	b.n	80098d6 <_printf_i+0x182>
 8009908:	4615      	mov	r5, r2
 800990a:	e7bb      	b.n	8009884 <_printf_i+0x130>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	6826      	ldr	r6, [r4, #0]
 8009910:	6961      	ldr	r1, [r4, #20]
 8009912:	1d18      	adds	r0, r3, #4
 8009914:	6028      	str	r0, [r5, #0]
 8009916:	0635      	lsls	r5, r6, #24
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	d501      	bpl.n	8009920 <_printf_i+0x1cc>
 800991c:	6019      	str	r1, [r3, #0]
 800991e:	e002      	b.n	8009926 <_printf_i+0x1d2>
 8009920:	0670      	lsls	r0, r6, #25
 8009922:	d5fb      	bpl.n	800991c <_printf_i+0x1c8>
 8009924:	8019      	strh	r1, [r3, #0]
 8009926:	2300      	movs	r3, #0
 8009928:	6123      	str	r3, [r4, #16]
 800992a:	4615      	mov	r5, r2
 800992c:	e7ba      	b.n	80098a4 <_printf_i+0x150>
 800992e:	682b      	ldr	r3, [r5, #0]
 8009930:	1d1a      	adds	r2, r3, #4
 8009932:	602a      	str	r2, [r5, #0]
 8009934:	681d      	ldr	r5, [r3, #0]
 8009936:	6862      	ldr	r2, [r4, #4]
 8009938:	2100      	movs	r1, #0
 800993a:	4628      	mov	r0, r5
 800993c:	f7f6 fc38 	bl	80001b0 <memchr>
 8009940:	b108      	cbz	r0, 8009946 <_printf_i+0x1f2>
 8009942:	1b40      	subs	r0, r0, r5
 8009944:	6060      	str	r0, [r4, #4]
 8009946:	6863      	ldr	r3, [r4, #4]
 8009948:	6123      	str	r3, [r4, #16]
 800994a:	2300      	movs	r3, #0
 800994c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009950:	e7a8      	b.n	80098a4 <_printf_i+0x150>
 8009952:	6923      	ldr	r3, [r4, #16]
 8009954:	462a      	mov	r2, r5
 8009956:	4649      	mov	r1, r9
 8009958:	4640      	mov	r0, r8
 800995a:	47d0      	blx	sl
 800995c:	3001      	adds	r0, #1
 800995e:	d0ab      	beq.n	80098b8 <_printf_i+0x164>
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	079b      	lsls	r3, r3, #30
 8009964:	d413      	bmi.n	800998e <_printf_i+0x23a>
 8009966:	68e0      	ldr	r0, [r4, #12]
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	4298      	cmp	r0, r3
 800996c:	bfb8      	it	lt
 800996e:	4618      	movlt	r0, r3
 8009970:	e7a4      	b.n	80098bc <_printf_i+0x168>
 8009972:	2301      	movs	r3, #1
 8009974:	4632      	mov	r2, r6
 8009976:	4649      	mov	r1, r9
 8009978:	4640      	mov	r0, r8
 800997a:	47d0      	blx	sl
 800997c:	3001      	adds	r0, #1
 800997e:	d09b      	beq.n	80098b8 <_printf_i+0x164>
 8009980:	3501      	adds	r5, #1
 8009982:	68e3      	ldr	r3, [r4, #12]
 8009984:	9903      	ldr	r1, [sp, #12]
 8009986:	1a5b      	subs	r3, r3, r1
 8009988:	42ab      	cmp	r3, r5
 800998a:	dcf2      	bgt.n	8009972 <_printf_i+0x21e>
 800998c:	e7eb      	b.n	8009966 <_printf_i+0x212>
 800998e:	2500      	movs	r5, #0
 8009990:	f104 0619 	add.w	r6, r4, #25
 8009994:	e7f5      	b.n	8009982 <_printf_i+0x22e>
 8009996:	bf00      	nop
 8009998:	0800c582 	.word	0x0800c582
 800999c:	0800c593 	.word	0x0800c593

080099a0 <iprintf>:
 80099a0:	b40f      	push	{r0, r1, r2, r3}
 80099a2:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <iprintf+0x2c>)
 80099a4:	b513      	push	{r0, r1, r4, lr}
 80099a6:	681c      	ldr	r4, [r3, #0]
 80099a8:	b124      	cbz	r4, 80099b4 <iprintf+0x14>
 80099aa:	69a3      	ldr	r3, [r4, #24]
 80099ac:	b913      	cbnz	r3, 80099b4 <iprintf+0x14>
 80099ae:	4620      	mov	r0, r4
 80099b0:	f001 f9a2 	bl	800acf8 <__sinit>
 80099b4:	ab05      	add	r3, sp, #20
 80099b6:	9a04      	ldr	r2, [sp, #16]
 80099b8:	68a1      	ldr	r1, [r4, #8]
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	4620      	mov	r0, r4
 80099be:	f001 ffd1 	bl	800b964 <_vfiprintf_r>
 80099c2:	b002      	add	sp, #8
 80099c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c8:	b004      	add	sp, #16
 80099ca:	4770      	bx	lr
 80099cc:	20000010 	.word	0x20000010

080099d0 <_puts_r>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	460e      	mov	r6, r1
 80099d4:	4605      	mov	r5, r0
 80099d6:	b118      	cbz	r0, 80099e0 <_puts_r+0x10>
 80099d8:	6983      	ldr	r3, [r0, #24]
 80099da:	b90b      	cbnz	r3, 80099e0 <_puts_r+0x10>
 80099dc:	f001 f98c 	bl	800acf8 <__sinit>
 80099e0:	69ab      	ldr	r3, [r5, #24]
 80099e2:	68ac      	ldr	r4, [r5, #8]
 80099e4:	b913      	cbnz	r3, 80099ec <_puts_r+0x1c>
 80099e6:	4628      	mov	r0, r5
 80099e8:	f001 f986 	bl	800acf8 <__sinit>
 80099ec:	4b2c      	ldr	r3, [pc, #176]	; (8009aa0 <_puts_r+0xd0>)
 80099ee:	429c      	cmp	r4, r3
 80099f0:	d120      	bne.n	8009a34 <_puts_r+0x64>
 80099f2:	686c      	ldr	r4, [r5, #4]
 80099f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099f6:	07db      	lsls	r3, r3, #31
 80099f8:	d405      	bmi.n	8009a06 <_puts_r+0x36>
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	0598      	lsls	r0, r3, #22
 80099fe:	d402      	bmi.n	8009a06 <_puts_r+0x36>
 8009a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a02:	f001 fa1c 	bl	800ae3e <__retarget_lock_acquire_recursive>
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	0719      	lsls	r1, r3, #28
 8009a0a:	d51d      	bpl.n	8009a48 <_puts_r+0x78>
 8009a0c:	6923      	ldr	r3, [r4, #16]
 8009a0e:	b1db      	cbz	r3, 8009a48 <_puts_r+0x78>
 8009a10:	3e01      	subs	r6, #1
 8009a12:	68a3      	ldr	r3, [r4, #8]
 8009a14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	60a3      	str	r3, [r4, #8]
 8009a1c:	bb39      	cbnz	r1, 8009a6e <_puts_r+0x9e>
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	da38      	bge.n	8009a94 <_puts_r+0xc4>
 8009a22:	4622      	mov	r2, r4
 8009a24:	210a      	movs	r1, #10
 8009a26:	4628      	mov	r0, r5
 8009a28:	f000 f912 	bl	8009c50 <__swbuf_r>
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	d011      	beq.n	8009a54 <_puts_r+0x84>
 8009a30:	250a      	movs	r5, #10
 8009a32:	e011      	b.n	8009a58 <_puts_r+0x88>
 8009a34:	4b1b      	ldr	r3, [pc, #108]	; (8009aa4 <_puts_r+0xd4>)
 8009a36:	429c      	cmp	r4, r3
 8009a38:	d101      	bne.n	8009a3e <_puts_r+0x6e>
 8009a3a:	68ac      	ldr	r4, [r5, #8]
 8009a3c:	e7da      	b.n	80099f4 <_puts_r+0x24>
 8009a3e:	4b1a      	ldr	r3, [pc, #104]	; (8009aa8 <_puts_r+0xd8>)
 8009a40:	429c      	cmp	r4, r3
 8009a42:	bf08      	it	eq
 8009a44:	68ec      	ldreq	r4, [r5, #12]
 8009a46:	e7d5      	b.n	80099f4 <_puts_r+0x24>
 8009a48:	4621      	mov	r1, r4
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f000 f952 	bl	8009cf4 <__swsetup_r>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d0dd      	beq.n	8009a10 <_puts_r+0x40>
 8009a54:	f04f 35ff 	mov.w	r5, #4294967295
 8009a58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a5a:	07da      	lsls	r2, r3, #31
 8009a5c:	d405      	bmi.n	8009a6a <_puts_r+0x9a>
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	059b      	lsls	r3, r3, #22
 8009a62:	d402      	bmi.n	8009a6a <_puts_r+0x9a>
 8009a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a66:	f001 f9eb 	bl	800ae40 <__retarget_lock_release_recursive>
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	bd70      	pop	{r4, r5, r6, pc}
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	da04      	bge.n	8009a7c <_puts_r+0xac>
 8009a72:	69a2      	ldr	r2, [r4, #24]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	dc06      	bgt.n	8009a86 <_puts_r+0xb6>
 8009a78:	290a      	cmp	r1, #10
 8009a7a:	d004      	beq.n	8009a86 <_puts_r+0xb6>
 8009a7c:	6823      	ldr	r3, [r4, #0]
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	6022      	str	r2, [r4, #0]
 8009a82:	7019      	strb	r1, [r3, #0]
 8009a84:	e7c5      	b.n	8009a12 <_puts_r+0x42>
 8009a86:	4622      	mov	r2, r4
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f000 f8e1 	bl	8009c50 <__swbuf_r>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d1bf      	bne.n	8009a12 <_puts_r+0x42>
 8009a92:	e7df      	b.n	8009a54 <_puts_r+0x84>
 8009a94:	6823      	ldr	r3, [r4, #0]
 8009a96:	250a      	movs	r5, #10
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	6022      	str	r2, [r4, #0]
 8009a9c:	701d      	strb	r5, [r3, #0]
 8009a9e:	e7db      	b.n	8009a58 <_puts_r+0x88>
 8009aa0:	0800c758 	.word	0x0800c758
 8009aa4:	0800c778 	.word	0x0800c778
 8009aa8:	0800c738 	.word	0x0800c738

08009aac <puts>:
 8009aac:	4b02      	ldr	r3, [pc, #8]	; (8009ab8 <puts+0xc>)
 8009aae:	4601      	mov	r1, r0
 8009ab0:	6818      	ldr	r0, [r3, #0]
 8009ab2:	f7ff bf8d 	b.w	80099d0 <_puts_r>
 8009ab6:	bf00      	nop
 8009ab8:	20000010 	.word	0x20000010

08009abc <_sbrk_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	4d06      	ldr	r5, [pc, #24]	; (8009ad8 <_sbrk_r+0x1c>)
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	4608      	mov	r0, r1
 8009ac6:	602b      	str	r3, [r5, #0]
 8009ac8:	f7f8 fac0 	bl	800204c <_sbrk>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_sbrk_r+0x1a>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_sbrk_r+0x1a>
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	2000053c 	.word	0x2000053c

08009adc <siprintf>:
 8009adc:	b40e      	push	{r1, r2, r3}
 8009ade:	b500      	push	{lr}
 8009ae0:	b09c      	sub	sp, #112	; 0x70
 8009ae2:	ab1d      	add	r3, sp, #116	; 0x74
 8009ae4:	9002      	str	r0, [sp, #8]
 8009ae6:	9006      	str	r0, [sp, #24]
 8009ae8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009aec:	4809      	ldr	r0, [pc, #36]	; (8009b14 <siprintf+0x38>)
 8009aee:	9107      	str	r1, [sp, #28]
 8009af0:	9104      	str	r1, [sp, #16]
 8009af2:	4909      	ldr	r1, [pc, #36]	; (8009b18 <siprintf+0x3c>)
 8009af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af8:	9105      	str	r1, [sp, #20]
 8009afa:	6800      	ldr	r0, [r0, #0]
 8009afc:	9301      	str	r3, [sp, #4]
 8009afe:	a902      	add	r1, sp, #8
 8009b00:	f001 fe06 	bl	800b710 <_svfiprintf_r>
 8009b04:	9b02      	ldr	r3, [sp, #8]
 8009b06:	2200      	movs	r2, #0
 8009b08:	701a      	strb	r2, [r3, #0]
 8009b0a:	b01c      	add	sp, #112	; 0x70
 8009b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b10:	b003      	add	sp, #12
 8009b12:	4770      	bx	lr
 8009b14:	20000010 	.word	0x20000010
 8009b18:	ffff0208 	.word	0xffff0208

08009b1c <strchr>:
 8009b1c:	b2c9      	uxtb	r1, r1
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b24:	b11a      	cbz	r2, 8009b2e <strchr+0x12>
 8009b26:	428a      	cmp	r2, r1
 8009b28:	d1f9      	bne.n	8009b1e <strchr+0x2>
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	4770      	bx	lr
 8009b2e:	2900      	cmp	r1, #0
 8009b30:	bf18      	it	ne
 8009b32:	2300      	movne	r3, #0
 8009b34:	e7f9      	b.n	8009b2a <strchr+0xe>
	...

08009b38 <_strtol_l.constprop.0>:
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b3e:	d001      	beq.n	8009b44 <_strtol_l.constprop.0+0xc>
 8009b40:	2b24      	cmp	r3, #36	; 0x24
 8009b42:	d906      	bls.n	8009b52 <_strtol_l.constprop.0+0x1a>
 8009b44:	f7ff f99a 	bl	8008e7c <__errno>
 8009b48:	2316      	movs	r3, #22
 8009b4a:	6003      	str	r3, [r0, #0]
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009c38 <_strtol_l.constprop.0+0x100>
 8009b56:	460d      	mov	r5, r1
 8009b58:	462e      	mov	r6, r5
 8009b5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009b62:	f017 0708 	ands.w	r7, r7, #8
 8009b66:	d1f7      	bne.n	8009b58 <_strtol_l.constprop.0+0x20>
 8009b68:	2c2d      	cmp	r4, #45	; 0x2d
 8009b6a:	d132      	bne.n	8009bd2 <_strtol_l.constprop.0+0x9a>
 8009b6c:	782c      	ldrb	r4, [r5, #0]
 8009b6e:	2701      	movs	r7, #1
 8009b70:	1cb5      	adds	r5, r6, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d05b      	beq.n	8009c2e <_strtol_l.constprop.0+0xf6>
 8009b76:	2b10      	cmp	r3, #16
 8009b78:	d109      	bne.n	8009b8e <_strtol_l.constprop.0+0x56>
 8009b7a:	2c30      	cmp	r4, #48	; 0x30
 8009b7c:	d107      	bne.n	8009b8e <_strtol_l.constprop.0+0x56>
 8009b7e:	782c      	ldrb	r4, [r5, #0]
 8009b80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009b84:	2c58      	cmp	r4, #88	; 0x58
 8009b86:	d14d      	bne.n	8009c24 <_strtol_l.constprop.0+0xec>
 8009b88:	786c      	ldrb	r4, [r5, #1]
 8009b8a:	2310      	movs	r3, #16
 8009b8c:	3502      	adds	r5, #2
 8009b8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009b92:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b96:	f04f 0c00 	mov.w	ip, #0
 8009b9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009b9e:	4666      	mov	r6, ip
 8009ba0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009ba4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009ba8:	f1be 0f09 	cmp.w	lr, #9
 8009bac:	d816      	bhi.n	8009bdc <_strtol_l.constprop.0+0xa4>
 8009bae:	4674      	mov	r4, lr
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	dd24      	ble.n	8009bfe <_strtol_l.constprop.0+0xc6>
 8009bb4:	f1bc 0f00 	cmp.w	ip, #0
 8009bb8:	db1e      	blt.n	8009bf8 <_strtol_l.constprop.0+0xc0>
 8009bba:	45b1      	cmp	r9, r6
 8009bbc:	d31c      	bcc.n	8009bf8 <_strtol_l.constprop.0+0xc0>
 8009bbe:	d101      	bne.n	8009bc4 <_strtol_l.constprop.0+0x8c>
 8009bc0:	45a2      	cmp	sl, r4
 8009bc2:	db19      	blt.n	8009bf8 <_strtol_l.constprop.0+0xc0>
 8009bc4:	fb06 4603 	mla	r6, r6, r3, r4
 8009bc8:	f04f 0c01 	mov.w	ip, #1
 8009bcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bd0:	e7e8      	b.n	8009ba4 <_strtol_l.constprop.0+0x6c>
 8009bd2:	2c2b      	cmp	r4, #43	; 0x2b
 8009bd4:	bf04      	itt	eq
 8009bd6:	782c      	ldrbeq	r4, [r5, #0]
 8009bd8:	1cb5      	addeq	r5, r6, #2
 8009bda:	e7ca      	b.n	8009b72 <_strtol_l.constprop.0+0x3a>
 8009bdc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009be0:	f1be 0f19 	cmp.w	lr, #25
 8009be4:	d801      	bhi.n	8009bea <_strtol_l.constprop.0+0xb2>
 8009be6:	3c37      	subs	r4, #55	; 0x37
 8009be8:	e7e2      	b.n	8009bb0 <_strtol_l.constprop.0+0x78>
 8009bea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009bee:	f1be 0f19 	cmp.w	lr, #25
 8009bf2:	d804      	bhi.n	8009bfe <_strtol_l.constprop.0+0xc6>
 8009bf4:	3c57      	subs	r4, #87	; 0x57
 8009bf6:	e7db      	b.n	8009bb0 <_strtol_l.constprop.0+0x78>
 8009bf8:	f04f 3cff 	mov.w	ip, #4294967295
 8009bfc:	e7e6      	b.n	8009bcc <_strtol_l.constprop.0+0x94>
 8009bfe:	f1bc 0f00 	cmp.w	ip, #0
 8009c02:	da05      	bge.n	8009c10 <_strtol_l.constprop.0+0xd8>
 8009c04:	2322      	movs	r3, #34	; 0x22
 8009c06:	6003      	str	r3, [r0, #0]
 8009c08:	4646      	mov	r6, r8
 8009c0a:	b942      	cbnz	r2, 8009c1e <_strtol_l.constprop.0+0xe6>
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	e79e      	b.n	8009b4e <_strtol_l.constprop.0+0x16>
 8009c10:	b107      	cbz	r7, 8009c14 <_strtol_l.constprop.0+0xdc>
 8009c12:	4276      	negs	r6, r6
 8009c14:	2a00      	cmp	r2, #0
 8009c16:	d0f9      	beq.n	8009c0c <_strtol_l.constprop.0+0xd4>
 8009c18:	f1bc 0f00 	cmp.w	ip, #0
 8009c1c:	d000      	beq.n	8009c20 <_strtol_l.constprop.0+0xe8>
 8009c1e:	1e69      	subs	r1, r5, #1
 8009c20:	6011      	str	r1, [r2, #0]
 8009c22:	e7f3      	b.n	8009c0c <_strtol_l.constprop.0+0xd4>
 8009c24:	2430      	movs	r4, #48	; 0x30
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1b1      	bne.n	8009b8e <_strtol_l.constprop.0+0x56>
 8009c2a:	2308      	movs	r3, #8
 8009c2c:	e7af      	b.n	8009b8e <_strtol_l.constprop.0+0x56>
 8009c2e:	2c30      	cmp	r4, #48	; 0x30
 8009c30:	d0a5      	beq.n	8009b7e <_strtol_l.constprop.0+0x46>
 8009c32:	230a      	movs	r3, #10
 8009c34:	e7ab      	b.n	8009b8e <_strtol_l.constprop.0+0x56>
 8009c36:	bf00      	nop
 8009c38:	0800c5a5 	.word	0x0800c5a5

08009c3c <strtol>:
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	460a      	mov	r2, r1
 8009c40:	4601      	mov	r1, r0
 8009c42:	4802      	ldr	r0, [pc, #8]	; (8009c4c <strtol+0x10>)
 8009c44:	6800      	ldr	r0, [r0, #0]
 8009c46:	f7ff bf77 	b.w	8009b38 <_strtol_l.constprop.0>
 8009c4a:	bf00      	nop
 8009c4c:	20000010 	.word	0x20000010

08009c50 <__swbuf_r>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	460e      	mov	r6, r1
 8009c54:	4614      	mov	r4, r2
 8009c56:	4605      	mov	r5, r0
 8009c58:	b118      	cbz	r0, 8009c62 <__swbuf_r+0x12>
 8009c5a:	6983      	ldr	r3, [r0, #24]
 8009c5c:	b90b      	cbnz	r3, 8009c62 <__swbuf_r+0x12>
 8009c5e:	f001 f84b 	bl	800acf8 <__sinit>
 8009c62:	4b21      	ldr	r3, [pc, #132]	; (8009ce8 <__swbuf_r+0x98>)
 8009c64:	429c      	cmp	r4, r3
 8009c66:	d12b      	bne.n	8009cc0 <__swbuf_r+0x70>
 8009c68:	686c      	ldr	r4, [r5, #4]
 8009c6a:	69a3      	ldr	r3, [r4, #24]
 8009c6c:	60a3      	str	r3, [r4, #8]
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	071a      	lsls	r2, r3, #28
 8009c72:	d52f      	bpl.n	8009cd4 <__swbuf_r+0x84>
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	b36b      	cbz	r3, 8009cd4 <__swbuf_r+0x84>
 8009c78:	6923      	ldr	r3, [r4, #16]
 8009c7a:	6820      	ldr	r0, [r4, #0]
 8009c7c:	1ac0      	subs	r0, r0, r3
 8009c7e:	6963      	ldr	r3, [r4, #20]
 8009c80:	b2f6      	uxtb	r6, r6
 8009c82:	4283      	cmp	r3, r0
 8009c84:	4637      	mov	r7, r6
 8009c86:	dc04      	bgt.n	8009c92 <__swbuf_r+0x42>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f000 ffa0 	bl	800abd0 <_fflush_r>
 8009c90:	bb30      	cbnz	r0, 8009ce0 <__swbuf_r+0x90>
 8009c92:	68a3      	ldr	r3, [r4, #8]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	60a3      	str	r3, [r4, #8]
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	6022      	str	r2, [r4, #0]
 8009c9e:	701e      	strb	r6, [r3, #0]
 8009ca0:	6963      	ldr	r3, [r4, #20]
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	4283      	cmp	r3, r0
 8009ca6:	d004      	beq.n	8009cb2 <__swbuf_r+0x62>
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	07db      	lsls	r3, r3, #31
 8009cac:	d506      	bpl.n	8009cbc <__swbuf_r+0x6c>
 8009cae:	2e0a      	cmp	r6, #10
 8009cb0:	d104      	bne.n	8009cbc <__swbuf_r+0x6c>
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f000 ff8b 	bl	800abd0 <_fflush_r>
 8009cba:	b988      	cbnz	r0, 8009ce0 <__swbuf_r+0x90>
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <__swbuf_r+0x9c>)
 8009cc2:	429c      	cmp	r4, r3
 8009cc4:	d101      	bne.n	8009cca <__swbuf_r+0x7a>
 8009cc6:	68ac      	ldr	r4, [r5, #8]
 8009cc8:	e7cf      	b.n	8009c6a <__swbuf_r+0x1a>
 8009cca:	4b09      	ldr	r3, [pc, #36]	; (8009cf0 <__swbuf_r+0xa0>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	bf08      	it	eq
 8009cd0:	68ec      	ldreq	r4, [r5, #12]
 8009cd2:	e7ca      	b.n	8009c6a <__swbuf_r+0x1a>
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f000 f80c 	bl	8009cf4 <__swsetup_r>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d0cb      	beq.n	8009c78 <__swbuf_r+0x28>
 8009ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ce4:	e7ea      	b.n	8009cbc <__swbuf_r+0x6c>
 8009ce6:	bf00      	nop
 8009ce8:	0800c758 	.word	0x0800c758
 8009cec:	0800c778 	.word	0x0800c778
 8009cf0:	0800c738 	.word	0x0800c738

08009cf4 <__swsetup_r>:
 8009cf4:	4b32      	ldr	r3, [pc, #200]	; (8009dc0 <__swsetup_r+0xcc>)
 8009cf6:	b570      	push	{r4, r5, r6, lr}
 8009cf8:	681d      	ldr	r5, [r3, #0]
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	b125      	cbz	r5, 8009d0a <__swsetup_r+0x16>
 8009d00:	69ab      	ldr	r3, [r5, #24]
 8009d02:	b913      	cbnz	r3, 8009d0a <__swsetup_r+0x16>
 8009d04:	4628      	mov	r0, r5
 8009d06:	f000 fff7 	bl	800acf8 <__sinit>
 8009d0a:	4b2e      	ldr	r3, [pc, #184]	; (8009dc4 <__swsetup_r+0xd0>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	d10f      	bne.n	8009d30 <__swsetup_r+0x3c>
 8009d10:	686c      	ldr	r4, [r5, #4]
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d18:	0719      	lsls	r1, r3, #28
 8009d1a:	d42c      	bmi.n	8009d76 <__swsetup_r+0x82>
 8009d1c:	06dd      	lsls	r5, r3, #27
 8009d1e:	d411      	bmi.n	8009d44 <__swsetup_r+0x50>
 8009d20:	2309      	movs	r3, #9
 8009d22:	6033      	str	r3, [r6, #0]
 8009d24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d28:	81a3      	strh	r3, [r4, #12]
 8009d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2e:	e03e      	b.n	8009dae <__swsetup_r+0xba>
 8009d30:	4b25      	ldr	r3, [pc, #148]	; (8009dc8 <__swsetup_r+0xd4>)
 8009d32:	429c      	cmp	r4, r3
 8009d34:	d101      	bne.n	8009d3a <__swsetup_r+0x46>
 8009d36:	68ac      	ldr	r4, [r5, #8]
 8009d38:	e7eb      	b.n	8009d12 <__swsetup_r+0x1e>
 8009d3a:	4b24      	ldr	r3, [pc, #144]	; (8009dcc <__swsetup_r+0xd8>)
 8009d3c:	429c      	cmp	r4, r3
 8009d3e:	bf08      	it	eq
 8009d40:	68ec      	ldreq	r4, [r5, #12]
 8009d42:	e7e6      	b.n	8009d12 <__swsetup_r+0x1e>
 8009d44:	0758      	lsls	r0, r3, #29
 8009d46:	d512      	bpl.n	8009d6e <__swsetup_r+0x7a>
 8009d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d4a:	b141      	cbz	r1, 8009d5e <__swsetup_r+0x6a>
 8009d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d50:	4299      	cmp	r1, r3
 8009d52:	d002      	beq.n	8009d5a <__swsetup_r+0x66>
 8009d54:	4630      	mov	r0, r6
 8009d56:	f7ff f8d9 	bl	8008f0c <_free_r>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d64:	81a3      	strh	r3, [r4, #12]
 8009d66:	2300      	movs	r3, #0
 8009d68:	6063      	str	r3, [r4, #4]
 8009d6a:	6923      	ldr	r3, [r4, #16]
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	f043 0308 	orr.w	r3, r3, #8
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	6923      	ldr	r3, [r4, #16]
 8009d78:	b94b      	cbnz	r3, 8009d8e <__swsetup_r+0x9a>
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d84:	d003      	beq.n	8009d8e <__swsetup_r+0x9a>
 8009d86:	4621      	mov	r1, r4
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f001 f87f 	bl	800ae8c <__smakebuf_r>
 8009d8e:	89a0      	ldrh	r0, [r4, #12]
 8009d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d94:	f010 0301 	ands.w	r3, r0, #1
 8009d98:	d00a      	beq.n	8009db0 <__swsetup_r+0xbc>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60a3      	str	r3, [r4, #8]
 8009d9e:	6963      	ldr	r3, [r4, #20]
 8009da0:	425b      	negs	r3, r3
 8009da2:	61a3      	str	r3, [r4, #24]
 8009da4:	6923      	ldr	r3, [r4, #16]
 8009da6:	b943      	cbnz	r3, 8009dba <__swsetup_r+0xc6>
 8009da8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dac:	d1ba      	bne.n	8009d24 <__swsetup_r+0x30>
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	0781      	lsls	r1, r0, #30
 8009db2:	bf58      	it	pl
 8009db4:	6963      	ldrpl	r3, [r4, #20]
 8009db6:	60a3      	str	r3, [r4, #8]
 8009db8:	e7f4      	b.n	8009da4 <__swsetup_r+0xb0>
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e7f7      	b.n	8009dae <__swsetup_r+0xba>
 8009dbe:	bf00      	nop
 8009dc0:	20000010 	.word	0x20000010
 8009dc4:	0800c758 	.word	0x0800c758
 8009dc8:	0800c778 	.word	0x0800c778
 8009dcc:	0800c738 	.word	0x0800c738

08009dd0 <quorem>:
 8009dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	6903      	ldr	r3, [r0, #16]
 8009dd6:	690c      	ldr	r4, [r1, #16]
 8009dd8:	42a3      	cmp	r3, r4
 8009dda:	4607      	mov	r7, r0
 8009ddc:	f2c0 8081 	blt.w	8009ee2 <quorem+0x112>
 8009de0:	3c01      	subs	r4, #1
 8009de2:	f101 0814 	add.w	r8, r1, #20
 8009de6:	f100 0514 	add.w	r5, r0, #20
 8009dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e04:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e08:	d331      	bcc.n	8009e6e <quorem+0x9e>
 8009e0a:	f04f 0e00 	mov.w	lr, #0
 8009e0e:	4640      	mov	r0, r8
 8009e10:	46ac      	mov	ip, r5
 8009e12:	46f2      	mov	sl, lr
 8009e14:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e18:	b293      	uxth	r3, r2
 8009e1a:	fb06 e303 	mla	r3, r6, r3, lr
 8009e1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	ebaa 0303 	sub.w	r3, sl, r3
 8009e28:	f8dc a000 	ldr.w	sl, [ip]
 8009e2c:	0c12      	lsrs	r2, r2, #16
 8009e2e:	fa13 f38a 	uxtah	r3, r3, sl
 8009e32:	fb06 e202 	mla	r2, r6, r2, lr
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	9b00      	ldr	r3, [sp, #0]
 8009e3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e3e:	b292      	uxth	r2, r2
 8009e40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e48:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e4c:	4581      	cmp	r9, r0
 8009e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e52:	f84c 3b04 	str.w	r3, [ip], #4
 8009e56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e5a:	d2db      	bcs.n	8009e14 <quorem+0x44>
 8009e5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e60:	b92b      	cbnz	r3, 8009e6e <quorem+0x9e>
 8009e62:	9b01      	ldr	r3, [sp, #4]
 8009e64:	3b04      	subs	r3, #4
 8009e66:	429d      	cmp	r5, r3
 8009e68:	461a      	mov	r2, r3
 8009e6a:	d32e      	bcc.n	8009eca <quorem+0xfa>
 8009e6c:	613c      	str	r4, [r7, #16]
 8009e6e:	4638      	mov	r0, r7
 8009e70:	f001 fada 	bl	800b428 <__mcmp>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	db24      	blt.n	8009ec2 <quorem+0xf2>
 8009e78:	3601      	adds	r6, #1
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f04f 0c00 	mov.w	ip, #0
 8009e80:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e84:	f8d0 e000 	ldr.w	lr, [r0]
 8009e88:	b293      	uxth	r3, r2
 8009e8a:	ebac 0303 	sub.w	r3, ip, r3
 8009e8e:	0c12      	lsrs	r2, r2, #16
 8009e90:	fa13 f38e 	uxtah	r3, r3, lr
 8009e94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ea2:	45c1      	cmp	r9, r8
 8009ea4:	f840 3b04 	str.w	r3, [r0], #4
 8009ea8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009eac:	d2e8      	bcs.n	8009e80 <quorem+0xb0>
 8009eae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eb6:	b922      	cbnz	r2, 8009ec2 <quorem+0xf2>
 8009eb8:	3b04      	subs	r3, #4
 8009eba:	429d      	cmp	r5, r3
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	d30a      	bcc.n	8009ed6 <quorem+0x106>
 8009ec0:	613c      	str	r4, [r7, #16]
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	b003      	add	sp, #12
 8009ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	3b04      	subs	r3, #4
 8009ece:	2a00      	cmp	r2, #0
 8009ed0:	d1cc      	bne.n	8009e6c <quorem+0x9c>
 8009ed2:	3c01      	subs	r4, #1
 8009ed4:	e7c7      	b.n	8009e66 <quorem+0x96>
 8009ed6:	6812      	ldr	r2, [r2, #0]
 8009ed8:	3b04      	subs	r3, #4
 8009eda:	2a00      	cmp	r2, #0
 8009edc:	d1f0      	bne.n	8009ec0 <quorem+0xf0>
 8009ede:	3c01      	subs	r4, #1
 8009ee0:	e7eb      	b.n	8009eba <quorem+0xea>
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	e7ee      	b.n	8009ec4 <quorem+0xf4>
	...

08009ee8 <_dtoa_r>:
 8009ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	ed2d 8b04 	vpush	{d8-d9}
 8009ef0:	ec57 6b10 	vmov	r6, r7, d0
 8009ef4:	b093      	sub	sp, #76	; 0x4c
 8009ef6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ef8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009efc:	9106      	str	r1, [sp, #24]
 8009efe:	ee10 aa10 	vmov	sl, s0
 8009f02:	4604      	mov	r4, r0
 8009f04:	9209      	str	r2, [sp, #36]	; 0x24
 8009f06:	930c      	str	r3, [sp, #48]	; 0x30
 8009f08:	46bb      	mov	fp, r7
 8009f0a:	b975      	cbnz	r5, 8009f2a <_dtoa_r+0x42>
 8009f0c:	2010      	movs	r0, #16
 8009f0e:	f7fe ffdf 	bl	8008ed0 <malloc>
 8009f12:	4602      	mov	r2, r0
 8009f14:	6260      	str	r0, [r4, #36]	; 0x24
 8009f16:	b920      	cbnz	r0, 8009f22 <_dtoa_r+0x3a>
 8009f18:	4ba7      	ldr	r3, [pc, #668]	; (800a1b8 <_dtoa_r+0x2d0>)
 8009f1a:	21ea      	movs	r1, #234	; 0xea
 8009f1c:	48a7      	ldr	r0, [pc, #668]	; (800a1bc <_dtoa_r+0x2d4>)
 8009f1e:	f001 fea7 	bl	800bc70 <__assert_func>
 8009f22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f26:	6005      	str	r5, [r0, #0]
 8009f28:	60c5      	str	r5, [r0, #12]
 8009f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f2c:	6819      	ldr	r1, [r3, #0]
 8009f2e:	b151      	cbz	r1, 8009f46 <_dtoa_r+0x5e>
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	604a      	str	r2, [r1, #4]
 8009f34:	2301      	movs	r3, #1
 8009f36:	4093      	lsls	r3, r2
 8009f38:	608b      	str	r3, [r1, #8]
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f001 f832 	bl	800afa4 <_Bfree>
 8009f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
 8009f46:	1e3b      	subs	r3, r7, #0
 8009f48:	bfaa      	itet	ge
 8009f4a:	2300      	movge	r3, #0
 8009f4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009f50:	f8c8 3000 	strge.w	r3, [r8]
 8009f54:	4b9a      	ldr	r3, [pc, #616]	; (800a1c0 <_dtoa_r+0x2d8>)
 8009f56:	bfbc      	itt	lt
 8009f58:	2201      	movlt	r2, #1
 8009f5a:	f8c8 2000 	strlt.w	r2, [r8]
 8009f5e:	ea33 030b 	bics.w	r3, r3, fp
 8009f62:	d11b      	bne.n	8009f9c <_dtoa_r+0xb4>
 8009f64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f66:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f70:	4333      	orrs	r3, r6
 8009f72:	f000 8592 	beq.w	800aa9a <_dtoa_r+0xbb2>
 8009f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f78:	b963      	cbnz	r3, 8009f94 <_dtoa_r+0xac>
 8009f7a:	4b92      	ldr	r3, [pc, #584]	; (800a1c4 <_dtoa_r+0x2dc>)
 8009f7c:	e022      	b.n	8009fc4 <_dtoa_r+0xdc>
 8009f7e:	4b92      	ldr	r3, [pc, #584]	; (800a1c8 <_dtoa_r+0x2e0>)
 8009f80:	9301      	str	r3, [sp, #4]
 8009f82:	3308      	adds	r3, #8
 8009f84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f86:	6013      	str	r3, [r2, #0]
 8009f88:	9801      	ldr	r0, [sp, #4]
 8009f8a:	b013      	add	sp, #76	; 0x4c
 8009f8c:	ecbd 8b04 	vpop	{d8-d9}
 8009f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f94:	4b8b      	ldr	r3, [pc, #556]	; (800a1c4 <_dtoa_r+0x2dc>)
 8009f96:	9301      	str	r3, [sp, #4]
 8009f98:	3303      	adds	r3, #3
 8009f9a:	e7f3      	b.n	8009f84 <_dtoa_r+0x9c>
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	4650      	mov	r0, sl
 8009fa2:	4659      	mov	r1, fp
 8009fa4:	f7f6 fd78 	bl	8000a98 <__aeabi_dcmpeq>
 8009fa8:	ec4b ab19 	vmov	d9, sl, fp
 8009fac:	4680      	mov	r8, r0
 8009fae:	b158      	cbz	r0, 8009fc8 <_dtoa_r+0xe0>
 8009fb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 856b 	beq.w	800aa94 <_dtoa_r+0xbac>
 8009fbe:	4883      	ldr	r0, [pc, #524]	; (800a1cc <_dtoa_r+0x2e4>)
 8009fc0:	6018      	str	r0, [r3, #0]
 8009fc2:	1e43      	subs	r3, r0, #1
 8009fc4:	9301      	str	r3, [sp, #4]
 8009fc6:	e7df      	b.n	8009f88 <_dtoa_r+0xa0>
 8009fc8:	ec4b ab10 	vmov	d0, sl, fp
 8009fcc:	aa10      	add	r2, sp, #64	; 0x40
 8009fce:	a911      	add	r1, sp, #68	; 0x44
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f001 facf 	bl	800b574 <__d2b>
 8009fd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009fda:	ee08 0a10 	vmov	s16, r0
 8009fde:	2d00      	cmp	r5, #0
 8009fe0:	f000 8084 	beq.w	800a0ec <_dtoa_r+0x204>
 8009fe4:	ee19 3a90 	vmov	r3, s19
 8009fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ff0:	4656      	mov	r6, sl
 8009ff2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ff6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ffa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009ffe:	4b74      	ldr	r3, [pc, #464]	; (800a1d0 <_dtoa_r+0x2e8>)
 800a000:	2200      	movs	r2, #0
 800a002:	4630      	mov	r0, r6
 800a004:	4639      	mov	r1, r7
 800a006:	f7f6 f927 	bl	8000258 <__aeabi_dsub>
 800a00a:	a365      	add	r3, pc, #404	; (adr r3, 800a1a0 <_dtoa_r+0x2b8>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	f7f6 fada 	bl	80005c8 <__aeabi_dmul>
 800a014:	a364      	add	r3, pc, #400	; (adr r3, 800a1a8 <_dtoa_r+0x2c0>)
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	f7f6 f91f 	bl	800025c <__adddf3>
 800a01e:	4606      	mov	r6, r0
 800a020:	4628      	mov	r0, r5
 800a022:	460f      	mov	r7, r1
 800a024:	f7f6 fa66 	bl	80004f4 <__aeabi_i2d>
 800a028:	a361      	add	r3, pc, #388	; (adr r3, 800a1b0 <_dtoa_r+0x2c8>)
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	f7f6 facb 	bl	80005c8 <__aeabi_dmul>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4630      	mov	r0, r6
 800a038:	4639      	mov	r1, r7
 800a03a:	f7f6 f90f 	bl	800025c <__adddf3>
 800a03e:	4606      	mov	r6, r0
 800a040:	460f      	mov	r7, r1
 800a042:	f7f6 fd71 	bl	8000b28 <__aeabi_d2iz>
 800a046:	2200      	movs	r2, #0
 800a048:	9000      	str	r0, [sp, #0]
 800a04a:	2300      	movs	r3, #0
 800a04c:	4630      	mov	r0, r6
 800a04e:	4639      	mov	r1, r7
 800a050:	f7f6 fd2c 	bl	8000aac <__aeabi_dcmplt>
 800a054:	b150      	cbz	r0, 800a06c <_dtoa_r+0x184>
 800a056:	9800      	ldr	r0, [sp, #0]
 800a058:	f7f6 fa4c 	bl	80004f4 <__aeabi_i2d>
 800a05c:	4632      	mov	r2, r6
 800a05e:	463b      	mov	r3, r7
 800a060:	f7f6 fd1a 	bl	8000a98 <__aeabi_dcmpeq>
 800a064:	b910      	cbnz	r0, 800a06c <_dtoa_r+0x184>
 800a066:	9b00      	ldr	r3, [sp, #0]
 800a068:	3b01      	subs	r3, #1
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	9b00      	ldr	r3, [sp, #0]
 800a06e:	2b16      	cmp	r3, #22
 800a070:	d85a      	bhi.n	800a128 <_dtoa_r+0x240>
 800a072:	9a00      	ldr	r2, [sp, #0]
 800a074:	4b57      	ldr	r3, [pc, #348]	; (800a1d4 <_dtoa_r+0x2ec>)
 800a076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	ec51 0b19 	vmov	r0, r1, d9
 800a082:	f7f6 fd13 	bl	8000aac <__aeabi_dcmplt>
 800a086:	2800      	cmp	r0, #0
 800a088:	d050      	beq.n	800a12c <_dtoa_r+0x244>
 800a08a:	9b00      	ldr	r3, [sp, #0]
 800a08c:	3b01      	subs	r3, #1
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	2300      	movs	r3, #0
 800a092:	930b      	str	r3, [sp, #44]	; 0x2c
 800a094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a096:	1b5d      	subs	r5, r3, r5
 800a098:	1e6b      	subs	r3, r5, #1
 800a09a:	9305      	str	r3, [sp, #20]
 800a09c:	bf45      	ittet	mi
 800a09e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a0a2:	9304      	strmi	r3, [sp, #16]
 800a0a4:	2300      	movpl	r3, #0
 800a0a6:	2300      	movmi	r3, #0
 800a0a8:	bf4c      	ite	mi
 800a0aa:	9305      	strmi	r3, [sp, #20]
 800a0ac:	9304      	strpl	r3, [sp, #16]
 800a0ae:	9b00      	ldr	r3, [sp, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	db3d      	blt.n	800a130 <_dtoa_r+0x248>
 800a0b4:	9b05      	ldr	r3, [sp, #20]
 800a0b6:	9a00      	ldr	r2, [sp, #0]
 800a0b8:	920a      	str	r2, [sp, #40]	; 0x28
 800a0ba:	4413      	add	r3, r2
 800a0bc:	9305      	str	r3, [sp, #20]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9307      	str	r3, [sp, #28]
 800a0c2:	9b06      	ldr	r3, [sp, #24]
 800a0c4:	2b09      	cmp	r3, #9
 800a0c6:	f200 8089 	bhi.w	800a1dc <_dtoa_r+0x2f4>
 800a0ca:	2b05      	cmp	r3, #5
 800a0cc:	bfc4      	itt	gt
 800a0ce:	3b04      	subgt	r3, #4
 800a0d0:	9306      	strgt	r3, [sp, #24]
 800a0d2:	9b06      	ldr	r3, [sp, #24]
 800a0d4:	f1a3 0302 	sub.w	r3, r3, #2
 800a0d8:	bfcc      	ite	gt
 800a0da:	2500      	movgt	r5, #0
 800a0dc:	2501      	movle	r5, #1
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	f200 8087 	bhi.w	800a1f2 <_dtoa_r+0x30a>
 800a0e4:	e8df f003 	tbb	[pc, r3]
 800a0e8:	59383a2d 	.word	0x59383a2d
 800a0ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a0f0:	441d      	add	r5, r3
 800a0f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0f6:	2b20      	cmp	r3, #32
 800a0f8:	bfc1      	itttt	gt
 800a0fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a102:	fa0b f303 	lslgt.w	r3, fp, r3
 800a106:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a10a:	bfda      	itte	le
 800a10c:	f1c3 0320 	rsble	r3, r3, #32
 800a110:	fa06 f003 	lslle.w	r0, r6, r3
 800a114:	4318      	orrgt	r0, r3
 800a116:	f7f6 f9dd 	bl	80004d4 <__aeabi_ui2d>
 800a11a:	2301      	movs	r3, #1
 800a11c:	4606      	mov	r6, r0
 800a11e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a122:	3d01      	subs	r5, #1
 800a124:	930e      	str	r3, [sp, #56]	; 0x38
 800a126:	e76a      	b.n	8009ffe <_dtoa_r+0x116>
 800a128:	2301      	movs	r3, #1
 800a12a:	e7b2      	b.n	800a092 <_dtoa_r+0x1aa>
 800a12c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a12e:	e7b1      	b.n	800a094 <_dtoa_r+0x1ac>
 800a130:	9b04      	ldr	r3, [sp, #16]
 800a132:	9a00      	ldr	r2, [sp, #0]
 800a134:	1a9b      	subs	r3, r3, r2
 800a136:	9304      	str	r3, [sp, #16]
 800a138:	4253      	negs	r3, r2
 800a13a:	9307      	str	r3, [sp, #28]
 800a13c:	2300      	movs	r3, #0
 800a13e:	930a      	str	r3, [sp, #40]	; 0x28
 800a140:	e7bf      	b.n	800a0c2 <_dtoa_r+0x1da>
 800a142:	2300      	movs	r3, #0
 800a144:	9308      	str	r3, [sp, #32]
 800a146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a148:	2b00      	cmp	r3, #0
 800a14a:	dc55      	bgt.n	800a1f8 <_dtoa_r+0x310>
 800a14c:	2301      	movs	r3, #1
 800a14e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a152:	461a      	mov	r2, r3
 800a154:	9209      	str	r2, [sp, #36]	; 0x24
 800a156:	e00c      	b.n	800a172 <_dtoa_r+0x28a>
 800a158:	2301      	movs	r3, #1
 800a15a:	e7f3      	b.n	800a144 <_dtoa_r+0x25c>
 800a15c:	2300      	movs	r3, #0
 800a15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a160:	9308      	str	r3, [sp, #32]
 800a162:	9b00      	ldr	r3, [sp, #0]
 800a164:	4413      	add	r3, r2
 800a166:	9302      	str	r3, [sp, #8]
 800a168:	3301      	adds	r3, #1
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	9303      	str	r3, [sp, #12]
 800a16e:	bfb8      	it	lt
 800a170:	2301      	movlt	r3, #1
 800a172:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a174:	2200      	movs	r2, #0
 800a176:	6042      	str	r2, [r0, #4]
 800a178:	2204      	movs	r2, #4
 800a17a:	f102 0614 	add.w	r6, r2, #20
 800a17e:	429e      	cmp	r6, r3
 800a180:	6841      	ldr	r1, [r0, #4]
 800a182:	d93d      	bls.n	800a200 <_dtoa_r+0x318>
 800a184:	4620      	mov	r0, r4
 800a186:	f000 fecd 	bl	800af24 <_Balloc>
 800a18a:	9001      	str	r0, [sp, #4]
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d13b      	bne.n	800a208 <_dtoa_r+0x320>
 800a190:	4b11      	ldr	r3, [pc, #68]	; (800a1d8 <_dtoa_r+0x2f0>)
 800a192:	4602      	mov	r2, r0
 800a194:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a198:	e6c0      	b.n	8009f1c <_dtoa_r+0x34>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e7df      	b.n	800a15e <_dtoa_r+0x276>
 800a19e:	bf00      	nop
 800a1a0:	636f4361 	.word	0x636f4361
 800a1a4:	3fd287a7 	.word	0x3fd287a7
 800a1a8:	8b60c8b3 	.word	0x8b60c8b3
 800a1ac:	3fc68a28 	.word	0x3fc68a28
 800a1b0:	509f79fb 	.word	0x509f79fb
 800a1b4:	3fd34413 	.word	0x3fd34413
 800a1b8:	0800c6b2 	.word	0x0800c6b2
 800a1bc:	0800c6c9 	.word	0x0800c6c9
 800a1c0:	7ff00000 	.word	0x7ff00000
 800a1c4:	0800c6ae 	.word	0x0800c6ae
 800a1c8:	0800c6a5 	.word	0x0800c6a5
 800a1cc:	0800c581 	.word	0x0800c581
 800a1d0:	3ff80000 	.word	0x3ff80000
 800a1d4:	0800c820 	.word	0x0800c820
 800a1d8:	0800c724 	.word	0x0800c724
 800a1dc:	2501      	movs	r5, #1
 800a1de:	2300      	movs	r3, #0
 800a1e0:	9306      	str	r3, [sp, #24]
 800a1e2:	9508      	str	r5, [sp, #32]
 800a1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2312      	movs	r3, #18
 800a1f0:	e7b0      	b.n	800a154 <_dtoa_r+0x26c>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	9308      	str	r3, [sp, #32]
 800a1f6:	e7f5      	b.n	800a1e4 <_dtoa_r+0x2fc>
 800a1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1fe:	e7b8      	b.n	800a172 <_dtoa_r+0x28a>
 800a200:	3101      	adds	r1, #1
 800a202:	6041      	str	r1, [r0, #4]
 800a204:	0052      	lsls	r2, r2, #1
 800a206:	e7b8      	b.n	800a17a <_dtoa_r+0x292>
 800a208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a20a:	9a01      	ldr	r2, [sp, #4]
 800a20c:	601a      	str	r2, [r3, #0]
 800a20e:	9b03      	ldr	r3, [sp, #12]
 800a210:	2b0e      	cmp	r3, #14
 800a212:	f200 809d 	bhi.w	800a350 <_dtoa_r+0x468>
 800a216:	2d00      	cmp	r5, #0
 800a218:	f000 809a 	beq.w	800a350 <_dtoa_r+0x468>
 800a21c:	9b00      	ldr	r3, [sp, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	dd32      	ble.n	800a288 <_dtoa_r+0x3a0>
 800a222:	4ab7      	ldr	r2, [pc, #732]	; (800a500 <_dtoa_r+0x618>)
 800a224:	f003 030f 	and.w	r3, r3, #15
 800a228:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a22c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a230:	9b00      	ldr	r3, [sp, #0]
 800a232:	05d8      	lsls	r0, r3, #23
 800a234:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a238:	d516      	bpl.n	800a268 <_dtoa_r+0x380>
 800a23a:	4bb2      	ldr	r3, [pc, #712]	; (800a504 <_dtoa_r+0x61c>)
 800a23c:	ec51 0b19 	vmov	r0, r1, d9
 800a240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a244:	f7f6 faea 	bl	800081c <__aeabi_ddiv>
 800a248:	f007 070f 	and.w	r7, r7, #15
 800a24c:	4682      	mov	sl, r0
 800a24e:	468b      	mov	fp, r1
 800a250:	2503      	movs	r5, #3
 800a252:	4eac      	ldr	r6, [pc, #688]	; (800a504 <_dtoa_r+0x61c>)
 800a254:	b957      	cbnz	r7, 800a26c <_dtoa_r+0x384>
 800a256:	4642      	mov	r2, r8
 800a258:	464b      	mov	r3, r9
 800a25a:	4650      	mov	r0, sl
 800a25c:	4659      	mov	r1, fp
 800a25e:	f7f6 fadd 	bl	800081c <__aeabi_ddiv>
 800a262:	4682      	mov	sl, r0
 800a264:	468b      	mov	fp, r1
 800a266:	e028      	b.n	800a2ba <_dtoa_r+0x3d2>
 800a268:	2502      	movs	r5, #2
 800a26a:	e7f2      	b.n	800a252 <_dtoa_r+0x36a>
 800a26c:	07f9      	lsls	r1, r7, #31
 800a26e:	d508      	bpl.n	800a282 <_dtoa_r+0x39a>
 800a270:	4640      	mov	r0, r8
 800a272:	4649      	mov	r1, r9
 800a274:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a278:	f7f6 f9a6 	bl	80005c8 <__aeabi_dmul>
 800a27c:	3501      	adds	r5, #1
 800a27e:	4680      	mov	r8, r0
 800a280:	4689      	mov	r9, r1
 800a282:	107f      	asrs	r7, r7, #1
 800a284:	3608      	adds	r6, #8
 800a286:	e7e5      	b.n	800a254 <_dtoa_r+0x36c>
 800a288:	f000 809b 	beq.w	800a3c2 <_dtoa_r+0x4da>
 800a28c:	9b00      	ldr	r3, [sp, #0]
 800a28e:	4f9d      	ldr	r7, [pc, #628]	; (800a504 <_dtoa_r+0x61c>)
 800a290:	425e      	negs	r6, r3
 800a292:	4b9b      	ldr	r3, [pc, #620]	; (800a500 <_dtoa_r+0x618>)
 800a294:	f006 020f 	and.w	r2, r6, #15
 800a298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a0:	ec51 0b19 	vmov	r0, r1, d9
 800a2a4:	f7f6 f990 	bl	80005c8 <__aeabi_dmul>
 800a2a8:	1136      	asrs	r6, r6, #4
 800a2aa:	4682      	mov	sl, r0
 800a2ac:	468b      	mov	fp, r1
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	2502      	movs	r5, #2
 800a2b2:	2e00      	cmp	r6, #0
 800a2b4:	d17a      	bne.n	800a3ac <_dtoa_r+0x4c4>
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1d3      	bne.n	800a262 <_dtoa_r+0x37a>
 800a2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f000 8082 	beq.w	800a3c6 <_dtoa_r+0x4de>
 800a2c2:	4b91      	ldr	r3, [pc, #580]	; (800a508 <_dtoa_r+0x620>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	4650      	mov	r0, sl
 800a2c8:	4659      	mov	r1, fp
 800a2ca:	f7f6 fbef 	bl	8000aac <__aeabi_dcmplt>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d079      	beq.n	800a3c6 <_dtoa_r+0x4de>
 800a2d2:	9b03      	ldr	r3, [sp, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d076      	beq.n	800a3c6 <_dtoa_r+0x4de>
 800a2d8:	9b02      	ldr	r3, [sp, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dd36      	ble.n	800a34c <_dtoa_r+0x464>
 800a2de:	9b00      	ldr	r3, [sp, #0]
 800a2e0:	4650      	mov	r0, sl
 800a2e2:	4659      	mov	r1, fp
 800a2e4:	1e5f      	subs	r7, r3, #1
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	4b88      	ldr	r3, [pc, #544]	; (800a50c <_dtoa_r+0x624>)
 800a2ea:	f7f6 f96d 	bl	80005c8 <__aeabi_dmul>
 800a2ee:	9e02      	ldr	r6, [sp, #8]
 800a2f0:	4682      	mov	sl, r0
 800a2f2:	468b      	mov	fp, r1
 800a2f4:	3501      	adds	r5, #1
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f7f6 f8fc 	bl	80004f4 <__aeabi_i2d>
 800a2fc:	4652      	mov	r2, sl
 800a2fe:	465b      	mov	r3, fp
 800a300:	f7f6 f962 	bl	80005c8 <__aeabi_dmul>
 800a304:	4b82      	ldr	r3, [pc, #520]	; (800a510 <_dtoa_r+0x628>)
 800a306:	2200      	movs	r2, #0
 800a308:	f7f5 ffa8 	bl	800025c <__adddf3>
 800a30c:	46d0      	mov	r8, sl
 800a30e:	46d9      	mov	r9, fp
 800a310:	4682      	mov	sl, r0
 800a312:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a316:	2e00      	cmp	r6, #0
 800a318:	d158      	bne.n	800a3cc <_dtoa_r+0x4e4>
 800a31a:	4b7e      	ldr	r3, [pc, #504]	; (800a514 <_dtoa_r+0x62c>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	4640      	mov	r0, r8
 800a320:	4649      	mov	r1, r9
 800a322:	f7f5 ff99 	bl	8000258 <__aeabi_dsub>
 800a326:	4652      	mov	r2, sl
 800a328:	465b      	mov	r3, fp
 800a32a:	4680      	mov	r8, r0
 800a32c:	4689      	mov	r9, r1
 800a32e:	f7f6 fbdb 	bl	8000ae8 <__aeabi_dcmpgt>
 800a332:	2800      	cmp	r0, #0
 800a334:	f040 8295 	bne.w	800a862 <_dtoa_r+0x97a>
 800a338:	4652      	mov	r2, sl
 800a33a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a33e:	4640      	mov	r0, r8
 800a340:	4649      	mov	r1, r9
 800a342:	f7f6 fbb3 	bl	8000aac <__aeabi_dcmplt>
 800a346:	2800      	cmp	r0, #0
 800a348:	f040 8289 	bne.w	800a85e <_dtoa_r+0x976>
 800a34c:	ec5b ab19 	vmov	sl, fp, d9
 800a350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a352:	2b00      	cmp	r3, #0
 800a354:	f2c0 8148 	blt.w	800a5e8 <_dtoa_r+0x700>
 800a358:	9a00      	ldr	r2, [sp, #0]
 800a35a:	2a0e      	cmp	r2, #14
 800a35c:	f300 8144 	bgt.w	800a5e8 <_dtoa_r+0x700>
 800a360:	4b67      	ldr	r3, [pc, #412]	; (800a500 <_dtoa_r+0x618>)
 800a362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a366:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f280 80d5 	bge.w	800a51c <_dtoa_r+0x634>
 800a372:	9b03      	ldr	r3, [sp, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	f300 80d1 	bgt.w	800a51c <_dtoa_r+0x634>
 800a37a:	f040 826f 	bne.w	800a85c <_dtoa_r+0x974>
 800a37e:	4b65      	ldr	r3, [pc, #404]	; (800a514 <_dtoa_r+0x62c>)
 800a380:	2200      	movs	r2, #0
 800a382:	4640      	mov	r0, r8
 800a384:	4649      	mov	r1, r9
 800a386:	f7f6 f91f 	bl	80005c8 <__aeabi_dmul>
 800a38a:	4652      	mov	r2, sl
 800a38c:	465b      	mov	r3, fp
 800a38e:	f7f6 fba1 	bl	8000ad4 <__aeabi_dcmpge>
 800a392:	9e03      	ldr	r6, [sp, #12]
 800a394:	4637      	mov	r7, r6
 800a396:	2800      	cmp	r0, #0
 800a398:	f040 8245 	bne.w	800a826 <_dtoa_r+0x93e>
 800a39c:	9d01      	ldr	r5, [sp, #4]
 800a39e:	2331      	movs	r3, #49	; 0x31
 800a3a0:	f805 3b01 	strb.w	r3, [r5], #1
 800a3a4:	9b00      	ldr	r3, [sp, #0]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	e240      	b.n	800a82e <_dtoa_r+0x946>
 800a3ac:	07f2      	lsls	r2, r6, #31
 800a3ae:	d505      	bpl.n	800a3bc <_dtoa_r+0x4d4>
 800a3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b4:	f7f6 f908 	bl	80005c8 <__aeabi_dmul>
 800a3b8:	3501      	adds	r5, #1
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	1076      	asrs	r6, r6, #1
 800a3be:	3708      	adds	r7, #8
 800a3c0:	e777      	b.n	800a2b2 <_dtoa_r+0x3ca>
 800a3c2:	2502      	movs	r5, #2
 800a3c4:	e779      	b.n	800a2ba <_dtoa_r+0x3d2>
 800a3c6:	9f00      	ldr	r7, [sp, #0]
 800a3c8:	9e03      	ldr	r6, [sp, #12]
 800a3ca:	e794      	b.n	800a2f6 <_dtoa_r+0x40e>
 800a3cc:	9901      	ldr	r1, [sp, #4]
 800a3ce:	4b4c      	ldr	r3, [pc, #304]	; (800a500 <_dtoa_r+0x618>)
 800a3d0:	4431      	add	r1, r6
 800a3d2:	910d      	str	r1, [sp, #52]	; 0x34
 800a3d4:	9908      	ldr	r1, [sp, #32]
 800a3d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	d043      	beq.n	800a46a <_dtoa_r+0x582>
 800a3e2:	494d      	ldr	r1, [pc, #308]	; (800a518 <_dtoa_r+0x630>)
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	f7f6 fa19 	bl	800081c <__aeabi_ddiv>
 800a3ea:	4652      	mov	r2, sl
 800a3ec:	465b      	mov	r3, fp
 800a3ee:	f7f5 ff33 	bl	8000258 <__aeabi_dsub>
 800a3f2:	9d01      	ldr	r5, [sp, #4]
 800a3f4:	4682      	mov	sl, r0
 800a3f6:	468b      	mov	fp, r1
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	4640      	mov	r0, r8
 800a3fc:	f7f6 fb94 	bl	8000b28 <__aeabi_d2iz>
 800a400:	4606      	mov	r6, r0
 800a402:	f7f6 f877 	bl	80004f4 <__aeabi_i2d>
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	4640      	mov	r0, r8
 800a40c:	4649      	mov	r1, r9
 800a40e:	f7f5 ff23 	bl	8000258 <__aeabi_dsub>
 800a412:	3630      	adds	r6, #48	; 0x30
 800a414:	f805 6b01 	strb.w	r6, [r5], #1
 800a418:	4652      	mov	r2, sl
 800a41a:	465b      	mov	r3, fp
 800a41c:	4680      	mov	r8, r0
 800a41e:	4689      	mov	r9, r1
 800a420:	f7f6 fb44 	bl	8000aac <__aeabi_dcmplt>
 800a424:	2800      	cmp	r0, #0
 800a426:	d163      	bne.n	800a4f0 <_dtoa_r+0x608>
 800a428:	4642      	mov	r2, r8
 800a42a:	464b      	mov	r3, r9
 800a42c:	4936      	ldr	r1, [pc, #216]	; (800a508 <_dtoa_r+0x620>)
 800a42e:	2000      	movs	r0, #0
 800a430:	f7f5 ff12 	bl	8000258 <__aeabi_dsub>
 800a434:	4652      	mov	r2, sl
 800a436:	465b      	mov	r3, fp
 800a438:	f7f6 fb38 	bl	8000aac <__aeabi_dcmplt>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	f040 80b5 	bne.w	800a5ac <_dtoa_r+0x6c4>
 800a442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a444:	429d      	cmp	r5, r3
 800a446:	d081      	beq.n	800a34c <_dtoa_r+0x464>
 800a448:	4b30      	ldr	r3, [pc, #192]	; (800a50c <_dtoa_r+0x624>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	4650      	mov	r0, sl
 800a44e:	4659      	mov	r1, fp
 800a450:	f7f6 f8ba 	bl	80005c8 <__aeabi_dmul>
 800a454:	4b2d      	ldr	r3, [pc, #180]	; (800a50c <_dtoa_r+0x624>)
 800a456:	4682      	mov	sl, r0
 800a458:	468b      	mov	fp, r1
 800a45a:	4640      	mov	r0, r8
 800a45c:	4649      	mov	r1, r9
 800a45e:	2200      	movs	r2, #0
 800a460:	f7f6 f8b2 	bl	80005c8 <__aeabi_dmul>
 800a464:	4680      	mov	r8, r0
 800a466:	4689      	mov	r9, r1
 800a468:	e7c6      	b.n	800a3f8 <_dtoa_r+0x510>
 800a46a:	4650      	mov	r0, sl
 800a46c:	4659      	mov	r1, fp
 800a46e:	f7f6 f8ab 	bl	80005c8 <__aeabi_dmul>
 800a472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a474:	9d01      	ldr	r5, [sp, #4]
 800a476:	930f      	str	r3, [sp, #60]	; 0x3c
 800a478:	4682      	mov	sl, r0
 800a47a:	468b      	mov	fp, r1
 800a47c:	4649      	mov	r1, r9
 800a47e:	4640      	mov	r0, r8
 800a480:	f7f6 fb52 	bl	8000b28 <__aeabi_d2iz>
 800a484:	4606      	mov	r6, r0
 800a486:	f7f6 f835 	bl	80004f4 <__aeabi_i2d>
 800a48a:	3630      	adds	r6, #48	; 0x30
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4640      	mov	r0, r8
 800a492:	4649      	mov	r1, r9
 800a494:	f7f5 fee0 	bl	8000258 <__aeabi_dsub>
 800a498:	f805 6b01 	strb.w	r6, [r5], #1
 800a49c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a49e:	429d      	cmp	r5, r3
 800a4a0:	4680      	mov	r8, r0
 800a4a2:	4689      	mov	r9, r1
 800a4a4:	f04f 0200 	mov.w	r2, #0
 800a4a8:	d124      	bne.n	800a4f4 <_dtoa_r+0x60c>
 800a4aa:	4b1b      	ldr	r3, [pc, #108]	; (800a518 <_dtoa_r+0x630>)
 800a4ac:	4650      	mov	r0, sl
 800a4ae:	4659      	mov	r1, fp
 800a4b0:	f7f5 fed4 	bl	800025c <__adddf3>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7f6 fb14 	bl	8000ae8 <__aeabi_dcmpgt>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d173      	bne.n	800a5ac <_dtoa_r+0x6c4>
 800a4c4:	4652      	mov	r2, sl
 800a4c6:	465b      	mov	r3, fp
 800a4c8:	4913      	ldr	r1, [pc, #76]	; (800a518 <_dtoa_r+0x630>)
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	f7f5 fec4 	bl	8000258 <__aeabi_dsub>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	4640      	mov	r0, r8
 800a4d6:	4649      	mov	r1, r9
 800a4d8:	f7f6 fae8 	bl	8000aac <__aeabi_dcmplt>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	f43f af35 	beq.w	800a34c <_dtoa_r+0x464>
 800a4e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4e4:	1e6b      	subs	r3, r5, #1
 800a4e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4ec:	2b30      	cmp	r3, #48	; 0x30
 800a4ee:	d0f8      	beq.n	800a4e2 <_dtoa_r+0x5fa>
 800a4f0:	9700      	str	r7, [sp, #0]
 800a4f2:	e049      	b.n	800a588 <_dtoa_r+0x6a0>
 800a4f4:	4b05      	ldr	r3, [pc, #20]	; (800a50c <_dtoa_r+0x624>)
 800a4f6:	f7f6 f867 	bl	80005c8 <__aeabi_dmul>
 800a4fa:	4680      	mov	r8, r0
 800a4fc:	4689      	mov	r9, r1
 800a4fe:	e7bd      	b.n	800a47c <_dtoa_r+0x594>
 800a500:	0800c820 	.word	0x0800c820
 800a504:	0800c7f8 	.word	0x0800c7f8
 800a508:	3ff00000 	.word	0x3ff00000
 800a50c:	40240000 	.word	0x40240000
 800a510:	401c0000 	.word	0x401c0000
 800a514:	40140000 	.word	0x40140000
 800a518:	3fe00000 	.word	0x3fe00000
 800a51c:	9d01      	ldr	r5, [sp, #4]
 800a51e:	4656      	mov	r6, sl
 800a520:	465f      	mov	r7, fp
 800a522:	4642      	mov	r2, r8
 800a524:	464b      	mov	r3, r9
 800a526:	4630      	mov	r0, r6
 800a528:	4639      	mov	r1, r7
 800a52a:	f7f6 f977 	bl	800081c <__aeabi_ddiv>
 800a52e:	f7f6 fafb 	bl	8000b28 <__aeabi_d2iz>
 800a532:	4682      	mov	sl, r0
 800a534:	f7f5 ffde 	bl	80004f4 <__aeabi_i2d>
 800a538:	4642      	mov	r2, r8
 800a53a:	464b      	mov	r3, r9
 800a53c:	f7f6 f844 	bl	80005c8 <__aeabi_dmul>
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	4630      	mov	r0, r6
 800a546:	4639      	mov	r1, r7
 800a548:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a54c:	f7f5 fe84 	bl	8000258 <__aeabi_dsub>
 800a550:	f805 6b01 	strb.w	r6, [r5], #1
 800a554:	9e01      	ldr	r6, [sp, #4]
 800a556:	9f03      	ldr	r7, [sp, #12]
 800a558:	1bae      	subs	r6, r5, r6
 800a55a:	42b7      	cmp	r7, r6
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	d135      	bne.n	800a5ce <_dtoa_r+0x6e6>
 800a562:	f7f5 fe7b 	bl	800025c <__adddf3>
 800a566:	4642      	mov	r2, r8
 800a568:	464b      	mov	r3, r9
 800a56a:	4606      	mov	r6, r0
 800a56c:	460f      	mov	r7, r1
 800a56e:	f7f6 fabb 	bl	8000ae8 <__aeabi_dcmpgt>
 800a572:	b9d0      	cbnz	r0, 800a5aa <_dtoa_r+0x6c2>
 800a574:	4642      	mov	r2, r8
 800a576:	464b      	mov	r3, r9
 800a578:	4630      	mov	r0, r6
 800a57a:	4639      	mov	r1, r7
 800a57c:	f7f6 fa8c 	bl	8000a98 <__aeabi_dcmpeq>
 800a580:	b110      	cbz	r0, 800a588 <_dtoa_r+0x6a0>
 800a582:	f01a 0f01 	tst.w	sl, #1
 800a586:	d110      	bne.n	800a5aa <_dtoa_r+0x6c2>
 800a588:	4620      	mov	r0, r4
 800a58a:	ee18 1a10 	vmov	r1, s16
 800a58e:	f000 fd09 	bl	800afa4 <_Bfree>
 800a592:	2300      	movs	r3, #0
 800a594:	9800      	ldr	r0, [sp, #0]
 800a596:	702b      	strb	r3, [r5, #0]
 800a598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a59a:	3001      	adds	r0, #1
 800a59c:	6018      	str	r0, [r3, #0]
 800a59e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f43f acf1 	beq.w	8009f88 <_dtoa_r+0xa0>
 800a5a6:	601d      	str	r5, [r3, #0]
 800a5a8:	e4ee      	b.n	8009f88 <_dtoa_r+0xa0>
 800a5aa:	9f00      	ldr	r7, [sp, #0]
 800a5ac:	462b      	mov	r3, r5
 800a5ae:	461d      	mov	r5, r3
 800a5b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5b4:	2a39      	cmp	r2, #57	; 0x39
 800a5b6:	d106      	bne.n	800a5c6 <_dtoa_r+0x6de>
 800a5b8:	9a01      	ldr	r2, [sp, #4]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d1f7      	bne.n	800a5ae <_dtoa_r+0x6c6>
 800a5be:	9901      	ldr	r1, [sp, #4]
 800a5c0:	2230      	movs	r2, #48	; 0x30
 800a5c2:	3701      	adds	r7, #1
 800a5c4:	700a      	strb	r2, [r1, #0]
 800a5c6:	781a      	ldrb	r2, [r3, #0]
 800a5c8:	3201      	adds	r2, #1
 800a5ca:	701a      	strb	r2, [r3, #0]
 800a5cc:	e790      	b.n	800a4f0 <_dtoa_r+0x608>
 800a5ce:	4ba6      	ldr	r3, [pc, #664]	; (800a868 <_dtoa_r+0x980>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f7f5 fff9 	bl	80005c8 <__aeabi_dmul>
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4606      	mov	r6, r0
 800a5dc:	460f      	mov	r7, r1
 800a5de:	f7f6 fa5b 	bl	8000a98 <__aeabi_dcmpeq>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	d09d      	beq.n	800a522 <_dtoa_r+0x63a>
 800a5e6:	e7cf      	b.n	800a588 <_dtoa_r+0x6a0>
 800a5e8:	9a08      	ldr	r2, [sp, #32]
 800a5ea:	2a00      	cmp	r2, #0
 800a5ec:	f000 80d7 	beq.w	800a79e <_dtoa_r+0x8b6>
 800a5f0:	9a06      	ldr	r2, [sp, #24]
 800a5f2:	2a01      	cmp	r2, #1
 800a5f4:	f300 80ba 	bgt.w	800a76c <_dtoa_r+0x884>
 800a5f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5fa:	2a00      	cmp	r2, #0
 800a5fc:	f000 80b2 	beq.w	800a764 <_dtoa_r+0x87c>
 800a600:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a604:	9e07      	ldr	r6, [sp, #28]
 800a606:	9d04      	ldr	r5, [sp, #16]
 800a608:	9a04      	ldr	r2, [sp, #16]
 800a60a:	441a      	add	r2, r3
 800a60c:	9204      	str	r2, [sp, #16]
 800a60e:	9a05      	ldr	r2, [sp, #20]
 800a610:	2101      	movs	r1, #1
 800a612:	441a      	add	r2, r3
 800a614:	4620      	mov	r0, r4
 800a616:	9205      	str	r2, [sp, #20]
 800a618:	f000 fd7c 	bl	800b114 <__i2b>
 800a61c:	4607      	mov	r7, r0
 800a61e:	2d00      	cmp	r5, #0
 800a620:	dd0c      	ble.n	800a63c <_dtoa_r+0x754>
 800a622:	9b05      	ldr	r3, [sp, #20]
 800a624:	2b00      	cmp	r3, #0
 800a626:	dd09      	ble.n	800a63c <_dtoa_r+0x754>
 800a628:	42ab      	cmp	r3, r5
 800a62a:	9a04      	ldr	r2, [sp, #16]
 800a62c:	bfa8      	it	ge
 800a62e:	462b      	movge	r3, r5
 800a630:	1ad2      	subs	r2, r2, r3
 800a632:	9204      	str	r2, [sp, #16]
 800a634:	9a05      	ldr	r2, [sp, #20]
 800a636:	1aed      	subs	r5, r5, r3
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	9305      	str	r3, [sp, #20]
 800a63c:	9b07      	ldr	r3, [sp, #28]
 800a63e:	b31b      	cbz	r3, 800a688 <_dtoa_r+0x7a0>
 800a640:	9b08      	ldr	r3, [sp, #32]
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 80af 	beq.w	800a7a6 <_dtoa_r+0x8be>
 800a648:	2e00      	cmp	r6, #0
 800a64a:	dd13      	ble.n	800a674 <_dtoa_r+0x78c>
 800a64c:	4639      	mov	r1, r7
 800a64e:	4632      	mov	r2, r6
 800a650:	4620      	mov	r0, r4
 800a652:	f000 fe1f 	bl	800b294 <__pow5mult>
 800a656:	ee18 2a10 	vmov	r2, s16
 800a65a:	4601      	mov	r1, r0
 800a65c:	4607      	mov	r7, r0
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 fd6e 	bl	800b140 <__multiply>
 800a664:	ee18 1a10 	vmov	r1, s16
 800a668:	4680      	mov	r8, r0
 800a66a:	4620      	mov	r0, r4
 800a66c:	f000 fc9a 	bl	800afa4 <_Bfree>
 800a670:	ee08 8a10 	vmov	s16, r8
 800a674:	9b07      	ldr	r3, [sp, #28]
 800a676:	1b9a      	subs	r2, r3, r6
 800a678:	d006      	beq.n	800a688 <_dtoa_r+0x7a0>
 800a67a:	ee18 1a10 	vmov	r1, s16
 800a67e:	4620      	mov	r0, r4
 800a680:	f000 fe08 	bl	800b294 <__pow5mult>
 800a684:	ee08 0a10 	vmov	s16, r0
 800a688:	2101      	movs	r1, #1
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 fd42 	bl	800b114 <__i2b>
 800a690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a692:	2b00      	cmp	r3, #0
 800a694:	4606      	mov	r6, r0
 800a696:	f340 8088 	ble.w	800a7aa <_dtoa_r+0x8c2>
 800a69a:	461a      	mov	r2, r3
 800a69c:	4601      	mov	r1, r0
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 fdf8 	bl	800b294 <__pow5mult>
 800a6a4:	9b06      	ldr	r3, [sp, #24]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	f340 8081 	ble.w	800a7b0 <_dtoa_r+0x8c8>
 800a6ae:	f04f 0800 	mov.w	r8, #0
 800a6b2:	6933      	ldr	r3, [r6, #16]
 800a6b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6b8:	6918      	ldr	r0, [r3, #16]
 800a6ba:	f000 fcdb 	bl	800b074 <__hi0bits>
 800a6be:	f1c0 0020 	rsb	r0, r0, #32
 800a6c2:	9b05      	ldr	r3, [sp, #20]
 800a6c4:	4418      	add	r0, r3
 800a6c6:	f010 001f 	ands.w	r0, r0, #31
 800a6ca:	f000 8092 	beq.w	800a7f2 <_dtoa_r+0x90a>
 800a6ce:	f1c0 0320 	rsb	r3, r0, #32
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	f340 808a 	ble.w	800a7ec <_dtoa_r+0x904>
 800a6d8:	f1c0 001c 	rsb	r0, r0, #28
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	4403      	add	r3, r0
 800a6e0:	9304      	str	r3, [sp, #16]
 800a6e2:	9b05      	ldr	r3, [sp, #20]
 800a6e4:	4403      	add	r3, r0
 800a6e6:	4405      	add	r5, r0
 800a6e8:	9305      	str	r3, [sp, #20]
 800a6ea:	9b04      	ldr	r3, [sp, #16]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	dd07      	ble.n	800a700 <_dtoa_r+0x818>
 800a6f0:	ee18 1a10 	vmov	r1, s16
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f000 fe26 	bl	800b348 <__lshift>
 800a6fc:	ee08 0a10 	vmov	s16, r0
 800a700:	9b05      	ldr	r3, [sp, #20]
 800a702:	2b00      	cmp	r3, #0
 800a704:	dd05      	ble.n	800a712 <_dtoa_r+0x82a>
 800a706:	4631      	mov	r1, r6
 800a708:	461a      	mov	r2, r3
 800a70a:	4620      	mov	r0, r4
 800a70c:	f000 fe1c 	bl	800b348 <__lshift>
 800a710:	4606      	mov	r6, r0
 800a712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a714:	2b00      	cmp	r3, #0
 800a716:	d06e      	beq.n	800a7f6 <_dtoa_r+0x90e>
 800a718:	ee18 0a10 	vmov	r0, s16
 800a71c:	4631      	mov	r1, r6
 800a71e:	f000 fe83 	bl	800b428 <__mcmp>
 800a722:	2800      	cmp	r0, #0
 800a724:	da67      	bge.n	800a7f6 <_dtoa_r+0x90e>
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	3b01      	subs	r3, #1
 800a72a:	ee18 1a10 	vmov	r1, s16
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	220a      	movs	r2, #10
 800a732:	2300      	movs	r3, #0
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fc57 	bl	800afe8 <__multadd>
 800a73a:	9b08      	ldr	r3, [sp, #32]
 800a73c:	ee08 0a10 	vmov	s16, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 81b1 	beq.w	800aaa8 <_dtoa_r+0xbc0>
 800a746:	2300      	movs	r3, #0
 800a748:	4639      	mov	r1, r7
 800a74a:	220a      	movs	r2, #10
 800a74c:	4620      	mov	r0, r4
 800a74e:	f000 fc4b 	bl	800afe8 <__multadd>
 800a752:	9b02      	ldr	r3, [sp, #8]
 800a754:	2b00      	cmp	r3, #0
 800a756:	4607      	mov	r7, r0
 800a758:	f300 808e 	bgt.w	800a878 <_dtoa_r+0x990>
 800a75c:	9b06      	ldr	r3, [sp, #24]
 800a75e:	2b02      	cmp	r3, #2
 800a760:	dc51      	bgt.n	800a806 <_dtoa_r+0x91e>
 800a762:	e089      	b.n	800a878 <_dtoa_r+0x990>
 800a764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a76a:	e74b      	b.n	800a604 <_dtoa_r+0x71c>
 800a76c:	9b03      	ldr	r3, [sp, #12]
 800a76e:	1e5e      	subs	r6, r3, #1
 800a770:	9b07      	ldr	r3, [sp, #28]
 800a772:	42b3      	cmp	r3, r6
 800a774:	bfbf      	itttt	lt
 800a776:	9b07      	ldrlt	r3, [sp, #28]
 800a778:	9607      	strlt	r6, [sp, #28]
 800a77a:	1af2      	sublt	r2, r6, r3
 800a77c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a77e:	bfb6      	itet	lt
 800a780:	189b      	addlt	r3, r3, r2
 800a782:	1b9e      	subge	r6, r3, r6
 800a784:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a786:	9b03      	ldr	r3, [sp, #12]
 800a788:	bfb8      	it	lt
 800a78a:	2600      	movlt	r6, #0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bfb7      	itett	lt
 800a790:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a794:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a798:	1a9d      	sublt	r5, r3, r2
 800a79a:	2300      	movlt	r3, #0
 800a79c:	e734      	b.n	800a608 <_dtoa_r+0x720>
 800a79e:	9e07      	ldr	r6, [sp, #28]
 800a7a0:	9d04      	ldr	r5, [sp, #16]
 800a7a2:	9f08      	ldr	r7, [sp, #32]
 800a7a4:	e73b      	b.n	800a61e <_dtoa_r+0x736>
 800a7a6:	9a07      	ldr	r2, [sp, #28]
 800a7a8:	e767      	b.n	800a67a <_dtoa_r+0x792>
 800a7aa:	9b06      	ldr	r3, [sp, #24]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	dc18      	bgt.n	800a7e2 <_dtoa_r+0x8fa>
 800a7b0:	f1ba 0f00 	cmp.w	sl, #0
 800a7b4:	d115      	bne.n	800a7e2 <_dtoa_r+0x8fa>
 800a7b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7ba:	b993      	cbnz	r3, 800a7e2 <_dtoa_r+0x8fa>
 800a7bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7c0:	0d1b      	lsrs	r3, r3, #20
 800a7c2:	051b      	lsls	r3, r3, #20
 800a7c4:	b183      	cbz	r3, 800a7e8 <_dtoa_r+0x900>
 800a7c6:	9b04      	ldr	r3, [sp, #16]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	9b05      	ldr	r3, [sp, #20]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	9305      	str	r3, [sp, #20]
 800a7d2:	f04f 0801 	mov.w	r8, #1
 800a7d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f47f af6a 	bne.w	800a6b2 <_dtoa_r+0x7ca>
 800a7de:	2001      	movs	r0, #1
 800a7e0:	e76f      	b.n	800a6c2 <_dtoa_r+0x7da>
 800a7e2:	f04f 0800 	mov.w	r8, #0
 800a7e6:	e7f6      	b.n	800a7d6 <_dtoa_r+0x8ee>
 800a7e8:	4698      	mov	r8, r3
 800a7ea:	e7f4      	b.n	800a7d6 <_dtoa_r+0x8ee>
 800a7ec:	f43f af7d 	beq.w	800a6ea <_dtoa_r+0x802>
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	301c      	adds	r0, #28
 800a7f4:	e772      	b.n	800a6dc <_dtoa_r+0x7f4>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dc37      	bgt.n	800a86c <_dtoa_r+0x984>
 800a7fc:	9b06      	ldr	r3, [sp, #24]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	dd34      	ble.n	800a86c <_dtoa_r+0x984>
 800a802:	9b03      	ldr	r3, [sp, #12]
 800a804:	9302      	str	r3, [sp, #8]
 800a806:	9b02      	ldr	r3, [sp, #8]
 800a808:	b96b      	cbnz	r3, 800a826 <_dtoa_r+0x93e>
 800a80a:	4631      	mov	r1, r6
 800a80c:	2205      	movs	r2, #5
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 fbea 	bl	800afe8 <__multadd>
 800a814:	4601      	mov	r1, r0
 800a816:	4606      	mov	r6, r0
 800a818:	ee18 0a10 	vmov	r0, s16
 800a81c:	f000 fe04 	bl	800b428 <__mcmp>
 800a820:	2800      	cmp	r0, #0
 800a822:	f73f adbb 	bgt.w	800a39c <_dtoa_r+0x4b4>
 800a826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a828:	9d01      	ldr	r5, [sp, #4]
 800a82a:	43db      	mvns	r3, r3
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	f04f 0800 	mov.w	r8, #0
 800a832:	4631      	mov	r1, r6
 800a834:	4620      	mov	r0, r4
 800a836:	f000 fbb5 	bl	800afa4 <_Bfree>
 800a83a:	2f00      	cmp	r7, #0
 800a83c:	f43f aea4 	beq.w	800a588 <_dtoa_r+0x6a0>
 800a840:	f1b8 0f00 	cmp.w	r8, #0
 800a844:	d005      	beq.n	800a852 <_dtoa_r+0x96a>
 800a846:	45b8      	cmp	r8, r7
 800a848:	d003      	beq.n	800a852 <_dtoa_r+0x96a>
 800a84a:	4641      	mov	r1, r8
 800a84c:	4620      	mov	r0, r4
 800a84e:	f000 fba9 	bl	800afa4 <_Bfree>
 800a852:	4639      	mov	r1, r7
 800a854:	4620      	mov	r0, r4
 800a856:	f000 fba5 	bl	800afa4 <_Bfree>
 800a85a:	e695      	b.n	800a588 <_dtoa_r+0x6a0>
 800a85c:	2600      	movs	r6, #0
 800a85e:	4637      	mov	r7, r6
 800a860:	e7e1      	b.n	800a826 <_dtoa_r+0x93e>
 800a862:	9700      	str	r7, [sp, #0]
 800a864:	4637      	mov	r7, r6
 800a866:	e599      	b.n	800a39c <_dtoa_r+0x4b4>
 800a868:	40240000 	.word	0x40240000
 800a86c:	9b08      	ldr	r3, [sp, #32]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 80ca 	beq.w	800aa08 <_dtoa_r+0xb20>
 800a874:	9b03      	ldr	r3, [sp, #12]
 800a876:	9302      	str	r3, [sp, #8]
 800a878:	2d00      	cmp	r5, #0
 800a87a:	dd05      	ble.n	800a888 <_dtoa_r+0x9a0>
 800a87c:	4639      	mov	r1, r7
 800a87e:	462a      	mov	r2, r5
 800a880:	4620      	mov	r0, r4
 800a882:	f000 fd61 	bl	800b348 <__lshift>
 800a886:	4607      	mov	r7, r0
 800a888:	f1b8 0f00 	cmp.w	r8, #0
 800a88c:	d05b      	beq.n	800a946 <_dtoa_r+0xa5e>
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	4620      	mov	r0, r4
 800a892:	f000 fb47 	bl	800af24 <_Balloc>
 800a896:	4605      	mov	r5, r0
 800a898:	b928      	cbnz	r0, 800a8a6 <_dtoa_r+0x9be>
 800a89a:	4b87      	ldr	r3, [pc, #540]	; (800aab8 <_dtoa_r+0xbd0>)
 800a89c:	4602      	mov	r2, r0
 800a89e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a8a2:	f7ff bb3b 	b.w	8009f1c <_dtoa_r+0x34>
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	3202      	adds	r2, #2
 800a8aa:	0092      	lsls	r2, r2, #2
 800a8ac:	f107 010c 	add.w	r1, r7, #12
 800a8b0:	300c      	adds	r0, #12
 800a8b2:	f7fe fb15 	bl	8008ee0 <memcpy>
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 fd44 	bl	800b348 <__lshift>
 800a8c0:	9b01      	ldr	r3, [sp, #4]
 800a8c2:	f103 0901 	add.w	r9, r3, #1
 800a8c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	9305      	str	r3, [sp, #20]
 800a8ce:	f00a 0301 	and.w	r3, sl, #1
 800a8d2:	46b8      	mov	r8, r7
 800a8d4:	9304      	str	r3, [sp, #16]
 800a8d6:	4607      	mov	r7, r0
 800a8d8:	4631      	mov	r1, r6
 800a8da:	ee18 0a10 	vmov	r0, s16
 800a8de:	f7ff fa77 	bl	8009dd0 <quorem>
 800a8e2:	4641      	mov	r1, r8
 800a8e4:	9002      	str	r0, [sp, #8]
 800a8e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a8ea:	ee18 0a10 	vmov	r0, s16
 800a8ee:	f000 fd9b 	bl	800b428 <__mcmp>
 800a8f2:	463a      	mov	r2, r7
 800a8f4:	9003      	str	r0, [sp, #12]
 800a8f6:	4631      	mov	r1, r6
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 fdb1 	bl	800b460 <__mdiff>
 800a8fe:	68c2      	ldr	r2, [r0, #12]
 800a900:	f109 3bff 	add.w	fp, r9, #4294967295
 800a904:	4605      	mov	r5, r0
 800a906:	bb02      	cbnz	r2, 800a94a <_dtoa_r+0xa62>
 800a908:	4601      	mov	r1, r0
 800a90a:	ee18 0a10 	vmov	r0, s16
 800a90e:	f000 fd8b 	bl	800b428 <__mcmp>
 800a912:	4602      	mov	r2, r0
 800a914:	4629      	mov	r1, r5
 800a916:	4620      	mov	r0, r4
 800a918:	9207      	str	r2, [sp, #28]
 800a91a:	f000 fb43 	bl	800afa4 <_Bfree>
 800a91e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a922:	ea43 0102 	orr.w	r1, r3, r2
 800a926:	9b04      	ldr	r3, [sp, #16]
 800a928:	430b      	orrs	r3, r1
 800a92a:	464d      	mov	r5, r9
 800a92c:	d10f      	bne.n	800a94e <_dtoa_r+0xa66>
 800a92e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a932:	d02a      	beq.n	800a98a <_dtoa_r+0xaa2>
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	dd02      	ble.n	800a940 <_dtoa_r+0xa58>
 800a93a:	9b02      	ldr	r3, [sp, #8]
 800a93c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a940:	f88b a000 	strb.w	sl, [fp]
 800a944:	e775      	b.n	800a832 <_dtoa_r+0x94a>
 800a946:	4638      	mov	r0, r7
 800a948:	e7ba      	b.n	800a8c0 <_dtoa_r+0x9d8>
 800a94a:	2201      	movs	r2, #1
 800a94c:	e7e2      	b.n	800a914 <_dtoa_r+0xa2c>
 800a94e:	9b03      	ldr	r3, [sp, #12]
 800a950:	2b00      	cmp	r3, #0
 800a952:	db04      	blt.n	800a95e <_dtoa_r+0xa76>
 800a954:	9906      	ldr	r1, [sp, #24]
 800a956:	430b      	orrs	r3, r1
 800a958:	9904      	ldr	r1, [sp, #16]
 800a95a:	430b      	orrs	r3, r1
 800a95c:	d122      	bne.n	800a9a4 <_dtoa_r+0xabc>
 800a95e:	2a00      	cmp	r2, #0
 800a960:	ddee      	ble.n	800a940 <_dtoa_r+0xa58>
 800a962:	ee18 1a10 	vmov	r1, s16
 800a966:	2201      	movs	r2, #1
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fced 	bl	800b348 <__lshift>
 800a96e:	4631      	mov	r1, r6
 800a970:	ee08 0a10 	vmov	s16, r0
 800a974:	f000 fd58 	bl	800b428 <__mcmp>
 800a978:	2800      	cmp	r0, #0
 800a97a:	dc03      	bgt.n	800a984 <_dtoa_r+0xa9c>
 800a97c:	d1e0      	bne.n	800a940 <_dtoa_r+0xa58>
 800a97e:	f01a 0f01 	tst.w	sl, #1
 800a982:	d0dd      	beq.n	800a940 <_dtoa_r+0xa58>
 800a984:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a988:	d1d7      	bne.n	800a93a <_dtoa_r+0xa52>
 800a98a:	2339      	movs	r3, #57	; 0x39
 800a98c:	f88b 3000 	strb.w	r3, [fp]
 800a990:	462b      	mov	r3, r5
 800a992:	461d      	mov	r5, r3
 800a994:	3b01      	subs	r3, #1
 800a996:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a99a:	2a39      	cmp	r2, #57	; 0x39
 800a99c:	d071      	beq.n	800aa82 <_dtoa_r+0xb9a>
 800a99e:	3201      	adds	r2, #1
 800a9a0:	701a      	strb	r2, [r3, #0]
 800a9a2:	e746      	b.n	800a832 <_dtoa_r+0x94a>
 800a9a4:	2a00      	cmp	r2, #0
 800a9a6:	dd07      	ble.n	800a9b8 <_dtoa_r+0xad0>
 800a9a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9ac:	d0ed      	beq.n	800a98a <_dtoa_r+0xaa2>
 800a9ae:	f10a 0301 	add.w	r3, sl, #1
 800a9b2:	f88b 3000 	strb.w	r3, [fp]
 800a9b6:	e73c      	b.n	800a832 <_dtoa_r+0x94a>
 800a9b8:	9b05      	ldr	r3, [sp, #20]
 800a9ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a9be:	4599      	cmp	r9, r3
 800a9c0:	d047      	beq.n	800aa52 <_dtoa_r+0xb6a>
 800a9c2:	ee18 1a10 	vmov	r1, s16
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	220a      	movs	r2, #10
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f000 fb0c 	bl	800afe8 <__multadd>
 800a9d0:	45b8      	cmp	r8, r7
 800a9d2:	ee08 0a10 	vmov	s16, r0
 800a9d6:	f04f 0300 	mov.w	r3, #0
 800a9da:	f04f 020a 	mov.w	r2, #10
 800a9de:	4641      	mov	r1, r8
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	d106      	bne.n	800a9f2 <_dtoa_r+0xb0a>
 800a9e4:	f000 fb00 	bl	800afe8 <__multadd>
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	4607      	mov	r7, r0
 800a9ec:	f109 0901 	add.w	r9, r9, #1
 800a9f0:	e772      	b.n	800a8d8 <_dtoa_r+0x9f0>
 800a9f2:	f000 faf9 	bl	800afe8 <__multadd>
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	4680      	mov	r8, r0
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	220a      	movs	r2, #10
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 faf2 	bl	800afe8 <__multadd>
 800aa04:	4607      	mov	r7, r0
 800aa06:	e7f1      	b.n	800a9ec <_dtoa_r+0xb04>
 800aa08:	9b03      	ldr	r3, [sp, #12]
 800aa0a:	9302      	str	r3, [sp, #8]
 800aa0c:	9d01      	ldr	r5, [sp, #4]
 800aa0e:	ee18 0a10 	vmov	r0, s16
 800aa12:	4631      	mov	r1, r6
 800aa14:	f7ff f9dc 	bl	8009dd0 <quorem>
 800aa18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa1c:	9b01      	ldr	r3, [sp, #4]
 800aa1e:	f805 ab01 	strb.w	sl, [r5], #1
 800aa22:	1aea      	subs	r2, r5, r3
 800aa24:	9b02      	ldr	r3, [sp, #8]
 800aa26:	4293      	cmp	r3, r2
 800aa28:	dd09      	ble.n	800aa3e <_dtoa_r+0xb56>
 800aa2a:	ee18 1a10 	vmov	r1, s16
 800aa2e:	2300      	movs	r3, #0
 800aa30:	220a      	movs	r2, #10
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 fad8 	bl	800afe8 <__multadd>
 800aa38:	ee08 0a10 	vmov	s16, r0
 800aa3c:	e7e7      	b.n	800aa0e <_dtoa_r+0xb26>
 800aa3e:	9b02      	ldr	r3, [sp, #8]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	bfc8      	it	gt
 800aa44:	461d      	movgt	r5, r3
 800aa46:	9b01      	ldr	r3, [sp, #4]
 800aa48:	bfd8      	it	le
 800aa4a:	2501      	movle	r5, #1
 800aa4c:	441d      	add	r5, r3
 800aa4e:	f04f 0800 	mov.w	r8, #0
 800aa52:	ee18 1a10 	vmov	r1, s16
 800aa56:	2201      	movs	r2, #1
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f000 fc75 	bl	800b348 <__lshift>
 800aa5e:	4631      	mov	r1, r6
 800aa60:	ee08 0a10 	vmov	s16, r0
 800aa64:	f000 fce0 	bl	800b428 <__mcmp>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	dc91      	bgt.n	800a990 <_dtoa_r+0xaa8>
 800aa6c:	d102      	bne.n	800aa74 <_dtoa_r+0xb8c>
 800aa6e:	f01a 0f01 	tst.w	sl, #1
 800aa72:	d18d      	bne.n	800a990 <_dtoa_r+0xaa8>
 800aa74:	462b      	mov	r3, r5
 800aa76:	461d      	mov	r5, r3
 800aa78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa7c:	2a30      	cmp	r2, #48	; 0x30
 800aa7e:	d0fa      	beq.n	800aa76 <_dtoa_r+0xb8e>
 800aa80:	e6d7      	b.n	800a832 <_dtoa_r+0x94a>
 800aa82:	9a01      	ldr	r2, [sp, #4]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d184      	bne.n	800a992 <_dtoa_r+0xaaa>
 800aa88:	9b00      	ldr	r3, [sp, #0]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	2331      	movs	r3, #49	; 0x31
 800aa90:	7013      	strb	r3, [r2, #0]
 800aa92:	e6ce      	b.n	800a832 <_dtoa_r+0x94a>
 800aa94:	4b09      	ldr	r3, [pc, #36]	; (800aabc <_dtoa_r+0xbd4>)
 800aa96:	f7ff ba95 	b.w	8009fc4 <_dtoa_r+0xdc>
 800aa9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f47f aa6e 	bne.w	8009f7e <_dtoa_r+0x96>
 800aaa2:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <_dtoa_r+0xbd8>)
 800aaa4:	f7ff ba8e 	b.w	8009fc4 <_dtoa_r+0xdc>
 800aaa8:	9b02      	ldr	r3, [sp, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	dcae      	bgt.n	800aa0c <_dtoa_r+0xb24>
 800aaae:	9b06      	ldr	r3, [sp, #24]
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	f73f aea8 	bgt.w	800a806 <_dtoa_r+0x91e>
 800aab6:	e7a9      	b.n	800aa0c <_dtoa_r+0xb24>
 800aab8:	0800c724 	.word	0x0800c724
 800aabc:	0800c580 	.word	0x0800c580
 800aac0:	0800c6a5 	.word	0x0800c6a5

0800aac4 <__sflush_r>:
 800aac4:	898a      	ldrh	r2, [r1, #12]
 800aac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaca:	4605      	mov	r5, r0
 800aacc:	0710      	lsls	r0, r2, #28
 800aace:	460c      	mov	r4, r1
 800aad0:	d458      	bmi.n	800ab84 <__sflush_r+0xc0>
 800aad2:	684b      	ldr	r3, [r1, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dc05      	bgt.n	800aae4 <__sflush_r+0x20>
 800aad8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aada:	2b00      	cmp	r3, #0
 800aadc:	dc02      	bgt.n	800aae4 <__sflush_r+0x20>
 800aade:	2000      	movs	r0, #0
 800aae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aae6:	2e00      	cmp	r6, #0
 800aae8:	d0f9      	beq.n	800aade <__sflush_r+0x1a>
 800aaea:	2300      	movs	r3, #0
 800aaec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aaf0:	682f      	ldr	r7, [r5, #0]
 800aaf2:	602b      	str	r3, [r5, #0]
 800aaf4:	d032      	beq.n	800ab5c <__sflush_r+0x98>
 800aaf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aaf8:	89a3      	ldrh	r3, [r4, #12]
 800aafa:	075a      	lsls	r2, r3, #29
 800aafc:	d505      	bpl.n	800ab0a <__sflush_r+0x46>
 800aafe:	6863      	ldr	r3, [r4, #4]
 800ab00:	1ac0      	subs	r0, r0, r3
 800ab02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab04:	b10b      	cbz	r3, 800ab0a <__sflush_r+0x46>
 800ab06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab08:	1ac0      	subs	r0, r0, r3
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab10:	6a21      	ldr	r1, [r4, #32]
 800ab12:	4628      	mov	r0, r5
 800ab14:	47b0      	blx	r6
 800ab16:	1c43      	adds	r3, r0, #1
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	d106      	bne.n	800ab2a <__sflush_r+0x66>
 800ab1c:	6829      	ldr	r1, [r5, #0]
 800ab1e:	291d      	cmp	r1, #29
 800ab20:	d82c      	bhi.n	800ab7c <__sflush_r+0xb8>
 800ab22:	4a2a      	ldr	r2, [pc, #168]	; (800abcc <__sflush_r+0x108>)
 800ab24:	40ca      	lsrs	r2, r1
 800ab26:	07d6      	lsls	r6, r2, #31
 800ab28:	d528      	bpl.n	800ab7c <__sflush_r+0xb8>
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	6062      	str	r2, [r4, #4]
 800ab2e:	04d9      	lsls	r1, r3, #19
 800ab30:	6922      	ldr	r2, [r4, #16]
 800ab32:	6022      	str	r2, [r4, #0]
 800ab34:	d504      	bpl.n	800ab40 <__sflush_r+0x7c>
 800ab36:	1c42      	adds	r2, r0, #1
 800ab38:	d101      	bne.n	800ab3e <__sflush_r+0x7a>
 800ab3a:	682b      	ldr	r3, [r5, #0]
 800ab3c:	b903      	cbnz	r3, 800ab40 <__sflush_r+0x7c>
 800ab3e:	6560      	str	r0, [r4, #84]	; 0x54
 800ab40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab42:	602f      	str	r7, [r5, #0]
 800ab44:	2900      	cmp	r1, #0
 800ab46:	d0ca      	beq.n	800aade <__sflush_r+0x1a>
 800ab48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab4c:	4299      	cmp	r1, r3
 800ab4e:	d002      	beq.n	800ab56 <__sflush_r+0x92>
 800ab50:	4628      	mov	r0, r5
 800ab52:	f7fe f9db 	bl	8008f0c <_free_r>
 800ab56:	2000      	movs	r0, #0
 800ab58:	6360      	str	r0, [r4, #52]	; 0x34
 800ab5a:	e7c1      	b.n	800aae0 <__sflush_r+0x1c>
 800ab5c:	6a21      	ldr	r1, [r4, #32]
 800ab5e:	2301      	movs	r3, #1
 800ab60:	4628      	mov	r0, r5
 800ab62:	47b0      	blx	r6
 800ab64:	1c41      	adds	r1, r0, #1
 800ab66:	d1c7      	bne.n	800aaf8 <__sflush_r+0x34>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d0c4      	beq.n	800aaf8 <__sflush_r+0x34>
 800ab6e:	2b1d      	cmp	r3, #29
 800ab70:	d001      	beq.n	800ab76 <__sflush_r+0xb2>
 800ab72:	2b16      	cmp	r3, #22
 800ab74:	d101      	bne.n	800ab7a <__sflush_r+0xb6>
 800ab76:	602f      	str	r7, [r5, #0]
 800ab78:	e7b1      	b.n	800aade <__sflush_r+0x1a>
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab80:	81a3      	strh	r3, [r4, #12]
 800ab82:	e7ad      	b.n	800aae0 <__sflush_r+0x1c>
 800ab84:	690f      	ldr	r7, [r1, #16]
 800ab86:	2f00      	cmp	r7, #0
 800ab88:	d0a9      	beq.n	800aade <__sflush_r+0x1a>
 800ab8a:	0793      	lsls	r3, r2, #30
 800ab8c:	680e      	ldr	r6, [r1, #0]
 800ab8e:	bf08      	it	eq
 800ab90:	694b      	ldreq	r3, [r1, #20]
 800ab92:	600f      	str	r7, [r1, #0]
 800ab94:	bf18      	it	ne
 800ab96:	2300      	movne	r3, #0
 800ab98:	eba6 0807 	sub.w	r8, r6, r7
 800ab9c:	608b      	str	r3, [r1, #8]
 800ab9e:	f1b8 0f00 	cmp.w	r8, #0
 800aba2:	dd9c      	ble.n	800aade <__sflush_r+0x1a>
 800aba4:	6a21      	ldr	r1, [r4, #32]
 800aba6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aba8:	4643      	mov	r3, r8
 800abaa:	463a      	mov	r2, r7
 800abac:	4628      	mov	r0, r5
 800abae:	47b0      	blx	r6
 800abb0:	2800      	cmp	r0, #0
 800abb2:	dc06      	bgt.n	800abc2 <__sflush_r+0xfe>
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abba:	81a3      	strh	r3, [r4, #12]
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295
 800abc0:	e78e      	b.n	800aae0 <__sflush_r+0x1c>
 800abc2:	4407      	add	r7, r0
 800abc4:	eba8 0800 	sub.w	r8, r8, r0
 800abc8:	e7e9      	b.n	800ab9e <__sflush_r+0xda>
 800abca:	bf00      	nop
 800abcc:	20400001 	.word	0x20400001

0800abd0 <_fflush_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	690b      	ldr	r3, [r1, #16]
 800abd4:	4605      	mov	r5, r0
 800abd6:	460c      	mov	r4, r1
 800abd8:	b913      	cbnz	r3, 800abe0 <_fflush_r+0x10>
 800abda:	2500      	movs	r5, #0
 800abdc:	4628      	mov	r0, r5
 800abde:	bd38      	pop	{r3, r4, r5, pc}
 800abe0:	b118      	cbz	r0, 800abea <_fflush_r+0x1a>
 800abe2:	6983      	ldr	r3, [r0, #24]
 800abe4:	b90b      	cbnz	r3, 800abea <_fflush_r+0x1a>
 800abe6:	f000 f887 	bl	800acf8 <__sinit>
 800abea:	4b14      	ldr	r3, [pc, #80]	; (800ac3c <_fflush_r+0x6c>)
 800abec:	429c      	cmp	r4, r3
 800abee:	d11b      	bne.n	800ac28 <_fflush_r+0x58>
 800abf0:	686c      	ldr	r4, [r5, #4]
 800abf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0ef      	beq.n	800abda <_fflush_r+0xa>
 800abfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abfc:	07d0      	lsls	r0, r2, #31
 800abfe:	d404      	bmi.n	800ac0a <_fflush_r+0x3a>
 800ac00:	0599      	lsls	r1, r3, #22
 800ac02:	d402      	bmi.n	800ac0a <_fflush_r+0x3a>
 800ac04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac06:	f000 f91a 	bl	800ae3e <__retarget_lock_acquire_recursive>
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	f7ff ff59 	bl	800aac4 <__sflush_r>
 800ac12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac14:	07da      	lsls	r2, r3, #31
 800ac16:	4605      	mov	r5, r0
 800ac18:	d4e0      	bmi.n	800abdc <_fflush_r+0xc>
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	059b      	lsls	r3, r3, #22
 800ac1e:	d4dd      	bmi.n	800abdc <_fflush_r+0xc>
 800ac20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac22:	f000 f90d 	bl	800ae40 <__retarget_lock_release_recursive>
 800ac26:	e7d9      	b.n	800abdc <_fflush_r+0xc>
 800ac28:	4b05      	ldr	r3, [pc, #20]	; (800ac40 <_fflush_r+0x70>)
 800ac2a:	429c      	cmp	r4, r3
 800ac2c:	d101      	bne.n	800ac32 <_fflush_r+0x62>
 800ac2e:	68ac      	ldr	r4, [r5, #8]
 800ac30:	e7df      	b.n	800abf2 <_fflush_r+0x22>
 800ac32:	4b04      	ldr	r3, [pc, #16]	; (800ac44 <_fflush_r+0x74>)
 800ac34:	429c      	cmp	r4, r3
 800ac36:	bf08      	it	eq
 800ac38:	68ec      	ldreq	r4, [r5, #12]
 800ac3a:	e7da      	b.n	800abf2 <_fflush_r+0x22>
 800ac3c:	0800c758 	.word	0x0800c758
 800ac40:	0800c778 	.word	0x0800c778
 800ac44:	0800c738 	.word	0x0800c738

0800ac48 <std>:
 800ac48:	2300      	movs	r3, #0
 800ac4a:	b510      	push	{r4, lr}
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	e9c0 3300 	strd	r3, r3, [r0]
 800ac52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac56:	6083      	str	r3, [r0, #8]
 800ac58:	8181      	strh	r1, [r0, #12]
 800ac5a:	6643      	str	r3, [r0, #100]	; 0x64
 800ac5c:	81c2      	strh	r2, [r0, #14]
 800ac5e:	6183      	str	r3, [r0, #24]
 800ac60:	4619      	mov	r1, r3
 800ac62:	2208      	movs	r2, #8
 800ac64:	305c      	adds	r0, #92	; 0x5c
 800ac66:	f7fe f949 	bl	8008efc <memset>
 800ac6a:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <std+0x38>)
 800ac6c:	6263      	str	r3, [r4, #36]	; 0x24
 800ac6e:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <std+0x3c>)
 800ac70:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac72:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <std+0x40>)
 800ac74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac76:	4b05      	ldr	r3, [pc, #20]	; (800ac8c <std+0x44>)
 800ac78:	6224      	str	r4, [r4, #32]
 800ac7a:	6323      	str	r3, [r4, #48]	; 0x30
 800ac7c:	bd10      	pop	{r4, pc}
 800ac7e:	bf00      	nop
 800ac80:	0800bbc5 	.word	0x0800bbc5
 800ac84:	0800bbe7 	.word	0x0800bbe7
 800ac88:	0800bc1f 	.word	0x0800bc1f
 800ac8c:	0800bc43 	.word	0x0800bc43

0800ac90 <_cleanup_r>:
 800ac90:	4901      	ldr	r1, [pc, #4]	; (800ac98 <_cleanup_r+0x8>)
 800ac92:	f000 b8af 	b.w	800adf4 <_fwalk_reent>
 800ac96:	bf00      	nop
 800ac98:	0800abd1 	.word	0x0800abd1

0800ac9c <__sfmoreglue>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	2268      	movs	r2, #104	; 0x68
 800aca0:	1e4d      	subs	r5, r1, #1
 800aca2:	4355      	muls	r5, r2
 800aca4:	460e      	mov	r6, r1
 800aca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acaa:	f7fe f99b 	bl	8008fe4 <_malloc_r>
 800acae:	4604      	mov	r4, r0
 800acb0:	b140      	cbz	r0, 800acc4 <__sfmoreglue+0x28>
 800acb2:	2100      	movs	r1, #0
 800acb4:	e9c0 1600 	strd	r1, r6, [r0]
 800acb8:	300c      	adds	r0, #12
 800acba:	60a0      	str	r0, [r4, #8]
 800acbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acc0:	f7fe f91c 	bl	8008efc <memset>
 800acc4:	4620      	mov	r0, r4
 800acc6:	bd70      	pop	{r4, r5, r6, pc}

0800acc8 <__sfp_lock_acquire>:
 800acc8:	4801      	ldr	r0, [pc, #4]	; (800acd0 <__sfp_lock_acquire+0x8>)
 800acca:	f000 b8b8 	b.w	800ae3e <__retarget_lock_acquire_recursive>
 800acce:	bf00      	nop
 800acd0:	20000539 	.word	0x20000539

0800acd4 <__sfp_lock_release>:
 800acd4:	4801      	ldr	r0, [pc, #4]	; (800acdc <__sfp_lock_release+0x8>)
 800acd6:	f000 b8b3 	b.w	800ae40 <__retarget_lock_release_recursive>
 800acda:	bf00      	nop
 800acdc:	20000539 	.word	0x20000539

0800ace0 <__sinit_lock_acquire>:
 800ace0:	4801      	ldr	r0, [pc, #4]	; (800ace8 <__sinit_lock_acquire+0x8>)
 800ace2:	f000 b8ac 	b.w	800ae3e <__retarget_lock_acquire_recursive>
 800ace6:	bf00      	nop
 800ace8:	2000053a 	.word	0x2000053a

0800acec <__sinit_lock_release>:
 800acec:	4801      	ldr	r0, [pc, #4]	; (800acf4 <__sinit_lock_release+0x8>)
 800acee:	f000 b8a7 	b.w	800ae40 <__retarget_lock_release_recursive>
 800acf2:	bf00      	nop
 800acf4:	2000053a 	.word	0x2000053a

0800acf8 <__sinit>:
 800acf8:	b510      	push	{r4, lr}
 800acfa:	4604      	mov	r4, r0
 800acfc:	f7ff fff0 	bl	800ace0 <__sinit_lock_acquire>
 800ad00:	69a3      	ldr	r3, [r4, #24]
 800ad02:	b11b      	cbz	r3, 800ad0c <__sinit+0x14>
 800ad04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad08:	f7ff bff0 	b.w	800acec <__sinit_lock_release>
 800ad0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad10:	6523      	str	r3, [r4, #80]	; 0x50
 800ad12:	4b13      	ldr	r3, [pc, #76]	; (800ad60 <__sinit+0x68>)
 800ad14:	4a13      	ldr	r2, [pc, #76]	; (800ad64 <__sinit+0x6c>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad1a:	42a3      	cmp	r3, r4
 800ad1c:	bf04      	itt	eq
 800ad1e:	2301      	moveq	r3, #1
 800ad20:	61a3      	streq	r3, [r4, #24]
 800ad22:	4620      	mov	r0, r4
 800ad24:	f000 f820 	bl	800ad68 <__sfp>
 800ad28:	6060      	str	r0, [r4, #4]
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 f81c 	bl	800ad68 <__sfp>
 800ad30:	60a0      	str	r0, [r4, #8]
 800ad32:	4620      	mov	r0, r4
 800ad34:	f000 f818 	bl	800ad68 <__sfp>
 800ad38:	2200      	movs	r2, #0
 800ad3a:	60e0      	str	r0, [r4, #12]
 800ad3c:	2104      	movs	r1, #4
 800ad3e:	6860      	ldr	r0, [r4, #4]
 800ad40:	f7ff ff82 	bl	800ac48 <std>
 800ad44:	68a0      	ldr	r0, [r4, #8]
 800ad46:	2201      	movs	r2, #1
 800ad48:	2109      	movs	r1, #9
 800ad4a:	f7ff ff7d 	bl	800ac48 <std>
 800ad4e:	68e0      	ldr	r0, [r4, #12]
 800ad50:	2202      	movs	r2, #2
 800ad52:	2112      	movs	r1, #18
 800ad54:	f7ff ff78 	bl	800ac48 <std>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	61a3      	str	r3, [r4, #24]
 800ad5c:	e7d2      	b.n	800ad04 <__sinit+0xc>
 800ad5e:	bf00      	nop
 800ad60:	0800c56c 	.word	0x0800c56c
 800ad64:	0800ac91 	.word	0x0800ac91

0800ad68 <__sfp>:
 800ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6a:	4607      	mov	r7, r0
 800ad6c:	f7ff ffac 	bl	800acc8 <__sfp_lock_acquire>
 800ad70:	4b1e      	ldr	r3, [pc, #120]	; (800adec <__sfp+0x84>)
 800ad72:	681e      	ldr	r6, [r3, #0]
 800ad74:	69b3      	ldr	r3, [r6, #24]
 800ad76:	b913      	cbnz	r3, 800ad7e <__sfp+0x16>
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f7ff ffbd 	bl	800acf8 <__sinit>
 800ad7e:	3648      	adds	r6, #72	; 0x48
 800ad80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	d503      	bpl.n	800ad90 <__sfp+0x28>
 800ad88:	6833      	ldr	r3, [r6, #0]
 800ad8a:	b30b      	cbz	r3, 800add0 <__sfp+0x68>
 800ad8c:	6836      	ldr	r6, [r6, #0]
 800ad8e:	e7f7      	b.n	800ad80 <__sfp+0x18>
 800ad90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad94:	b9d5      	cbnz	r5, 800adcc <__sfp+0x64>
 800ad96:	4b16      	ldr	r3, [pc, #88]	; (800adf0 <__sfp+0x88>)
 800ad98:	60e3      	str	r3, [r4, #12]
 800ad9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad9e:	6665      	str	r5, [r4, #100]	; 0x64
 800ada0:	f000 f84c 	bl	800ae3c <__retarget_lock_init_recursive>
 800ada4:	f7ff ff96 	bl	800acd4 <__sfp_lock_release>
 800ada8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adb0:	6025      	str	r5, [r4, #0]
 800adb2:	61a5      	str	r5, [r4, #24]
 800adb4:	2208      	movs	r2, #8
 800adb6:	4629      	mov	r1, r5
 800adb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adbc:	f7fe f89e 	bl	8008efc <memset>
 800adc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800adc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800adc8:	4620      	mov	r0, r4
 800adca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adcc:	3468      	adds	r4, #104	; 0x68
 800adce:	e7d9      	b.n	800ad84 <__sfp+0x1c>
 800add0:	2104      	movs	r1, #4
 800add2:	4638      	mov	r0, r7
 800add4:	f7ff ff62 	bl	800ac9c <__sfmoreglue>
 800add8:	4604      	mov	r4, r0
 800adda:	6030      	str	r0, [r6, #0]
 800addc:	2800      	cmp	r0, #0
 800adde:	d1d5      	bne.n	800ad8c <__sfp+0x24>
 800ade0:	f7ff ff78 	bl	800acd4 <__sfp_lock_release>
 800ade4:	230c      	movs	r3, #12
 800ade6:	603b      	str	r3, [r7, #0]
 800ade8:	e7ee      	b.n	800adc8 <__sfp+0x60>
 800adea:	bf00      	nop
 800adec:	0800c56c 	.word	0x0800c56c
 800adf0:	ffff0001 	.word	0xffff0001

0800adf4 <_fwalk_reent>:
 800adf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf8:	4606      	mov	r6, r0
 800adfa:	4688      	mov	r8, r1
 800adfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae00:	2700      	movs	r7, #0
 800ae02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae06:	f1b9 0901 	subs.w	r9, r9, #1
 800ae0a:	d505      	bpl.n	800ae18 <_fwalk_reent+0x24>
 800ae0c:	6824      	ldr	r4, [r4, #0]
 800ae0e:	2c00      	cmp	r4, #0
 800ae10:	d1f7      	bne.n	800ae02 <_fwalk_reent+0xe>
 800ae12:	4638      	mov	r0, r7
 800ae14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae18:	89ab      	ldrh	r3, [r5, #12]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d907      	bls.n	800ae2e <_fwalk_reent+0x3a>
 800ae1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae22:	3301      	adds	r3, #1
 800ae24:	d003      	beq.n	800ae2e <_fwalk_reent+0x3a>
 800ae26:	4629      	mov	r1, r5
 800ae28:	4630      	mov	r0, r6
 800ae2a:	47c0      	blx	r8
 800ae2c:	4307      	orrs	r7, r0
 800ae2e:	3568      	adds	r5, #104	; 0x68
 800ae30:	e7e9      	b.n	800ae06 <_fwalk_reent+0x12>
	...

0800ae34 <_localeconv_r>:
 800ae34:	4800      	ldr	r0, [pc, #0]	; (800ae38 <_localeconv_r+0x4>)
 800ae36:	4770      	bx	lr
 800ae38:	20000164 	.word	0x20000164

0800ae3c <__retarget_lock_init_recursive>:
 800ae3c:	4770      	bx	lr

0800ae3e <__retarget_lock_acquire_recursive>:
 800ae3e:	4770      	bx	lr

0800ae40 <__retarget_lock_release_recursive>:
 800ae40:	4770      	bx	lr

0800ae42 <__swhatbuf_r>:
 800ae42:	b570      	push	{r4, r5, r6, lr}
 800ae44:	460e      	mov	r6, r1
 800ae46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae4a:	2900      	cmp	r1, #0
 800ae4c:	b096      	sub	sp, #88	; 0x58
 800ae4e:	4614      	mov	r4, r2
 800ae50:	461d      	mov	r5, r3
 800ae52:	da08      	bge.n	800ae66 <__swhatbuf_r+0x24>
 800ae54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	602a      	str	r2, [r5, #0]
 800ae5c:	061a      	lsls	r2, r3, #24
 800ae5e:	d410      	bmi.n	800ae82 <__swhatbuf_r+0x40>
 800ae60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae64:	e00e      	b.n	800ae84 <__swhatbuf_r+0x42>
 800ae66:	466a      	mov	r2, sp
 800ae68:	f000 ff42 	bl	800bcf0 <_fstat_r>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	dbf1      	blt.n	800ae54 <__swhatbuf_r+0x12>
 800ae70:	9a01      	ldr	r2, [sp, #4]
 800ae72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae7a:	425a      	negs	r2, r3
 800ae7c:	415a      	adcs	r2, r3
 800ae7e:	602a      	str	r2, [r5, #0]
 800ae80:	e7ee      	b.n	800ae60 <__swhatbuf_r+0x1e>
 800ae82:	2340      	movs	r3, #64	; 0x40
 800ae84:	2000      	movs	r0, #0
 800ae86:	6023      	str	r3, [r4, #0]
 800ae88:	b016      	add	sp, #88	; 0x58
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}

0800ae8c <__smakebuf_r>:
 800ae8c:	898b      	ldrh	r3, [r1, #12]
 800ae8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae90:	079d      	lsls	r5, r3, #30
 800ae92:	4606      	mov	r6, r0
 800ae94:	460c      	mov	r4, r1
 800ae96:	d507      	bpl.n	800aea8 <__smakebuf_r+0x1c>
 800ae98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	6123      	str	r3, [r4, #16]
 800aea0:	2301      	movs	r3, #1
 800aea2:	6163      	str	r3, [r4, #20]
 800aea4:	b002      	add	sp, #8
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	ab01      	add	r3, sp, #4
 800aeaa:	466a      	mov	r2, sp
 800aeac:	f7ff ffc9 	bl	800ae42 <__swhatbuf_r>
 800aeb0:	9900      	ldr	r1, [sp, #0]
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f7fe f895 	bl	8008fe4 <_malloc_r>
 800aeba:	b948      	cbnz	r0, 800aed0 <__smakebuf_r+0x44>
 800aebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec0:	059a      	lsls	r2, r3, #22
 800aec2:	d4ef      	bmi.n	800aea4 <__smakebuf_r+0x18>
 800aec4:	f023 0303 	bic.w	r3, r3, #3
 800aec8:	f043 0302 	orr.w	r3, r3, #2
 800aecc:	81a3      	strh	r3, [r4, #12]
 800aece:	e7e3      	b.n	800ae98 <__smakebuf_r+0xc>
 800aed0:	4b0d      	ldr	r3, [pc, #52]	; (800af08 <__smakebuf_r+0x7c>)
 800aed2:	62b3      	str	r3, [r6, #40]	; 0x28
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	6020      	str	r0, [r4, #0]
 800aed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aedc:	81a3      	strh	r3, [r4, #12]
 800aede:	9b00      	ldr	r3, [sp, #0]
 800aee0:	6163      	str	r3, [r4, #20]
 800aee2:	9b01      	ldr	r3, [sp, #4]
 800aee4:	6120      	str	r0, [r4, #16]
 800aee6:	b15b      	cbz	r3, 800af00 <__smakebuf_r+0x74>
 800aee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeec:	4630      	mov	r0, r6
 800aeee:	f000 ff11 	bl	800bd14 <_isatty_r>
 800aef2:	b128      	cbz	r0, 800af00 <__smakebuf_r+0x74>
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	f023 0303 	bic.w	r3, r3, #3
 800aefa:	f043 0301 	orr.w	r3, r3, #1
 800aefe:	81a3      	strh	r3, [r4, #12]
 800af00:	89a0      	ldrh	r0, [r4, #12]
 800af02:	4305      	orrs	r5, r0
 800af04:	81a5      	strh	r5, [r4, #12]
 800af06:	e7cd      	b.n	800aea4 <__smakebuf_r+0x18>
 800af08:	0800ac91 	.word	0x0800ac91

0800af0c <__malloc_lock>:
 800af0c:	4801      	ldr	r0, [pc, #4]	; (800af14 <__malloc_lock+0x8>)
 800af0e:	f7ff bf96 	b.w	800ae3e <__retarget_lock_acquire_recursive>
 800af12:	bf00      	nop
 800af14:	20000538 	.word	0x20000538

0800af18 <__malloc_unlock>:
 800af18:	4801      	ldr	r0, [pc, #4]	; (800af20 <__malloc_unlock+0x8>)
 800af1a:	f7ff bf91 	b.w	800ae40 <__retarget_lock_release_recursive>
 800af1e:	bf00      	nop
 800af20:	20000538 	.word	0x20000538

0800af24 <_Balloc>:
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af28:	4604      	mov	r4, r0
 800af2a:	460d      	mov	r5, r1
 800af2c:	b976      	cbnz	r6, 800af4c <_Balloc+0x28>
 800af2e:	2010      	movs	r0, #16
 800af30:	f7fd ffce 	bl	8008ed0 <malloc>
 800af34:	4602      	mov	r2, r0
 800af36:	6260      	str	r0, [r4, #36]	; 0x24
 800af38:	b920      	cbnz	r0, 800af44 <_Balloc+0x20>
 800af3a:	4b18      	ldr	r3, [pc, #96]	; (800af9c <_Balloc+0x78>)
 800af3c:	4818      	ldr	r0, [pc, #96]	; (800afa0 <_Balloc+0x7c>)
 800af3e:	2166      	movs	r1, #102	; 0x66
 800af40:	f000 fe96 	bl	800bc70 <__assert_func>
 800af44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af48:	6006      	str	r6, [r0, #0]
 800af4a:	60c6      	str	r6, [r0, #12]
 800af4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af4e:	68f3      	ldr	r3, [r6, #12]
 800af50:	b183      	cbz	r3, 800af74 <_Balloc+0x50>
 800af52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af5a:	b9b8      	cbnz	r0, 800af8c <_Balloc+0x68>
 800af5c:	2101      	movs	r1, #1
 800af5e:	fa01 f605 	lsl.w	r6, r1, r5
 800af62:	1d72      	adds	r2, r6, #5
 800af64:	0092      	lsls	r2, r2, #2
 800af66:	4620      	mov	r0, r4
 800af68:	f000 fb60 	bl	800b62c <_calloc_r>
 800af6c:	b160      	cbz	r0, 800af88 <_Balloc+0x64>
 800af6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af72:	e00e      	b.n	800af92 <_Balloc+0x6e>
 800af74:	2221      	movs	r2, #33	; 0x21
 800af76:	2104      	movs	r1, #4
 800af78:	4620      	mov	r0, r4
 800af7a:	f000 fb57 	bl	800b62c <_calloc_r>
 800af7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af80:	60f0      	str	r0, [r6, #12]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1e4      	bne.n	800af52 <_Balloc+0x2e>
 800af88:	2000      	movs	r0, #0
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	6802      	ldr	r2, [r0, #0]
 800af8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af92:	2300      	movs	r3, #0
 800af94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af98:	e7f7      	b.n	800af8a <_Balloc+0x66>
 800af9a:	bf00      	nop
 800af9c:	0800c6b2 	.word	0x0800c6b2
 800afa0:	0800c798 	.word	0x0800c798

0800afa4 <_Bfree>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afa8:	4605      	mov	r5, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	b976      	cbnz	r6, 800afcc <_Bfree+0x28>
 800afae:	2010      	movs	r0, #16
 800afb0:	f7fd ff8e 	bl	8008ed0 <malloc>
 800afb4:	4602      	mov	r2, r0
 800afb6:	6268      	str	r0, [r5, #36]	; 0x24
 800afb8:	b920      	cbnz	r0, 800afc4 <_Bfree+0x20>
 800afba:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <_Bfree+0x3c>)
 800afbc:	4809      	ldr	r0, [pc, #36]	; (800afe4 <_Bfree+0x40>)
 800afbe:	218a      	movs	r1, #138	; 0x8a
 800afc0:	f000 fe56 	bl	800bc70 <__assert_func>
 800afc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afc8:	6006      	str	r6, [r0, #0]
 800afca:	60c6      	str	r6, [r0, #12]
 800afcc:	b13c      	cbz	r4, 800afde <_Bfree+0x3a>
 800afce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afd0:	6862      	ldr	r2, [r4, #4]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afd8:	6021      	str	r1, [r4, #0]
 800afda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afde:	bd70      	pop	{r4, r5, r6, pc}
 800afe0:	0800c6b2 	.word	0x0800c6b2
 800afe4:	0800c798 	.word	0x0800c798

0800afe8 <__multadd>:
 800afe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afec:	690d      	ldr	r5, [r1, #16]
 800afee:	4607      	mov	r7, r0
 800aff0:	460c      	mov	r4, r1
 800aff2:	461e      	mov	r6, r3
 800aff4:	f101 0c14 	add.w	ip, r1, #20
 800aff8:	2000      	movs	r0, #0
 800affa:	f8dc 3000 	ldr.w	r3, [ip]
 800affe:	b299      	uxth	r1, r3
 800b000:	fb02 6101 	mla	r1, r2, r1, r6
 800b004:	0c1e      	lsrs	r6, r3, #16
 800b006:	0c0b      	lsrs	r3, r1, #16
 800b008:	fb02 3306 	mla	r3, r2, r6, r3
 800b00c:	b289      	uxth	r1, r1
 800b00e:	3001      	adds	r0, #1
 800b010:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b014:	4285      	cmp	r5, r0
 800b016:	f84c 1b04 	str.w	r1, [ip], #4
 800b01a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b01e:	dcec      	bgt.n	800affa <__multadd+0x12>
 800b020:	b30e      	cbz	r6, 800b066 <__multadd+0x7e>
 800b022:	68a3      	ldr	r3, [r4, #8]
 800b024:	42ab      	cmp	r3, r5
 800b026:	dc19      	bgt.n	800b05c <__multadd+0x74>
 800b028:	6861      	ldr	r1, [r4, #4]
 800b02a:	4638      	mov	r0, r7
 800b02c:	3101      	adds	r1, #1
 800b02e:	f7ff ff79 	bl	800af24 <_Balloc>
 800b032:	4680      	mov	r8, r0
 800b034:	b928      	cbnz	r0, 800b042 <__multadd+0x5a>
 800b036:	4602      	mov	r2, r0
 800b038:	4b0c      	ldr	r3, [pc, #48]	; (800b06c <__multadd+0x84>)
 800b03a:	480d      	ldr	r0, [pc, #52]	; (800b070 <__multadd+0x88>)
 800b03c:	21b5      	movs	r1, #181	; 0xb5
 800b03e:	f000 fe17 	bl	800bc70 <__assert_func>
 800b042:	6922      	ldr	r2, [r4, #16]
 800b044:	3202      	adds	r2, #2
 800b046:	f104 010c 	add.w	r1, r4, #12
 800b04a:	0092      	lsls	r2, r2, #2
 800b04c:	300c      	adds	r0, #12
 800b04e:	f7fd ff47 	bl	8008ee0 <memcpy>
 800b052:	4621      	mov	r1, r4
 800b054:	4638      	mov	r0, r7
 800b056:	f7ff ffa5 	bl	800afa4 <_Bfree>
 800b05a:	4644      	mov	r4, r8
 800b05c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b060:	3501      	adds	r5, #1
 800b062:	615e      	str	r6, [r3, #20]
 800b064:	6125      	str	r5, [r4, #16]
 800b066:	4620      	mov	r0, r4
 800b068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b06c:	0800c724 	.word	0x0800c724
 800b070:	0800c798 	.word	0x0800c798

0800b074 <__hi0bits>:
 800b074:	0c03      	lsrs	r3, r0, #16
 800b076:	041b      	lsls	r3, r3, #16
 800b078:	b9d3      	cbnz	r3, 800b0b0 <__hi0bits+0x3c>
 800b07a:	0400      	lsls	r0, r0, #16
 800b07c:	2310      	movs	r3, #16
 800b07e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b082:	bf04      	itt	eq
 800b084:	0200      	lsleq	r0, r0, #8
 800b086:	3308      	addeq	r3, #8
 800b088:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b08c:	bf04      	itt	eq
 800b08e:	0100      	lsleq	r0, r0, #4
 800b090:	3304      	addeq	r3, #4
 800b092:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b096:	bf04      	itt	eq
 800b098:	0080      	lsleq	r0, r0, #2
 800b09a:	3302      	addeq	r3, #2
 800b09c:	2800      	cmp	r0, #0
 800b09e:	db05      	blt.n	800b0ac <__hi0bits+0x38>
 800b0a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0a4:	f103 0301 	add.w	r3, r3, #1
 800b0a8:	bf08      	it	eq
 800b0aa:	2320      	moveq	r3, #32
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	4770      	bx	lr
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	e7e4      	b.n	800b07e <__hi0bits+0xa>

0800b0b4 <__lo0bits>:
 800b0b4:	6803      	ldr	r3, [r0, #0]
 800b0b6:	f013 0207 	ands.w	r2, r3, #7
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	d00b      	beq.n	800b0d6 <__lo0bits+0x22>
 800b0be:	07da      	lsls	r2, r3, #31
 800b0c0:	d423      	bmi.n	800b10a <__lo0bits+0x56>
 800b0c2:	0798      	lsls	r0, r3, #30
 800b0c4:	bf49      	itett	mi
 800b0c6:	085b      	lsrmi	r3, r3, #1
 800b0c8:	089b      	lsrpl	r3, r3, #2
 800b0ca:	2001      	movmi	r0, #1
 800b0cc:	600b      	strmi	r3, [r1, #0]
 800b0ce:	bf5c      	itt	pl
 800b0d0:	600b      	strpl	r3, [r1, #0]
 800b0d2:	2002      	movpl	r0, #2
 800b0d4:	4770      	bx	lr
 800b0d6:	b298      	uxth	r0, r3
 800b0d8:	b9a8      	cbnz	r0, 800b106 <__lo0bits+0x52>
 800b0da:	0c1b      	lsrs	r3, r3, #16
 800b0dc:	2010      	movs	r0, #16
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	b90a      	cbnz	r2, 800b0e6 <__lo0bits+0x32>
 800b0e2:	3008      	adds	r0, #8
 800b0e4:	0a1b      	lsrs	r3, r3, #8
 800b0e6:	071a      	lsls	r2, r3, #28
 800b0e8:	bf04      	itt	eq
 800b0ea:	091b      	lsreq	r3, r3, #4
 800b0ec:	3004      	addeq	r0, #4
 800b0ee:	079a      	lsls	r2, r3, #30
 800b0f0:	bf04      	itt	eq
 800b0f2:	089b      	lsreq	r3, r3, #2
 800b0f4:	3002      	addeq	r0, #2
 800b0f6:	07da      	lsls	r2, r3, #31
 800b0f8:	d403      	bmi.n	800b102 <__lo0bits+0x4e>
 800b0fa:	085b      	lsrs	r3, r3, #1
 800b0fc:	f100 0001 	add.w	r0, r0, #1
 800b100:	d005      	beq.n	800b10e <__lo0bits+0x5a>
 800b102:	600b      	str	r3, [r1, #0]
 800b104:	4770      	bx	lr
 800b106:	4610      	mov	r0, r2
 800b108:	e7e9      	b.n	800b0de <__lo0bits+0x2a>
 800b10a:	2000      	movs	r0, #0
 800b10c:	4770      	bx	lr
 800b10e:	2020      	movs	r0, #32
 800b110:	4770      	bx	lr
	...

0800b114 <__i2b>:
 800b114:	b510      	push	{r4, lr}
 800b116:	460c      	mov	r4, r1
 800b118:	2101      	movs	r1, #1
 800b11a:	f7ff ff03 	bl	800af24 <_Balloc>
 800b11e:	4602      	mov	r2, r0
 800b120:	b928      	cbnz	r0, 800b12e <__i2b+0x1a>
 800b122:	4b05      	ldr	r3, [pc, #20]	; (800b138 <__i2b+0x24>)
 800b124:	4805      	ldr	r0, [pc, #20]	; (800b13c <__i2b+0x28>)
 800b126:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b12a:	f000 fda1 	bl	800bc70 <__assert_func>
 800b12e:	2301      	movs	r3, #1
 800b130:	6144      	str	r4, [r0, #20]
 800b132:	6103      	str	r3, [r0, #16]
 800b134:	bd10      	pop	{r4, pc}
 800b136:	bf00      	nop
 800b138:	0800c724 	.word	0x0800c724
 800b13c:	0800c798 	.word	0x0800c798

0800b140 <__multiply>:
 800b140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	4691      	mov	r9, r2
 800b146:	690a      	ldr	r2, [r1, #16]
 800b148:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	bfb8      	it	lt
 800b150:	460b      	movlt	r3, r1
 800b152:	460c      	mov	r4, r1
 800b154:	bfbc      	itt	lt
 800b156:	464c      	movlt	r4, r9
 800b158:	4699      	movlt	r9, r3
 800b15a:	6927      	ldr	r7, [r4, #16]
 800b15c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b160:	68a3      	ldr	r3, [r4, #8]
 800b162:	6861      	ldr	r1, [r4, #4]
 800b164:	eb07 060a 	add.w	r6, r7, sl
 800b168:	42b3      	cmp	r3, r6
 800b16a:	b085      	sub	sp, #20
 800b16c:	bfb8      	it	lt
 800b16e:	3101      	addlt	r1, #1
 800b170:	f7ff fed8 	bl	800af24 <_Balloc>
 800b174:	b930      	cbnz	r0, 800b184 <__multiply+0x44>
 800b176:	4602      	mov	r2, r0
 800b178:	4b44      	ldr	r3, [pc, #272]	; (800b28c <__multiply+0x14c>)
 800b17a:	4845      	ldr	r0, [pc, #276]	; (800b290 <__multiply+0x150>)
 800b17c:	f240 115d 	movw	r1, #349	; 0x15d
 800b180:	f000 fd76 	bl	800bc70 <__assert_func>
 800b184:	f100 0514 	add.w	r5, r0, #20
 800b188:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b18c:	462b      	mov	r3, r5
 800b18e:	2200      	movs	r2, #0
 800b190:	4543      	cmp	r3, r8
 800b192:	d321      	bcc.n	800b1d8 <__multiply+0x98>
 800b194:	f104 0314 	add.w	r3, r4, #20
 800b198:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b19c:	f109 0314 	add.w	r3, r9, #20
 800b1a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1a4:	9202      	str	r2, [sp, #8]
 800b1a6:	1b3a      	subs	r2, r7, r4
 800b1a8:	3a15      	subs	r2, #21
 800b1aa:	f022 0203 	bic.w	r2, r2, #3
 800b1ae:	3204      	adds	r2, #4
 800b1b0:	f104 0115 	add.w	r1, r4, #21
 800b1b4:	428f      	cmp	r7, r1
 800b1b6:	bf38      	it	cc
 800b1b8:	2204      	movcc	r2, #4
 800b1ba:	9201      	str	r2, [sp, #4]
 800b1bc:	9a02      	ldr	r2, [sp, #8]
 800b1be:	9303      	str	r3, [sp, #12]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d80c      	bhi.n	800b1de <__multiply+0x9e>
 800b1c4:	2e00      	cmp	r6, #0
 800b1c6:	dd03      	ble.n	800b1d0 <__multiply+0x90>
 800b1c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d05a      	beq.n	800b286 <__multiply+0x146>
 800b1d0:	6106      	str	r6, [r0, #16]
 800b1d2:	b005      	add	sp, #20
 800b1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d8:	f843 2b04 	str.w	r2, [r3], #4
 800b1dc:	e7d8      	b.n	800b190 <__multiply+0x50>
 800b1de:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1e2:	f1ba 0f00 	cmp.w	sl, #0
 800b1e6:	d024      	beq.n	800b232 <__multiply+0xf2>
 800b1e8:	f104 0e14 	add.w	lr, r4, #20
 800b1ec:	46a9      	mov	r9, r5
 800b1ee:	f04f 0c00 	mov.w	ip, #0
 800b1f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b1f6:	f8d9 1000 	ldr.w	r1, [r9]
 800b1fa:	fa1f fb82 	uxth.w	fp, r2
 800b1fe:	b289      	uxth	r1, r1
 800b200:	fb0a 110b 	mla	r1, sl, fp, r1
 800b204:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b208:	f8d9 2000 	ldr.w	r2, [r9]
 800b20c:	4461      	add	r1, ip
 800b20e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b212:	fb0a c20b 	mla	r2, sl, fp, ip
 800b216:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b21a:	b289      	uxth	r1, r1
 800b21c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b220:	4577      	cmp	r7, lr
 800b222:	f849 1b04 	str.w	r1, [r9], #4
 800b226:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b22a:	d8e2      	bhi.n	800b1f2 <__multiply+0xb2>
 800b22c:	9a01      	ldr	r2, [sp, #4]
 800b22e:	f845 c002 	str.w	ip, [r5, r2]
 800b232:	9a03      	ldr	r2, [sp, #12]
 800b234:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b238:	3304      	adds	r3, #4
 800b23a:	f1b9 0f00 	cmp.w	r9, #0
 800b23e:	d020      	beq.n	800b282 <__multiply+0x142>
 800b240:	6829      	ldr	r1, [r5, #0]
 800b242:	f104 0c14 	add.w	ip, r4, #20
 800b246:	46ae      	mov	lr, r5
 800b248:	f04f 0a00 	mov.w	sl, #0
 800b24c:	f8bc b000 	ldrh.w	fp, [ip]
 800b250:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b254:	fb09 220b 	mla	r2, r9, fp, r2
 800b258:	4492      	add	sl, r2
 800b25a:	b289      	uxth	r1, r1
 800b25c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b260:	f84e 1b04 	str.w	r1, [lr], #4
 800b264:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b268:	f8be 1000 	ldrh.w	r1, [lr]
 800b26c:	0c12      	lsrs	r2, r2, #16
 800b26e:	fb09 1102 	mla	r1, r9, r2, r1
 800b272:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b276:	4567      	cmp	r7, ip
 800b278:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b27c:	d8e6      	bhi.n	800b24c <__multiply+0x10c>
 800b27e:	9a01      	ldr	r2, [sp, #4]
 800b280:	50a9      	str	r1, [r5, r2]
 800b282:	3504      	adds	r5, #4
 800b284:	e79a      	b.n	800b1bc <__multiply+0x7c>
 800b286:	3e01      	subs	r6, #1
 800b288:	e79c      	b.n	800b1c4 <__multiply+0x84>
 800b28a:	bf00      	nop
 800b28c:	0800c724 	.word	0x0800c724
 800b290:	0800c798 	.word	0x0800c798

0800b294 <__pow5mult>:
 800b294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b298:	4615      	mov	r5, r2
 800b29a:	f012 0203 	ands.w	r2, r2, #3
 800b29e:	4606      	mov	r6, r0
 800b2a0:	460f      	mov	r7, r1
 800b2a2:	d007      	beq.n	800b2b4 <__pow5mult+0x20>
 800b2a4:	4c25      	ldr	r4, [pc, #148]	; (800b33c <__pow5mult+0xa8>)
 800b2a6:	3a01      	subs	r2, #1
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2ae:	f7ff fe9b 	bl	800afe8 <__multadd>
 800b2b2:	4607      	mov	r7, r0
 800b2b4:	10ad      	asrs	r5, r5, #2
 800b2b6:	d03d      	beq.n	800b334 <__pow5mult+0xa0>
 800b2b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2ba:	b97c      	cbnz	r4, 800b2dc <__pow5mult+0x48>
 800b2bc:	2010      	movs	r0, #16
 800b2be:	f7fd fe07 	bl	8008ed0 <malloc>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	6270      	str	r0, [r6, #36]	; 0x24
 800b2c6:	b928      	cbnz	r0, 800b2d4 <__pow5mult+0x40>
 800b2c8:	4b1d      	ldr	r3, [pc, #116]	; (800b340 <__pow5mult+0xac>)
 800b2ca:	481e      	ldr	r0, [pc, #120]	; (800b344 <__pow5mult+0xb0>)
 800b2cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2d0:	f000 fcce 	bl	800bc70 <__assert_func>
 800b2d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2d8:	6004      	str	r4, [r0, #0]
 800b2da:	60c4      	str	r4, [r0, #12]
 800b2dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2e4:	b94c      	cbnz	r4, 800b2fa <__pow5mult+0x66>
 800b2e6:	f240 2171 	movw	r1, #625	; 0x271
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	f7ff ff12 	bl	800b114 <__i2b>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	6003      	str	r3, [r0, #0]
 800b2fa:	f04f 0900 	mov.w	r9, #0
 800b2fe:	07eb      	lsls	r3, r5, #31
 800b300:	d50a      	bpl.n	800b318 <__pow5mult+0x84>
 800b302:	4639      	mov	r1, r7
 800b304:	4622      	mov	r2, r4
 800b306:	4630      	mov	r0, r6
 800b308:	f7ff ff1a 	bl	800b140 <__multiply>
 800b30c:	4639      	mov	r1, r7
 800b30e:	4680      	mov	r8, r0
 800b310:	4630      	mov	r0, r6
 800b312:	f7ff fe47 	bl	800afa4 <_Bfree>
 800b316:	4647      	mov	r7, r8
 800b318:	106d      	asrs	r5, r5, #1
 800b31a:	d00b      	beq.n	800b334 <__pow5mult+0xa0>
 800b31c:	6820      	ldr	r0, [r4, #0]
 800b31e:	b938      	cbnz	r0, 800b330 <__pow5mult+0x9c>
 800b320:	4622      	mov	r2, r4
 800b322:	4621      	mov	r1, r4
 800b324:	4630      	mov	r0, r6
 800b326:	f7ff ff0b 	bl	800b140 <__multiply>
 800b32a:	6020      	str	r0, [r4, #0]
 800b32c:	f8c0 9000 	str.w	r9, [r0]
 800b330:	4604      	mov	r4, r0
 800b332:	e7e4      	b.n	800b2fe <__pow5mult+0x6a>
 800b334:	4638      	mov	r0, r7
 800b336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b33a:	bf00      	nop
 800b33c:	0800c8e8 	.word	0x0800c8e8
 800b340:	0800c6b2 	.word	0x0800c6b2
 800b344:	0800c798 	.word	0x0800c798

0800b348 <__lshift>:
 800b348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b34c:	460c      	mov	r4, r1
 800b34e:	6849      	ldr	r1, [r1, #4]
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b356:	68a3      	ldr	r3, [r4, #8]
 800b358:	4607      	mov	r7, r0
 800b35a:	4691      	mov	r9, r2
 800b35c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b360:	f108 0601 	add.w	r6, r8, #1
 800b364:	42b3      	cmp	r3, r6
 800b366:	db0b      	blt.n	800b380 <__lshift+0x38>
 800b368:	4638      	mov	r0, r7
 800b36a:	f7ff fddb 	bl	800af24 <_Balloc>
 800b36e:	4605      	mov	r5, r0
 800b370:	b948      	cbnz	r0, 800b386 <__lshift+0x3e>
 800b372:	4602      	mov	r2, r0
 800b374:	4b2a      	ldr	r3, [pc, #168]	; (800b420 <__lshift+0xd8>)
 800b376:	482b      	ldr	r0, [pc, #172]	; (800b424 <__lshift+0xdc>)
 800b378:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b37c:	f000 fc78 	bl	800bc70 <__assert_func>
 800b380:	3101      	adds	r1, #1
 800b382:	005b      	lsls	r3, r3, #1
 800b384:	e7ee      	b.n	800b364 <__lshift+0x1c>
 800b386:	2300      	movs	r3, #0
 800b388:	f100 0114 	add.w	r1, r0, #20
 800b38c:	f100 0210 	add.w	r2, r0, #16
 800b390:	4618      	mov	r0, r3
 800b392:	4553      	cmp	r3, sl
 800b394:	db37      	blt.n	800b406 <__lshift+0xbe>
 800b396:	6920      	ldr	r0, [r4, #16]
 800b398:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b39c:	f104 0314 	add.w	r3, r4, #20
 800b3a0:	f019 091f 	ands.w	r9, r9, #31
 800b3a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b3ac:	d02f      	beq.n	800b40e <__lshift+0xc6>
 800b3ae:	f1c9 0e20 	rsb	lr, r9, #32
 800b3b2:	468a      	mov	sl, r1
 800b3b4:	f04f 0c00 	mov.w	ip, #0
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	fa02 f209 	lsl.w	r2, r2, r9
 800b3be:	ea42 020c 	orr.w	r2, r2, ip
 800b3c2:	f84a 2b04 	str.w	r2, [sl], #4
 800b3c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ca:	4298      	cmp	r0, r3
 800b3cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b3d0:	d8f2      	bhi.n	800b3b8 <__lshift+0x70>
 800b3d2:	1b03      	subs	r3, r0, r4
 800b3d4:	3b15      	subs	r3, #21
 800b3d6:	f023 0303 	bic.w	r3, r3, #3
 800b3da:	3304      	adds	r3, #4
 800b3dc:	f104 0215 	add.w	r2, r4, #21
 800b3e0:	4290      	cmp	r0, r2
 800b3e2:	bf38      	it	cc
 800b3e4:	2304      	movcc	r3, #4
 800b3e6:	f841 c003 	str.w	ip, [r1, r3]
 800b3ea:	f1bc 0f00 	cmp.w	ip, #0
 800b3ee:	d001      	beq.n	800b3f4 <__lshift+0xac>
 800b3f0:	f108 0602 	add.w	r6, r8, #2
 800b3f4:	3e01      	subs	r6, #1
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	612e      	str	r6, [r5, #16]
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	f7ff fdd2 	bl	800afa4 <_Bfree>
 800b400:	4628      	mov	r0, r5
 800b402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b406:	f842 0f04 	str.w	r0, [r2, #4]!
 800b40a:	3301      	adds	r3, #1
 800b40c:	e7c1      	b.n	800b392 <__lshift+0x4a>
 800b40e:	3904      	subs	r1, #4
 800b410:	f853 2b04 	ldr.w	r2, [r3], #4
 800b414:	f841 2f04 	str.w	r2, [r1, #4]!
 800b418:	4298      	cmp	r0, r3
 800b41a:	d8f9      	bhi.n	800b410 <__lshift+0xc8>
 800b41c:	e7ea      	b.n	800b3f4 <__lshift+0xac>
 800b41e:	bf00      	nop
 800b420:	0800c724 	.word	0x0800c724
 800b424:	0800c798 	.word	0x0800c798

0800b428 <__mcmp>:
 800b428:	b530      	push	{r4, r5, lr}
 800b42a:	6902      	ldr	r2, [r0, #16]
 800b42c:	690c      	ldr	r4, [r1, #16]
 800b42e:	1b12      	subs	r2, r2, r4
 800b430:	d10e      	bne.n	800b450 <__mcmp+0x28>
 800b432:	f100 0314 	add.w	r3, r0, #20
 800b436:	3114      	adds	r1, #20
 800b438:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b43c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b440:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b444:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b448:	42a5      	cmp	r5, r4
 800b44a:	d003      	beq.n	800b454 <__mcmp+0x2c>
 800b44c:	d305      	bcc.n	800b45a <__mcmp+0x32>
 800b44e:	2201      	movs	r2, #1
 800b450:	4610      	mov	r0, r2
 800b452:	bd30      	pop	{r4, r5, pc}
 800b454:	4283      	cmp	r3, r0
 800b456:	d3f3      	bcc.n	800b440 <__mcmp+0x18>
 800b458:	e7fa      	b.n	800b450 <__mcmp+0x28>
 800b45a:	f04f 32ff 	mov.w	r2, #4294967295
 800b45e:	e7f7      	b.n	800b450 <__mcmp+0x28>

0800b460 <__mdiff>:
 800b460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	460c      	mov	r4, r1
 800b466:	4606      	mov	r6, r0
 800b468:	4611      	mov	r1, r2
 800b46a:	4620      	mov	r0, r4
 800b46c:	4690      	mov	r8, r2
 800b46e:	f7ff ffdb 	bl	800b428 <__mcmp>
 800b472:	1e05      	subs	r5, r0, #0
 800b474:	d110      	bne.n	800b498 <__mdiff+0x38>
 800b476:	4629      	mov	r1, r5
 800b478:	4630      	mov	r0, r6
 800b47a:	f7ff fd53 	bl	800af24 <_Balloc>
 800b47e:	b930      	cbnz	r0, 800b48e <__mdiff+0x2e>
 800b480:	4b3a      	ldr	r3, [pc, #232]	; (800b56c <__mdiff+0x10c>)
 800b482:	4602      	mov	r2, r0
 800b484:	f240 2132 	movw	r1, #562	; 0x232
 800b488:	4839      	ldr	r0, [pc, #228]	; (800b570 <__mdiff+0x110>)
 800b48a:	f000 fbf1 	bl	800bc70 <__assert_func>
 800b48e:	2301      	movs	r3, #1
 800b490:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b494:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b498:	bfa4      	itt	ge
 800b49a:	4643      	movge	r3, r8
 800b49c:	46a0      	movge	r8, r4
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4a4:	bfa6      	itte	ge
 800b4a6:	461c      	movge	r4, r3
 800b4a8:	2500      	movge	r5, #0
 800b4aa:	2501      	movlt	r5, #1
 800b4ac:	f7ff fd3a 	bl	800af24 <_Balloc>
 800b4b0:	b920      	cbnz	r0, 800b4bc <__mdiff+0x5c>
 800b4b2:	4b2e      	ldr	r3, [pc, #184]	; (800b56c <__mdiff+0x10c>)
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4ba:	e7e5      	b.n	800b488 <__mdiff+0x28>
 800b4bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4c0:	6926      	ldr	r6, [r4, #16]
 800b4c2:	60c5      	str	r5, [r0, #12]
 800b4c4:	f104 0914 	add.w	r9, r4, #20
 800b4c8:	f108 0514 	add.w	r5, r8, #20
 800b4cc:	f100 0e14 	add.w	lr, r0, #20
 800b4d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b4d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b4d8:	f108 0210 	add.w	r2, r8, #16
 800b4dc:	46f2      	mov	sl, lr
 800b4de:	2100      	movs	r1, #0
 800b4e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4e8:	fa1f f883 	uxth.w	r8, r3
 800b4ec:	fa11 f18b 	uxtah	r1, r1, fp
 800b4f0:	0c1b      	lsrs	r3, r3, #16
 800b4f2:	eba1 0808 	sub.w	r8, r1, r8
 800b4f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b4fe:	fa1f f888 	uxth.w	r8, r8
 800b502:	1419      	asrs	r1, r3, #16
 800b504:	454e      	cmp	r6, r9
 800b506:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b50a:	f84a 3b04 	str.w	r3, [sl], #4
 800b50e:	d8e7      	bhi.n	800b4e0 <__mdiff+0x80>
 800b510:	1b33      	subs	r3, r6, r4
 800b512:	3b15      	subs	r3, #21
 800b514:	f023 0303 	bic.w	r3, r3, #3
 800b518:	3304      	adds	r3, #4
 800b51a:	3415      	adds	r4, #21
 800b51c:	42a6      	cmp	r6, r4
 800b51e:	bf38      	it	cc
 800b520:	2304      	movcc	r3, #4
 800b522:	441d      	add	r5, r3
 800b524:	4473      	add	r3, lr
 800b526:	469e      	mov	lr, r3
 800b528:	462e      	mov	r6, r5
 800b52a:	4566      	cmp	r6, ip
 800b52c:	d30e      	bcc.n	800b54c <__mdiff+0xec>
 800b52e:	f10c 0203 	add.w	r2, ip, #3
 800b532:	1b52      	subs	r2, r2, r5
 800b534:	f022 0203 	bic.w	r2, r2, #3
 800b538:	3d03      	subs	r5, #3
 800b53a:	45ac      	cmp	ip, r5
 800b53c:	bf38      	it	cc
 800b53e:	2200      	movcc	r2, #0
 800b540:	441a      	add	r2, r3
 800b542:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b546:	b17b      	cbz	r3, 800b568 <__mdiff+0x108>
 800b548:	6107      	str	r7, [r0, #16]
 800b54a:	e7a3      	b.n	800b494 <__mdiff+0x34>
 800b54c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b550:	fa11 f288 	uxtah	r2, r1, r8
 800b554:	1414      	asrs	r4, r2, #16
 800b556:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b55a:	b292      	uxth	r2, r2
 800b55c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b560:	f84e 2b04 	str.w	r2, [lr], #4
 800b564:	1421      	asrs	r1, r4, #16
 800b566:	e7e0      	b.n	800b52a <__mdiff+0xca>
 800b568:	3f01      	subs	r7, #1
 800b56a:	e7ea      	b.n	800b542 <__mdiff+0xe2>
 800b56c:	0800c724 	.word	0x0800c724
 800b570:	0800c798 	.word	0x0800c798

0800b574 <__d2b>:
 800b574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b578:	4689      	mov	r9, r1
 800b57a:	2101      	movs	r1, #1
 800b57c:	ec57 6b10 	vmov	r6, r7, d0
 800b580:	4690      	mov	r8, r2
 800b582:	f7ff fccf 	bl	800af24 <_Balloc>
 800b586:	4604      	mov	r4, r0
 800b588:	b930      	cbnz	r0, 800b598 <__d2b+0x24>
 800b58a:	4602      	mov	r2, r0
 800b58c:	4b25      	ldr	r3, [pc, #148]	; (800b624 <__d2b+0xb0>)
 800b58e:	4826      	ldr	r0, [pc, #152]	; (800b628 <__d2b+0xb4>)
 800b590:	f240 310a 	movw	r1, #778	; 0x30a
 800b594:	f000 fb6c 	bl	800bc70 <__assert_func>
 800b598:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b59c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5a0:	bb35      	cbnz	r5, 800b5f0 <__d2b+0x7c>
 800b5a2:	2e00      	cmp	r6, #0
 800b5a4:	9301      	str	r3, [sp, #4]
 800b5a6:	d028      	beq.n	800b5fa <__d2b+0x86>
 800b5a8:	4668      	mov	r0, sp
 800b5aa:	9600      	str	r6, [sp, #0]
 800b5ac:	f7ff fd82 	bl	800b0b4 <__lo0bits>
 800b5b0:	9900      	ldr	r1, [sp, #0]
 800b5b2:	b300      	cbz	r0, 800b5f6 <__d2b+0x82>
 800b5b4:	9a01      	ldr	r2, [sp, #4]
 800b5b6:	f1c0 0320 	rsb	r3, r0, #32
 800b5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b5be:	430b      	orrs	r3, r1
 800b5c0:	40c2      	lsrs	r2, r0
 800b5c2:	6163      	str	r3, [r4, #20]
 800b5c4:	9201      	str	r2, [sp, #4]
 800b5c6:	9b01      	ldr	r3, [sp, #4]
 800b5c8:	61a3      	str	r3, [r4, #24]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	bf14      	ite	ne
 800b5ce:	2202      	movne	r2, #2
 800b5d0:	2201      	moveq	r2, #1
 800b5d2:	6122      	str	r2, [r4, #16]
 800b5d4:	b1d5      	cbz	r5, 800b60c <__d2b+0x98>
 800b5d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5da:	4405      	add	r5, r0
 800b5dc:	f8c9 5000 	str.w	r5, [r9]
 800b5e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5e4:	f8c8 0000 	str.w	r0, [r8]
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	b003      	add	sp, #12
 800b5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5f4:	e7d5      	b.n	800b5a2 <__d2b+0x2e>
 800b5f6:	6161      	str	r1, [r4, #20]
 800b5f8:	e7e5      	b.n	800b5c6 <__d2b+0x52>
 800b5fa:	a801      	add	r0, sp, #4
 800b5fc:	f7ff fd5a 	bl	800b0b4 <__lo0bits>
 800b600:	9b01      	ldr	r3, [sp, #4]
 800b602:	6163      	str	r3, [r4, #20]
 800b604:	2201      	movs	r2, #1
 800b606:	6122      	str	r2, [r4, #16]
 800b608:	3020      	adds	r0, #32
 800b60a:	e7e3      	b.n	800b5d4 <__d2b+0x60>
 800b60c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b610:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b614:	f8c9 0000 	str.w	r0, [r9]
 800b618:	6918      	ldr	r0, [r3, #16]
 800b61a:	f7ff fd2b 	bl	800b074 <__hi0bits>
 800b61e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b622:	e7df      	b.n	800b5e4 <__d2b+0x70>
 800b624:	0800c724 	.word	0x0800c724
 800b628:	0800c798 	.word	0x0800c798

0800b62c <_calloc_r>:
 800b62c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b62e:	fba1 2402 	umull	r2, r4, r1, r2
 800b632:	b94c      	cbnz	r4, 800b648 <_calloc_r+0x1c>
 800b634:	4611      	mov	r1, r2
 800b636:	9201      	str	r2, [sp, #4]
 800b638:	f7fd fcd4 	bl	8008fe4 <_malloc_r>
 800b63c:	9a01      	ldr	r2, [sp, #4]
 800b63e:	4605      	mov	r5, r0
 800b640:	b930      	cbnz	r0, 800b650 <_calloc_r+0x24>
 800b642:	4628      	mov	r0, r5
 800b644:	b003      	add	sp, #12
 800b646:	bd30      	pop	{r4, r5, pc}
 800b648:	220c      	movs	r2, #12
 800b64a:	6002      	str	r2, [r0, #0]
 800b64c:	2500      	movs	r5, #0
 800b64e:	e7f8      	b.n	800b642 <_calloc_r+0x16>
 800b650:	4621      	mov	r1, r4
 800b652:	f7fd fc53 	bl	8008efc <memset>
 800b656:	e7f4      	b.n	800b642 <_calloc_r+0x16>

0800b658 <__ssputs_r>:
 800b658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b65c:	688e      	ldr	r6, [r1, #8]
 800b65e:	429e      	cmp	r6, r3
 800b660:	4682      	mov	sl, r0
 800b662:	460c      	mov	r4, r1
 800b664:	4690      	mov	r8, r2
 800b666:	461f      	mov	r7, r3
 800b668:	d838      	bhi.n	800b6dc <__ssputs_r+0x84>
 800b66a:	898a      	ldrh	r2, [r1, #12]
 800b66c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b670:	d032      	beq.n	800b6d8 <__ssputs_r+0x80>
 800b672:	6825      	ldr	r5, [r4, #0]
 800b674:	6909      	ldr	r1, [r1, #16]
 800b676:	eba5 0901 	sub.w	r9, r5, r1
 800b67a:	6965      	ldr	r5, [r4, #20]
 800b67c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b680:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b684:	3301      	adds	r3, #1
 800b686:	444b      	add	r3, r9
 800b688:	106d      	asrs	r5, r5, #1
 800b68a:	429d      	cmp	r5, r3
 800b68c:	bf38      	it	cc
 800b68e:	461d      	movcc	r5, r3
 800b690:	0553      	lsls	r3, r2, #21
 800b692:	d531      	bpl.n	800b6f8 <__ssputs_r+0xa0>
 800b694:	4629      	mov	r1, r5
 800b696:	f7fd fca5 	bl	8008fe4 <_malloc_r>
 800b69a:	4606      	mov	r6, r0
 800b69c:	b950      	cbnz	r0, 800b6b4 <__ssputs_r+0x5c>
 800b69e:	230c      	movs	r3, #12
 800b6a0:	f8ca 3000 	str.w	r3, [sl]
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6aa:	81a3      	strh	r3, [r4, #12]
 800b6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b4:	6921      	ldr	r1, [r4, #16]
 800b6b6:	464a      	mov	r2, r9
 800b6b8:	f7fd fc12 	bl	8008ee0 <memcpy>
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6c6:	81a3      	strh	r3, [r4, #12]
 800b6c8:	6126      	str	r6, [r4, #16]
 800b6ca:	6165      	str	r5, [r4, #20]
 800b6cc:	444e      	add	r6, r9
 800b6ce:	eba5 0509 	sub.w	r5, r5, r9
 800b6d2:	6026      	str	r6, [r4, #0]
 800b6d4:	60a5      	str	r5, [r4, #8]
 800b6d6:	463e      	mov	r6, r7
 800b6d8:	42be      	cmp	r6, r7
 800b6da:	d900      	bls.n	800b6de <__ssputs_r+0x86>
 800b6dc:	463e      	mov	r6, r7
 800b6de:	6820      	ldr	r0, [r4, #0]
 800b6e0:	4632      	mov	r2, r6
 800b6e2:	4641      	mov	r1, r8
 800b6e4:	f000 fb4a 	bl	800bd7c <memmove>
 800b6e8:	68a3      	ldr	r3, [r4, #8]
 800b6ea:	1b9b      	subs	r3, r3, r6
 800b6ec:	60a3      	str	r3, [r4, #8]
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	4433      	add	r3, r6
 800b6f2:	6023      	str	r3, [r4, #0]
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	e7db      	b.n	800b6b0 <__ssputs_r+0x58>
 800b6f8:	462a      	mov	r2, r5
 800b6fa:	f000 fb59 	bl	800bdb0 <_realloc_r>
 800b6fe:	4606      	mov	r6, r0
 800b700:	2800      	cmp	r0, #0
 800b702:	d1e1      	bne.n	800b6c8 <__ssputs_r+0x70>
 800b704:	6921      	ldr	r1, [r4, #16]
 800b706:	4650      	mov	r0, sl
 800b708:	f7fd fc00 	bl	8008f0c <_free_r>
 800b70c:	e7c7      	b.n	800b69e <__ssputs_r+0x46>
	...

0800b710 <_svfiprintf_r>:
 800b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	4698      	mov	r8, r3
 800b716:	898b      	ldrh	r3, [r1, #12]
 800b718:	061b      	lsls	r3, r3, #24
 800b71a:	b09d      	sub	sp, #116	; 0x74
 800b71c:	4607      	mov	r7, r0
 800b71e:	460d      	mov	r5, r1
 800b720:	4614      	mov	r4, r2
 800b722:	d50e      	bpl.n	800b742 <_svfiprintf_r+0x32>
 800b724:	690b      	ldr	r3, [r1, #16]
 800b726:	b963      	cbnz	r3, 800b742 <_svfiprintf_r+0x32>
 800b728:	2140      	movs	r1, #64	; 0x40
 800b72a:	f7fd fc5b 	bl	8008fe4 <_malloc_r>
 800b72e:	6028      	str	r0, [r5, #0]
 800b730:	6128      	str	r0, [r5, #16]
 800b732:	b920      	cbnz	r0, 800b73e <_svfiprintf_r+0x2e>
 800b734:	230c      	movs	r3, #12
 800b736:	603b      	str	r3, [r7, #0]
 800b738:	f04f 30ff 	mov.w	r0, #4294967295
 800b73c:	e0d1      	b.n	800b8e2 <_svfiprintf_r+0x1d2>
 800b73e:	2340      	movs	r3, #64	; 0x40
 800b740:	616b      	str	r3, [r5, #20]
 800b742:	2300      	movs	r3, #0
 800b744:	9309      	str	r3, [sp, #36]	; 0x24
 800b746:	2320      	movs	r3, #32
 800b748:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b74c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b750:	2330      	movs	r3, #48	; 0x30
 800b752:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b8fc <_svfiprintf_r+0x1ec>
 800b756:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b75a:	f04f 0901 	mov.w	r9, #1
 800b75e:	4623      	mov	r3, r4
 800b760:	469a      	mov	sl, r3
 800b762:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b766:	b10a      	cbz	r2, 800b76c <_svfiprintf_r+0x5c>
 800b768:	2a25      	cmp	r2, #37	; 0x25
 800b76a:	d1f9      	bne.n	800b760 <_svfiprintf_r+0x50>
 800b76c:	ebba 0b04 	subs.w	fp, sl, r4
 800b770:	d00b      	beq.n	800b78a <_svfiprintf_r+0x7a>
 800b772:	465b      	mov	r3, fp
 800b774:	4622      	mov	r2, r4
 800b776:	4629      	mov	r1, r5
 800b778:	4638      	mov	r0, r7
 800b77a:	f7ff ff6d 	bl	800b658 <__ssputs_r>
 800b77e:	3001      	adds	r0, #1
 800b780:	f000 80aa 	beq.w	800b8d8 <_svfiprintf_r+0x1c8>
 800b784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b786:	445a      	add	r2, fp
 800b788:	9209      	str	r2, [sp, #36]	; 0x24
 800b78a:	f89a 3000 	ldrb.w	r3, [sl]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f000 80a2 	beq.w	800b8d8 <_svfiprintf_r+0x1c8>
 800b794:	2300      	movs	r3, #0
 800b796:	f04f 32ff 	mov.w	r2, #4294967295
 800b79a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b79e:	f10a 0a01 	add.w	sl, sl, #1
 800b7a2:	9304      	str	r3, [sp, #16]
 800b7a4:	9307      	str	r3, [sp, #28]
 800b7a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7aa:	931a      	str	r3, [sp, #104]	; 0x68
 800b7ac:	4654      	mov	r4, sl
 800b7ae:	2205      	movs	r2, #5
 800b7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7b4:	4851      	ldr	r0, [pc, #324]	; (800b8fc <_svfiprintf_r+0x1ec>)
 800b7b6:	f7f4 fcfb 	bl	80001b0 <memchr>
 800b7ba:	9a04      	ldr	r2, [sp, #16]
 800b7bc:	b9d8      	cbnz	r0, 800b7f6 <_svfiprintf_r+0xe6>
 800b7be:	06d0      	lsls	r0, r2, #27
 800b7c0:	bf44      	itt	mi
 800b7c2:	2320      	movmi	r3, #32
 800b7c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7c8:	0711      	lsls	r1, r2, #28
 800b7ca:	bf44      	itt	mi
 800b7cc:	232b      	movmi	r3, #43	; 0x2b
 800b7ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7d8:	d015      	beq.n	800b806 <_svfiprintf_r+0xf6>
 800b7da:	9a07      	ldr	r2, [sp, #28]
 800b7dc:	4654      	mov	r4, sl
 800b7de:	2000      	movs	r0, #0
 800b7e0:	f04f 0c0a 	mov.w	ip, #10
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7ea:	3b30      	subs	r3, #48	; 0x30
 800b7ec:	2b09      	cmp	r3, #9
 800b7ee:	d94e      	bls.n	800b88e <_svfiprintf_r+0x17e>
 800b7f0:	b1b0      	cbz	r0, 800b820 <_svfiprintf_r+0x110>
 800b7f2:	9207      	str	r2, [sp, #28]
 800b7f4:	e014      	b.n	800b820 <_svfiprintf_r+0x110>
 800b7f6:	eba0 0308 	sub.w	r3, r0, r8
 800b7fa:	fa09 f303 	lsl.w	r3, r9, r3
 800b7fe:	4313      	orrs	r3, r2
 800b800:	9304      	str	r3, [sp, #16]
 800b802:	46a2      	mov	sl, r4
 800b804:	e7d2      	b.n	800b7ac <_svfiprintf_r+0x9c>
 800b806:	9b03      	ldr	r3, [sp, #12]
 800b808:	1d19      	adds	r1, r3, #4
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	9103      	str	r1, [sp, #12]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	bfbb      	ittet	lt
 800b812:	425b      	neglt	r3, r3
 800b814:	f042 0202 	orrlt.w	r2, r2, #2
 800b818:	9307      	strge	r3, [sp, #28]
 800b81a:	9307      	strlt	r3, [sp, #28]
 800b81c:	bfb8      	it	lt
 800b81e:	9204      	strlt	r2, [sp, #16]
 800b820:	7823      	ldrb	r3, [r4, #0]
 800b822:	2b2e      	cmp	r3, #46	; 0x2e
 800b824:	d10c      	bne.n	800b840 <_svfiprintf_r+0x130>
 800b826:	7863      	ldrb	r3, [r4, #1]
 800b828:	2b2a      	cmp	r3, #42	; 0x2a
 800b82a:	d135      	bne.n	800b898 <_svfiprintf_r+0x188>
 800b82c:	9b03      	ldr	r3, [sp, #12]
 800b82e:	1d1a      	adds	r2, r3, #4
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	9203      	str	r2, [sp, #12]
 800b834:	2b00      	cmp	r3, #0
 800b836:	bfb8      	it	lt
 800b838:	f04f 33ff 	movlt.w	r3, #4294967295
 800b83c:	3402      	adds	r4, #2
 800b83e:	9305      	str	r3, [sp, #20]
 800b840:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b90c <_svfiprintf_r+0x1fc>
 800b844:	7821      	ldrb	r1, [r4, #0]
 800b846:	2203      	movs	r2, #3
 800b848:	4650      	mov	r0, sl
 800b84a:	f7f4 fcb1 	bl	80001b0 <memchr>
 800b84e:	b140      	cbz	r0, 800b862 <_svfiprintf_r+0x152>
 800b850:	2340      	movs	r3, #64	; 0x40
 800b852:	eba0 000a 	sub.w	r0, r0, sl
 800b856:	fa03 f000 	lsl.w	r0, r3, r0
 800b85a:	9b04      	ldr	r3, [sp, #16]
 800b85c:	4303      	orrs	r3, r0
 800b85e:	3401      	adds	r4, #1
 800b860:	9304      	str	r3, [sp, #16]
 800b862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b866:	4826      	ldr	r0, [pc, #152]	; (800b900 <_svfiprintf_r+0x1f0>)
 800b868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b86c:	2206      	movs	r2, #6
 800b86e:	f7f4 fc9f 	bl	80001b0 <memchr>
 800b872:	2800      	cmp	r0, #0
 800b874:	d038      	beq.n	800b8e8 <_svfiprintf_r+0x1d8>
 800b876:	4b23      	ldr	r3, [pc, #140]	; (800b904 <_svfiprintf_r+0x1f4>)
 800b878:	bb1b      	cbnz	r3, 800b8c2 <_svfiprintf_r+0x1b2>
 800b87a:	9b03      	ldr	r3, [sp, #12]
 800b87c:	3307      	adds	r3, #7
 800b87e:	f023 0307 	bic.w	r3, r3, #7
 800b882:	3308      	adds	r3, #8
 800b884:	9303      	str	r3, [sp, #12]
 800b886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b888:	4433      	add	r3, r6
 800b88a:	9309      	str	r3, [sp, #36]	; 0x24
 800b88c:	e767      	b.n	800b75e <_svfiprintf_r+0x4e>
 800b88e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b892:	460c      	mov	r4, r1
 800b894:	2001      	movs	r0, #1
 800b896:	e7a5      	b.n	800b7e4 <_svfiprintf_r+0xd4>
 800b898:	2300      	movs	r3, #0
 800b89a:	3401      	adds	r4, #1
 800b89c:	9305      	str	r3, [sp, #20]
 800b89e:	4619      	mov	r1, r3
 800b8a0:	f04f 0c0a 	mov.w	ip, #10
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8aa:	3a30      	subs	r2, #48	; 0x30
 800b8ac:	2a09      	cmp	r2, #9
 800b8ae:	d903      	bls.n	800b8b8 <_svfiprintf_r+0x1a8>
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d0c5      	beq.n	800b840 <_svfiprintf_r+0x130>
 800b8b4:	9105      	str	r1, [sp, #20]
 800b8b6:	e7c3      	b.n	800b840 <_svfiprintf_r+0x130>
 800b8b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8bc:	4604      	mov	r4, r0
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e7f0      	b.n	800b8a4 <_svfiprintf_r+0x194>
 800b8c2:	ab03      	add	r3, sp, #12
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	462a      	mov	r2, r5
 800b8c8:	4b0f      	ldr	r3, [pc, #60]	; (800b908 <_svfiprintf_r+0x1f8>)
 800b8ca:	a904      	add	r1, sp, #16
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	f7fd fc9d 	bl	800920c <_printf_float>
 800b8d2:	1c42      	adds	r2, r0, #1
 800b8d4:	4606      	mov	r6, r0
 800b8d6:	d1d6      	bne.n	800b886 <_svfiprintf_r+0x176>
 800b8d8:	89ab      	ldrh	r3, [r5, #12]
 800b8da:	065b      	lsls	r3, r3, #25
 800b8dc:	f53f af2c 	bmi.w	800b738 <_svfiprintf_r+0x28>
 800b8e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8e2:	b01d      	add	sp, #116	; 0x74
 800b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e8:	ab03      	add	r3, sp, #12
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	462a      	mov	r2, r5
 800b8ee:	4b06      	ldr	r3, [pc, #24]	; (800b908 <_svfiprintf_r+0x1f8>)
 800b8f0:	a904      	add	r1, sp, #16
 800b8f2:	4638      	mov	r0, r7
 800b8f4:	f7fd ff2e 	bl	8009754 <_printf_i>
 800b8f8:	e7eb      	b.n	800b8d2 <_svfiprintf_r+0x1c2>
 800b8fa:	bf00      	nop
 800b8fc:	0800c8f4 	.word	0x0800c8f4
 800b900:	0800c8fe 	.word	0x0800c8fe
 800b904:	0800920d 	.word	0x0800920d
 800b908:	0800b659 	.word	0x0800b659
 800b90c:	0800c8fa 	.word	0x0800c8fa

0800b910 <__sfputc_r>:
 800b910:	6893      	ldr	r3, [r2, #8]
 800b912:	3b01      	subs	r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	b410      	push	{r4}
 800b918:	6093      	str	r3, [r2, #8]
 800b91a:	da08      	bge.n	800b92e <__sfputc_r+0x1e>
 800b91c:	6994      	ldr	r4, [r2, #24]
 800b91e:	42a3      	cmp	r3, r4
 800b920:	db01      	blt.n	800b926 <__sfputc_r+0x16>
 800b922:	290a      	cmp	r1, #10
 800b924:	d103      	bne.n	800b92e <__sfputc_r+0x1e>
 800b926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b92a:	f7fe b991 	b.w	8009c50 <__swbuf_r>
 800b92e:	6813      	ldr	r3, [r2, #0]
 800b930:	1c58      	adds	r0, r3, #1
 800b932:	6010      	str	r0, [r2, #0]
 800b934:	7019      	strb	r1, [r3, #0]
 800b936:	4608      	mov	r0, r1
 800b938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b93c:	4770      	bx	lr

0800b93e <__sfputs_r>:
 800b93e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b940:	4606      	mov	r6, r0
 800b942:	460f      	mov	r7, r1
 800b944:	4614      	mov	r4, r2
 800b946:	18d5      	adds	r5, r2, r3
 800b948:	42ac      	cmp	r4, r5
 800b94a:	d101      	bne.n	800b950 <__sfputs_r+0x12>
 800b94c:	2000      	movs	r0, #0
 800b94e:	e007      	b.n	800b960 <__sfputs_r+0x22>
 800b950:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b954:	463a      	mov	r2, r7
 800b956:	4630      	mov	r0, r6
 800b958:	f7ff ffda 	bl	800b910 <__sfputc_r>
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	d1f3      	bne.n	800b948 <__sfputs_r+0xa>
 800b960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b964 <_vfiprintf_r>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	460d      	mov	r5, r1
 800b96a:	b09d      	sub	sp, #116	; 0x74
 800b96c:	4614      	mov	r4, r2
 800b96e:	4698      	mov	r8, r3
 800b970:	4606      	mov	r6, r0
 800b972:	b118      	cbz	r0, 800b97c <_vfiprintf_r+0x18>
 800b974:	6983      	ldr	r3, [r0, #24]
 800b976:	b90b      	cbnz	r3, 800b97c <_vfiprintf_r+0x18>
 800b978:	f7ff f9be 	bl	800acf8 <__sinit>
 800b97c:	4b89      	ldr	r3, [pc, #548]	; (800bba4 <_vfiprintf_r+0x240>)
 800b97e:	429d      	cmp	r5, r3
 800b980:	d11b      	bne.n	800b9ba <_vfiprintf_r+0x56>
 800b982:	6875      	ldr	r5, [r6, #4]
 800b984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b986:	07d9      	lsls	r1, r3, #31
 800b988:	d405      	bmi.n	800b996 <_vfiprintf_r+0x32>
 800b98a:	89ab      	ldrh	r3, [r5, #12]
 800b98c:	059a      	lsls	r2, r3, #22
 800b98e:	d402      	bmi.n	800b996 <_vfiprintf_r+0x32>
 800b990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b992:	f7ff fa54 	bl	800ae3e <__retarget_lock_acquire_recursive>
 800b996:	89ab      	ldrh	r3, [r5, #12]
 800b998:	071b      	lsls	r3, r3, #28
 800b99a:	d501      	bpl.n	800b9a0 <_vfiprintf_r+0x3c>
 800b99c:	692b      	ldr	r3, [r5, #16]
 800b99e:	b9eb      	cbnz	r3, 800b9dc <_vfiprintf_r+0x78>
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7fe f9a6 	bl	8009cf4 <__swsetup_r>
 800b9a8:	b1c0      	cbz	r0, 800b9dc <_vfiprintf_r+0x78>
 800b9aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9ac:	07dc      	lsls	r4, r3, #31
 800b9ae:	d50e      	bpl.n	800b9ce <_vfiprintf_r+0x6a>
 800b9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b4:	b01d      	add	sp, #116	; 0x74
 800b9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ba:	4b7b      	ldr	r3, [pc, #492]	; (800bba8 <_vfiprintf_r+0x244>)
 800b9bc:	429d      	cmp	r5, r3
 800b9be:	d101      	bne.n	800b9c4 <_vfiprintf_r+0x60>
 800b9c0:	68b5      	ldr	r5, [r6, #8]
 800b9c2:	e7df      	b.n	800b984 <_vfiprintf_r+0x20>
 800b9c4:	4b79      	ldr	r3, [pc, #484]	; (800bbac <_vfiprintf_r+0x248>)
 800b9c6:	429d      	cmp	r5, r3
 800b9c8:	bf08      	it	eq
 800b9ca:	68f5      	ldreq	r5, [r6, #12]
 800b9cc:	e7da      	b.n	800b984 <_vfiprintf_r+0x20>
 800b9ce:	89ab      	ldrh	r3, [r5, #12]
 800b9d0:	0598      	lsls	r0, r3, #22
 800b9d2:	d4ed      	bmi.n	800b9b0 <_vfiprintf_r+0x4c>
 800b9d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9d6:	f7ff fa33 	bl	800ae40 <__retarget_lock_release_recursive>
 800b9da:	e7e9      	b.n	800b9b0 <_vfiprintf_r+0x4c>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	9309      	str	r3, [sp, #36]	; 0x24
 800b9e0:	2320      	movs	r3, #32
 800b9e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9ea:	2330      	movs	r3, #48	; 0x30
 800b9ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bbb0 <_vfiprintf_r+0x24c>
 800b9f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9f4:	f04f 0901 	mov.w	r9, #1
 800b9f8:	4623      	mov	r3, r4
 800b9fa:	469a      	mov	sl, r3
 800b9fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba00:	b10a      	cbz	r2, 800ba06 <_vfiprintf_r+0xa2>
 800ba02:	2a25      	cmp	r2, #37	; 0x25
 800ba04:	d1f9      	bne.n	800b9fa <_vfiprintf_r+0x96>
 800ba06:	ebba 0b04 	subs.w	fp, sl, r4
 800ba0a:	d00b      	beq.n	800ba24 <_vfiprintf_r+0xc0>
 800ba0c:	465b      	mov	r3, fp
 800ba0e:	4622      	mov	r2, r4
 800ba10:	4629      	mov	r1, r5
 800ba12:	4630      	mov	r0, r6
 800ba14:	f7ff ff93 	bl	800b93e <__sfputs_r>
 800ba18:	3001      	adds	r0, #1
 800ba1a:	f000 80aa 	beq.w	800bb72 <_vfiprintf_r+0x20e>
 800ba1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba20:	445a      	add	r2, fp
 800ba22:	9209      	str	r2, [sp, #36]	; 0x24
 800ba24:	f89a 3000 	ldrb.w	r3, [sl]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f000 80a2 	beq.w	800bb72 <_vfiprintf_r+0x20e>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f04f 32ff 	mov.w	r2, #4294967295
 800ba34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba38:	f10a 0a01 	add.w	sl, sl, #1
 800ba3c:	9304      	str	r3, [sp, #16]
 800ba3e:	9307      	str	r3, [sp, #28]
 800ba40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba44:	931a      	str	r3, [sp, #104]	; 0x68
 800ba46:	4654      	mov	r4, sl
 800ba48:	2205      	movs	r2, #5
 800ba4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba4e:	4858      	ldr	r0, [pc, #352]	; (800bbb0 <_vfiprintf_r+0x24c>)
 800ba50:	f7f4 fbae 	bl	80001b0 <memchr>
 800ba54:	9a04      	ldr	r2, [sp, #16]
 800ba56:	b9d8      	cbnz	r0, 800ba90 <_vfiprintf_r+0x12c>
 800ba58:	06d1      	lsls	r1, r2, #27
 800ba5a:	bf44      	itt	mi
 800ba5c:	2320      	movmi	r3, #32
 800ba5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba62:	0713      	lsls	r3, r2, #28
 800ba64:	bf44      	itt	mi
 800ba66:	232b      	movmi	r3, #43	; 0x2b
 800ba68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba70:	2b2a      	cmp	r3, #42	; 0x2a
 800ba72:	d015      	beq.n	800baa0 <_vfiprintf_r+0x13c>
 800ba74:	9a07      	ldr	r2, [sp, #28]
 800ba76:	4654      	mov	r4, sl
 800ba78:	2000      	movs	r0, #0
 800ba7a:	f04f 0c0a 	mov.w	ip, #10
 800ba7e:	4621      	mov	r1, r4
 800ba80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba84:	3b30      	subs	r3, #48	; 0x30
 800ba86:	2b09      	cmp	r3, #9
 800ba88:	d94e      	bls.n	800bb28 <_vfiprintf_r+0x1c4>
 800ba8a:	b1b0      	cbz	r0, 800baba <_vfiprintf_r+0x156>
 800ba8c:	9207      	str	r2, [sp, #28]
 800ba8e:	e014      	b.n	800baba <_vfiprintf_r+0x156>
 800ba90:	eba0 0308 	sub.w	r3, r0, r8
 800ba94:	fa09 f303 	lsl.w	r3, r9, r3
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	9304      	str	r3, [sp, #16]
 800ba9c:	46a2      	mov	sl, r4
 800ba9e:	e7d2      	b.n	800ba46 <_vfiprintf_r+0xe2>
 800baa0:	9b03      	ldr	r3, [sp, #12]
 800baa2:	1d19      	adds	r1, r3, #4
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	9103      	str	r1, [sp, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	bfbb      	ittet	lt
 800baac:	425b      	neglt	r3, r3
 800baae:	f042 0202 	orrlt.w	r2, r2, #2
 800bab2:	9307      	strge	r3, [sp, #28]
 800bab4:	9307      	strlt	r3, [sp, #28]
 800bab6:	bfb8      	it	lt
 800bab8:	9204      	strlt	r2, [sp, #16]
 800baba:	7823      	ldrb	r3, [r4, #0]
 800babc:	2b2e      	cmp	r3, #46	; 0x2e
 800babe:	d10c      	bne.n	800bada <_vfiprintf_r+0x176>
 800bac0:	7863      	ldrb	r3, [r4, #1]
 800bac2:	2b2a      	cmp	r3, #42	; 0x2a
 800bac4:	d135      	bne.n	800bb32 <_vfiprintf_r+0x1ce>
 800bac6:	9b03      	ldr	r3, [sp, #12]
 800bac8:	1d1a      	adds	r2, r3, #4
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	9203      	str	r2, [sp, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	bfb8      	it	lt
 800bad2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bad6:	3402      	adds	r4, #2
 800bad8:	9305      	str	r3, [sp, #20]
 800bada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bbc0 <_vfiprintf_r+0x25c>
 800bade:	7821      	ldrb	r1, [r4, #0]
 800bae0:	2203      	movs	r2, #3
 800bae2:	4650      	mov	r0, sl
 800bae4:	f7f4 fb64 	bl	80001b0 <memchr>
 800bae8:	b140      	cbz	r0, 800bafc <_vfiprintf_r+0x198>
 800baea:	2340      	movs	r3, #64	; 0x40
 800baec:	eba0 000a 	sub.w	r0, r0, sl
 800baf0:	fa03 f000 	lsl.w	r0, r3, r0
 800baf4:	9b04      	ldr	r3, [sp, #16]
 800baf6:	4303      	orrs	r3, r0
 800baf8:	3401      	adds	r4, #1
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb00:	482c      	ldr	r0, [pc, #176]	; (800bbb4 <_vfiprintf_r+0x250>)
 800bb02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb06:	2206      	movs	r2, #6
 800bb08:	f7f4 fb52 	bl	80001b0 <memchr>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d03f      	beq.n	800bb90 <_vfiprintf_r+0x22c>
 800bb10:	4b29      	ldr	r3, [pc, #164]	; (800bbb8 <_vfiprintf_r+0x254>)
 800bb12:	bb1b      	cbnz	r3, 800bb5c <_vfiprintf_r+0x1f8>
 800bb14:	9b03      	ldr	r3, [sp, #12]
 800bb16:	3307      	adds	r3, #7
 800bb18:	f023 0307 	bic.w	r3, r3, #7
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	9303      	str	r3, [sp, #12]
 800bb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb22:	443b      	add	r3, r7
 800bb24:	9309      	str	r3, [sp, #36]	; 0x24
 800bb26:	e767      	b.n	800b9f8 <_vfiprintf_r+0x94>
 800bb28:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	2001      	movs	r0, #1
 800bb30:	e7a5      	b.n	800ba7e <_vfiprintf_r+0x11a>
 800bb32:	2300      	movs	r3, #0
 800bb34:	3401      	adds	r4, #1
 800bb36:	9305      	str	r3, [sp, #20]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	f04f 0c0a 	mov.w	ip, #10
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb44:	3a30      	subs	r2, #48	; 0x30
 800bb46:	2a09      	cmp	r2, #9
 800bb48:	d903      	bls.n	800bb52 <_vfiprintf_r+0x1ee>
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d0c5      	beq.n	800bada <_vfiprintf_r+0x176>
 800bb4e:	9105      	str	r1, [sp, #20]
 800bb50:	e7c3      	b.n	800bada <_vfiprintf_r+0x176>
 800bb52:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb56:	4604      	mov	r4, r0
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e7f0      	b.n	800bb3e <_vfiprintf_r+0x1da>
 800bb5c:	ab03      	add	r3, sp, #12
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	462a      	mov	r2, r5
 800bb62:	4b16      	ldr	r3, [pc, #88]	; (800bbbc <_vfiprintf_r+0x258>)
 800bb64:	a904      	add	r1, sp, #16
 800bb66:	4630      	mov	r0, r6
 800bb68:	f7fd fb50 	bl	800920c <_printf_float>
 800bb6c:	4607      	mov	r7, r0
 800bb6e:	1c78      	adds	r0, r7, #1
 800bb70:	d1d6      	bne.n	800bb20 <_vfiprintf_r+0x1bc>
 800bb72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb74:	07d9      	lsls	r1, r3, #31
 800bb76:	d405      	bmi.n	800bb84 <_vfiprintf_r+0x220>
 800bb78:	89ab      	ldrh	r3, [r5, #12]
 800bb7a:	059a      	lsls	r2, r3, #22
 800bb7c:	d402      	bmi.n	800bb84 <_vfiprintf_r+0x220>
 800bb7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb80:	f7ff f95e 	bl	800ae40 <__retarget_lock_release_recursive>
 800bb84:	89ab      	ldrh	r3, [r5, #12]
 800bb86:	065b      	lsls	r3, r3, #25
 800bb88:	f53f af12 	bmi.w	800b9b0 <_vfiprintf_r+0x4c>
 800bb8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb8e:	e711      	b.n	800b9b4 <_vfiprintf_r+0x50>
 800bb90:	ab03      	add	r3, sp, #12
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	462a      	mov	r2, r5
 800bb96:	4b09      	ldr	r3, [pc, #36]	; (800bbbc <_vfiprintf_r+0x258>)
 800bb98:	a904      	add	r1, sp, #16
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f7fd fdda 	bl	8009754 <_printf_i>
 800bba0:	e7e4      	b.n	800bb6c <_vfiprintf_r+0x208>
 800bba2:	bf00      	nop
 800bba4:	0800c758 	.word	0x0800c758
 800bba8:	0800c778 	.word	0x0800c778
 800bbac:	0800c738 	.word	0x0800c738
 800bbb0:	0800c8f4 	.word	0x0800c8f4
 800bbb4:	0800c8fe 	.word	0x0800c8fe
 800bbb8:	0800920d 	.word	0x0800920d
 800bbbc:	0800b93f 	.word	0x0800b93f
 800bbc0:	0800c8fa 	.word	0x0800c8fa

0800bbc4 <__sread>:
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbcc:	f000 f920 	bl	800be10 <_read_r>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	bfab      	itete	ge
 800bbd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbd6:	89a3      	ldrhlt	r3, [r4, #12]
 800bbd8:	181b      	addge	r3, r3, r0
 800bbda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbde:	bfac      	ite	ge
 800bbe0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbe2:	81a3      	strhlt	r3, [r4, #12]
 800bbe4:	bd10      	pop	{r4, pc}

0800bbe6 <__swrite>:
 800bbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbea:	461f      	mov	r7, r3
 800bbec:	898b      	ldrh	r3, [r1, #12]
 800bbee:	05db      	lsls	r3, r3, #23
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	4616      	mov	r6, r2
 800bbf6:	d505      	bpl.n	800bc04 <__swrite+0x1e>
 800bbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f000 f898 	bl	800bd34 <_lseek_r>
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc0e:	81a3      	strh	r3, [r4, #12]
 800bc10:	4632      	mov	r2, r6
 800bc12:	463b      	mov	r3, r7
 800bc14:	4628      	mov	r0, r5
 800bc16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1a:	f000 b817 	b.w	800bc4c <_write_r>

0800bc1e <__sseek>:
 800bc1e:	b510      	push	{r4, lr}
 800bc20:	460c      	mov	r4, r1
 800bc22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc26:	f000 f885 	bl	800bd34 <_lseek_r>
 800bc2a:	1c43      	adds	r3, r0, #1
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	bf15      	itete	ne
 800bc30:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc3a:	81a3      	strheq	r3, [r4, #12]
 800bc3c:	bf18      	it	ne
 800bc3e:	81a3      	strhne	r3, [r4, #12]
 800bc40:	bd10      	pop	{r4, pc}

0800bc42 <__sclose>:
 800bc42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc46:	f000 b831 	b.w	800bcac <_close_r>
	...

0800bc4c <_write_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4d07      	ldr	r5, [pc, #28]	; (800bc6c <_write_r+0x20>)
 800bc50:	4604      	mov	r4, r0
 800bc52:	4608      	mov	r0, r1
 800bc54:	4611      	mov	r1, r2
 800bc56:	2200      	movs	r2, #0
 800bc58:	602a      	str	r2, [r5, #0]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	f7f5 fbb5 	bl	80013ca <_write>
 800bc60:	1c43      	adds	r3, r0, #1
 800bc62:	d102      	bne.n	800bc6a <_write_r+0x1e>
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	b103      	cbz	r3, 800bc6a <_write_r+0x1e>
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	bd38      	pop	{r3, r4, r5, pc}
 800bc6c:	2000053c 	.word	0x2000053c

0800bc70 <__assert_func>:
 800bc70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc72:	4614      	mov	r4, r2
 800bc74:	461a      	mov	r2, r3
 800bc76:	4b09      	ldr	r3, [pc, #36]	; (800bc9c <__assert_func+0x2c>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4605      	mov	r5, r0
 800bc7c:	68d8      	ldr	r0, [r3, #12]
 800bc7e:	b14c      	cbz	r4, 800bc94 <__assert_func+0x24>
 800bc80:	4b07      	ldr	r3, [pc, #28]	; (800bca0 <__assert_func+0x30>)
 800bc82:	9100      	str	r1, [sp, #0]
 800bc84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc88:	4906      	ldr	r1, [pc, #24]	; (800bca4 <__assert_func+0x34>)
 800bc8a:	462b      	mov	r3, r5
 800bc8c:	f000 f81e 	bl	800bccc <fiprintf>
 800bc90:	f000 f8dd 	bl	800be4e <abort>
 800bc94:	4b04      	ldr	r3, [pc, #16]	; (800bca8 <__assert_func+0x38>)
 800bc96:	461c      	mov	r4, r3
 800bc98:	e7f3      	b.n	800bc82 <__assert_func+0x12>
 800bc9a:	bf00      	nop
 800bc9c:	20000010 	.word	0x20000010
 800bca0:	0800c905 	.word	0x0800c905
 800bca4:	0800c912 	.word	0x0800c912
 800bca8:	0800c940 	.word	0x0800c940

0800bcac <_close_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d06      	ldr	r5, [pc, #24]	; (800bcc8 <_close_r+0x1c>)
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	602b      	str	r3, [r5, #0]
 800bcb8:	f7f6 f993 	bl	8001fe2 <_close>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_close_r+0x1a>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_close_r+0x1a>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	2000053c 	.word	0x2000053c

0800bccc <fiprintf>:
 800bccc:	b40e      	push	{r1, r2, r3}
 800bcce:	b503      	push	{r0, r1, lr}
 800bcd0:	4601      	mov	r1, r0
 800bcd2:	ab03      	add	r3, sp, #12
 800bcd4:	4805      	ldr	r0, [pc, #20]	; (800bcec <fiprintf+0x20>)
 800bcd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcda:	6800      	ldr	r0, [r0, #0]
 800bcdc:	9301      	str	r3, [sp, #4]
 800bcde:	f7ff fe41 	bl	800b964 <_vfiprintf_r>
 800bce2:	b002      	add	sp, #8
 800bce4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bce8:	b003      	add	sp, #12
 800bcea:	4770      	bx	lr
 800bcec:	20000010 	.word	0x20000010

0800bcf0 <_fstat_r>:
 800bcf0:	b538      	push	{r3, r4, r5, lr}
 800bcf2:	4d07      	ldr	r5, [pc, #28]	; (800bd10 <_fstat_r+0x20>)
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	4608      	mov	r0, r1
 800bcfa:	4611      	mov	r1, r2
 800bcfc:	602b      	str	r3, [r5, #0]
 800bcfe:	f7f6 f97c 	bl	8001ffa <_fstat>
 800bd02:	1c43      	adds	r3, r0, #1
 800bd04:	d102      	bne.n	800bd0c <_fstat_r+0x1c>
 800bd06:	682b      	ldr	r3, [r5, #0]
 800bd08:	b103      	cbz	r3, 800bd0c <_fstat_r+0x1c>
 800bd0a:	6023      	str	r3, [r4, #0]
 800bd0c:	bd38      	pop	{r3, r4, r5, pc}
 800bd0e:	bf00      	nop
 800bd10:	2000053c 	.word	0x2000053c

0800bd14 <_isatty_r>:
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	4d06      	ldr	r5, [pc, #24]	; (800bd30 <_isatty_r+0x1c>)
 800bd18:	2300      	movs	r3, #0
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	4608      	mov	r0, r1
 800bd1e:	602b      	str	r3, [r5, #0]
 800bd20:	f7f6 f97b 	bl	800201a <_isatty>
 800bd24:	1c43      	adds	r3, r0, #1
 800bd26:	d102      	bne.n	800bd2e <_isatty_r+0x1a>
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	b103      	cbz	r3, 800bd2e <_isatty_r+0x1a>
 800bd2c:	6023      	str	r3, [r4, #0]
 800bd2e:	bd38      	pop	{r3, r4, r5, pc}
 800bd30:	2000053c 	.word	0x2000053c

0800bd34 <_lseek_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4d07      	ldr	r5, [pc, #28]	; (800bd54 <_lseek_r+0x20>)
 800bd38:	4604      	mov	r4, r0
 800bd3a:	4608      	mov	r0, r1
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	2200      	movs	r2, #0
 800bd40:	602a      	str	r2, [r5, #0]
 800bd42:	461a      	mov	r2, r3
 800bd44:	f7f6 f974 	bl	8002030 <_lseek>
 800bd48:	1c43      	adds	r3, r0, #1
 800bd4a:	d102      	bne.n	800bd52 <_lseek_r+0x1e>
 800bd4c:	682b      	ldr	r3, [r5, #0]
 800bd4e:	b103      	cbz	r3, 800bd52 <_lseek_r+0x1e>
 800bd50:	6023      	str	r3, [r4, #0]
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	2000053c 	.word	0x2000053c

0800bd58 <__ascii_mbtowc>:
 800bd58:	b082      	sub	sp, #8
 800bd5a:	b901      	cbnz	r1, 800bd5e <__ascii_mbtowc+0x6>
 800bd5c:	a901      	add	r1, sp, #4
 800bd5e:	b142      	cbz	r2, 800bd72 <__ascii_mbtowc+0x1a>
 800bd60:	b14b      	cbz	r3, 800bd76 <__ascii_mbtowc+0x1e>
 800bd62:	7813      	ldrb	r3, [r2, #0]
 800bd64:	600b      	str	r3, [r1, #0]
 800bd66:	7812      	ldrb	r2, [r2, #0]
 800bd68:	1e10      	subs	r0, r2, #0
 800bd6a:	bf18      	it	ne
 800bd6c:	2001      	movne	r0, #1
 800bd6e:	b002      	add	sp, #8
 800bd70:	4770      	bx	lr
 800bd72:	4610      	mov	r0, r2
 800bd74:	e7fb      	b.n	800bd6e <__ascii_mbtowc+0x16>
 800bd76:	f06f 0001 	mvn.w	r0, #1
 800bd7a:	e7f8      	b.n	800bd6e <__ascii_mbtowc+0x16>

0800bd7c <memmove>:
 800bd7c:	4288      	cmp	r0, r1
 800bd7e:	b510      	push	{r4, lr}
 800bd80:	eb01 0402 	add.w	r4, r1, r2
 800bd84:	d902      	bls.n	800bd8c <memmove+0x10>
 800bd86:	4284      	cmp	r4, r0
 800bd88:	4623      	mov	r3, r4
 800bd8a:	d807      	bhi.n	800bd9c <memmove+0x20>
 800bd8c:	1e43      	subs	r3, r0, #1
 800bd8e:	42a1      	cmp	r1, r4
 800bd90:	d008      	beq.n	800bda4 <memmove+0x28>
 800bd92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd9a:	e7f8      	b.n	800bd8e <memmove+0x12>
 800bd9c:	4402      	add	r2, r0
 800bd9e:	4601      	mov	r1, r0
 800bda0:	428a      	cmp	r2, r1
 800bda2:	d100      	bne.n	800bda6 <memmove+0x2a>
 800bda4:	bd10      	pop	{r4, pc}
 800bda6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdae:	e7f7      	b.n	800bda0 <memmove+0x24>

0800bdb0 <_realloc_r>:
 800bdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb4:	4680      	mov	r8, r0
 800bdb6:	4614      	mov	r4, r2
 800bdb8:	460e      	mov	r6, r1
 800bdba:	b921      	cbnz	r1, 800bdc6 <_realloc_r+0x16>
 800bdbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	f7fd b90f 	b.w	8008fe4 <_malloc_r>
 800bdc6:	b92a      	cbnz	r2, 800bdd4 <_realloc_r+0x24>
 800bdc8:	f7fd f8a0 	bl	8008f0c <_free_r>
 800bdcc:	4625      	mov	r5, r4
 800bdce:	4628      	mov	r0, r5
 800bdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd4:	f000 f842 	bl	800be5c <_malloc_usable_size_r>
 800bdd8:	4284      	cmp	r4, r0
 800bdda:	4607      	mov	r7, r0
 800bddc:	d802      	bhi.n	800bde4 <_realloc_r+0x34>
 800bdde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bde2:	d812      	bhi.n	800be0a <_realloc_r+0x5a>
 800bde4:	4621      	mov	r1, r4
 800bde6:	4640      	mov	r0, r8
 800bde8:	f7fd f8fc 	bl	8008fe4 <_malloc_r>
 800bdec:	4605      	mov	r5, r0
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d0ed      	beq.n	800bdce <_realloc_r+0x1e>
 800bdf2:	42bc      	cmp	r4, r7
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	4631      	mov	r1, r6
 800bdf8:	bf28      	it	cs
 800bdfa:	463a      	movcs	r2, r7
 800bdfc:	f7fd f870 	bl	8008ee0 <memcpy>
 800be00:	4631      	mov	r1, r6
 800be02:	4640      	mov	r0, r8
 800be04:	f7fd f882 	bl	8008f0c <_free_r>
 800be08:	e7e1      	b.n	800bdce <_realloc_r+0x1e>
 800be0a:	4635      	mov	r5, r6
 800be0c:	e7df      	b.n	800bdce <_realloc_r+0x1e>
	...

0800be10 <_read_r>:
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	4d07      	ldr	r5, [pc, #28]	; (800be30 <_read_r+0x20>)
 800be14:	4604      	mov	r4, r0
 800be16:	4608      	mov	r0, r1
 800be18:	4611      	mov	r1, r2
 800be1a:	2200      	movs	r2, #0
 800be1c:	602a      	str	r2, [r5, #0]
 800be1e:	461a      	mov	r2, r3
 800be20:	f7f6 f8c2 	bl	8001fa8 <_read>
 800be24:	1c43      	adds	r3, r0, #1
 800be26:	d102      	bne.n	800be2e <_read_r+0x1e>
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	b103      	cbz	r3, 800be2e <_read_r+0x1e>
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	bd38      	pop	{r3, r4, r5, pc}
 800be30:	2000053c 	.word	0x2000053c

0800be34 <__ascii_wctomb>:
 800be34:	b149      	cbz	r1, 800be4a <__ascii_wctomb+0x16>
 800be36:	2aff      	cmp	r2, #255	; 0xff
 800be38:	bf85      	ittet	hi
 800be3a:	238a      	movhi	r3, #138	; 0x8a
 800be3c:	6003      	strhi	r3, [r0, #0]
 800be3e:	700a      	strbls	r2, [r1, #0]
 800be40:	f04f 30ff 	movhi.w	r0, #4294967295
 800be44:	bf98      	it	ls
 800be46:	2001      	movls	r0, #1
 800be48:	4770      	bx	lr
 800be4a:	4608      	mov	r0, r1
 800be4c:	4770      	bx	lr

0800be4e <abort>:
 800be4e:	b508      	push	{r3, lr}
 800be50:	2006      	movs	r0, #6
 800be52:	f000 f833 	bl	800bebc <raise>
 800be56:	2001      	movs	r0, #1
 800be58:	f7f6 f89c 	bl	8001f94 <_exit>

0800be5c <_malloc_usable_size_r>:
 800be5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be60:	1f18      	subs	r0, r3, #4
 800be62:	2b00      	cmp	r3, #0
 800be64:	bfbc      	itt	lt
 800be66:	580b      	ldrlt	r3, [r1, r0]
 800be68:	18c0      	addlt	r0, r0, r3
 800be6a:	4770      	bx	lr

0800be6c <_raise_r>:
 800be6c:	291f      	cmp	r1, #31
 800be6e:	b538      	push	{r3, r4, r5, lr}
 800be70:	4604      	mov	r4, r0
 800be72:	460d      	mov	r5, r1
 800be74:	d904      	bls.n	800be80 <_raise_r+0x14>
 800be76:	2316      	movs	r3, #22
 800be78:	6003      	str	r3, [r0, #0]
 800be7a:	f04f 30ff 	mov.w	r0, #4294967295
 800be7e:	bd38      	pop	{r3, r4, r5, pc}
 800be80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be82:	b112      	cbz	r2, 800be8a <_raise_r+0x1e>
 800be84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be88:	b94b      	cbnz	r3, 800be9e <_raise_r+0x32>
 800be8a:	4620      	mov	r0, r4
 800be8c:	f000 f830 	bl	800bef0 <_getpid_r>
 800be90:	462a      	mov	r2, r5
 800be92:	4601      	mov	r1, r0
 800be94:	4620      	mov	r0, r4
 800be96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be9a:	f000 b817 	b.w	800becc <_kill_r>
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d00a      	beq.n	800beb8 <_raise_r+0x4c>
 800bea2:	1c59      	adds	r1, r3, #1
 800bea4:	d103      	bne.n	800beae <_raise_r+0x42>
 800bea6:	2316      	movs	r3, #22
 800bea8:	6003      	str	r3, [r0, #0]
 800beaa:	2001      	movs	r0, #1
 800beac:	e7e7      	b.n	800be7e <_raise_r+0x12>
 800beae:	2400      	movs	r4, #0
 800beb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800beb4:	4628      	mov	r0, r5
 800beb6:	4798      	blx	r3
 800beb8:	2000      	movs	r0, #0
 800beba:	e7e0      	b.n	800be7e <_raise_r+0x12>

0800bebc <raise>:
 800bebc:	4b02      	ldr	r3, [pc, #8]	; (800bec8 <raise+0xc>)
 800bebe:	4601      	mov	r1, r0
 800bec0:	6818      	ldr	r0, [r3, #0]
 800bec2:	f7ff bfd3 	b.w	800be6c <_raise_r>
 800bec6:	bf00      	nop
 800bec8:	20000010 	.word	0x20000010

0800becc <_kill_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4d07      	ldr	r5, [pc, #28]	; (800beec <_kill_r+0x20>)
 800bed0:	2300      	movs	r3, #0
 800bed2:	4604      	mov	r4, r0
 800bed4:	4608      	mov	r0, r1
 800bed6:	4611      	mov	r1, r2
 800bed8:	602b      	str	r3, [r5, #0]
 800beda:	f7f6 f84b 	bl	8001f74 <_kill>
 800bede:	1c43      	adds	r3, r0, #1
 800bee0:	d102      	bne.n	800bee8 <_kill_r+0x1c>
 800bee2:	682b      	ldr	r3, [r5, #0]
 800bee4:	b103      	cbz	r3, 800bee8 <_kill_r+0x1c>
 800bee6:	6023      	str	r3, [r4, #0]
 800bee8:	bd38      	pop	{r3, r4, r5, pc}
 800beea:	bf00      	nop
 800beec:	2000053c 	.word	0x2000053c

0800bef0 <_getpid_r>:
 800bef0:	f7f6 b838 	b.w	8001f64 <_getpid>
 800bef4:	0000      	movs	r0, r0
	...

0800bef8 <log>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	ed2d 8b02 	vpush	{d8}
 800befe:	ec55 4b10 	vmov	r4, r5, d0
 800bf02:	f000 f839 	bl	800bf78 <__ieee754_log>
 800bf06:	4622      	mov	r2, r4
 800bf08:	462b      	mov	r3, r5
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	eeb0 8a40 	vmov.f32	s16, s0
 800bf12:	eef0 8a60 	vmov.f32	s17, s1
 800bf16:	f7f4 fdf1 	bl	8000afc <__aeabi_dcmpun>
 800bf1a:	b998      	cbnz	r0, 800bf44 <log+0x4c>
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2300      	movs	r3, #0
 800bf20:	4620      	mov	r0, r4
 800bf22:	4629      	mov	r1, r5
 800bf24:	f7f4 fde0 	bl	8000ae8 <__aeabi_dcmpgt>
 800bf28:	b960      	cbnz	r0, 800bf44 <log+0x4c>
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	4620      	mov	r0, r4
 800bf30:	4629      	mov	r1, r5
 800bf32:	f7f4 fdb1 	bl	8000a98 <__aeabi_dcmpeq>
 800bf36:	b160      	cbz	r0, 800bf52 <log+0x5a>
 800bf38:	f7fc ffa0 	bl	8008e7c <__errno>
 800bf3c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800bf68 <log+0x70>
 800bf40:	2322      	movs	r3, #34	; 0x22
 800bf42:	6003      	str	r3, [r0, #0]
 800bf44:	eeb0 0a48 	vmov.f32	s0, s16
 800bf48:	eef0 0a68 	vmov.f32	s1, s17
 800bf4c:	ecbd 8b02 	vpop	{d8}
 800bf50:	bd38      	pop	{r3, r4, r5, pc}
 800bf52:	f7fc ff93 	bl	8008e7c <__errno>
 800bf56:	ecbd 8b02 	vpop	{d8}
 800bf5a:	2321      	movs	r3, #33	; 0x21
 800bf5c:	6003      	str	r3, [r0, #0]
 800bf5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf62:	4803      	ldr	r0, [pc, #12]	; (800bf70 <log+0x78>)
 800bf64:	f000 b9c4 	b.w	800c2f0 <nan>
 800bf68:	00000000 	.word	0x00000000
 800bf6c:	fff00000 	.word	0xfff00000
 800bf70:	0800c940 	.word	0x0800c940
 800bf74:	00000000 	.word	0x00000000

0800bf78 <__ieee754_log>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	ec51 0b10 	vmov	r0, r1, d0
 800bf80:	ed2d 8b04 	vpush	{d8-d9}
 800bf84:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bf88:	b083      	sub	sp, #12
 800bf8a:	460d      	mov	r5, r1
 800bf8c:	da29      	bge.n	800bfe2 <__ieee754_log+0x6a>
 800bf8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf92:	4303      	orrs	r3, r0
 800bf94:	ee10 2a10 	vmov	r2, s0
 800bf98:	d10c      	bne.n	800bfb4 <__ieee754_log+0x3c>
 800bf9a:	49cf      	ldr	r1, [pc, #828]	; (800c2d8 <__ieee754_log+0x360>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	f7f4 fc3b 	bl	800081c <__aeabi_ddiv>
 800bfa6:	ec41 0b10 	vmov	d0, r0, r1
 800bfaa:	b003      	add	sp, #12
 800bfac:	ecbd 8b04 	vpop	{d8-d9}
 800bfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb4:	2900      	cmp	r1, #0
 800bfb6:	da05      	bge.n	800bfc4 <__ieee754_log+0x4c>
 800bfb8:	460b      	mov	r3, r1
 800bfba:	f7f4 f94d 	bl	8000258 <__aeabi_dsub>
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	e7ee      	b.n	800bfa2 <__ieee754_log+0x2a>
 800bfc4:	4bc5      	ldr	r3, [pc, #788]	; (800c2dc <__ieee754_log+0x364>)
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f7f4 fafe 	bl	80005c8 <__aeabi_dmul>
 800bfcc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800bfd0:	460d      	mov	r5, r1
 800bfd2:	4ac3      	ldr	r2, [pc, #780]	; (800c2e0 <__ieee754_log+0x368>)
 800bfd4:	4295      	cmp	r5, r2
 800bfd6:	dd06      	ble.n	800bfe6 <__ieee754_log+0x6e>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	f7f4 f93e 	bl	800025c <__adddf3>
 800bfe0:	e7e1      	b.n	800bfa6 <__ieee754_log+0x2e>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	e7f5      	b.n	800bfd2 <__ieee754_log+0x5a>
 800bfe6:	152c      	asrs	r4, r5, #20
 800bfe8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bfec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bff0:	441c      	add	r4, r3
 800bff2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800bff6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800bffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bffe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c002:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c006:	ea42 0105 	orr.w	r1, r2, r5
 800c00a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c00e:	2200      	movs	r2, #0
 800c010:	4bb4      	ldr	r3, [pc, #720]	; (800c2e4 <__ieee754_log+0x36c>)
 800c012:	f7f4 f921 	bl	8000258 <__aeabi_dsub>
 800c016:	1cab      	adds	r3, r5, #2
 800c018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	4682      	mov	sl, r0
 800c020:	468b      	mov	fp, r1
 800c022:	f04f 0200 	mov.w	r2, #0
 800c026:	dc53      	bgt.n	800c0d0 <__ieee754_log+0x158>
 800c028:	2300      	movs	r3, #0
 800c02a:	f7f4 fd35 	bl	8000a98 <__aeabi_dcmpeq>
 800c02e:	b1d0      	cbz	r0, 800c066 <__ieee754_log+0xee>
 800c030:	2c00      	cmp	r4, #0
 800c032:	f000 8122 	beq.w	800c27a <__ieee754_log+0x302>
 800c036:	4620      	mov	r0, r4
 800c038:	f7f4 fa5c 	bl	80004f4 <__aeabi_i2d>
 800c03c:	a390      	add	r3, pc, #576	; (adr r3, 800c280 <__ieee754_log+0x308>)
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	4606      	mov	r6, r0
 800c044:	460f      	mov	r7, r1
 800c046:	f7f4 fabf 	bl	80005c8 <__aeabi_dmul>
 800c04a:	a38f      	add	r3, pc, #572	; (adr r3, 800c288 <__ieee754_log+0x310>)
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	4604      	mov	r4, r0
 800c052:	460d      	mov	r5, r1
 800c054:	4630      	mov	r0, r6
 800c056:	4639      	mov	r1, r7
 800c058:	f7f4 fab6 	bl	80005c8 <__aeabi_dmul>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4620      	mov	r0, r4
 800c062:	4629      	mov	r1, r5
 800c064:	e7ba      	b.n	800bfdc <__ieee754_log+0x64>
 800c066:	a38a      	add	r3, pc, #552	; (adr r3, 800c290 <__ieee754_log+0x318>)
 800c068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06c:	4650      	mov	r0, sl
 800c06e:	4659      	mov	r1, fp
 800c070:	f7f4 faaa 	bl	80005c8 <__aeabi_dmul>
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	2000      	movs	r0, #0
 800c07a:	499b      	ldr	r1, [pc, #620]	; (800c2e8 <__ieee754_log+0x370>)
 800c07c:	f7f4 f8ec 	bl	8000258 <__aeabi_dsub>
 800c080:	4652      	mov	r2, sl
 800c082:	4606      	mov	r6, r0
 800c084:	460f      	mov	r7, r1
 800c086:	465b      	mov	r3, fp
 800c088:	4650      	mov	r0, sl
 800c08a:	4659      	mov	r1, fp
 800c08c:	f7f4 fa9c 	bl	80005c8 <__aeabi_dmul>
 800c090:	4602      	mov	r2, r0
 800c092:	460b      	mov	r3, r1
 800c094:	4630      	mov	r0, r6
 800c096:	4639      	mov	r1, r7
 800c098:	f7f4 fa96 	bl	80005c8 <__aeabi_dmul>
 800c09c:	4606      	mov	r6, r0
 800c09e:	460f      	mov	r7, r1
 800c0a0:	b914      	cbnz	r4, 800c0a8 <__ieee754_log+0x130>
 800c0a2:	4632      	mov	r2, r6
 800c0a4:	463b      	mov	r3, r7
 800c0a6:	e0a2      	b.n	800c1ee <__ieee754_log+0x276>
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f7f4 fa23 	bl	80004f4 <__aeabi_i2d>
 800c0ae:	a374      	add	r3, pc, #464	; (adr r3, 800c280 <__ieee754_log+0x308>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	4680      	mov	r8, r0
 800c0b6:	4689      	mov	r9, r1
 800c0b8:	f7f4 fa86 	bl	80005c8 <__aeabi_dmul>
 800c0bc:	a372      	add	r3, pc, #456	; (adr r3, 800c288 <__ieee754_log+0x310>)
 800c0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	460d      	mov	r5, r1
 800c0c6:	4640      	mov	r0, r8
 800c0c8:	4649      	mov	r1, r9
 800c0ca:	f7f4 fa7d 	bl	80005c8 <__aeabi_dmul>
 800c0ce:	e0a7      	b.n	800c220 <__ieee754_log+0x2a8>
 800c0d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0d4:	f7f4 f8c2 	bl	800025c <__adddf3>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	4650      	mov	r0, sl
 800c0de:	4659      	mov	r1, fp
 800c0e0:	f7f4 fb9c 	bl	800081c <__aeabi_ddiv>
 800c0e4:	ec41 0b18 	vmov	d8, r0, r1
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	f7f4 fa03 	bl	80004f4 <__aeabi_i2d>
 800c0ee:	ec53 2b18 	vmov	r2, r3, d8
 800c0f2:	ec41 0b19 	vmov	d9, r0, r1
 800c0f6:	ec51 0b18 	vmov	r0, r1, d8
 800c0fa:	f7f4 fa65 	bl	80005c8 <__aeabi_dmul>
 800c0fe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c102:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c106:	9301      	str	r3, [sp, #4]
 800c108:	4602      	mov	r2, r0
 800c10a:	460b      	mov	r3, r1
 800c10c:	4680      	mov	r8, r0
 800c10e:	4689      	mov	r9, r1
 800c110:	f7f4 fa5a 	bl	80005c8 <__aeabi_dmul>
 800c114:	a360      	add	r3, pc, #384	; (adr r3, 800c298 <__ieee754_log+0x320>)
 800c116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11a:	4606      	mov	r6, r0
 800c11c:	460f      	mov	r7, r1
 800c11e:	f7f4 fa53 	bl	80005c8 <__aeabi_dmul>
 800c122:	a35f      	add	r3, pc, #380	; (adr r3, 800c2a0 <__ieee754_log+0x328>)
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	f7f4 f898 	bl	800025c <__adddf3>
 800c12c:	4632      	mov	r2, r6
 800c12e:	463b      	mov	r3, r7
 800c130:	f7f4 fa4a 	bl	80005c8 <__aeabi_dmul>
 800c134:	a35c      	add	r3, pc, #368	; (adr r3, 800c2a8 <__ieee754_log+0x330>)
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	f7f4 f88f 	bl	800025c <__adddf3>
 800c13e:	4632      	mov	r2, r6
 800c140:	463b      	mov	r3, r7
 800c142:	f7f4 fa41 	bl	80005c8 <__aeabi_dmul>
 800c146:	a35a      	add	r3, pc, #360	; (adr r3, 800c2b0 <__ieee754_log+0x338>)
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	f7f4 f886 	bl	800025c <__adddf3>
 800c150:	4642      	mov	r2, r8
 800c152:	464b      	mov	r3, r9
 800c154:	f7f4 fa38 	bl	80005c8 <__aeabi_dmul>
 800c158:	a357      	add	r3, pc, #348	; (adr r3, 800c2b8 <__ieee754_log+0x340>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	4680      	mov	r8, r0
 800c160:	4689      	mov	r9, r1
 800c162:	4630      	mov	r0, r6
 800c164:	4639      	mov	r1, r7
 800c166:	f7f4 fa2f 	bl	80005c8 <__aeabi_dmul>
 800c16a:	a355      	add	r3, pc, #340	; (adr r3, 800c2c0 <__ieee754_log+0x348>)
 800c16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c170:	f7f4 f874 	bl	800025c <__adddf3>
 800c174:	4632      	mov	r2, r6
 800c176:	463b      	mov	r3, r7
 800c178:	f7f4 fa26 	bl	80005c8 <__aeabi_dmul>
 800c17c:	a352      	add	r3, pc, #328	; (adr r3, 800c2c8 <__ieee754_log+0x350>)
 800c17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c182:	f7f4 f86b 	bl	800025c <__adddf3>
 800c186:	4632      	mov	r2, r6
 800c188:	463b      	mov	r3, r7
 800c18a:	f7f4 fa1d 	bl	80005c8 <__aeabi_dmul>
 800c18e:	460b      	mov	r3, r1
 800c190:	4602      	mov	r2, r0
 800c192:	4649      	mov	r1, r9
 800c194:	4640      	mov	r0, r8
 800c196:	f7f4 f861 	bl	800025c <__adddf3>
 800c19a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c19e:	9b01      	ldr	r3, [sp, #4]
 800c1a0:	3551      	adds	r5, #81	; 0x51
 800c1a2:	431d      	orrs	r5, r3
 800c1a4:	2d00      	cmp	r5, #0
 800c1a6:	4680      	mov	r8, r0
 800c1a8:	4689      	mov	r9, r1
 800c1aa:	dd48      	ble.n	800c23e <__ieee754_log+0x2c6>
 800c1ac:	4b4e      	ldr	r3, [pc, #312]	; (800c2e8 <__ieee754_log+0x370>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	4650      	mov	r0, sl
 800c1b2:	4659      	mov	r1, fp
 800c1b4:	f7f4 fa08 	bl	80005c8 <__aeabi_dmul>
 800c1b8:	4652      	mov	r2, sl
 800c1ba:	465b      	mov	r3, fp
 800c1bc:	f7f4 fa04 	bl	80005c8 <__aeabi_dmul>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	4606      	mov	r6, r0
 800c1c6:	460f      	mov	r7, r1
 800c1c8:	4640      	mov	r0, r8
 800c1ca:	4649      	mov	r1, r9
 800c1cc:	f7f4 f846 	bl	800025c <__adddf3>
 800c1d0:	ec53 2b18 	vmov	r2, r3, d8
 800c1d4:	f7f4 f9f8 	bl	80005c8 <__aeabi_dmul>
 800c1d8:	4680      	mov	r8, r0
 800c1da:	4689      	mov	r9, r1
 800c1dc:	b964      	cbnz	r4, 800c1f8 <__ieee754_log+0x280>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	4639      	mov	r1, r7
 800c1e6:	f7f4 f837 	bl	8000258 <__aeabi_dsub>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	4650      	mov	r0, sl
 800c1f0:	4659      	mov	r1, fp
 800c1f2:	f7f4 f831 	bl	8000258 <__aeabi_dsub>
 800c1f6:	e6d6      	b.n	800bfa6 <__ieee754_log+0x2e>
 800c1f8:	a321      	add	r3, pc, #132	; (adr r3, 800c280 <__ieee754_log+0x308>)
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	ec51 0b19 	vmov	r0, r1, d9
 800c202:	f7f4 f9e1 	bl	80005c8 <__aeabi_dmul>
 800c206:	a320      	add	r3, pc, #128	; (adr r3, 800c288 <__ieee754_log+0x310>)
 800c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20c:	4604      	mov	r4, r0
 800c20e:	460d      	mov	r5, r1
 800c210:	ec51 0b19 	vmov	r0, r1, d9
 800c214:	f7f4 f9d8 	bl	80005c8 <__aeabi_dmul>
 800c218:	4642      	mov	r2, r8
 800c21a:	464b      	mov	r3, r9
 800c21c:	f7f4 f81e 	bl	800025c <__adddf3>
 800c220:	4602      	mov	r2, r0
 800c222:	460b      	mov	r3, r1
 800c224:	4630      	mov	r0, r6
 800c226:	4639      	mov	r1, r7
 800c228:	f7f4 f816 	bl	8000258 <__aeabi_dsub>
 800c22c:	4652      	mov	r2, sl
 800c22e:	465b      	mov	r3, fp
 800c230:	f7f4 f812 	bl	8000258 <__aeabi_dsub>
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	4620      	mov	r0, r4
 800c23a:	4629      	mov	r1, r5
 800c23c:	e7d9      	b.n	800c1f2 <__ieee754_log+0x27a>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4650      	mov	r0, sl
 800c244:	4659      	mov	r1, fp
 800c246:	f7f4 f807 	bl	8000258 <__aeabi_dsub>
 800c24a:	ec53 2b18 	vmov	r2, r3, d8
 800c24e:	f7f4 f9bb 	bl	80005c8 <__aeabi_dmul>
 800c252:	4606      	mov	r6, r0
 800c254:	460f      	mov	r7, r1
 800c256:	2c00      	cmp	r4, #0
 800c258:	f43f af23 	beq.w	800c0a2 <__ieee754_log+0x12a>
 800c25c:	a308      	add	r3, pc, #32	; (adr r3, 800c280 <__ieee754_log+0x308>)
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	ec51 0b19 	vmov	r0, r1, d9
 800c266:	f7f4 f9af 	bl	80005c8 <__aeabi_dmul>
 800c26a:	a307      	add	r3, pc, #28	; (adr r3, 800c288 <__ieee754_log+0x310>)
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	4604      	mov	r4, r0
 800c272:	460d      	mov	r5, r1
 800c274:	ec51 0b19 	vmov	r0, r1, d9
 800c278:	e727      	b.n	800c0ca <__ieee754_log+0x152>
 800c27a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800c2d0 <__ieee754_log+0x358>
 800c27e:	e694      	b.n	800bfaa <__ieee754_log+0x32>
 800c280:	fee00000 	.word	0xfee00000
 800c284:	3fe62e42 	.word	0x3fe62e42
 800c288:	35793c76 	.word	0x35793c76
 800c28c:	3dea39ef 	.word	0x3dea39ef
 800c290:	55555555 	.word	0x55555555
 800c294:	3fd55555 	.word	0x3fd55555
 800c298:	df3e5244 	.word	0xdf3e5244
 800c29c:	3fc2f112 	.word	0x3fc2f112
 800c2a0:	96cb03de 	.word	0x96cb03de
 800c2a4:	3fc74664 	.word	0x3fc74664
 800c2a8:	94229359 	.word	0x94229359
 800c2ac:	3fd24924 	.word	0x3fd24924
 800c2b0:	55555593 	.word	0x55555593
 800c2b4:	3fe55555 	.word	0x3fe55555
 800c2b8:	d078c69f 	.word	0xd078c69f
 800c2bc:	3fc39a09 	.word	0x3fc39a09
 800c2c0:	1d8e78af 	.word	0x1d8e78af
 800c2c4:	3fcc71c5 	.word	0x3fcc71c5
 800c2c8:	9997fa04 	.word	0x9997fa04
 800c2cc:	3fd99999 	.word	0x3fd99999
	...
 800c2d8:	c3500000 	.word	0xc3500000
 800c2dc:	43500000 	.word	0x43500000
 800c2e0:	7fefffff 	.word	0x7fefffff
 800c2e4:	3ff00000 	.word	0x3ff00000
 800c2e8:	3fe00000 	.word	0x3fe00000
 800c2ec:	00000000 	.word	0x00000000

0800c2f0 <nan>:
 800c2f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2f8 <nan+0x8>
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	00000000 	.word	0x00000000
 800c2fc:	7ff80000 	.word	0x7ff80000

0800c300 <_init>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	bf00      	nop
 800c304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c306:	bc08      	pop	{r3}
 800c308:	469e      	mov	lr, r3
 800c30a:	4770      	bx	lr

0800c30c <_fini>:
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30e:	bf00      	nop
 800c310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c312:	bc08      	pop	{r3}
 800c314:	469e      	mov	lr, r3
 800c316:	4770      	bx	lr


projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009340  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08009480  08009480  00019480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009a10  08009a10  00019a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009a14  08009a14  00019a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  20000004  08009a18  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000025c  200001ec  08009c00  000201ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000448  08009c00  00020448  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010347  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002e07  00000000  00000000  00030563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001198  00000000  00000000  00033370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001030  00000000  00000000  00034508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001eda1  00000000  00000000  00035538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00011f83  00000000  00000000  000542d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000be3e4  00000000  00000000  0006625c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00124640  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005e28  00000000  00000000  00124690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ec 	.word	0x200001ec
 800015c:	00000000 	.word	0x00000000
 8000160:	08009468 	.word	0x08009468

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f0 	.word	0x200001f0
 800017c:	08009468 	.word	0x08009468

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
 8000c40:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c42:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c44:	4a29      	ldr	r2, [pc, #164]	; (8000cec <MX_ADC1_Init+0xc0>)
 8000c46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c62:	2204      	movs	r2, #4
 8000c64:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000ca4:	f001 fa68 	bl	8002178 <HAL_ADC_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000cae:	f000 fad8 	bl	8001262 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_ADC1_Init+0xc4>)
 8000cb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cbe:	237f      	movs	r3, #127	; 0x7f
 8000cc0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_ADC1_Init+0xbc>)
 8000cd0:	f001 fcc0 	bl	8002654 <HAL_ADC_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cda:	f000 fac2 	bl	8001262 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000208 	.word	0x20000208
 8000cec:	50040000 	.word	0x50040000
 8000cf0:	14f00020 	.word	0x14f00020

08000cf4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b090      	sub	sp, #64	; 0x40
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	2224      	movs	r2, #36	; 0x24
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f004 fef9 	bl	8005b0c <memset>
  if(adcHandle->Instance==ADC1)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d123      	bne.n	8000d6c <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d28:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d2a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000d2e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	4618      	mov	r0, r3
 8000d36:	f004 fa41 	bl	80051bc <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d40:	f000 fa8f 	bl	8001262 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d48:	f7ff ff56 	bl	8000bf8 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f7ff ff53 	bl	8000bf8 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d56:	2303      	movs	r3, #3
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d68:	f002 fd26 	bl	80037b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3740      	adds	r7, #64	; 0x40
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	50040000 	.word	0x50040000

08000d78 <read_voltage>:
#include "gpio.h"

float VDDA = 3.2;


float read_voltage(){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
	 float voltage;
	 HAL_ADC_Start(&hadc1);
 8000d7e:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <read_voltage+0x58>)
 8000d80:	f001 fb46 	bl	8002410 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295
 8000d88:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <read_voltage+0x58>)
 8000d8a:	f001 fbc8 	bl	800251e <HAL_ADC_PollForConversion>
	 uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8000d8e:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <read_voltage+0x58>)
 8000d90:	f001 fc52 	bl	8002638 <HAL_ADC_GetValue>
 8000d94:	4603      	mov	r3, r0
 8000d96:	80fb      	strh	r3, [r7, #6]
	 HAL_ADC_Stop(&hadc1);
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <read_voltage+0x58>)
 8000d9a:	f001 fb8d 	bl	80024b8 <HAL_ADC_Stop>
	 voltage =raw*VDDA/4095;
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <read_voltage+0x5c>)
 8000daa:	edd3 7a00 	vldr	s15, [r3]
 8000dae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000db2:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000dd8 <read_voltage+0x60>
 8000db6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dba:	edc7 7a00 	vstr	s15, [r7]
	 //printf("voltage in adc_control %.5f\n", voltage);
	 return voltage;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	ee07 3a90 	vmov	s15, r3
}
 8000dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000208 	.word	0x20000208
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	457ff000 	.word	0x457ff000

08000ddc <read_raw>:

uint16_t read_raw(){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
		 HAL_ADC_Start(&hadc1);
 8000de2:	480a      	ldr	r0, [pc, #40]	; (8000e0c <read_raw+0x30>)
 8000de4:	f001 fb14 	bl	8002410 <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <read_raw+0x30>)
 8000dee:	f001 fb96 	bl	800251e <HAL_ADC_PollForConversion>
		 uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <read_raw+0x30>)
 8000df4:	f001 fc20 	bl	8002638 <HAL_ADC_GetValue>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	80fb      	strh	r3, [r7, #6]
		 HAL_ADC_Stop(&hadc1);
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <read_raw+0x30>)
 8000dfe:	f001 fb5b 	bl	80024b8 <HAL_ADC_Stop>
		 //printf("voltage in adc_control %.5f\n", voltage);
		 return raw;
 8000e02:	88fb      	ldrh	r3, [r7, #6]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000208 	.word	0x20000208

08000e10 <LL_AHB1_GRP1_EnableClock>:
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e34:	68fb      	ldr	r3, [r7, #12]
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e46:	2004      	movs	r0, #4
 8000e48:	f7ff ffe2 	bl	8000e10 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff ffdf 	bl	8000e10 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	200b      	movs	r0, #11
 8000e58:	f002 fa33 	bl	80032c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e5c:	200b      	movs	r0, #11
 8000e5e:	f002 fa4a 	bl	80032f6 <HAL_NVIC_EnableIRQ>

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <LL_AHB2_GRP1_EnableClock>:
{
 8000e66:	b480      	push	{r7}
 8000e68:	b085      	sub	sp, #20
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4013      	ands	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff ffda 	bl	8000e66 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f7ff ffd7 	bl	8000e66 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f641 011c 	movw	r1, #6172	; 0x181c
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f002 fdf9 	bl	8003ab8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2102      	movs	r1, #2
 8000eca:	4825      	ldr	r0, [pc, #148]	; (8000f60 <MX_GPIO_Init+0xc8>)
 8000ecc:	f002 fdf4 	bl	8003ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2130      	movs	r1, #48	; 0x30
 8000ed4:	4822      	ldr	r0, [pc, #136]	; (8000f60 <MX_GPIO_Init+0xc8>)
 8000ed6:	f002 fdef 	bl	8003ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11
 8000eda:	f641 031c 	movw	r3, #6172	; 0x181c
 8000ede:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef4:	f002 fc60 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ef8:	2340      	movs	r3, #64	; 0x40
 8000efa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f002 fc54 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f10:	2304      	movs	r3, #4
 8000f12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480f      	ldr	r0, [pc, #60]	; (8000f60 <MX_GPIO_Init+0xc8>)
 8000f22:	f002 fc49 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f26:	2301      	movs	r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	480a      	ldr	r0, [pc, #40]	; (8000f60 <MX_GPIO_Init+0xc8>)
 8000f38:	f002 fc3e 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f3c:	2332      	movs	r3, #50	; 0x32
 8000f3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4803      	ldr	r0, [pc, #12]	; (8000f60 <MX_GPIO_Init+0xc8>)
 8000f52:	f002 fc31 	bl	80037b8 <HAL_GPIO_Init>

}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	48000400 	.word	0x48000400

08000f64 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f88:	68fb      	ldr	r3, [r7, #12]
}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_IPCC_Init+0x20>)
 8000f9e:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <MX_IPCC_Init+0x24>)
 8000fa0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_IPCC_Init+0x20>)
 8000fa4:	f002 fdba 	bl	8003b1c <HAL_IPCC_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000fae:	f000 f958 	bl	8001262 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000026c 	.word	0x2000026c
 8000fbc:	58000c00 	.word	0x58000c00

08000fc0 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_IPCC_MspInit+0x44>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d113      	bne.n	8000ffa <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8000fd2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000fd6:	f7ff ffc5 	bl	8000f64 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	202c      	movs	r0, #44	; 0x2c
 8000fe0:	f002 f96f 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8000fe4:	202c      	movs	r0, #44	; 0x2c
 8000fe6:	f002 f986 	bl	80032f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	202d      	movs	r0, #45	; 0x2d
 8000ff0:	f002 f967 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8000ff4:	202d      	movs	r0, #45	; 0x2d
 8000ff6:	f002 f97e 	bl	80032f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	58000c00 	.word	0x58000c00

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
   initialise_monitor_handles();
 800100e:	f007 ff7f 	bl	8008f10 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f000 fdf1 	bl	8001bf8 <HAL_Init>
  // REMOVE ON DEBUG

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f8cd 	bl	80011b4 <SystemClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800101a:	f7ff ffbd 	bl	8000f98 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f7ff ff3b 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 8001022:	f7ff ff0e 	bl	8000e42 <MX_DMA_Init>
  MX_SPI1_Init();
 8001026:	f000 fc3f 	bl	80018a8 <MX_SPI1_Init>
  MX_ADC1_Init();
 800102a:	f7ff fdff 	bl	8000c2c <MX_ADC1_Init>
  //SoftUartInit(0,GPIOB,GPIO_PIN_1,GPIOB,GPIO_PIN_0);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting STM32\n");
 800102e:	4856      	ldr	r0, [pc, #344]	; (8001188 <main+0x180>)
 8001030:	f005 fb5a 	bl	80066e8 <puts>
  printf("Starting MAX\n");
 8001034:	4855      	ldr	r0, [pc, #340]	; (800118c <main+0x184>)
 8001036:	f005 fb57 	bl	80066e8 <puts>
  EnableChip();
 800103a:	f000 f917 	bl	800126c <EnableChip>

  //printf("Init Max\n");
  init_PLL();
 800103e:	f000 fad5 	bl	80015ec <init_PLL>

  //printf("write regs custom \n");
  write_regs_SOFT();
 8001042:	f000 fb1f 	bl	8001684 <write_regs_SOFT>
  setIntegerMode();
 8001046:	f000 fa59 	bl	80014fc <setIntegerMode>

  printf("EnablingRFOUT\n");
 800104a:	4851      	ldr	r0, [pc, #324]	; (8001190 <main+0x188>)
 800104c:	f005 fb4c 	bl	80066e8 <puts>
  EnableRFOutput();
 8001050:	f000 f916 	bl	8001280 <EnableRFOutput>

  printf("Initialization done\n");
 8001054:	484f      	ldr	r0, [pc, #316]	; (8001194 <main+0x18c>)
 8001056:	f005 fb47 	bl	80066e8 <puts>
  print_registers();
 800105a:	f000 f91b 	bl	8001294 <print_registers>
	  HAL_Delay(20);
	  printf(" ");
  }*/

  //calibrate();
  for (int i=0; i<4; i++){
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e00b      	b.n	800107c <main+0x74>
	  printf("RFA PWR: %d\n", i);
 8001064:	69f9      	ldr	r1, [r7, #28]
 8001066:	484c      	ldr	r0, [pc, #304]	; (8001198 <main+0x190>)
 8001068:	f005 faa2 	bl	80065b0 <iprintf>
	  setRFA_PWR(i);
 800106c:	69f8      	ldr	r0, [r7, #28]
 800106e:	f000 f9e3 	bl	8001438 <setRFA_PWR>
	  program_PLL();
 8001072:	f000 fb8f 	bl	8001794 <program_PLL>
  for (int i=0; i<4; i++){
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	2b03      	cmp	r3, #3
 8001080:	ddf0      	ble.n	8001064 <main+0x5c>
	  //HAL_Delay(1);
  }
  //print_registers();
  printf("Start\n");
 8001082:	4846      	ldr	r0, [pc, #280]	; (800119c <main+0x194>)
 8001084:	f005 fb30 	bl	80066e8 <puts>
  printf("frequency, raw, voltage\n");
 8001088:	4845      	ldr	r0, [pc, #276]	; (80011a0 <main+0x198>)
 800108a:	f005 fb2d 	bl	80066e8 <puts>
  uint32_t freq  = 25;
 800108e:	2319      	movs	r3, #25
 8001090:	613b      	str	r3, [r7, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f002 fd0c 	bl	8003ab8 <HAL_GPIO_WritePin>
  char* buffer = malloc(3000);
 80010a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010a4:	f004 fd2a 	bl	8005afc <malloc>
 80010a8:	4603      	mov	r3, r0
 80010aa:	60fb      	str	r3, [r7, #12]
  buffer[0] = 0;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
  for (int i = 25; i<2500; i++){
 80010b2:	2319      	movs	r3, #25
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	e049      	b.n	800114c <main+0x144>
	  	  freq = i;
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	613b      	str	r3, [r7, #16]
	  	  set_requested_frequency(freq);
 80010bc:	6938      	ldr	r0, [r7, #16]
 80010be:	f000 fa2b 	bl	8001518 <set_requested_frequency>

	  	  GPIO_PinState lock_detect = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 80010c2:	2104      	movs	r1, #4
 80010c4:	4837      	ldr	r0, [pc, #220]	; (80011a4 <main+0x19c>)
 80010c6:	f002 fcdf 	bl	8003a88 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	75fb      	strb	r3, [r7, #23]
	  	  while(lock_detect!=GPIO_PIN_SET){
 80010ce:	e005      	b.n	80010dc <main+0xd4>
	  		  lock_detect = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 80010d0:	2104      	movs	r1, #4
 80010d2:	4834      	ldr	r0, [pc, #208]	; (80011a4 <main+0x19c>)
 80010d4:	f002 fcd8 	bl	8003a88 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	75fb      	strb	r3, [r7, #23]
	  	  while(lock_detect!=GPIO_PIN_SET){
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d1f6      	bne.n	80010d0 <main+0xc8>
	  	  }
	  	  float voltage = read_voltage();
 80010e2:	f7ff fe49 	bl	8000d78 <read_voltage>
 80010e6:	ed87 0a02 	vstr	s0, [r7, #8]
	  	  uint16_t raw = read_raw();
 80010ea:	f7ff fe77 	bl	8000ddc <read_raw>
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
	  	  sprintf(buffer + strlen(buffer), "%d, %d, %.5f;", freq, raw, voltage);
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f7ff f844 	bl	8000180 <strlen>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	189c      	adds	r4, r3, r2
 80010fe:	88fd      	ldrh	r5, [r7, #6]
 8001100:	68b8      	ldr	r0, [r7, #8]
 8001102:	f7ff f9f9 	bl	80004f8 <__aeabi_f2d>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	e9cd 2300 	strd	r2, r3, [sp]
 800110e:	462b      	mov	r3, r5
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4925      	ldr	r1, [pc, #148]	; (80011a8 <main+0x1a0>)
 8001114:	4620      	mov	r0, r4
 8001116:	f005 faff 	bl	8006718 <siprintf>
	  	  if (i%100 == 0){
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <main+0x1a4>)
 800111e:	fb83 1302 	smull	r1, r3, r3, r2
 8001122:	1159      	asrs	r1, r3, #5
 8001124:	17d3      	asrs	r3, r2, #31
 8001126:	1acb      	subs	r3, r1, r3
 8001128:	2164      	movs	r1, #100	; 0x64
 800112a:	fb01 f303 	mul.w	r3, r1, r3
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d108      	bne.n	8001146 <main+0x13e>
	  		  printf(buffer);
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f005 fa3b 	bl	80065b0 <iprintf>
	  		  printf("\n");
 800113a:	200a      	movs	r0, #10
 800113c:	f005 fa50 	bl	80065e0 <putchar>
	  		  buffer[0] = 0;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
  for (int i = 25; i<2500; i++){
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	3301      	adds	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001152:	4293      	cmp	r3, r2
 8001154:	ddb0      	ble.n	80010b8 <main+0xb0>
	  	  }
	  	  // log values
	  	  //printf( "%d, %d, %.5f \n", freq, raw, voltage);
  }
  printf(buffer);
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f005 fa2a 	bl	80065b0 <iprintf>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f002 fca7 	bl	8003ab8 <HAL_GPIO_WritePin>
  printf("Done\n");
 800116a:	4811      	ldr	r0, [pc, #68]	; (80011b0 <main+0x1a8>)
 800116c:	f005 fabc 	bl	80066e8 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8001170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f002 fcb6 	bl	8003ae8 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800117c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001180:	f000 fdc0 	bl	8001d04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8001184:	e7f4      	b.n	8001170 <main+0x168>
 8001186:	bf00      	nop
 8001188:	08009480 	.word	0x08009480
 800118c:	08009490 	.word	0x08009490
 8001190:	080094a0 	.word	0x080094a0
 8001194:	080094b0 	.word	0x080094b0
 8001198:	080094c4 	.word	0x080094c4
 800119c:	080094d4 	.word	0x080094d4
 80011a0:	080094dc 	.word	0x080094dc
 80011a4:	48000400 	.word	0x48000400
 80011a8:	080094f4 	.word	0x080094f4
 80011ac:	51eb851f 	.word	0x51eb851f
 80011b0:	08009504 	.word	0x08009504

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b09a      	sub	sp, #104	; 0x68
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	2248      	movs	r2, #72	; 0x48
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 fca2 	bl	8005b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
 80011d6:	615a      	str	r2, [r3, #20]
 80011d8:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80011da:	2322      	movs	r3, #34	; 0x22
 80011dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011e4:	2301      	movs	r3, #1
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e8:	2340      	movs	r3, #64	; 0x40
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011f0:	2360      	movs	r3, #96	; 0x60
 80011f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f4:	2302      	movs	r3, #2
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011f8:	2301      	movs	r3, #1
 80011fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001200:	2310      	movs	r3, #16
 8001202:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001204:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001208:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800120a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800120e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001210:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001214:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	4618      	mov	r0, r3
 800121c:	f003 f90c 	bl	8004438 <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001226:	f000 f81c 	bl	8001262 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800122a:	236f      	movs	r3, #111	; 0x6f
 800122c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122e:	2303      	movs	r3, #3
 8001230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f003 fc5e 	bl	8004b0c <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001256:	f000 f804 	bl	8001262 <Error_Handler>
  }
}
 800125a:	bf00      	nop
 800125c:	3768      	adds	r7, #104	; 0x68
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001266:	b672      	cpsid	i
}
 8001268:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126a:	e7fe      	b.n	800126a <Error_Handler+0x8>

0800126c <EnableChip>:
/**
  * @brief Turn MAX2870 PLL on
  * By setting CE pin high
  * @retval
  */
void EnableChip(){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2104      	movs	r1, #4
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f002 fc1e 	bl	8003ab8 <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <EnableRFOutput>:

void DisableChip(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
}

void EnableRFOutput(){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2108      	movs	r1, #8
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f002 fc14 	bl	8003ab8 <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <print_registers>:

void DisableRFOutput(){
 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}

void print_registers(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	printf("reg0: %x\n", reg0);
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <print_registers+0x50>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <print_registers+0x54>)
 80012a0:	f005 f986 	bl	80065b0 <iprintf>
	printf("reg1: %x\n", reg1);
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <print_registers+0x58>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4811      	ldr	r0, [pc, #68]	; (80012f0 <print_registers+0x5c>)
 80012ac:	f005 f980 	bl	80065b0 <iprintf>
	printf("reg2: %x\n", reg2);
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <print_registers+0x60>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	4810      	ldr	r0, [pc, #64]	; (80012f8 <print_registers+0x64>)
 80012b8:	f005 f97a 	bl	80065b0 <iprintf>
	printf("reg3: %x\n", reg3);
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <print_registers+0x68>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <print_registers+0x6c>)
 80012c4:	f005 f974 	bl	80065b0 <iprintf>
	printf("reg4: %x\n", reg4);
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <print_registers+0x70>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	480e      	ldr	r0, [pc, #56]	; (8001308 <print_registers+0x74>)
 80012d0:	f005 f96e 	bl	80065b0 <iprintf>
	printf("reg5: %x\n", reg5);
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <print_registers+0x78>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <print_registers+0x7c>)
 80012dc:	f005 f968 	bl	80065b0 <iprintf>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200002a8 	.word	0x200002a8
 80012e8:	0800950c 	.word	0x0800950c
 80012ec:	200002ac 	.word	0x200002ac
 80012f0:	08009518 	.word	0x08009518
 80012f4:	200002b0 	.word	0x200002b0
 80012f8:	08009524 	.word	0x08009524
 80012fc:	200002b4 	.word	0x200002b4
 8001300:	08009530 	.word	0x08009530
 8001304:	200002b8 	.word	0x200002b8
 8001308:	0800953c 	.word	0x0800953c
 800130c:	200002bc 	.word	0x200002bc
 8001310:	08009548 	.word	0x08009548

08001314 <setDIVA>:
	uint32_t SHDN_BIT = 1 << 5;
	write_reg(reg2 & ~(SHDN_BIT));
}

// permitted n values: 1, 2, 4, 8, 16, 32, 64, 128
void setDIVA(uint8_t n){
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	uint32_t diva_value = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
	//sets DIVA to 111
	switch (n){
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b80      	cmp	r3, #128	; 0x80
 8001326:	d04e      	beq.n	80013c6 <setDIVA+0xb2>
 8001328:	2b80      	cmp	r3, #128	; 0x80
 800132a:	dc7e      	bgt.n	800142a <setDIVA+0x116>
 800132c:	2b20      	cmp	r3, #32
 800132e:	dc47      	bgt.n	80013c0 <setDIVA+0xac>
 8001330:	2b00      	cmp	r3, #0
 8001332:	dd7a      	ble.n	800142a <setDIVA+0x116>
 8001334:	3b01      	subs	r3, #1
 8001336:	2b1f      	cmp	r3, #31
 8001338:	d877      	bhi.n	800142a <setDIVA+0x116>
 800133a:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <setDIVA+0x2c>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	080013ff 	.word	0x080013ff
 8001344:	080013f7 	.word	0x080013f7
 8001348:	0800142b 	.word	0x0800142b
 800134c:	080013ef 	.word	0x080013ef
 8001350:	0800142b 	.word	0x0800142b
 8001354:	0800142b 	.word	0x0800142b
 8001358:	0800142b 	.word	0x0800142b
 800135c:	080013e7 	.word	0x080013e7
 8001360:	0800142b 	.word	0x0800142b
 8001364:	0800142b 	.word	0x0800142b
 8001368:	0800142b 	.word	0x0800142b
 800136c:	0800142b 	.word	0x0800142b
 8001370:	0800142b 	.word	0x0800142b
 8001374:	0800142b 	.word	0x0800142b
 8001378:	0800142b 	.word	0x0800142b
 800137c:	080013df 	.word	0x080013df
 8001380:	0800142b 	.word	0x0800142b
 8001384:	0800142b 	.word	0x0800142b
 8001388:	0800142b 	.word	0x0800142b
 800138c:	0800142b 	.word	0x0800142b
 8001390:	0800142b 	.word	0x0800142b
 8001394:	0800142b 	.word	0x0800142b
 8001398:	0800142b 	.word	0x0800142b
 800139c:	0800142b 	.word	0x0800142b
 80013a0:	0800142b 	.word	0x0800142b
 80013a4:	0800142b 	.word	0x0800142b
 80013a8:	0800142b 	.word	0x0800142b
 80013ac:	0800142b 	.word	0x0800142b
 80013b0:	0800142b 	.word	0x0800142b
 80013b4:	0800142b 	.word	0x0800142b
 80013b8:	0800142b 	.word	0x0800142b
 80013bc:	080013d7 	.word	0x080013d7
 80013c0:	2b40      	cmp	r3, #64	; 0x40
 80013c2:	d004      	beq.n	80013ce <setDIVA+0xba>
		case 1:
			diva_value = 0b000 << 20;
			break;
		default:
			// do not set diva mask
			return;
 80013c4:	e031      	b.n	800142a <setDIVA+0x116>
			diva_value = 0b111 << 20;
 80013c6:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 80013ca:	617b      	str	r3, [r7, #20]
			break;
 80013cc:	e01a      	b.n	8001404 <setDIVA+0xf0>
			diva_value = 0b110 << 20;
 80013ce:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
 80013d2:	617b      	str	r3, [r7, #20]
			break;
 80013d4:	e016      	b.n	8001404 <setDIVA+0xf0>
			diva_value = 0b101 << 20;
 80013d6:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
 80013da:	617b      	str	r3, [r7, #20]
			break;
 80013dc:	e012      	b.n	8001404 <setDIVA+0xf0>
			diva_value = 0b100 << 20;
 80013de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013e2:	617b      	str	r3, [r7, #20]
			break;
 80013e4:	e00e      	b.n	8001404 <setDIVA+0xf0>
			diva_value = 0b011 << 20;
 80013e6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80013ea:	617b      	str	r3, [r7, #20]
			break;
 80013ec:	e00a      	b.n	8001404 <setDIVA+0xf0>
			diva_value = 0b010 << 20;
 80013ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013f2:	617b      	str	r3, [r7, #20]
			break;
 80013f4:	e006      	b.n	8001404 <setDIVA+0xf0>
			diva_value = 0b001 << 20;
 80013f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013fa:	617b      	str	r3, [r7, #20]
			break;
 80013fc:	e002      	b.n	8001404 <setDIVA+0xf0>
			diva_value = 0b000 << 20;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
			break;
 8001402:	bf00      	nop
			break;
	}
	uint32_t DIVA_MASK = 0b111 << 20;
 8001404:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8001408:	613b      	str	r3, [r7, #16]
	uint32_t new_reg4 = reg4 & ~(DIVA_MASK);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43da      	mvns	r2, r3
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <setDIVA+0x120>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4013      	ands	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
	uint32_t newnewreg4 = new_reg4 | ((diva_value)&DIVA_MASK);
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	60bb      	str	r3, [r7, #8]
	write_reg(newnewreg4);
 8001422:	68b8      	ldr	r0, [r7, #8]
 8001424:	f000 f970 	bl	8001708 <write_reg>
 8001428:	e000      	b.n	800142c <setDIVA+0x118>
			return;
 800142a:	bf00      	nop
}
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200002b8 	.word	0x200002b8

08001438 <setRFA_PWR>:

//00, 01, 02, 03
void setRFA_PWR(uint8_t rfa_pwr){
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
	if (rfa_pwr > 4 || rfa_pwr < 0){
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b04      	cmp	r3, #4
 8001446:	d813      	bhi.n	8001470 <setRFA_PWR+0x38>
		return;//invalid value
	}
	// bits 4 and 3
	uint32_t RFA_PWR_MASK = 0b11 << 3;
 8001448:	2318      	movs	r3, #24
 800144a:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg4 = reg4 & ~(RFA_PWR_MASK);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	43da      	mvns	r2, r3
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <setRFA_PWR+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
	uint32_t newnewreg4 = newreg4 | ((rfa_pwr << 3)&RFA_PWR_MASK);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	461a      	mov	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	4013      	ands	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg4);
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 f94d 	bl	8001708 <write_reg>
 800146e:	e000      	b.n	8001472 <setRFA_PWR+0x3a>
		return;//invalid value
 8001470:	bf00      	nop
}
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200002b8 	.word	0x200002b8

0800147c <setN>:

void setN(uint16_t N){
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
	// bits 4 and 3
	uint32_t N_MASK = 0xFFFF << 15;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <setN+0x38>)
 8001488:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg0 = reg0 & ~(N_MASK);
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	43da      	mvns	r2, r3
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <setN+0x3c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
	uint32_t newnewreg0 = newreg0 | ((N << 15)&N_MASK);
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	03db      	lsls	r3, r3, #15
 800149a:	461a      	mov	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	4013      	ands	r3, r2
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg0);
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f92e 	bl	8001708 <write_reg>
}
 80014ac:	bf00      	nop
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	7fff8000 	.word	0x7fff8000
 80014b8:	200002a8 	.word	0x200002a8

080014bc <setR>:

void setR(uint16_t R){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
	// bits 4 and 3
	uint32_t R_MASK = 0xFFC << 12;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <setR+0x38>)
 80014c8:	617b      	str	r3, [r7, #20]
	// set bits to zero
	uint32_t newreg2 = reg2 & ~(R_MASK);
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	43da      	mvns	r2, r3
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <setR+0x3c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
	uint32_t newnewreg2 = newreg2 | ((R << 14)&R_MASK);
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	039b      	lsls	r3, r3, #14
 80014da:	461a      	mov	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	4013      	ands	r3, r2
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
	write_reg(newnewreg2);
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 f90e 	bl	8001708 <write_reg>
}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	00ffc000 	.word	0x00ffc000
 80014f8:	200002b0 	.word	0x200002b0

080014fc <setIntegerMode>:

void enableRFA(){
	write_reg(reg4 | (1<<5));
}

void setIntegerMode(){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	write_reg(reg0 | (1<<31));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <setIntegerMode+0x18>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f8fd 	bl	8001708 <write_reg>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200002a8 	.word	0x200002a8

08001518 <set_requested_frequency>:
	DIVA/=2;
	sweep_N(1500, 3000, 1);
}

// freq is in MHz
void set_requested_frequency(uint32_t freq){
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	// first determine required DIVA value
	float divided_by_235 = freq/23.5;
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7fe ffc7 	bl	80004b4 <__aeabi_ui2d>
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <set_requested_frequency+0xd0>)
 800152c:	f7ff f966 	bl	80007fc <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fb0e 	bl	8000b58 <__aeabi_d2f>
 800153c:	4603      	mov	r3, r0
 800153e:	61fb      	str	r3, [r7, #28]
	float band = log2(divided_by_235);
 8001540:	69f8      	ldr	r0, [r7, #28]
 8001542:	f7fe ffd9 	bl	80004f8 <__aeabi_f2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	ec43 2b10 	vmov	d0, r2, r3
 800154e:	f007 fd87 	bl	8009060 <log>
 8001552:	ec51 0b10 	vmov	r0, r1, d0
 8001556:	a322      	add	r3, pc, #136	; (adr r3, 80015e0 <set_requested_frequency+0xc8>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff f94e 	bl	80007fc <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff faf6 	bl	8000b58 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	61bb      	str	r3, [r7, #24]
	uint32_t band_i = band;
 8001570:	edd7 7a06 	vldr	s15, [r7, #24]
 8001574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001578:	ee17 3a90 	vmov	r3, s15
 800157c:	617b      	str	r3, [r7, #20]
	uint32_t DIVA_caluclated = 128>>band_i;
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa42 f303 	asr.w	r3, r2, r3
 8001586:	613b      	str	r3, [r7, #16]

	uint32_t R_value = 1;
 8001588:	2301      	movs	r3, #1
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t N_1MHZ_step = 1;
 800158c:	2301      	movs	r3, #1
 800158e:	623b      	str	r3, [r7, #32]
	if (DIVA_caluclated<32){
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	2b1f      	cmp	r3, #31
 8001594:	d804      	bhi.n	80015a0 <set_requested_frequency+0x88>
		R_value = 32/DIVA_caluclated;
 8001596:	2220      	movs	r2, #32
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (DIVA_caluclated>32){
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b20      	cmp	r3, #32
 80015a4:	d902      	bls.n	80015ac <set_requested_frequency+0x94>
		N_1MHZ_step = DIVA_caluclated/32;
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	095b      	lsrs	r3, r3, #5
 80015aa:	623b      	str	r3, [r7, #32]
	}
	uint32_t N_value = N_1MHZ_step * freq;
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	60fb      	str	r3, [r7, #12]
	//printf("%d\n", DIVA_caluclated);
	//printf("R: %d\n", R_value);
	//printf("N: %d\n", N_value);
	setN(N_value);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff5e 	bl	800147c <setN>
	setDIVA(DIVA_caluclated);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fea5 	bl	8001314 <setDIVA>
	setR(R_value);
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff74 	bl	80014bc <setR>
	program_PLL();
 80015d4:	f000 f8de 	bl	8001794 <program_PLL>
}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	; 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	fefa39ef 	.word	0xfefa39ef
 80015e4:	3fe62e42 	.word	0x3fe62e42
 80015e8:	40378000 	.word	0x40378000

080015ec <init_PLL>:
}
/**
  * @brief Initialize chip as specified in datasheet
  * @retval GPIO_PinState Lock Detect
  */
void init_PLL(){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	// Zapis registrov default hodnotami
	write_reg(default_reg5);
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <init_PLL+0x8c>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f888 	bl	8001708 <write_reg>
	// disable RF outputs
	write_reg(default_reg4 & ~((1 << 5) | (1<<8)));
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <init_PLL+0x90>)
 80015fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f882 	bl	8001708 <write_reg>
	write_reg(default_reg3);
 8001604:	230b      	movs	r3, #11
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f87e 	bl	8001708 <write_reg>
	write_reg(default_reg2);
 800160c:	f244 0342 	movw	r3, #16450	; 0x4042
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f879 	bl	8001708 <write_reg>
	write_reg(default_reg1);
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <init_PLL+0x94>)
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f875 	bl	8001708 <write_reg>
	write_reg(default_reg0);
 800161e:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f870 	bl	8001708 <write_reg>
	program_PLL();
 8001628:	f000 f8b4 	bl	8001794 <program_PLL>
	// 20 ms between writes as specified in datasheet
	HAL_Delay(20);
 800162c:	2014      	movs	r0, #20
 800162e:	f000 fb69 	bl	8001d04 <HAL_Delay>
	write_reg(default_reg5);
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <init_PLL+0x8c>)
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f867 	bl	8001708 <write_reg>
	write_reg(default_reg4 & ~((1 << 5) | (1<<8)));
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <init_PLL+0x90>)
 800163c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f861 	bl	8001708 <write_reg>
	write_reg(default_reg3);
 8001646:	230b      	movs	r3, #11
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f85d 	bl	8001708 <write_reg>
	write_reg(default_reg2);
 800164e:	f244 0342 	movw	r3, #16450	; 0x4042
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f858 	bl	8001708 <write_reg>
	write_reg(default_reg1);
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <init_PLL+0x94>)
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f854 	bl	8001708 <write_reg>
	write_reg(default_reg0);
 8001660:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f84f 	bl	8001708 <write_reg>
	program_PLL();
 800166a:	f000 f893 	bl	8001794 <program_PLL>
	HAL_Delay(20);
 800166e:	2014      	movs	r0, #20
 8001670:	f000 fb48 	bl	8001d04 <HAL_Delay>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	00400005 	.word	0x00400005
 800167c:	6180b23c 	.word	0x6180b23c
 8001680:	2000fff9 	.word	0x2000fff9

08001684 <write_regs_SOFT>:

void write_regs_SOFT(){
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
	//write registers as specified in MAX emulator
	uint32_t reg0 = 0x80320000;
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <write_regs_SOFT+0x50>)
 800168c:	617b      	str	r3, [r7, #20]
	uint32_t reg1 = 0x80033E81;
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <write_regs_SOFT+0x54>)
 8001690:	613b      	str	r3, [r7, #16]
	uint32_t reg2 = 0x0C004042;
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <write_regs_SOFT+0x58>)
 8001694:	60fb      	str	r3, [r7, #12]
	uint32_t reg3 = 0x00000133;
 8001696:	f240 1333 	movw	r3, #307	; 0x133
 800169a:	60bb      	str	r3, [r7, #8]
	uint32_t reg4 = 0x629802FC;
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <write_regs_SOFT+0x5c>)
 800169e:	607b      	str	r3, [r7, #4]
	uint32_t reg5 = 0x00400005;
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <write_regs_SOFT+0x60>)
 80016a2:	603b      	str	r3, [r7, #0]
	write_reg(reg5);
 80016a4:	6838      	ldr	r0, [r7, #0]
 80016a6:	f000 f82f 	bl	8001708 <write_reg>
	write_reg(reg4);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f82c 	bl	8001708 <write_reg>
	write_reg(reg3);
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f000 f829 	bl	8001708 <write_reg>
	write_reg(reg2);
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 f826 	bl	8001708 <write_reg>
	write_reg(reg1);
 80016bc:	6938      	ldr	r0, [r7, #16]
 80016be:	f000 f823 	bl	8001708 <write_reg>
	write_reg(reg0);
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f000 f820 	bl	8001708 <write_reg>
	program_PLL();
 80016c8:	f000 f864 	bl	8001794 <program_PLL>
}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	80320000 	.word	0x80320000
 80016d8:	80033e81 	.word	0x80033e81
 80016dc:	0c004042 	.word	0x0c004042
 80016e0:	629802fc 	.word	0x629802fc
 80016e4:	00400005 	.word	0x00400005

080016e8 <swap_words>:

// big endian to little endian for 32bits
uint32_t swap_words(uint32_t rozumne){
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	uint32_t swapped = (rozumne >> 16) | (rozumne << 16);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	ea4f 4333 	mov.w	r3, r3, ror #16
 80016f6:	60fb      	str	r3, [r7, #12]
	return swapped;
 80016f8:	68fb      	ldr	r3, [r7, #12]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <write_reg>:

// preforms write to register
uint8_t write_reg(uint32_t data){
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	// determine register address
	uint32_t reg_addr = data & 0b111;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]

	switch (reg_addr){
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b05      	cmp	r3, #5
 800171c:	d826      	bhi.n	800176c <write_reg+0x64>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <write_reg+0x1c>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	0800173d 	.word	0x0800173d
 8001728:	08001745 	.word	0x08001745
 800172c:	0800174d 	.word	0x0800174d
 8001730:	08001755 	.word	0x08001755
 8001734:	0800175d 	.word	0x0800175d
 8001738:	08001765 	.word	0x08001765
			case 0:
				reg0 = data;
 800173c:	4a0f      	ldr	r2, [pc, #60]	; (800177c <write_reg+0x74>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
				break;
 8001742:	e015      	b.n	8001770 <write_reg+0x68>
			case 1:
				reg1 = data;
 8001744:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <write_reg+0x78>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
				break;
 800174a:	e011      	b.n	8001770 <write_reg+0x68>
			case 2:
				reg2 = data;
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <write_reg+0x7c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
				break;
 8001752:	e00d      	b.n	8001770 <write_reg+0x68>
			case 3:
				reg3 = data;
 8001754:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <write_reg+0x80>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
				break;
 800175a:	e009      	b.n	8001770 <write_reg+0x68>
			case 4:
				reg4 = data;
 800175c:	4a0b      	ldr	r2, [pc, #44]	; (800178c <write_reg+0x84>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
				break;
 8001762:	e005      	b.n	8001770 <write_reg+0x68>
			case 5:
				reg5 = data;
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <write_reg+0x88>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
				break;
 800176a:	e001      	b.n	8001770 <write_reg+0x68>
			default:
				// invalid address
				return 1;
 800176c:	2301      	movs	r3, #1
 800176e:	e7ff      	b.n	8001770 <write_reg+0x68>
				break;
	}
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	200002a8 	.word	0x200002a8
 8001780:	200002ac 	.word	0x200002ac
 8001784:	200002b0 	.word	0x200002b0
 8001788:	200002b4 	.word	0x200002b4
 800178c:	200002b8 	.word	0x200002b8
 8001790:	200002bc 	.word	0x200002bc

08001794 <program_PLL>:

// sends all registers to PLL
void program_PLL(){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	write_to_PLL(reg5);
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <program_PLL+0x44>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f827 	bl	80017f0 <write_to_PLL>
	write_to_PLL(reg4);
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <program_PLL+0x48>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f822 	bl	80017f0 <write_to_PLL>
	write_to_PLL(reg3);
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <program_PLL+0x4c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 f81d 	bl	80017f0 <write_to_PLL>
	write_to_PLL(reg2);
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <program_PLL+0x50>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f818 	bl	80017f0 <write_to_PLL>
	write_to_PLL(reg1);
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <program_PLL+0x54>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f813 	bl	80017f0 <write_to_PLL>
	write_to_PLL(reg0);
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <program_PLL+0x58>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f80e 	bl	80017f0 <write_to_PLL>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200002bc 	.word	0x200002bc
 80017dc:	200002b8 	.word	0x200002b8
 80017e0:	200002b4 	.word	0x200002b4
 80017e4:	200002b0 	.word	0x200002b0
 80017e8:	200002ac 	.word	0x200002ac
 80017ec:	200002a8 	.word	0x200002a8

080017f0 <write_to_PLL>:

uint8_t write_to_PLL(uint32_t data){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	// endianness swap
	uint32_t swapped_data = swap_words(data);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff75 	bl	80016e8 <swap_words>
 80017fe:	4603      	mov	r3, r0
 8001800:	60bb      	str	r3, [r7, #8]
	uint16_t* pData = (uint16_t*)&swapped_data;
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2110      	movs	r1, #16
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001810:	f002 f952 	bl	8003ab8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001814:	2001      	movs	r0, #1
 8001816:	f000 fa75 	bl	8001d04 <HAL_Delay>
	//HAL_StatusTypeDef result =  HAL_SPI_Transmit(&hspi1, (uint8_t*)pData, 2, 1000);
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)pData, 2);
 800181a:	2202      	movs	r2, #2
 800181c:	68f9      	ldr	r1, [r7, #12]
 800181e:	4808      	ldr	r0, [pc, #32]	; (8001840 <write_to_PLL+0x50>)
 8001820:	f003 fe4a 	bl	80054b8 <HAL_SPI_Transmit_DMA>
	//printf("SPI Transmit result: %x\n", result);
	HAL_Delay(1);
 8001824:	2001      	movs	r0, #1
 8001826:	f000 fa6d 	bl	8001d04 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	2110      	movs	r1, #16
 800182e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001832:	f002 f941 	bl	8003ab8 <HAL_GPIO_WritePin>

	return 0;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200002c0 	.word	0x200002c0

08001844 <LL_AHB2_GRP1_EnableClock>:
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800184c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4313      	orrs	r3, r2
 800185a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4013      	ands	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001868:	68fb      	ldr	r3, [r7, #12]
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001876:	b480      	push	{r7}
 8001878:	b085      	sub	sp, #20
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800187e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001882:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4313      	orrs	r3, r2
 800188c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001892:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4013      	ands	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <MX_SPI1_Init+0x74>)
 80018ae:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <MX_SPI1_Init+0x78>)
 80018b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <MX_SPI1_Init+0x74>)
 80018b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <MX_SPI1_Init+0x74>)
 80018bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_SPI1_Init+0x74>)
 80018c4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80018c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_SPI1_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_SPI1_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_SPI1_Init+0x74>)
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_SPI1_Init+0x74>)
 80018e0:	2238      	movs	r2, #56	; 0x38
 80018e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <MX_SPI1_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_SPI1_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <MX_SPI1_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_SPI1_Init+0x74>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <MX_SPI1_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_SPI1_Init+0x74>)
 8001904:	2208      	movs	r2, #8
 8001906:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001908:	4804      	ldr	r0, [pc, #16]	; (800191c <MX_SPI1_Init+0x74>)
 800190a:	f003 fd32 	bl	8005372 <HAL_SPI_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001914:	f7ff fca5 	bl	8001262 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200002c0 	.word	0x200002c0
 8001920:	40013000 	.word	0x40013000

08001924 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a24      	ldr	r2, [pc, #144]	; (80019d4 <HAL_SPI_MspInit+0xb0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d142      	bne.n	80019cc <HAL_SPI_MspInit+0xa8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001946:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800194a:	f7ff ff94 	bl	8001876 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff ff78 	bl	8001844 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001954:	23a0      	movs	r3, #160	; 0xa0
 8001956:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001964:	2305      	movs	r3, #5
 8001966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4619      	mov	r1, r3
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f001 ff21 	bl	80037b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_SPI_MspInit+0xb4>)
 8001978:	4a18      	ldr	r2, [pc, #96]	; (80019dc <HAL_SPI_MspInit+0xb8>)
 800197a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_SPI_MspInit+0xb4>)
 800197e:	2207      	movs	r2, #7
 8001980:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_SPI_MspInit+0xb4>)
 8001984:	2210      	movs	r2, #16
 8001986:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_SPI_MspInit+0xb4>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_SPI_MspInit+0xb4>)
 8001990:	2280      	movs	r2, #128	; 0x80
 8001992:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_SPI_MspInit+0xb4>)
 8001996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_SPI_MspInit+0xb4>)
 800199e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_SPI_MspInit+0xb4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_SPI_MspInit+0xb4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <HAL_SPI_MspInit+0xb4>)
 80019b2:	f001 fcbb 	bl	800332c <HAL_DMA_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_SPI_MspInit+0x9c>
    {
      Error_Handler();
 80019bc:	f7ff fc51 	bl	8001262 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <HAL_SPI_MspInit+0xb4>)
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_SPI_MspInit+0xb4>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40013000 	.word	0x40013000
 80019d8:	20000324 	.word	0x20000324
 80019dc:	40020008 	.word	0x40020008

080019e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <NMI_Handler+0x4>

080019f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <HardFault_Handler+0x4>

080019fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <MemManage_Handler+0x4>

08001a00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <BusFault_Handler+0x4>

08001a06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <UsageFault_Handler+0x4>

08001a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3a:	f000 f937 	bl	8001cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <DMA1_Channel1_IRQHandler+0x10>)
 8001a4a:	f001 fd76 	bl	800353a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000324 	.word	0x20000324

08001a58 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <IPCC_C1_RX_IRQHandler+0x10>)
 8001a5e:	f002 f8dd 	bl	8003c1c <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000026c 	.word	0x2000026c

08001a6c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <IPCC_C1_TX_IRQHandler+0x10>)
 8001a72:	f002 f885 	bl	8003b80 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000026c 	.word	0x2000026c

08001a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <_sbrk+0x5c>)
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <_sbrk+0x60>)
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <_sbrk+0x64>)
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <_sbrk+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d207      	bcs.n	8001ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab0:	f003 fffa 	bl	8005aa8 <__errno>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	e009      	b.n	8001ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <_sbrk+0x64>)
 8001ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20010000 	.word	0x20010000
 8001ae0:	00000400 	.word	0x00000400
 8001ae4:	20000384 	.word	0x20000384
 8001ae8:	20000448 	.word	0x20000448

08001aec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001aec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af0:	3304      	adds	r3, #4

08001af2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001af6:	d3f9      	bcc.n	8001aec <CopyDataInit>
  bx lr
 8001af8:	4770      	bx	lr

08001afa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001afa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001afc:	3004      	adds	r0, #4

08001afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001afe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001b00:	d3fb      	bcc.n	8001afa <FillZerobss>
  bx lr
 8001b02:	4770      	bx	lr

08001b04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001b06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b08:	f000 f828 	bl	8001b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001b0c:	480b      	ldr	r0, [pc, #44]	; (8001b3c <LoopForever+0x8>)
 8001b0e:	490c      	ldr	r1, [pc, #48]	; (8001b40 <LoopForever+0xc>)
 8001b10:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <LoopForever+0x10>)
 8001b12:	2300      	movs	r3, #0
 8001b14:	f7ff ffed 	bl	8001af2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001b18:	480b      	ldr	r0, [pc, #44]	; (8001b48 <LoopForever+0x14>)
 8001b1a:	490c      	ldr	r1, [pc, #48]	; (8001b4c <LoopForever+0x18>)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f7ff ffee 	bl	8001afe <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b22:	480b      	ldr	r0, [pc, #44]	; (8001b50 <LoopForever+0x1c>)
 8001b24:	490b      	ldr	r1, [pc, #44]	; (8001b54 <LoopForever+0x20>)
 8001b26:	2300      	movs	r3, #0
 8001b28:	f7ff ffe9 	bl	8001afe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b2c:	f003 ffc2 	bl	8005ab4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001b30:	f7ff fa6a 	bl	8001008 <main>

08001b34 <LoopForever>:

LoopForever:
  b LoopForever
 8001b34:	e7fe      	b.n	8001b34 <LoopForever>
 8001b36:	0000      	.short	0x0000
   ldr   r0, =_estack
 8001b38:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 8001b3c:	20000004 	.word	0x20000004
 8001b40:	200001ec 	.word	0x200001ec
 8001b44:	08009a18 	.word	0x08009a18
  INIT_BSS _sbss, _ebss
 8001b48:	200001ec 	.word	0x200001ec
 8001b4c:	20000448 	.word	0x20000448
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b50:	20030000 	.word	0x20030000
 8001b54:	20030000 	.word	0x20030000

08001b58 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC1_IRQHandler>
	...

08001b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <SystemInit+0x90>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	4a21      	ldr	r2, [pc, #132]	; (8001bec <SystemInit+0x90>)
 8001b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b84:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001b88:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <SystemInit+0x94>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba6:	f023 0305 	bic.w	r3, r3, #5
 8001baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <SystemInit+0x98>)
 8001bc8:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00
 8001bf0:	faf6fefb 	.word	0xfaf6fefb
 8001bf4:	22041000 	.word	0x22041000

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_Init+0x3c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <HAL_Init+0x3c>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0e:	2003      	movs	r0, #3
 8001c10:	f001 fb4c 	bl	80032ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c14:	2000      	movs	r0, #0
 8001c16:	f000 f80f 	bl	8001c38 <HAL_InitTick>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	71fb      	strb	r3, [r7, #7]
 8001c24:	e001      	b.n	8001c2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c26:	f7ff fedb 	bl	80019e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	58004000 	.word	0x58004000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001c44:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <HAL_InitTick+0x6c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d024      	beq.n	8001c96 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c4c:	f003 f90a 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_InitTick+0x6c>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	4619      	mov	r1, r3
 8001c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 fb54 	bl	8003312 <HAL_SYSTICK_Config>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10f      	bne.n	8001c90 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	d809      	bhi.n	8001c8a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c76:	2200      	movs	r2, #0
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7e:	f001 fb20 	bl	80032c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <HAL_InitTick+0x70>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e007      	b.n	8001c9a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	e004      	b.n	8001c9a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e001      	b.n	8001c9a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000010 	.word	0x20000010
 8001ca8:	2000000c 	.word	0x2000000c

08001cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x20>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_IncTick+0x24>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_IncTick+0x24>)
 8001cbe:	6013      	str	r3, [r2, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000010 	.word	0x20000010
 8001cd0:	20000388 	.word	0x20000388

08001cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_GetTick+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000388 	.word	0x20000388

08001cec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTickPrio+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	2000000c 	.word	0x2000000c

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffe2 	bl	8001cd4 <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffd2 	bl	8001cd4 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000010 	.word	0x20000010

08001d4c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3360      	adds	r3, #96	; 0x60
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <LL_ADC_SetOffset+0x44>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001dec:	bf00      	nop
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	03fff000 	.word	0x03fff000

08001dfc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3360      	adds	r3, #96	; 0x60
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3360      	adds	r3, #96	; 0x60
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e76:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3330      	adds	r3, #48	; 0x30
 8001e94:	461a      	mov	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	4413      	add	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	211f      	movs	r1, #31
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	0e9b      	lsrs	r3, r3, #26
 8001ebc:	f003 011f 	and.w	r1, r3, #31
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ed0:	bf00      	nop
 8001ed2:	371c      	adds	r7, #28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3314      	adds	r3, #20
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	0e5b      	lsrs	r3, r3, #25
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	0d1b      	lsrs	r3, r3, #20
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2107      	movs	r1, #7
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	401a      	ands	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	0d1b      	lsrs	r3, r3, #20
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	431a      	orrs	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0318 	and.w	r3, r3, #24
 8001f56:	4908      	ldr	r1, [pc, #32]	; (8001f78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f58:	40d9      	lsrs	r1, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	431a      	orrs	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	0007ffff 	.word	0x0007ffff

08001f7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6093      	str	r3, [r2, #8]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fb4:	d101      	bne.n	8001fba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002004:	d101      	bne.n	800200a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002054:	f043 0202 	orr.w	r2, r3, #2
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <LL_ADC_IsEnabled+0x18>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <LL_ADC_IsEnabled+0x1a>
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d101      	bne.n	80020a6 <LL_ADC_IsDisableOngoing+0x18>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_ADC_IsDisableOngoing+0x1a>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c8:	f043 0204 	orr.w	r2, r3, #4
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f0:	f043 0210 	orr.w	r2, r3, #16
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b04      	cmp	r3, #4
 8002116:	d101      	bne.n	800211c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800213a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800213e:	f043 0220 	orr.w	r2, r3, #32
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b08      	cmp	r3, #8
 8002164:	d101      	bne.n	800216a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e12e      	b.n	80023f4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7fe fda5 	bl	8000cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff feef 	bl	8001fa0 <LL_ADC_IsDeepPowerDownEnabled>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d004      	beq.n	80021d2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fed5 	bl	8001f7c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff0a 	bl	8001ff0 <LL_ADC_IsInternalRegulatorEnabled>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d115      	bne.n	800220e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff feee 	bl	8001fc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ec:	4b83      	ldr	r3, [pc, #524]	; (80023fc <HAL_ADC_Init+0x284>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	4a83      	ldr	r2, [pc, #524]	; (8002400 <HAL_ADC_Init+0x288>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	3301      	adds	r3, #1
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002200:	e002      	b.n	8002208 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff feec 	bl	8001ff0 <LL_ADC_IsInternalRegulatorEnabled>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10d      	bne.n	800223a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff60 	bl	8002104 <LL_ADC_REG_IsConversionOngoing>
 8002244:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 80c7 	bne.w	80023e2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 80c3 	bne.w	80023e2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002264:	f043 0202 	orr.w	r2, r3, #2
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fef9 	bl	8002068 <LL_ADC_IsEnabled>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10b      	bne.n	8002294 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800227c:	4861      	ldr	r0, [pc, #388]	; (8002404 <HAL_ADC_Init+0x28c>)
 800227e:	f7ff fef3 	bl	8002068 <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4619      	mov	r1, r3
 800228e:	485e      	ldr	r0, [pc, #376]	; (8002408 <HAL_ADC_Init+0x290>)
 8002290:	f7ff fd5c 	bl	8001d4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7e5b      	ldrb	r3, [r3, #25]
 8002298:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800229e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80022b4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d106      	bne.n	80022d4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	3b01      	subs	r3, #1
 80022cc:	045b      	lsls	r3, r3, #17
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d009      	beq.n	80022f0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	4b45      	ldr	r3, [pc, #276]	; (800240c <HAL_ADC_Init+0x294>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	430b      	orrs	r3, r1
 8002302:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fefb 	bl	8002104 <LL_ADC_REG_IsConversionOngoing>
 800230e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff1c 	bl	8002152 <LL_ADC_INJ_IsConversionOngoing>
 800231a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d13d      	bne.n	800239e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d13a      	bne.n	800239e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800232c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002334:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002344:	f023 0302 	bic.w	r3, r3, #2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	69b9      	ldr	r1, [r7, #24]
 800234e:	430b      	orrs	r3, r1
 8002350:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002358:	2b01      	cmp	r3, #1
 800235a:	d118      	bne.n	800238e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002366:	f023 0304 	bic.w	r3, r3, #4
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002378:	4311      	orrs	r1, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800237e:	430a      	orrs	r2, r1
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	611a      	str	r2, [r3, #16]
 800238c:	e007      	b.n	800239e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d10c      	bne.n	80023c0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	f023 010f 	bic.w	r1, r3, #15
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
 80023be:	e007      	b.n	80023d0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 020f 	bic.w	r2, r2, #15
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	f023 0303 	bic.w	r3, r3, #3
 80023d8:	f043 0201 	orr.w	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	655a      	str	r2, [r3, #84]	; 0x54
 80023e0:	e007      	b.n	80023f2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f043 0210 	orr.w	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000008 	.word	0x20000008
 8002400:	053e2d63 	.word	0x053e2d63
 8002404:	50040000 	.word	0x50040000
 8002408:	50040300 	.word	0x50040300
 800240c:	fff0c007 	.word	0xfff0c007

08002410 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fe71 	bl	8002104 <LL_ADC_REG_IsConversionOngoing>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d140      	bne.n	80024aa <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_ADC_Start+0x26>
 8002432:	2302      	movs	r3, #2
 8002434:	e03c      	b.n	80024b0 <HAL_ADC_Start+0xa0>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fd8a 	bl	8002f58 <ADC_Enable>
 8002444:	4603      	mov	r3, r0
 8002446:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d128      	bne.n	80024a0 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246e:	d106      	bne.n	800247e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	f023 0206 	bic.w	r2, r3, #6
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	659a      	str	r2, [r3, #88]	; 0x58
 800247c:	e002      	b.n	8002484 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	221c      	movs	r2, #28
 800248a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fe0b 	bl	80020b4 <LL_ADC_REG_StartConversion>
 800249e:	e006      	b.n	80024ae <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80024a8:	e001      	b.n	80024ae <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
 80024ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_ADC_Stop+0x16>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e023      	b.n	8002516 <HAL_ADC_Stop+0x5e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80024d6:	2103      	movs	r1, #3
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fc81 	bl	8002de0 <ADC_ConversionStop>
 80024de:	4603      	mov	r3, r0
 80024e0:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d111      	bne.n	800250c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fdaf 	bl	800304c <ADC_Disable>
 80024ee:	4603      	mov	r3, r0
 80024f0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d102      	bne.n	8002536 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002530:	2308      	movs	r3, #8
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e010      	b.n	8002558 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e06d      	b.n	8002630 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002554:	2304      	movs	r3, #4
 8002556:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002558:	f7ff fbbc 	bl	8001cd4 <HAL_GetTick>
 800255c:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800255e:	e021      	b.n	80025a4 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002566:	d01d      	beq.n	80025a4 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002568:	f7ff fbb4 	bl	8001cd4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d302      	bcc.n	800257e <HAL_ADC_PollForConversion+0x60>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d112      	bne.n	80025a4 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f043 0204 	orr.w	r2, r3, #4
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e045      	b.n	8002630 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0d6      	beq.n	8002560 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fc4b 	bl	8001e5e <LL_ADC_REG_IsTriggerSourceSWStart>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01c      	beq.n	8002608 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7e5b      	ldrb	r3, [r3, #25]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d118      	bne.n	8002608 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d111      	bne.n	8002608 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b08      	cmp	r3, #8
 800260c:	d104      	bne.n	8002618 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2208      	movs	r2, #8
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e00a      	b.n	800262e <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	220c      	movs	r2, #12
 800262c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b0b6      	sub	sp, #216	; 0xd8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x22>
 8002672:	2302      	movs	r3, #2
 8002674:	e39f      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x762>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd3e 	bl	8002104 <LL_ADC_REG_IsConversionOngoing>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 8384 	bne.w	8002d98 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	f7ff fbf1 	bl	8001e84 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fd2c 	bl	8002104 <LL_ADC_REG_IsConversionOngoing>
 80026ac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fd4c 	bl	8002152 <LL_ADC_INJ_IsConversionOngoing>
 80026ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 81a6 	bne.w	8002a14 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f040 81a1 	bne.w	8002a14 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	461a      	mov	r2, r3
 80026e0:	f7ff fbfc 	bl	8001edc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	08db      	lsrs	r3, r3, #3
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b04      	cmp	r3, #4
 8002704:	d00a      	beq.n	800271c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6919      	ldr	r1, [r3, #16]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002716:	f7ff fb4d 	bl	8001db4 <LL_ADC_SetOffset>
 800271a:	e17b      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fb6a 	bl	8001dfc <LL_ADC_GetOffsetChannel>
 8002728:	4603      	mov	r3, r0
 800272a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10a      	bne.n	8002748 <HAL_ADC_ConfigChannel+0xf4>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fb5f 	bl	8001dfc <LL_ADC_GetOffsetChannel>
 800273e:	4603      	mov	r3, r0
 8002740:	0e9b      	lsrs	r3, r3, #26
 8002742:	f003 021f 	and.w	r2, r3, #31
 8002746:	e01e      	b.n	8002786 <HAL_ADC_ConfigChannel+0x132>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fb54 	bl	8001dfc <LL_ADC_GetOffsetChannel>
 8002754:	4603      	mov	r3, r0
 8002756:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800276a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800276e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002776:	2320      	movs	r3, #32
 8002778:	e004      	b.n	8002784 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800277a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	2b00      	cmp	r3, #0
 8002790:	d105      	bne.n	800279e <HAL_ADC_ConfigChannel+0x14a>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0e9b      	lsrs	r3, r3, #26
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	e018      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x17c>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80027c2:	2320      	movs	r3, #32
 80027c4:	e004      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80027c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d106      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fb23 	bl	8001e28 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2101      	movs	r1, #1
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fb07 	bl	8001dfc <LL_ADC_GetOffsetChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <HAL_ADC_ConfigChannel+0x1ba>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fafc 	bl	8001dfc <LL_ADC_GetOffsetChannel>
 8002804:	4603      	mov	r3, r0
 8002806:	0e9b      	lsrs	r3, r3, #26
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	e01e      	b.n	800284c <HAL_ADC_ConfigChannel+0x1f8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2101      	movs	r1, #1
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff faf1 	bl	8001dfc <LL_ADC_GetOffsetChannel>
 800281a:	4603      	mov	r3, r0
 800281c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800282c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800283c:	2320      	movs	r3, #32
 800283e:	e004      	b.n	800284a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002840:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x210>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	e018      	b.n	8002896 <HAL_ADC_ConfigChannel+0x242>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002878:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800287c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002880:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002888:	2320      	movs	r3, #32
 800288a:	e004      	b.n	8002896 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800288c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	429a      	cmp	r2, r3
 8002898:	d106      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2200      	movs	r2, #0
 80028a0:	2101      	movs	r1, #1
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fac0 	bl	8001e28 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2102      	movs	r1, #2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff faa4 	bl	8001dfc <LL_ADC_GetOffsetChannel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10a      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x280>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2102      	movs	r1, #2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fa99 	bl	8001dfc <LL_ADC_GetOffsetChannel>
 80028ca:	4603      	mov	r3, r0
 80028cc:	0e9b      	lsrs	r3, r3, #26
 80028ce:	f003 021f 	and.w	r2, r3, #31
 80028d2:	e01e      	b.n	8002912 <HAL_ADC_ConfigChannel+0x2be>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2102      	movs	r1, #2
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fa8e 	bl	8001dfc <LL_ADC_GetOffsetChannel>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002902:	2320      	movs	r3, #32
 8002904:	e004      	b.n	8002910 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291a:	2b00      	cmp	r3, #0
 800291c:	d105      	bne.n	800292a <HAL_ADC_ConfigChannel+0x2d6>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0e9b      	lsrs	r3, r3, #26
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	e016      	b.n	8002958 <HAL_ADC_ConfigChannel+0x304>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800293c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800293e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e004      	b.n	8002958 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800294e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	429a      	cmp	r2, r3
 800295a:	d106      	bne.n	800296a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2200      	movs	r2, #0
 8002962:	2102      	movs	r1, #2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fa5f 	bl	8001e28 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2103      	movs	r1, #3
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fa43 	bl	8001dfc <LL_ADC_GetOffsetChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x342>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2103      	movs	r1, #3
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fa38 	bl	8001dfc <LL_ADC_GetOffsetChannel>
 800298c:	4603      	mov	r3, r0
 800298e:	0e9b      	lsrs	r3, r3, #26
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	e017      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x372>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2103      	movs	r1, #3
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fa2d 	bl	8001dfc <LL_ADC_GetOffsetChannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80029b8:	2320      	movs	r3, #32
 80029ba:	e003      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80029bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d105      	bne.n	80029de <HAL_ADC_ConfigChannel+0x38a>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	e011      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x3ae>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80029f6:	2320      	movs	r3, #32
 80029f8:	e003      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80029fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d106      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2103      	movs	r1, #3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fa0a 	bl	8001e28 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fb25 	bl	8002068 <LL_ADC_IsEnabled>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f040 81c2 	bne.w	8002daa <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6819      	ldr	r1, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f7ff fa7e 	bl	8001f34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a8e      	ldr	r2, [pc, #568]	; (8002c78 <HAL_ADC_ConfigChannel+0x624>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	f040 8130 	bne.w	8002ca4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10b      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x418>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0e9b      	lsrs	r3, r3, #26
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	2b09      	cmp	r3, #9
 8002a62:	bf94      	ite	ls
 8002a64:	2301      	movls	r3, #1
 8002a66:	2300      	movhi	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e019      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x44c>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e003      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2b09      	cmp	r3, #9
 8002a98:	bf94      	ite	ls
 8002a9a:	2301      	movls	r3, #1
 8002a9c:	2300      	movhi	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d079      	beq.n	8002b98 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d107      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x46c>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	069b      	lsls	r3, r3, #26
 8002aba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002abe:	e015      	b.n	8002aec <HAL_ADC_ConfigChannel+0x498>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ad8:	2320      	movs	r3, #32
 8002ada:	e003      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	069b      	lsls	r3, r3, #26
 8002ae8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d109      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x4b8>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	3301      	adds	r3, #1
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	2101      	movs	r1, #1
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	e017      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x4e8>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e003      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	ea42 0103 	orr.w	r1, r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x50e>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0e9b      	lsrs	r3, r3, #26
 8002b52:	3301      	adds	r3, #1
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	051b      	lsls	r3, r3, #20
 8002b60:	e018      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x540>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	e003      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b80:	fab3 f383 	clz	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b94:	430b      	orrs	r3, r1
 8002b96:	e080      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x560>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0e9b      	lsrs	r3, r3, #26
 8002baa:	3301      	adds	r3, #1
 8002bac:	069b      	lsls	r3, r3, #26
 8002bae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb2:	e015      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x58c>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002bcc:	2320      	movs	r3, #32
 8002bce:	e003      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	069b      	lsls	r3, r3, #26
 8002bdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d109      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x5ac>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0e9b      	lsrs	r3, r3, #26
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	e017      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x5dc>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	61fb      	str	r3, [r7, #28]
  return result;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e003      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	ea42 0103 	orr.w	r1, r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10d      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x608>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	3301      	adds	r3, #1
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	3b1e      	subs	r3, #30
 8002c54:	051b      	lsls	r3, r3, #20
 8002c56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c5a:	e01d      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x644>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	613b      	str	r3, [r7, #16]
  return result;
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e005      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x630>
 8002c78:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3301      	adds	r3, #1
 8002c86:	f003 021f 	and.w	r2, r3, #31
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b1e      	subs	r3, #30
 8002c92:	051b      	lsls	r3, r3, #20
 8002c94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	6892      	ldr	r2, [r2, #8]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f7ff f91c 	bl	8001edc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <HAL_ADC_ConfigChannel+0x76c>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d07c      	beq.n	8002daa <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cb0:	4844      	ldr	r0, [pc, #272]	; (8002dc4 <HAL_ADC_ConfigChannel+0x770>)
 8002cb2:	f7ff f871 	bl	8001d98 <LL_ADC_GetCommonPathInternalCh>
 8002cb6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cba:	4843      	ldr	r0, [pc, #268]	; (8002dc8 <HAL_ADC_ConfigChannel+0x774>)
 8002cbc:	f7ff f9d4 	bl	8002068 <LL_ADC_IsEnabled>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d15e      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a40      	ldr	r2, [pc, #256]	; (8002dcc <HAL_ADC_ConfigChannel+0x778>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d127      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x6cc>
 8002cd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d121      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a39      	ldr	r2, [pc, #228]	; (8002dc8 <HAL_ADC_ConfigChannel+0x774>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d161      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ce6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4834      	ldr	r0, [pc, #208]	; (8002dc4 <HAL_ADC_ConfigChannel+0x770>)
 8002cf2:	f7ff f83e 	bl	8001d72 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf6:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <HAL_ADC_ConfigChannel+0x77c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	099b      	lsrs	r3, r3, #6
 8002cfc:	4a35      	ldr	r2, [pc, #212]	; (8002dd4 <HAL_ADC_ConfigChannel+0x780>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002d10:	e002      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f9      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d1e:	e044      	b.n	8002daa <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2c      	ldr	r2, [pc, #176]	; (8002dd8 <HAL_ADC_ConfigChannel+0x784>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d113      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x6fe>
 8002d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <HAL_ADC_ConfigChannel+0x774>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d134      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d48:	4619      	mov	r1, r3
 8002d4a:	481e      	ldr	r0, [pc, #120]	; (8002dc4 <HAL_ADC_ConfigChannel+0x770>)
 8002d4c:	f7ff f811 	bl	8001d72 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d50:	e02b      	b.n	8002daa <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <HAL_ADC_ConfigChannel+0x788>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d126      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x756>
 8002d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d120      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <HAL_ADC_ConfigChannel+0x774>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d11b      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4811      	ldr	r0, [pc, #68]	; (8002dc4 <HAL_ADC_ConfigChannel+0x770>)
 8002d7e:	f7fe fff8 	bl	8001d72 <LL_ADC_SetCommonPathInternalCh>
 8002d82:	e012      	b.n	8002daa <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d96:	e008      	b.n	8002daa <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9c:	f043 0220 	orr.w	r2, r3, #32
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002db2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	37d8      	adds	r7, #216	; 0xd8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	80080000 	.word	0x80080000
 8002dc4:	50040300 	.word	0x50040300
 8002dc8:	50040000 	.word	0x50040000
 8002dcc:	c7520000 	.word	0xc7520000
 8002dd0:	20000008 	.word	0x20000008
 8002dd4:	053e2d63 	.word	0x053e2d63
 8002dd8:	cb840000 	.word	0xcb840000
 8002ddc:	80000001 	.word	0x80000001

08002de0 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f984 	bl	8002104 <LL_ADC_REG_IsConversionOngoing>
 8002dfc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff f9a5 	bl	8002152 <LL_ADC_INJ_IsConversionOngoing>
 8002e08:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d103      	bne.n	8002e18 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8098 	beq.w	8002f48 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d02a      	beq.n	8002e7c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	7e5b      	ldrb	r3, [r3, #25]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d126      	bne.n	8002e7c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	7e1b      	ldrb	r3, [r3, #24]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d122      	bne.n	8002e7c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002e36:	2301      	movs	r3, #1
 8002e38:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e3a:	e014      	b.n	8002e66 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	4a45      	ldr	r2, [pc, #276]	; (8002f54 <ADC_ConversionStop+0x174>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d90d      	bls.n	8002e60 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	f043 0210 	orr.w	r2, r3, #16
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e074      	b.n	8002f4a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	3301      	adds	r3, #1
 8002e64:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	d1e3      	bne.n	8002e3c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2240      	movs	r2, #64	; 0x40
 8002e7a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d014      	beq.n	8002eac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f93c 	bl	8002104 <LL_ADC_REG_IsConversionOngoing>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00c      	beq.n	8002eac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff f8f9 	bl	800208e <LL_ADC_IsDisableOngoing>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d104      	bne.n	8002eac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff f918 	bl	80020dc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d014      	beq.n	8002edc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff f94b 	bl	8002152 <LL_ADC_INJ_IsConversionOngoing>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00c      	beq.n	8002edc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f8e1 	bl	800208e <LL_ADC_IsDisableOngoing>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d104      	bne.n	8002edc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff f927 	bl	800212a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d005      	beq.n	8002eee <ADC_ConversionStop+0x10e>
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d105      	bne.n	8002ef4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002ee8:	230c      	movs	r3, #12
 8002eea:	617b      	str	r3, [r7, #20]
        break;
 8002eec:	e005      	b.n	8002efa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002eee:	2308      	movs	r3, #8
 8002ef0:	617b      	str	r3, [r7, #20]
        break;
 8002ef2:	e002      	b.n	8002efa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	617b      	str	r3, [r7, #20]
        break;
 8002ef8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002efa:	f7fe feeb 	bl	8001cd4 <HAL_GetTick>
 8002efe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f00:	e01b      	b.n	8002f3a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002f02:	f7fe fee7 	bl	8001cd4 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d914      	bls.n	8002f3a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f043 0210 	orr.w	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e007      	b.n	8002f4a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1dc      	bne.n	8002f02 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	a33fffff 	.word	0xa33fffff

08002f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff f87d 	bl	8002068 <LL_ADC_IsEnabled>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d15e      	bne.n	8003032 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	4b30      	ldr	r3, [pc, #192]	; (800303c <ADC_Enable+0xe4>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	f043 0210 	orr.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	f043 0201 	orr.w	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e04a      	b.n	8003034 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff f838 	bl	8002018 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002fa8:	4825      	ldr	r0, [pc, #148]	; (8003040 <ADC_Enable+0xe8>)
 8002faa:	f7fe fef5 	bl	8001d98 <LL_ADC_GetCommonPathInternalCh>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00f      	beq.n	8002fd8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <ADC_Enable+0xec>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	4a22      	ldr	r2, [pc, #136]	; (8003048 <ADC_Enable+0xf0>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002fca:	e002      	b.n	8002fd2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f9      	bne.n	8002fcc <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fe7c 	bl	8001cd4 <HAL_GetTick>
 8002fdc:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fde:	e021      	b.n	8003024 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f83f 	bl	8002068 <LL_ADC_IsEnabled>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d104      	bne.n	8002ffa <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff f80f 	bl	8002018 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ffa:	f7fe fe6b 	bl	8001cd4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d90d      	bls.n	8003024 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	f043 0210 	orr.w	r2, r3, #16
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e007      	b.n	8003034 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d1d6      	bne.n	8002fe0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	8000003f 	.word	0x8000003f
 8003040:	50040300 	.word	0x50040300
 8003044:	20000008 	.word	0x20000008
 8003048:	053e2d63 	.word	0x053e2d63

0800304c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff f818 	bl	800208e <LL_ADC_IsDisableOngoing>
 800305e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe ffff 	bl	8002068 <LL_ADC_IsEnabled>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d047      	beq.n	8003100 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d144      	bne.n	8003100 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 030d 	and.w	r3, r3, #13
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10c      	bne.n	800309e <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe ffd9 	bl	8002040 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2203      	movs	r2, #3
 8003094:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003096:	f7fe fe1d 	bl	8001cd4 <HAL_GetTick>
 800309a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800309c:	e029      	b.n	80030f2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	f043 0210 	orr.w	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e023      	b.n	8003102 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030ba:	f7fe fe0b 	bl	8001cd4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d914      	bls.n	80030f2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f043 0210 	orr.w	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e007      	b.n	8003102 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1dc      	bne.n	80030ba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313e:	4a04      	ldr	r2, [pc, #16]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	60d3      	str	r3, [r2, #12]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__NVIC_GetPriorityGrouping+0x18>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0307 	and.w	r3, r3, #7
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db0b      	blt.n	800319a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	4907      	ldr	r1, [pc, #28]	; (80031a8 <__NVIC_EnableIRQ+0x38>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2001      	movs	r0, #1
 8003192:	fa00 f202 	lsl.w	r2, r0, r2
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100

080031ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	db0a      	blt.n	80031d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	490c      	ldr	r1, [pc, #48]	; (80031f8 <__NVIC_SetPriority+0x4c>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	0112      	lsls	r2, r2, #4
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	440b      	add	r3, r1
 80031d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d4:	e00a      	b.n	80031ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4908      	ldr	r1, [pc, #32]	; (80031fc <__NVIC_SetPriority+0x50>)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	3b04      	subs	r3, #4
 80031e4:	0112      	lsls	r2, r2, #4
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	440b      	add	r3, r1
 80031ea:	761a      	strb	r2, [r3, #24]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000e100 	.word	0xe000e100
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f1c3 0307 	rsb	r3, r3, #7
 800321a:	2b04      	cmp	r3, #4
 800321c:	bf28      	it	cs
 800321e:	2304      	movcs	r3, #4
 8003220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3304      	adds	r3, #4
 8003226:	2b06      	cmp	r3, #6
 8003228:	d902      	bls.n	8003230 <NVIC_EncodePriority+0x30>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3b03      	subs	r3, #3
 800322e:	e000      	b.n	8003232 <NVIC_EncodePriority+0x32>
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	f04f 32ff 	mov.w	r2, #4294967295
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	401a      	ands	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003248:	f04f 31ff 	mov.w	r1, #4294967295
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	43d9      	mvns	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	4313      	orrs	r3, r2
         );
}
 800325a:	4618      	mov	r0, r3
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003278:	d301      	bcc.n	800327e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327a:	2301      	movs	r3, #1
 800327c:	e00f      	b.n	800329e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <SysTick_Config+0x40>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003286:	210f      	movs	r1, #15
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	f7ff ff8e 	bl	80031ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <SysTick_Config+0x40>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <SysTick_Config+0x40>)
 8003298:	2207      	movs	r2, #7
 800329a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	e000e010 	.word	0xe000e010

080032ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff29 	bl	800310c <__NVIC_SetPriorityGrouping>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032d0:	f7ff ff40 	bl	8003154 <__NVIC_GetPriorityGrouping>
 80032d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	6978      	ldr	r0, [r7, #20]
 80032dc:	f7ff ff90 	bl	8003200 <NVIC_EncodePriority>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff5f 	bl	80031ac <__NVIC_SetPriority>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff33 	bl	8003170 <__NVIC_EnableIRQ>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ffa4 	bl	8003268 <SysTick_Config>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e078      	b.n	8003430 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	4b3c      	ldr	r3, [pc, #240]	; (8003438 <HAL_DMA_Init+0x10c>)
 8003346:	4413      	add	r3, r2
 8003348:	4a3c      	ldr	r2, [pc, #240]	; (800343c <HAL_DMA_Init+0x110>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	009a      	lsls	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a39      	ldr	r2, [pc, #228]	; (8003440 <HAL_DMA_Init+0x114>)
 800335a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f9b0 	bl	8003714 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033bc:	d102      	bne.n	80033c4 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80033d0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033da:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d010      	beq.n	8003406 <HAL_DMA_Init+0xda>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d80c      	bhi.n	8003406 <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f9bd 	bl	800376c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	e008      	b.n	8003418 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	bffdfff8 	.word	0xbffdfff8
 800343c:	cccccccd 	.word	0xcccccccd
 8003440:	40020000 	.word	0x40020000

08003444 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_DMA_Start_IT+0x20>
 8003460:	2302      	movs	r3, #2
 8003462:	e066      	b.n	8003532 <HAL_DMA_Start_IT+0xee>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d155      	bne.n	8003524 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f8fb 	bl	8003698 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 020e 	orr.w	r2, r2, #14
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e00f      	b.n	80034dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 020a 	orr.w	r2, r2, #10
 80034da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003510:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e005      	b.n	8003530 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800352c:	2302      	movs	r3, #2
 800352e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f003 031c 	and.w	r3, r3, #28
 800355a:	2204      	movs	r2, #4
 800355c:	409a      	lsls	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d026      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x7a>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d021      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d107      	bne.n	800358e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0204 	bic.w	r2, r2, #4
 800358c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f003 021c 	and.w	r2, r3, #28
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2104      	movs	r1, #4
 800359c:	fa01 f202 	lsl.w	r2, r1, r2
 80035a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d071      	beq.n	800368e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035b2:	e06c      	b.n	800368e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	f003 031c 	and.w	r3, r3, #28
 80035bc:	2202      	movs	r2, #2
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d02e      	beq.n	8003626 <HAL_DMA_IRQHandler+0xec>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d029      	beq.n	8003626 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 020a 	bic.w	r2, r2, #10
 80035ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	f003 021c 	and.w	r2, r3, #28
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	2102      	movs	r1, #2
 8003606:	fa01 f202 	lsl.w	r2, r1, r2
 800360a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d038      	beq.n	800368e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003624:	e033      	b.n	800368e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f003 031c 	and.w	r3, r3, #28
 800362e:	2208      	movs	r2, #8
 8003630:	409a      	lsls	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4013      	ands	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d02a      	beq.n	8003690 <HAL_DMA_IRQHandler+0x156>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d025      	beq.n	8003690 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 020e 	bic.w	r2, r2, #14
 8003652:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	f003 021c 	and.w	r2, r3, #28
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	2101      	movs	r1, #1
 8003662:	fa01 f202 	lsl.w	r2, r1, r2
 8003666:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800368e:	bf00      	nop
 8003690:	bf00      	nop
}
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d004      	beq.n	80036c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	f003 021c 	and.w	r2, r3, #28
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	2101      	movs	r1, #1
 80036d0:	fa01 f202 	lsl.w	r2, r1, r2
 80036d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d108      	bne.n	80036f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036f6:	e007      	b.n	8003708 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	60da      	str	r2, [r3, #12]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	089b      	lsrs	r3, r3, #2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003728:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	3b08      	subs	r3, #8
 8003738:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a08      	ldr	r2, [pc, #32]	; (8003768 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003746:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	2201      	movs	r2, #1
 8003750:	409a      	lsls	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	cccccccd 	.word	0xcccccccd
 8003768:	40020880 	.word	0x40020880

0800376c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800377c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	461a      	mov	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003790:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3b01      	subs	r3, #1
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2201      	movs	r2, #1
 800379c:	409a      	lsls	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	1000823f 	.word	0x1000823f
 80037b4:	40020940 	.word	0x40020940

080037b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c6:	e146      	b.n	8003a56 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	2101      	movs	r1, #1
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8138 	beq.w	8003a50 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d005      	beq.n	80037f8 <HAL_GPIO_Init+0x40>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d130      	bne.n	800385a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2203      	movs	r2, #3
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800382e:	2201      	movs	r2, #1
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 0201 	and.w	r2, r3, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b03      	cmp	r3, #3
 8003864:	d017      	beq.n	8003896 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	2203      	movs	r2, #3
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4013      	ands	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d123      	bne.n	80038ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	08da      	lsrs	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3208      	adds	r2, #8
 80038aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	220f      	movs	r2, #15
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	08da      	lsrs	r2, r3, #3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3208      	adds	r2, #8
 80038e4:	6939      	ldr	r1, [r7, #16]
 80038e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	2203      	movs	r2, #3
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f003 0203 	and.w	r2, r3, #3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 8092 	beq.w	8003a50 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800392c:	4a51      	ldr	r2, [pc, #324]	; (8003a74 <HAL_GPIO_Init+0x2bc>)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	3302      	adds	r3, #2
 8003934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	220f      	movs	r2, #15
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003956:	d013      	beq.n	8003980 <HAL_GPIO_Init+0x1c8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a47      	ldr	r2, [pc, #284]	; (8003a78 <HAL_GPIO_Init+0x2c0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00d      	beq.n	800397c <HAL_GPIO_Init+0x1c4>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a46      	ldr	r2, [pc, #280]	; (8003a7c <HAL_GPIO_Init+0x2c4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <HAL_GPIO_Init+0x1c0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a45      	ldr	r2, [pc, #276]	; (8003a80 <HAL_GPIO_Init+0x2c8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_GPIO_Init+0x1bc>
 8003970:	2304      	movs	r3, #4
 8003972:	e006      	b.n	8003982 <HAL_GPIO_Init+0x1ca>
 8003974:	2307      	movs	r3, #7
 8003976:	e004      	b.n	8003982 <HAL_GPIO_Init+0x1ca>
 8003978:	2302      	movs	r3, #2
 800397a:	e002      	b.n	8003982 <HAL_GPIO_Init+0x1ca>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_GPIO_Init+0x1ca>
 8003980:	2300      	movs	r3, #0
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	f002 0203 	and.w	r2, r2, #3
 8003988:	0092      	lsls	r2, r2, #2
 800398a:	4093      	lsls	r3, r2
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003992:	4938      	ldr	r1, [pc, #224]	; (8003a74 <HAL_GPIO_Init+0x2bc>)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3302      	adds	r3, #2
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039a0:	4b38      	ldr	r3, [pc, #224]	; (8003a84 <HAL_GPIO_Init+0x2cc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039c4:	4a2f      	ldr	r2, [pc, #188]	; (8003a84 <HAL_GPIO_Init+0x2cc>)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039ca:	4b2e      	ldr	r3, [pc, #184]	; (8003a84 <HAL_GPIO_Init+0x2cc>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	43db      	mvns	r3, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039ee:	4a25      	ldr	r2, [pc, #148]	; (8003a84 <HAL_GPIO_Init+0x2cc>)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039f4:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <HAL_GPIO_Init+0x2cc>)
 80039f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a1a:	4a1a      	ldr	r2, [pc, #104]	; (8003a84 <HAL_GPIO_Init+0x2cc>)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003a22:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <HAL_GPIO_Init+0x2cc>)
 8003a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a48:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <HAL_GPIO_Init+0x2cc>)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	3301      	adds	r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f47f aeb1 	bne.w	80037c8 <HAL_GPIO_Init+0x10>
  }
}
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	40010000 	.word	0x40010000
 8003a78:	48000400 	.word	0x48000400
 8003a7c:	48000800 	.word	0x48000800
 8003a80:	48001000 	.word	0x48001000
 8003a84:	58000800 	.word	0x58000800

08003a88 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	887b      	ldrh	r3, [r7, #2]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
 8003aa4:	e001      	b.n	8003aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ac8:	787b      	ldrb	r3, [r7, #1]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ace:	887a      	ldrh	r2, [r7, #2]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ad4:	e002      	b.n	8003adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003afa:	887a      	ldrh	r2, [r7, #2]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4013      	ands	r3, r2
 8003b00:	041a      	lsls	r2, r3, #16
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	43d9      	mvns	r1, r3
 8003b06:	887b      	ldrh	r3, [r7, #2]
 8003b08:	400b      	ands	r3, r1
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	619a      	str	r2, [r3, #24]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01e      	beq.n	8003b6c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <HAL_IPCC_Init+0x60>)
 8003b30:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd fa3e 	bl	8000fc0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003b44:	68b8      	ldr	r0, [r7, #8]
 8003b46:	f000 f8f5 	bl	8003d34 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f8c6 	bl	8003ce8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003b6a:	e001      	b.n	8003b70 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	58000c00 	.word	0x58000c00

08003b80 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003b8c:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <HAL_IPCC_TX_IRQHandler+0x98>)
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003b9a:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8003baa:	e02c      	b.n	8003c06 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3310      	adds	r3, #16
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01c      	beq.n	8003c00 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	3306      	adds	r3, #6
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	3306      	adds	r3, #6
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	6939      	ldr	r1, [r7, #16]
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	3301      	adds	r3, #1
 8003c04:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1cf      	bne.n	8003bac <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	58000c00 	.word	0x58000c00

08003c1c <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003c28:	4b20      	ldr	r3, [pc, #128]	; (8003cac <HAL_IPCC_RX_IRQHandler+0x90>)
 8003c2a:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 8003c2c:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_IPCC_RX_IRQHandler+0x94>)
 8003c2e:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c3a:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8003c46:	e029      	b.n	8003c9c <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	2201      	movs	r2, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01a      	beq.n	8003c96 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	69b9      	ldr	r1, [r7, #24]
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	4013      	ands	r3, r2
 8003c94:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1d2      	bne.n	8003c48 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	58000c00 	.word	0x58000c00
 8003cb0:	58000c10 	.word	0x58000c10

08003cb4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	e00f      	b.n	8003d16 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <IPCC_SetDefaultCallbacks+0x44>)
 8003d00:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	3306      	adds	r3, #6
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <IPCC_SetDefaultCallbacks+0x48>)
 8003d0e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	d9ec      	bls.n	8003cf6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	08003cb5 	.word	0x08003cb5
 8003d30:	08003ccf 	.word	0x08003ccf

08003d34 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003d48:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	223f      	movs	r2, #63	; 0x3f
 8003d4e:	609a      	str	r2, [r3, #8]
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6a:	6013      	str	r3, [r2, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	58000400 	.word	0x58000400

08003d7c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8e:	d101      	bne.n	8003d94 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db2:	6013      	str	r3, [r2, #0]
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dee:	d101      	bne.n	8003df4 <LL_RCC_HSE_IsReady+0x18>
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <LL_RCC_HSE_IsReady+0x1a>
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e12:	6013      	str	r3, [r2, #0]
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4e:	d101      	bne.n	8003e54 <LL_RCC_HSI_IsReady+0x18>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <LL_RCC_HSI_IsReady+0x1a>
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003ea2:	bf00      	nop
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d101      	bne.n	8003ee6 <LL_RCC_HSI48_IsReady+0x18>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <LL_RCC_HSI48_IsReady+0x1a>
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003f36:	b480      	push	{r7}
 8003f38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f4e:	bf00      	nop
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d101      	bne.n	8003f92 <LL_RCC_LSE_IsReady+0x18>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <LL_RCC_LSE_IsReady+0x1a>
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003fb6:	bf00      	nop
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003fd8:	bf00      	nop
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d101      	bne.n	8003ffa <LL_RCC_LSI1_IsReady+0x18>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <LL_RCC_LSI1_IsReady+0x1a>
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800400a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004016:	f043 0304 	orr.w	r3, r3, #4
 800401a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800404a:	b480      	push	{r7}
 800404c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800404e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b08      	cmp	r3, #8
 800405c:	d101      	bne.n	8004062 <LL_RCC_LSI2_IsReady+0x18>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <LL_RCC_LSI2_IsReady+0x1a>
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80040a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80040ba:	b480      	push	{r7}
 80040bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80040be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	6013      	str	r3, [r2, #0]
}
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d101      	bne.n	80040ee <LL_RCC_MSI_IsReady+0x16>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <LL_RCC_MSI_IsReady+0x18>
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004132:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2bb0      	cmp	r3, #176	; 0xb0
 8004138:	d901      	bls.n	800413e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800413a:	23b0      	movs	r3, #176	; 0xb0
 800413c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800413e:	687b      	ldr	r3, [r7, #4]
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004166:	4313      	orrs	r3, r2
 8004168:	604b      	str	r3, [r1, #4]
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f023 0203 	bic.w	r2, r3, #3
 8004188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80041be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80041e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004216:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800421a:	f023 020f 	bic.w	r2, r3, #15
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800424a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4313      	orrs	r3, r2
 800427a:	608b      	str	r3, [r1, #8]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800428c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004296:	4618      	mov	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80042a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80042c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042ce:	6013      	str	r3, [r2, #0]
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80042da:	b480      	push	{r7}
 80042dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80042de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ec:	6013      	str	r3, [r2, #0]
}
 80042ee:	bf00      	nop
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800430a:	d101      	bne.n	8004310 <LL_RCC_PLL_IsReady+0x18>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <LL_RCC_PLL_IsReady+0x1a>
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800432c:	4618      	mov	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004336:	b480      	push	{r7}
 8004338:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800433a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004344:	4618      	mov	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800434e:	b480      	push	{r7}
 8004350:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0303 	and.w	r3, r3, #3
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004390:	d101      	bne.n	8004396 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80043a2:	b480      	push	{r7}
 80043a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80043a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b6:	d101      	bne.n	80043bc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80043cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043dc:	d101      	bne.n	80043e2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80043ee:	b480      	push	{r7}
 80043f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80043f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004400:	d101      	bne.n	8004406 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004412:	b480      	push	{r7}
 8004414:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004420:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004424:	d101      	bne.n	800442a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b08d      	sub	sp, #52	; 0x34
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e35c      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 808d 	beq.w	8004572 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004458:	f7ff fea1 	bl	800419e <LL_RCC_GetSysClkSource>
 800445c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800445e:	f7ff ff82 	bl	8004366 <LL_RCC_PLL_GetMainSource>
 8004462:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_RCC_OscConfig+0x3e>
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	2b0c      	cmp	r3, #12
 800446e:	d147      	bne.n	8004500 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	2b01      	cmp	r3, #1
 8004474:	d144      	bne.n	8004500 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e340      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004486:	f7ff fe4c 	bl	8004122 <LL_RCC_MSI_GetRange>
 800448a:	4603      	mov	r3, r0
 800448c:	429c      	cmp	r4, r3
 800448e:	d914      	bls.n	80044ba <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fcf9 	bl	8004e8c <RCC_SetFlashLatencyFromMSIRange>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e32f      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fe26 	bl	80040fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fe4a 	bl	800414c <LL_RCC_MSI_SetCalibTrimming>
 80044b8:	e013      	b.n	80044e2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fe1b 	bl	80040fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fe3f 	bl	800414c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fcda 	bl	8004e8c <RCC_SetFlashLatencyFromMSIRange>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e310      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80044e2:	f000 fcbf 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 80044e6:	4603      	mov	r3, r0
 80044e8:	4aa4      	ldr	r2, [pc, #656]	; (800477c <HAL_RCC_OscConfig+0x344>)
 80044ea:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044ec:	4ba4      	ldr	r3, [pc, #656]	; (8004780 <HAL_RCC_OscConfig+0x348>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fd fba1 	bl	8001c38 <HAL_InitTick>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d039      	beq.n	8004570 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e301      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01e      	beq.n	8004546 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004508:	f7ff fdc8 	bl	800409c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800450c:	f7fd fbe2 	bl	8001cd4 <HAL_GetTick>
 8004510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004514:	f7fd fbde 	bl	8001cd4 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e2ee      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004526:	f7ff fdd7 	bl	80040d8 <LL_RCC_MSI_IsReady>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f1      	beq.n	8004514 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fde0 	bl	80040fa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fe04 	bl	800414c <LL_RCC_MSI_SetCalibTrimming>
 8004544:	e015      	b.n	8004572 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004546:	f7ff fdb8 	bl	80040ba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800454a:	f7fd fbc3 	bl	8001cd4 <HAL_GetTick>
 800454e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004552:	f7fd fbbf 	bl	8001cd4 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e2cf      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004564:	f7ff fdb8 	bl	80040d8 <LL_RCC_MSI_IsReady>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f1      	bne.n	8004552 <HAL_RCC_OscConfig+0x11a>
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004570:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d047      	beq.n	800460e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800457e:	f7ff fe0e 	bl	800419e <LL_RCC_GetSysClkSource>
 8004582:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004584:	f7ff feef 	bl	8004366 <LL_RCC_PLL_GetMainSource>
 8004588:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d005      	beq.n	800459c <HAL_RCC_OscConfig+0x164>
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d108      	bne.n	80045a8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d105      	bne.n	80045a8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d134      	bne.n	800460e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e2ad      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b0:	d102      	bne.n	80045b8 <HAL_RCC_OscConfig+0x180>
 80045b2:	f7ff fbf5 	bl	8003da0 <LL_RCC_HSE_Enable>
 80045b6:	e001      	b.n	80045bc <HAL_RCC_OscConfig+0x184>
 80045b8:	f7ff fc01 	bl	8003dbe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d012      	beq.n	80045ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd fb86 	bl	8001cd4 <HAL_GetTick>
 80045c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fd fb82 	bl	8001cd4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e292      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() == 0U)
 80045de:	f7ff fbfd 	bl	8003ddc <LL_RCC_HSE_IsReady>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f1      	beq.n	80045cc <HAL_RCC_OscConfig+0x194>
 80045e8:	e011      	b.n	800460e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fd fb73 	bl	8001cd4 <HAL_GetTick>
 80045ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f2:	f7fd fb6f 	bl	8001cd4 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b64      	cmp	r3, #100	; 0x64
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e27f      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004604:	f7ff fbea 	bl	8003ddc <LL_RCC_HSE_IsReady>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f1      	bne.n	80045f2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d04c      	beq.n	80046b4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461a:	f7ff fdc0 	bl	800419e <LL_RCC_GetSysClkSource>
 800461e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004620:	f7ff fea1 	bl	8004366 <LL_RCC_PLL_GetMainSource>
 8004624:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b04      	cmp	r3, #4
 800462a:	d005      	beq.n	8004638 <HAL_RCC_OscConfig+0x200>
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b0c      	cmp	r3, #12
 8004630:	d10e      	bne.n	8004650 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d10b      	bne.n	8004650 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e25f      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff fc09 	bl	8003e60 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800464e:	e031      	b.n	80046b4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d019      	beq.n	800468c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004658:	f7ff fbd2 	bl	8003e00 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fd fb3a 	bl	8001cd4 <HAL_GetTick>
 8004660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004664:	f7fd fb36 	bl	8001cd4 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e246      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004676:	f7ff fbe1 	bl	8003e3c <LL_RCC_HSI_IsReady>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f1      	beq.n	8004664 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fbeb 	bl	8003e60 <LL_RCC_HSI_SetCalibTrimming>
 800468a:	e013      	b.n	80046b4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800468c:	f7ff fbc7 	bl	8003e1e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fd fb20 	bl	8001cd4 <HAL_GetTick>
 8004694:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004698:	f7fd fb1c 	bl	8001cd4 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e22c      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() != 0U)
 80046aa:	f7ff fbc7 	bl	8003e3c <LL_RCC_HSI_IsReady>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f1      	bne.n	8004698 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80a3 	beq.w	8004814 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d076      	beq.n	80047c4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d046      	beq.n	8004770 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80046e2:	f7ff fc7e 	bl	8003fe2 <LL_RCC_LSI1_IsReady>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d113      	bne.n	8004714 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80046ec:	f7ff fc57 	bl	8003f9e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046f0:	f7fd faf0 	bl	8001cd4 <HAL_GetTick>
 80046f4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80046f8:	f7fd faec 	bl	8001cd4 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1fc      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800470a:	f7ff fc6a 	bl	8003fe2 <LL_RCC_LSI1_IsReady>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f1      	beq.n	80046f8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004714:	f7ff fc77 	bl	8004006 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fd fadc 	bl	8001cd4 <HAL_GetTick>
 800471c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004720:	f7fd fad8 	bl	8001cd4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b03      	cmp	r3, #3
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e1e8      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004732:	f7ff fc8a 	bl	800404a <LL_RCC_LSI2_IsReady>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f1      	beq.n	8004720 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fc94 	bl	800406e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004746:	f7ff fc3b 	bl	8003fc0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd fac3 	bl	8001cd4 <HAL_GetTick>
 800474e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004752:	f7fd fabf 	bl	8001cd4 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e1cf      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004764:	f7ff fc3d 	bl	8003fe2 <LL_RCC_LSI1_IsReady>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f1      	bne.n	8004752 <HAL_RCC_OscConfig+0x31a>
 800476e:	e051      	b.n	8004814 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004770:	f7ff fc15 	bl	8003f9e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fd faae 	bl	8001cd4 <HAL_GetTick>
 8004778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800477a:	e00c      	b.n	8004796 <HAL_RCC_OscConfig+0x35e>
 800477c:	20000008 	.word	0x20000008
 8004780:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004784:	f7fd faa6 	bl	8001cd4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1b6      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004796:	f7ff fc24 	bl	8003fe2 <LL_RCC_LSI1_IsReady>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f1      	beq.n	8004784 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80047a0:	f7ff fc42 	bl	8004028 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80047a6:	f7fd fa95 	bl	8001cd4 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e1a5      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80047b8:	f7ff fc47 	bl	800404a <LL_RCC_LSI2_IsReady>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f1      	bne.n	80047a6 <HAL_RCC_OscConfig+0x36e>
 80047c2:	e027      	b.n	8004814 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80047c4:	f7ff fc30 	bl	8004028 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fd fa84 	bl	8001cd4 <HAL_GetTick>
 80047cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80047d0:	f7fd fa80 	bl	8001cd4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e190      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80047e2:	f7ff fc32 	bl	800404a <LL_RCC_LSI2_IsReady>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f1      	bne.n	80047d0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80047ec:	f7ff fbe8 	bl	8003fc0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fd fa70 	bl	8001cd4 <HAL_GetTick>
 80047f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80047f8:	f7fd fa6c 	bl	8001cd4 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e17c      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800480a:	f7ff fbea 	bl	8003fe2 <LL_RCC_LSI1_IsReady>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f1      	bne.n	80047f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d05b      	beq.n	80048d8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004820:	4ba7      	ldr	r3, [pc, #668]	; (8004ac0 <HAL_RCC_OscConfig+0x688>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d114      	bne.n	8004856 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800482c:	f7ff fa96 	bl	8003d5c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004830:	f7fd fa50 	bl	8001cd4 <HAL_GetTick>
 8004834:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004838:	f7fd fa4c 	bl	8001cd4 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e15c      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800484a:	4b9d      	ldr	r3, [pc, #628]	; (8004ac0 <HAL_RCC_OscConfig+0x688>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d102      	bne.n	8004864 <HAL_RCC_OscConfig+0x42c>
 800485e:	f7ff fb48 	bl	8003ef2 <LL_RCC_LSE_Enable>
 8004862:	e00c      	b.n	800487e <HAL_RCC_OscConfig+0x446>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b05      	cmp	r3, #5
 800486a:	d104      	bne.n	8004876 <HAL_RCC_OscConfig+0x43e>
 800486c:	f7ff fb63 	bl	8003f36 <LL_RCC_LSE_EnableBypass>
 8004870:	f7ff fb3f 	bl	8003ef2 <LL_RCC_LSE_Enable>
 8004874:	e003      	b.n	800487e <HAL_RCC_OscConfig+0x446>
 8004876:	f7ff fb4d 	bl	8003f14 <LL_RCC_LSE_Disable>
 800487a:	f7ff fb6d 	bl	8003f58 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d014      	beq.n	80048b0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004886:	f7fd fa25 	bl	8001cd4 <HAL_GetTick>
 800488a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800488c:	e00a      	b.n	80048a4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800488e:	f7fd fa21 	bl	8001cd4 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	f241 3288 	movw	r2, #5000	; 0x1388
 800489c:	4293      	cmp	r3, r2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e12f      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() == 0U)
 80048a4:	f7ff fb69 	bl	8003f7a <LL_RCC_LSE_IsReady>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0ef      	beq.n	800488e <HAL_RCC_OscConfig+0x456>
 80048ae:	e013      	b.n	80048d8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fd fa10 	bl	8001cd4 <HAL_GetTick>
 80048b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7fd fa0c 	bl	8001cd4 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e11a      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() != 0U)
 80048ce:	f7ff fb54 	bl	8003f7a <LL_RCC_LSE_IsReady>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1ef      	bne.n	80048b8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d02c      	beq.n	800493e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d014      	beq.n	8004916 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048ec:	f7ff facd 	bl	8003e8a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fd f9f0 	bl	8001cd4 <HAL_GetTick>
 80048f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048f8:	f7fd f9ec 	bl	8001cd4 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e0fc      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800490a:	f7ff fae0 	bl	8003ece <LL_RCC_HSI48_IsReady>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f1      	beq.n	80048f8 <HAL_RCC_OscConfig+0x4c0>
 8004914:	e013      	b.n	800493e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004916:	f7ff fac9 	bl	8003eac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491a:	f7fd f9db 	bl	8001cd4 <HAL_GetTick>
 800491e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004922:	f7fd f9d7 	bl	8001cd4 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e0e7      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004934:	f7ff facb 	bl	8003ece <LL_RCC_HSI48_IsReady>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f1      	bne.n	8004922 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80dd 	beq.w	8004b02 <HAL_RCC_OscConfig+0x6ca>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004948:	f7ff fc29 	bl	800419e <LL_RCC_GetSysClkSource>
 800494c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800494e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	2b02      	cmp	r3, #2
 800495c:	f040 80a6 	bne.w	8004aac <HAL_RCC_OscConfig+0x674>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 0203 	and.w	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	429a      	cmp	r2, r3
 800496c:	d123      	bne.n	80049b6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d11c      	bne.n	80049b6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	0a1b      	lsrs	r3, r3, #8
 8004980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d114      	bne.n	80049b6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004996:	429a      	cmp	r2, r3
 8004998:	d10d      	bne.n	80049b6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d106      	bne.n	80049b6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d054      	beq.n	8004a60 <HAL_RCC_OscConfig+0x628>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	d04f      	beq.n	8004a5c <HAL_RCC_OscConfig+0x624>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049bc:	f7ff fc8d 	bl	80042da <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049c0:	f7fd f988 	bl	8001cd4 <HAL_GetTick>
 80049c4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x5a2>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fd f984 	bl	8001cd4 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x5a2>
              {
                return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e094      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ef      	bne.n	80049c8 <HAL_RCC_OscConfig+0x590>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	4b35      	ldr	r3, [pc, #212]	; (8004ac4 <HAL_RCC_OscConfig+0x68c>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049fa:	4311      	orrs	r1, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a00:	0212      	lsls	r2, r2, #8
 8004a02:	4311      	orrs	r1, r2
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a08:	4311      	orrs	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a0e:	4311      	orrs	r1, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a14:	430a      	orrs	r2, r1
 8004a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a1e:	f7ff fc4d 	bl	80042bc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a30:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a32:	f7fd f94f 	bl	8001cd4 <HAL_GetTick>
 8004a36:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x614>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fd f94b 	bl	8001cd4 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x614>
              {
                return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e05b      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0ef      	beq.n	8004a3a <HAL_RCC_OscConfig+0x602>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a5a:	e052      	b.n	8004b02 <HAL_RCC_OscConfig+0x6ca>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e051      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d149      	bne.n	8004b02 <HAL_RCC_OscConfig+0x6ca>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a6e:	f7ff fc25 	bl	80042bc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a80:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a82:	f7fd f927 	bl	8001cd4 <HAL_GetTick>
 8004a86:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x664>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8a:	f7fd f923 	bl	8001cd4 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x664>
            {
              return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e033      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0ef      	beq.n	8004a8a <HAL_RCC_OscConfig+0x652>
 8004aaa:	e02a      	b.n	8004b02 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	d025      	beq.n	8004afe <HAL_RCC_OscConfig+0x6c6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab2:	f7ff fc12 	bl	80042da <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab6:	f7fd f90d 	bl	8001cd4 <HAL_GetTick>
 8004aba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004abc:	e00d      	b.n	8004ada <HAL_RCC_OscConfig+0x6a2>
 8004abe:	bf00      	nop
 8004ac0:	58000400 	.word	0x58000400
 8004ac4:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fd f904 	bl	8001cd4 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x6a2>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e014      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1ef      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x690>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8004ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af6:	f023 0303 	bic.w	r3, r3, #3
 8004afa:	60d3      	str	r3, [r2, #12]
 8004afc:	e001      	b.n	8004b02 <HAL_RCC_OscConfig+0x6ca>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <HAL_RCC_OscConfig+0x6cc>
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3734      	adds	r7, #52	; 0x34
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd90      	pop	{r4, r7, pc}

08004b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e12d      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b98      	ldr	r3, [pc, #608]	; (8004d84 <HAL_RCC_ClockConfig+0x278>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d91b      	bls.n	8004b66 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b95      	ldr	r3, [pc, #596]	; (8004d84 <HAL_RCC_ClockConfig+0x278>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 0207 	bic.w	r2, r3, #7
 8004b36:	4993      	ldr	r1, [pc, #588]	; (8004d84 <HAL_RCC_ClockConfig+0x278>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3e:	f7fd f8c9 	bl	8001cd4 <HAL_GetTick>
 8004b42:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b46:	f7fd f8c5 	bl	8001cd4 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e111      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b58:	4b8a      	ldr	r3, [pc, #552]	; (8004d84 <HAL_RCC_ClockConfig+0x278>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d1ef      	bne.n	8004b46 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d016      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff fb1d 	bl	80041b6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b7c:	f7fd f8aa 	bl	8001cd4 <HAL_GetTick>
 8004b80:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b84:	f7fd f8a6 	bl	8001cd4 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e0f2      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b96:	f7ff fbf2 	bl	800437e <LL_RCC_IsActiveFlag_HPRE>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f1      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d016      	beq.n	8004bda <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fb14 	bl	80041de <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bb6:	f7fd f88d 	bl	8001cd4 <HAL_GetTick>
 8004bba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bbe:	f7fd f889 	bl	8001cd4 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e0d5      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004bd0:	f7ff fbe7 	bl	80043a2 <LL_RCC_IsActiveFlag_C2HPRE>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f1      	beq.n	8004bbe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d016      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fb0d 	bl	800420a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bf0:	f7fd f870 	bl	8001cd4 <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bf8:	f7fd f86c 	bl	8001cd4 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e0b8      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004c0a:	f7ff fbdd 	bl	80043c8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f1      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d016      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fb07 	bl	8004238 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c2a:	f7fd f853 	bl	8001cd4 <HAL_GetTick>
 8004c2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c32:	f7fd f84f 	bl	8001cd4 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e09b      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004c44:	f7ff fbd3 	bl	80043ee <LL_RCC_IsActiveFlag_PPRE1>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f1      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d017      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff fafd 	bl	8004260 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c66:	f7fd f835 	bl	8001cd4 <HAL_GetTick>
 8004c6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c6e:	f7fd f831 	bl	8001cd4 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e07d      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c80:	f7ff fbc7 	bl	8004412 <LL_RCC_IsActiveFlag_PPRE2>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f1      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d043      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d106      	bne.n	8004cac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004c9e:	f7ff f89d 	bl	8003ddc <LL_RCC_HSE_IsReady>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11e      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e067      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d106      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004cb4:	f7ff fb20 	bl	80042f8 <LL_RCC_PLL_IsReady>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d113      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e05c      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004cca:	f7ff fa05 	bl	80040d8 <LL_RCC_MSI_IsReady>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d108      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e051      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004cd8:	f7ff f8b0 	bl	8003e3c <LL_RCC_HSI_IsReady>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e04a      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fa43 	bl	8004176 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf0:	f7fc fff0 	bl	8001cd4 <HAL_GetTick>
 8004cf4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf6:	e00a      	b.n	8004d0e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf8:	f7fc ffec 	bl	8001cd4 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e036      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0e:	f7ff fa46 	bl	800419e <LL_RCC_GetSysClkSource>
 8004d12:	4602      	mov	r2, r0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d1ec      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d1e:	4b19      	ldr	r3, [pc, #100]	; (8004d84 <HAL_RCC_ClockConfig+0x278>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d21b      	bcs.n	8004d64 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2c:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <HAL_RCC_ClockConfig+0x278>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f023 0207 	bic.w	r2, r3, #7
 8004d34:	4913      	ldr	r1, [pc, #76]	; (8004d84 <HAL_RCC_ClockConfig+0x278>)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d3c:	f7fc ffca 	bl	8001cd4 <HAL_GetTick>
 8004d40:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d44:	f7fc ffc6 	bl	8001cd4 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e012      	b.n	8004d7c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <HAL_RCC_ClockConfig+0x278>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d1ef      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d64:	f000 f87e 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	4a07      	ldr	r2, [pc, #28]	; (8004d88 <HAL_RCC_ClockConfig+0x27c>)
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004d6e:	f7fc ffbd 	bl	8001cec <HAL_GetTickPrio>
 8004d72:	4603      	mov	r3, r0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fc ff5f 	bl	8001c38 <HAL_InitTick>
 8004d7a:	4603      	mov	r3, r0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	58004000 	.word	0x58004000
 8004d88:	20000008 	.word	0x20000008

08004d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d8c:	b590      	push	{r4, r7, lr}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d92:	f7ff fa04 	bl	800419e <LL_RCC_GetSysClkSource>
 8004d96:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004d9e:	f7ff f9c0 	bl	8004122 <LL_RCC_MSI_GetRange>
 8004da2:	4603      	mov	r3, r0
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	4a2b      	ldr	r2, [pc, #172]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	e04b      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d102      	bne.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dba:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	e045      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d10a      	bne.n	8004ddc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004dc6:	f7fe ffd9 	bl	8003d7c <LL_RCC_HSE_IsEnabledDiv2>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d102      	bne.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004dd0:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e03a      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004dd6:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e037      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004ddc:	f7ff fac3 	bl	8004366 <LL_RCC_PLL_GetMainSource>
 8004de0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d003      	beq.n	8004df0 <HAL_RCC_GetSysClockFreq+0x64>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d003      	beq.n	8004df6 <HAL_RCC_GetSysClockFreq+0x6a>
 8004dee:	e00d      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004df0:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004df2:	60bb      	str	r3, [r7, #8]
        break;
 8004df4:	e015      	b.n	8004e22 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004df6:	f7fe ffc1 	bl	8003d7c <LL_RCC_HSE_IsEnabledDiv2>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d102      	bne.n	8004e06 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004e00:	4b16      	ldr	r3, [pc, #88]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e02:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004e04:	e00d      	b.n	8004e22 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004e06:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004e08:	60bb      	str	r3, [r7, #8]
        break;
 8004e0a:	e00a      	b.n	8004e22 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004e0c:	f7ff f989 	bl	8004122 <LL_RCC_MSI_GetRange>
 8004e10:	4603      	mov	r3, r0
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	4a0f      	ldr	r2, [pc, #60]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1e:	60bb      	str	r3, [r7, #8]
        break;
 8004e20:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004e22:	f7ff fa7b 	bl	800431c <LL_RCC_PLL_GetN>
 8004e26:	4602      	mov	r2, r0
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	fb03 f402 	mul.w	r4, r3, r2
 8004e2e:	f7ff fa8e 	bl	800434e <LL_RCC_PLL_GetDivider>
 8004e32:	4603      	mov	r3, r0
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	3301      	adds	r3, #1
 8004e38:	fbb4 f4f3 	udiv	r4, r4, r3
 8004e3c:	f7ff fa7b 	bl	8004336 <LL_RCC_PLL_GetR>
 8004e40:	4603      	mov	r3, r0
 8004e42:	0f5b      	lsrs	r3, r3, #29
 8004e44:	3301      	adds	r3, #1
 8004e46:	fbb4 f3f3 	udiv	r3, r4, r3
 8004e4a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd90      	pop	{r4, r7, pc}
 8004e56:	bf00      	nop
 8004e58:	080095dc 	.word	0x080095dc
 8004e5c:	00f42400 	.word	0x00f42400
 8004e60:	01e84800 	.word	0x01e84800

08004e64 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e64:	b598      	push	{r3, r4, r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004e68:	f7ff ff90 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	f7ff fa0b 	bl	8004288 <LL_RCC_GetAHBPrescaler>
 8004e72:	4603      	mov	r3, r0
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	4a03      	ldr	r2, [pc, #12]	; (8004e88 <HAL_RCC_GetHCLKFreq+0x24>)
 8004e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e80:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd98      	pop	{r3, r4, r7, pc}
 8004e88:	0800959c 	.word	0x0800959c

08004e8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2bb0      	cmp	r3, #176	; 0xb0
 8004e98:	d903      	bls.n	8004ea2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004e9a:	4b14      	ldr	r3, [pc, #80]	; (8004eec <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e007      	b.n	8004eb2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	4a10      	ldr	r2, [pc, #64]	; (8004eec <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004eb2:	f7ff f9f5 	bl	80042a0 <LL_RCC_GetAHB4Prescaler>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	4a0c      	ldr	r2, [pc, #48]	; (8004ef0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eca:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4a09      	ldr	r2, [pc, #36]	; (8004ef4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	0c9b      	lsrs	r3, r3, #18
 8004ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 f80c 	bl	8004ef8 <RCC_SetFlashLatency>
 8004ee0:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	080095dc 	.word	0x080095dc
 8004ef0:	0800959c 	.word	0x0800959c
 8004ef4:	431bde83 	.word	0x431bde83

08004ef8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b08f      	sub	sp, #60	; 0x3c
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <RCC_SetFlashLatency+0x9c>)
 8004f04:	f107 041c 	add.w	r4, r7, #28
 8004f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004f0e:	4b22      	ldr	r3, [pc, #136]	; (8004f98 <RCC_SetFlashLatency+0xa0>)
 8004f10:	f107 040c 	add.w	r4, r7, #12
 8004f14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	633b      	str	r3, [r7, #48]	; 0x30
 8004f22:	e013      	b.n	8004f4c <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	3338      	adds	r3, #56	; 0x38
 8004f2a:	443b      	add	r3, r7
 8004f2c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d807      	bhi.n	8004f46 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	3338      	adds	r3, #56	; 0x38
 8004f3c:	443b      	add	r3, r7
 8004f3e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8004f44:	e005      	b.n	8004f52 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	3301      	adds	r3, #1
 8004f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d9e8      	bls.n	8004f24 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <RCC_SetFlashLatency+0xa4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f023 0207 	bic.w	r2, r3, #7
 8004f5a:	4910      	ldr	r1, [pc, #64]	; (8004f9c <RCC_SetFlashLatency+0xa4>)
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f62:	f7fc feb7 	bl	8001cd4 <HAL_GetTick>
 8004f66:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004f68:	e008      	b.n	8004f7c <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f6a:	f7fc feb3 	bl	8001cd4 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e007      	b.n	8004f8c <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004f7c:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <RCC_SetFlashLatency+0xa4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d1ef      	bne.n	8004f6a <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	373c      	adds	r7, #60	; 0x3c
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd90      	pop	{r4, r7, pc}
 8004f94:	0800957c 	.word	0x0800957c
 8004f98:	0800958c 	.word	0x0800958c
 8004f9c:	58004000 	.word	0x58004000

08004fa0 <LL_RCC_LSE_IsEnabled>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <LL_RCC_LSE_IsEnabled+0x18>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <LL_RCC_LSE_IsEnabled+0x1a>
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <LL_RCC_LSE_IsReady>:
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d101      	bne.n	8004fdc <LL_RCC_LSE_IsReady+0x18>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <LL_RCC_LSE_IsReady+0x1a>
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <LL_RCC_SetRFWKPClockSource>:
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <LL_RCC_SetUSARTClockSource>:
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800501c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	f023 0203 	bic.w	r2, r3, #3
 8005028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <LL_RCC_SetI2CClockSource>:
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	091b      	lsrs	r3, r3, #4
 8005054:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005058:	43db      	mvns	r3, r3
 800505a:	401a      	ands	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <LL_RCC_SetLPTIMClockSource>:
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005086:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	041b      	lsls	r3, r3, #16
 8005090:	43db      	mvns	r3, r3
 8005092:	401a      	ands	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	041b      	lsls	r3, r3, #16
 8005098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <LL_RCC_SetRNGClockSource>:
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80050b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050be:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80050c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <LL_RCC_SetCLK48ClockSource>:
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80050e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <LL_RCC_SetADCClockSource>:
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800510e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800511a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <LL_RCC_SetRTCClockSource>:
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800513a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005142:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005146:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <LL_RCC_GetRTCClockSource>:
{
 800515e:	b480      	push	{r7}
 8005160:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800516e:	4618      	mov	r0, r3
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <LL_RCC_ForceBackupDomainReset>:
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800517c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005190:	bf00      	nop
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <LL_RCC_ReleaseBackupDomainReset>:
{
 800519a:	b480      	push	{r7}
 800519c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800519e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80051c4:	2300      	movs	r3, #0
 80051c6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80051c8:	2300      	movs	r3, #0
 80051ca:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d046      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80051d8:	f7ff ffc1 	bl	800515e <LL_RCC_GetRTCClockSource>
 80051dc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d03c      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80051e8:	f7fe fdb8 	bl	8003d5c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d105      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff ff9b 	bl	8005132 <LL_RCC_SetRTCClockSource>
 80051fc:	e02e      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80051fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005208:	f7ff ffb6 	bl	8005178 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800520c:	f7ff ffc5 	bl	800519a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800521e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005228:	f7ff feba 	bl	8004fa0 <LL_RCC_LSE_IsEnabled>
 800522c:	4603      	mov	r3, r0
 800522e:	2b01      	cmp	r3, #1
 8005230:	d114      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005232:	f7fc fd4f 	bl	8001cd4 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005238:	e00b      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523a:	f7fc fd4b 	bl	8001cd4 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	f241 3288 	movw	r2, #5000	; 0x1388
 8005248:	4293      	cmp	r3, r2
 800524a:	d902      	bls.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	77fb      	strb	r3, [r7, #31]
              break;
 8005250:	e004      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005252:	f7ff feb7 	bl	8004fc4 <LL_RCC_LSE_IsReady>
 8005256:	4603      	mov	r3, r0
 8005258:	2b01      	cmp	r3, #1
 800525a:	d1ee      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800525c:	7ffb      	ldrb	r3, [r7, #31]
 800525e:	77bb      	strb	r3, [r7, #30]
 8005260:	e001      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005262:	7ffb      	ldrb	r3, [r7, #31]
 8005264:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff fecc 	bl	8005014 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0310 	and.w	r3, r3, #16
 8005284:	2b00      	cmp	r3, #0
 8005286:	d004      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff fef4 	bl	800507a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d004      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fee9 	bl	800507a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fec1 	bl	8005040 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d02b      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d2:	d008      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052dc:	d003      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d105      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff fedf 	bl	80050ae <LL_RCC_SetRNGClockSource>
 80052f0:	e00a      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	2000      	movs	r0, #0
 80052fe:	f7ff fed6 	bl	80050ae <LL_RCC_SetRNGClockSource>
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7ff fee9 	bl	80050da <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005310:	d107      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800531c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005320:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532a:	2b00      	cmp	r3, #0
 800532c:	d011      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff fee7 	bl	8005106 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005340:	d107      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800534c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005350:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fe40 	bl	8004fe8 <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005368:	7fbb      	ldrb	r3, [r7, #30]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e095      	b.n	80054b0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	d108      	bne.n	800539e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005394:	d009      	beq.n	80053aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	61da      	str	r2, [r3, #28]
 800539c:	e005      	b.n	80053aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fc faad 	bl	8001924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053ea:	d902      	bls.n	80053f2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e002      	b.n	80053f8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005400:	d007      	beq.n	8005412 <HAL_SPI_Init+0xa0>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800540a:	d002      	beq.n	8005412 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005454:	ea42 0103 	orr.w	r1, r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	0c1b      	lsrs	r3, r3, #16
 800546e:	f003 0204 	and.w	r2, r3, #4
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800548e:	ea42 0103 	orr.w	r1, r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	4613      	mov	r3, r2
 80054c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_SPI_Transmit_DMA+0x20>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e0d8      	b.n	800568a <HAL_SPI_Transmit_DMA+0x1d2>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d002      	beq.n	80054f2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80054ec:	2302      	movs	r3, #2
 80054ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054f0:	e0c6      	b.n	8005680 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_SPI_Transmit_DMA+0x46>
 80054f8:	88fb      	ldrh	r3, [r7, #6]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005502:	e0bd      	b.n	8005680 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2203      	movs	r2, #3
 8005508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	88fa      	ldrh	r2, [r7, #6]
 800551c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	88fa      	ldrh	r2, [r7, #6]
 8005522:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554e:	d10f      	bne.n	8005570 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800555e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800556e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005574:	4a47      	ldr	r2, [pc, #284]	; (8005694 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005576:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557c:	4a46      	ldr	r2, [pc, #280]	; (8005698 <HAL_SPI_Transmit_DMA+0x1e0>)
 800557e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	4a45      	ldr	r2, [pc, #276]	; (800569c <HAL_SPI_Transmit_DMA+0x1e4>)
 8005586:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558c:	2200      	movs	r2, #0
 800558e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800559e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055a8:	d82d      	bhi.n	8005606 <HAL_SPI_Transmit_DMA+0x14e>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b4:	d127      	bne.n	8005606 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10f      	bne.n	80055e4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055d2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	085b      	lsrs	r3, r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055e2:	e010      	b.n	8005606 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055f2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	085b      	lsrs	r3, r3, #1
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3301      	adds	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	4619      	mov	r1, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800561c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800561e:	f7fd ff11 	bl	8003444 <HAL_DMA_Start_IT>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00c      	beq.n	8005642 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562c:	f043 0210 	orr.w	r2, r3, #16
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005640:	e01e      	b.n	8005680 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b40      	cmp	r3, #64	; 0x40
 800564e:	d007      	beq.n	8005660 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800565e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0220 	orr.w	r2, r2, #32
 800566e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0202 	orr.w	r2, r2, #2
 800567e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005688:	7dfb      	ldrb	r3, [r7, #23]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	08005783 	.word	0x08005783
 8005698:	080056dd 	.word	0x080056dd
 800569c:	0800579f 	.word	0x0800579f

080056a0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ea:	f7fc faf3 	bl	8001cd4 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d03b      	beq.n	8005776 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0220 	bic.w	r2, r2, #32
 800570c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0202 	bic.w	r2, r2, #2
 800571c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	2164      	movs	r1, #100	; 0x64
 8005722:	6978      	ldr	r0, [r7, #20]
 8005724:	f000 f97a 	bl	8005a1c <SPI_EndRxTxTransaction>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d005      	beq.n	800573a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005732:	f043 0220 	orr.w	r2, r3, #32
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2200      	movs	r2, #0
 800575c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800576e:	6978      	ldr	r0, [r7, #20]
 8005770:	f7ff ffaa 	bl	80056c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005774:	e002      	b.n	800577c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005776:	6978      	ldr	r0, [r7, #20]
 8005778:	f7ff ff92 	bl	80056a0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff ff8f 	bl	80056b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0203 	bic.w	r2, r2, #3
 80057ba:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c0:	f043 0210 	orr.w	r2, r3, #16
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f7ff ff79 	bl	80056c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	4613      	mov	r3, r2
 80057ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057f0:	f7fc fa70 	bl	8001cd4 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	4413      	add	r3, r2
 80057fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005800:	f7fc fa68 	bl	8001cd4 <HAL_GetTick>
 8005804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005806:	4b39      	ldr	r3, [pc, #228]	; (80058ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	015b      	lsls	r3, r3, #5
 800580c:	0d1b      	lsrs	r3, r3, #20
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	fb02 f303 	mul.w	r3, r2, r3
 8005814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005816:	e054      	b.n	80058c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581e:	d050      	beq.n	80058c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005820:	f7fc fa58 	bl	8001cd4 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	429a      	cmp	r2, r3
 800582e:	d902      	bls.n	8005836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d13d      	bne.n	80058b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800584e:	d111      	bne.n	8005874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005858:	d004      	beq.n	8005864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005862:	d107      	bne.n	8005874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587c:	d10f      	bne.n	800589e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800589c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e017      	b.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	3b01      	subs	r3, #1
 80058c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4013      	ands	r3, r2
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	bf0c      	ite	eq
 80058d2:	2301      	moveq	r3, #1
 80058d4:	2300      	movne	r3, #0
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d19b      	bne.n	8005818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000008 	.word	0x20000008

080058f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	; 0x28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005902:	f7fc f9e7 	bl	8001cd4 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	1a9b      	subs	r3, r3, r2
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	4413      	add	r3, r2
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005912:	f7fc f9df 	bl	8001cd4 <HAL_GetTick>
 8005916:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	330c      	adds	r3, #12
 800591e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005920:	4b3d      	ldr	r3, [pc, #244]	; (8005a18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	00da      	lsls	r2, r3, #3
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	0d1b      	lsrs	r3, r3, #20
 8005930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005938:	e060      	b.n	80059fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005940:	d107      	bne.n	8005952 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005950:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005958:	d050      	beq.n	80059fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800595a:	f7fc f9bb 	bl	8001cd4 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005966:	429a      	cmp	r2, r3
 8005968:	d902      	bls.n	8005970 <SPI_WaitFifoStateUntilTimeout+0x80>
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	2b00      	cmp	r3, #0
 800596e:	d13d      	bne.n	80059ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800597e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005988:	d111      	bne.n	80059ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005992:	d004      	beq.n	800599e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599c:	d107      	bne.n	80059ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b6:	d10f      	bne.n	80059d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e010      	b.n	8005a0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4013      	ands	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d196      	bne.n	800593a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3728      	adds	r7, #40	; 0x28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000008 	.word	0x20000008

08005a1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f7ff ff5b 	bl	80058f0 <SPI_WaitFifoStateUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d007      	beq.n	8005a50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a44:	f043 0220 	orr.w	r2, r3, #32
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e027      	b.n	8005aa0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2200      	movs	r2, #0
 8005a58:	2180      	movs	r1, #128	; 0x80
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff fec0 	bl	80057e0 <SPI_WaitFlagStateUntilTimeout>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6a:	f043 0220 	orr.w	r2, r3, #32
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e014      	b.n	8005aa0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff ff34 	bl	80058f0 <SPI_WaitFifoStateUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a92:	f043 0220 	orr.w	r2, r3, #32
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e000      	b.n	8005aa0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <__errno>:
 8005aa8:	4b01      	ldr	r3, [pc, #4]	; (8005ab0 <__errno+0x8>)
 8005aaa:	6818      	ldr	r0, [r3, #0]
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	20000014 	.word	0x20000014

08005ab4 <__libc_init_array>:
 8005ab4:	b570      	push	{r4, r5, r6, lr}
 8005ab6:	4d0d      	ldr	r5, [pc, #52]	; (8005aec <__libc_init_array+0x38>)
 8005ab8:	4c0d      	ldr	r4, [pc, #52]	; (8005af0 <__libc_init_array+0x3c>)
 8005aba:	1b64      	subs	r4, r4, r5
 8005abc:	10a4      	asrs	r4, r4, #2
 8005abe:	2600      	movs	r6, #0
 8005ac0:	42a6      	cmp	r6, r4
 8005ac2:	d109      	bne.n	8005ad8 <__libc_init_array+0x24>
 8005ac4:	4d0b      	ldr	r5, [pc, #44]	; (8005af4 <__libc_init_array+0x40>)
 8005ac6:	4c0c      	ldr	r4, [pc, #48]	; (8005af8 <__libc_init_array+0x44>)
 8005ac8:	f003 fcce 	bl	8009468 <_init>
 8005acc:	1b64      	subs	r4, r4, r5
 8005ace:	10a4      	asrs	r4, r4, #2
 8005ad0:	2600      	movs	r6, #0
 8005ad2:	42a6      	cmp	r6, r4
 8005ad4:	d105      	bne.n	8005ae2 <__libc_init_array+0x2e>
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
 8005ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005adc:	4798      	blx	r3
 8005ade:	3601      	adds	r6, #1
 8005ae0:	e7ee      	b.n	8005ac0 <__libc_init_array+0xc>
 8005ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae6:	4798      	blx	r3
 8005ae8:	3601      	adds	r6, #1
 8005aea:	e7f2      	b.n	8005ad2 <__libc_init_array+0x1e>
 8005aec:	08009a10 	.word	0x08009a10
 8005af0:	08009a10 	.word	0x08009a10
 8005af4:	08009a10 	.word	0x08009a10
 8005af8:	08009a14 	.word	0x08009a14

08005afc <malloc>:
 8005afc:	4b02      	ldr	r3, [pc, #8]	; (8005b08 <malloc+0xc>)
 8005afe:	4601      	mov	r1, r0
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	f000 b877 	b.w	8005bf4 <_malloc_r>
 8005b06:	bf00      	nop
 8005b08:	20000014 	.word	0x20000014

08005b0c <memset>:
 8005b0c:	4402      	add	r2, r0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d100      	bne.n	8005b16 <memset+0xa>
 8005b14:	4770      	bx	lr
 8005b16:	f803 1b01 	strb.w	r1, [r3], #1
 8005b1a:	e7f9      	b.n	8005b10 <memset+0x4>

08005b1c <_free_r>:
 8005b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b1e:	2900      	cmp	r1, #0
 8005b20:	d044      	beq.n	8005bac <_free_r+0x90>
 8005b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b26:	9001      	str	r0, [sp, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b2e:	bfb8      	it	lt
 8005b30:	18e4      	addlt	r4, r4, r3
 8005b32:	f001 ff7d 	bl	8007a30 <__malloc_lock>
 8005b36:	4a1e      	ldr	r2, [pc, #120]	; (8005bb0 <_free_r+0x94>)
 8005b38:	9801      	ldr	r0, [sp, #4]
 8005b3a:	6813      	ldr	r3, [r2, #0]
 8005b3c:	b933      	cbnz	r3, 8005b4c <_free_r+0x30>
 8005b3e:	6063      	str	r3, [r4, #4]
 8005b40:	6014      	str	r4, [r2, #0]
 8005b42:	b003      	add	sp, #12
 8005b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b48:	f001 bf78 	b.w	8007a3c <__malloc_unlock>
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	d908      	bls.n	8005b62 <_free_r+0x46>
 8005b50:	6825      	ldr	r5, [r4, #0]
 8005b52:	1961      	adds	r1, r4, r5
 8005b54:	428b      	cmp	r3, r1
 8005b56:	bf01      	itttt	eq
 8005b58:	6819      	ldreq	r1, [r3, #0]
 8005b5a:	685b      	ldreq	r3, [r3, #4]
 8005b5c:	1949      	addeq	r1, r1, r5
 8005b5e:	6021      	streq	r1, [r4, #0]
 8005b60:	e7ed      	b.n	8005b3e <_free_r+0x22>
 8005b62:	461a      	mov	r2, r3
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	b10b      	cbz	r3, 8005b6c <_free_r+0x50>
 8005b68:	42a3      	cmp	r3, r4
 8005b6a:	d9fa      	bls.n	8005b62 <_free_r+0x46>
 8005b6c:	6811      	ldr	r1, [r2, #0]
 8005b6e:	1855      	adds	r5, r2, r1
 8005b70:	42a5      	cmp	r5, r4
 8005b72:	d10b      	bne.n	8005b8c <_free_r+0x70>
 8005b74:	6824      	ldr	r4, [r4, #0]
 8005b76:	4421      	add	r1, r4
 8005b78:	1854      	adds	r4, r2, r1
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	6011      	str	r1, [r2, #0]
 8005b7e:	d1e0      	bne.n	8005b42 <_free_r+0x26>
 8005b80:	681c      	ldr	r4, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	6053      	str	r3, [r2, #4]
 8005b86:	4421      	add	r1, r4
 8005b88:	6011      	str	r1, [r2, #0]
 8005b8a:	e7da      	b.n	8005b42 <_free_r+0x26>
 8005b8c:	d902      	bls.n	8005b94 <_free_r+0x78>
 8005b8e:	230c      	movs	r3, #12
 8005b90:	6003      	str	r3, [r0, #0]
 8005b92:	e7d6      	b.n	8005b42 <_free_r+0x26>
 8005b94:	6825      	ldr	r5, [r4, #0]
 8005b96:	1961      	adds	r1, r4, r5
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	bf04      	itt	eq
 8005b9c:	6819      	ldreq	r1, [r3, #0]
 8005b9e:	685b      	ldreq	r3, [r3, #4]
 8005ba0:	6063      	str	r3, [r4, #4]
 8005ba2:	bf04      	itt	eq
 8005ba4:	1949      	addeq	r1, r1, r5
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	6054      	str	r4, [r2, #4]
 8005baa:	e7ca      	b.n	8005b42 <_free_r+0x26>
 8005bac:	b003      	add	sp, #12
 8005bae:	bd30      	pop	{r4, r5, pc}
 8005bb0:	2000038c 	.word	0x2000038c

08005bb4 <sbrk_aligned>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	4e0e      	ldr	r6, [pc, #56]	; (8005bf0 <sbrk_aligned+0x3c>)
 8005bb8:	460c      	mov	r4, r1
 8005bba:	6831      	ldr	r1, [r6, #0]
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	b911      	cbnz	r1, 8005bc6 <sbrk_aligned+0x12>
 8005bc0:	f000 fd9a 	bl	80066f8 <_sbrk_r>
 8005bc4:	6030      	str	r0, [r6, #0]
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f000 fd95 	bl	80066f8 <_sbrk_r>
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	d00a      	beq.n	8005be8 <sbrk_aligned+0x34>
 8005bd2:	1cc4      	adds	r4, r0, #3
 8005bd4:	f024 0403 	bic.w	r4, r4, #3
 8005bd8:	42a0      	cmp	r0, r4
 8005bda:	d007      	beq.n	8005bec <sbrk_aligned+0x38>
 8005bdc:	1a21      	subs	r1, r4, r0
 8005bde:	4628      	mov	r0, r5
 8005be0:	f000 fd8a 	bl	80066f8 <_sbrk_r>
 8005be4:	3001      	adds	r0, #1
 8005be6:	d101      	bne.n	8005bec <sbrk_aligned+0x38>
 8005be8:	f04f 34ff 	mov.w	r4, #4294967295
 8005bec:	4620      	mov	r0, r4
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	20000390 	.word	0x20000390

08005bf4 <_malloc_r>:
 8005bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf8:	1ccd      	adds	r5, r1, #3
 8005bfa:	f025 0503 	bic.w	r5, r5, #3
 8005bfe:	3508      	adds	r5, #8
 8005c00:	2d0c      	cmp	r5, #12
 8005c02:	bf38      	it	cc
 8005c04:	250c      	movcc	r5, #12
 8005c06:	2d00      	cmp	r5, #0
 8005c08:	4607      	mov	r7, r0
 8005c0a:	db01      	blt.n	8005c10 <_malloc_r+0x1c>
 8005c0c:	42a9      	cmp	r1, r5
 8005c0e:	d905      	bls.n	8005c1c <_malloc_r+0x28>
 8005c10:	230c      	movs	r3, #12
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	2600      	movs	r6, #0
 8005c16:	4630      	mov	r0, r6
 8005c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c1c:	4e2e      	ldr	r6, [pc, #184]	; (8005cd8 <_malloc_r+0xe4>)
 8005c1e:	f001 ff07 	bl	8007a30 <__malloc_lock>
 8005c22:	6833      	ldr	r3, [r6, #0]
 8005c24:	461c      	mov	r4, r3
 8005c26:	bb34      	cbnz	r4, 8005c76 <_malloc_r+0x82>
 8005c28:	4629      	mov	r1, r5
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	f7ff ffc2 	bl	8005bb4 <sbrk_aligned>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	4604      	mov	r4, r0
 8005c34:	d14d      	bne.n	8005cd2 <_malloc_r+0xde>
 8005c36:	6834      	ldr	r4, [r6, #0]
 8005c38:	4626      	mov	r6, r4
 8005c3a:	2e00      	cmp	r6, #0
 8005c3c:	d140      	bne.n	8005cc0 <_malloc_r+0xcc>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	4631      	mov	r1, r6
 8005c42:	4638      	mov	r0, r7
 8005c44:	eb04 0803 	add.w	r8, r4, r3
 8005c48:	f000 fd56 	bl	80066f8 <_sbrk_r>
 8005c4c:	4580      	cmp	r8, r0
 8005c4e:	d13a      	bne.n	8005cc6 <_malloc_r+0xd2>
 8005c50:	6821      	ldr	r1, [r4, #0]
 8005c52:	3503      	adds	r5, #3
 8005c54:	1a6d      	subs	r5, r5, r1
 8005c56:	f025 0503 	bic.w	r5, r5, #3
 8005c5a:	3508      	adds	r5, #8
 8005c5c:	2d0c      	cmp	r5, #12
 8005c5e:	bf38      	it	cc
 8005c60:	250c      	movcc	r5, #12
 8005c62:	4629      	mov	r1, r5
 8005c64:	4638      	mov	r0, r7
 8005c66:	f7ff ffa5 	bl	8005bb4 <sbrk_aligned>
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d02b      	beq.n	8005cc6 <_malloc_r+0xd2>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	442b      	add	r3, r5
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	e00e      	b.n	8005c94 <_malloc_r+0xa0>
 8005c76:	6822      	ldr	r2, [r4, #0]
 8005c78:	1b52      	subs	r2, r2, r5
 8005c7a:	d41e      	bmi.n	8005cba <_malloc_r+0xc6>
 8005c7c:	2a0b      	cmp	r2, #11
 8005c7e:	d916      	bls.n	8005cae <_malloc_r+0xba>
 8005c80:	1961      	adds	r1, r4, r5
 8005c82:	42a3      	cmp	r3, r4
 8005c84:	6025      	str	r5, [r4, #0]
 8005c86:	bf18      	it	ne
 8005c88:	6059      	strne	r1, [r3, #4]
 8005c8a:	6863      	ldr	r3, [r4, #4]
 8005c8c:	bf08      	it	eq
 8005c8e:	6031      	streq	r1, [r6, #0]
 8005c90:	5162      	str	r2, [r4, r5]
 8005c92:	604b      	str	r3, [r1, #4]
 8005c94:	4638      	mov	r0, r7
 8005c96:	f104 060b 	add.w	r6, r4, #11
 8005c9a:	f001 fecf 	bl	8007a3c <__malloc_unlock>
 8005c9e:	f026 0607 	bic.w	r6, r6, #7
 8005ca2:	1d23      	adds	r3, r4, #4
 8005ca4:	1af2      	subs	r2, r6, r3
 8005ca6:	d0b6      	beq.n	8005c16 <_malloc_r+0x22>
 8005ca8:	1b9b      	subs	r3, r3, r6
 8005caa:	50a3      	str	r3, [r4, r2]
 8005cac:	e7b3      	b.n	8005c16 <_malloc_r+0x22>
 8005cae:	6862      	ldr	r2, [r4, #4]
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	bf0c      	ite	eq
 8005cb4:	6032      	streq	r2, [r6, #0]
 8005cb6:	605a      	strne	r2, [r3, #4]
 8005cb8:	e7ec      	b.n	8005c94 <_malloc_r+0xa0>
 8005cba:	4623      	mov	r3, r4
 8005cbc:	6864      	ldr	r4, [r4, #4]
 8005cbe:	e7b2      	b.n	8005c26 <_malloc_r+0x32>
 8005cc0:	4634      	mov	r4, r6
 8005cc2:	6876      	ldr	r6, [r6, #4]
 8005cc4:	e7b9      	b.n	8005c3a <_malloc_r+0x46>
 8005cc6:	230c      	movs	r3, #12
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	4638      	mov	r0, r7
 8005ccc:	f001 feb6 	bl	8007a3c <__malloc_unlock>
 8005cd0:	e7a1      	b.n	8005c16 <_malloc_r+0x22>
 8005cd2:	6025      	str	r5, [r4, #0]
 8005cd4:	e7de      	b.n	8005c94 <_malloc_r+0xa0>
 8005cd6:	bf00      	nop
 8005cd8:	2000038c 	.word	0x2000038c

08005cdc <__cvt>:
 8005cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce0:	ec55 4b10 	vmov	r4, r5, d0
 8005ce4:	2d00      	cmp	r5, #0
 8005ce6:	460e      	mov	r6, r1
 8005ce8:	4619      	mov	r1, r3
 8005cea:	462b      	mov	r3, r5
 8005cec:	bfbb      	ittet	lt
 8005cee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cf2:	461d      	movlt	r5, r3
 8005cf4:	2300      	movge	r3, #0
 8005cf6:	232d      	movlt	r3, #45	; 0x2d
 8005cf8:	700b      	strb	r3, [r1, #0]
 8005cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cfc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d00:	4691      	mov	r9, r2
 8005d02:	f023 0820 	bic.w	r8, r3, #32
 8005d06:	bfbc      	itt	lt
 8005d08:	4622      	movlt	r2, r4
 8005d0a:	4614      	movlt	r4, r2
 8005d0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d10:	d005      	beq.n	8005d1e <__cvt+0x42>
 8005d12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d16:	d100      	bne.n	8005d1a <__cvt+0x3e>
 8005d18:	3601      	adds	r6, #1
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	e000      	b.n	8005d20 <__cvt+0x44>
 8005d1e:	2103      	movs	r1, #3
 8005d20:	ab03      	add	r3, sp, #12
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	ab02      	add	r3, sp, #8
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	ec45 4b10 	vmov	d0, r4, r5
 8005d2c:	4653      	mov	r3, sl
 8005d2e:	4632      	mov	r2, r6
 8005d30:	f000 fe5e 	bl	80069f0 <_dtoa_r>
 8005d34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d38:	4607      	mov	r7, r0
 8005d3a:	d102      	bne.n	8005d42 <__cvt+0x66>
 8005d3c:	f019 0f01 	tst.w	r9, #1
 8005d40:	d022      	beq.n	8005d88 <__cvt+0xac>
 8005d42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d46:	eb07 0906 	add.w	r9, r7, r6
 8005d4a:	d110      	bne.n	8005d6e <__cvt+0x92>
 8005d4c:	783b      	ldrb	r3, [r7, #0]
 8005d4e:	2b30      	cmp	r3, #48	; 0x30
 8005d50:	d10a      	bne.n	8005d68 <__cvt+0x8c>
 8005d52:	2200      	movs	r2, #0
 8005d54:	2300      	movs	r3, #0
 8005d56:	4620      	mov	r0, r4
 8005d58:	4629      	mov	r1, r5
 8005d5a:	f7fa fe8d 	bl	8000a78 <__aeabi_dcmpeq>
 8005d5e:	b918      	cbnz	r0, 8005d68 <__cvt+0x8c>
 8005d60:	f1c6 0601 	rsb	r6, r6, #1
 8005d64:	f8ca 6000 	str.w	r6, [sl]
 8005d68:	f8da 3000 	ldr.w	r3, [sl]
 8005d6c:	4499      	add	r9, r3
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2300      	movs	r3, #0
 8005d72:	4620      	mov	r0, r4
 8005d74:	4629      	mov	r1, r5
 8005d76:	f7fa fe7f 	bl	8000a78 <__aeabi_dcmpeq>
 8005d7a:	b108      	cbz	r0, 8005d80 <__cvt+0xa4>
 8005d7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d80:	2230      	movs	r2, #48	; 0x30
 8005d82:	9b03      	ldr	r3, [sp, #12]
 8005d84:	454b      	cmp	r3, r9
 8005d86:	d307      	bcc.n	8005d98 <__cvt+0xbc>
 8005d88:	9b03      	ldr	r3, [sp, #12]
 8005d8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d8c:	1bdb      	subs	r3, r3, r7
 8005d8e:	4638      	mov	r0, r7
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	b004      	add	sp, #16
 8005d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d98:	1c59      	adds	r1, r3, #1
 8005d9a:	9103      	str	r1, [sp, #12]
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	e7f0      	b.n	8005d82 <__cvt+0xa6>

08005da0 <__exponent>:
 8005da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005da2:	4603      	mov	r3, r0
 8005da4:	2900      	cmp	r1, #0
 8005da6:	bfb8      	it	lt
 8005da8:	4249      	neglt	r1, r1
 8005daa:	f803 2b02 	strb.w	r2, [r3], #2
 8005dae:	bfb4      	ite	lt
 8005db0:	222d      	movlt	r2, #45	; 0x2d
 8005db2:	222b      	movge	r2, #43	; 0x2b
 8005db4:	2909      	cmp	r1, #9
 8005db6:	7042      	strb	r2, [r0, #1]
 8005db8:	dd2a      	ble.n	8005e10 <__exponent+0x70>
 8005dba:	f10d 0407 	add.w	r4, sp, #7
 8005dbe:	46a4      	mov	ip, r4
 8005dc0:	270a      	movs	r7, #10
 8005dc2:	46a6      	mov	lr, r4
 8005dc4:	460a      	mov	r2, r1
 8005dc6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005dca:	fb07 1516 	mls	r5, r7, r6, r1
 8005dce:	3530      	adds	r5, #48	; 0x30
 8005dd0:	2a63      	cmp	r2, #99	; 0x63
 8005dd2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005dd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005dda:	4631      	mov	r1, r6
 8005ddc:	dcf1      	bgt.n	8005dc2 <__exponent+0x22>
 8005dde:	3130      	adds	r1, #48	; 0x30
 8005de0:	f1ae 0502 	sub.w	r5, lr, #2
 8005de4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005de8:	1c44      	adds	r4, r0, #1
 8005dea:	4629      	mov	r1, r5
 8005dec:	4561      	cmp	r1, ip
 8005dee:	d30a      	bcc.n	8005e06 <__exponent+0x66>
 8005df0:	f10d 0209 	add.w	r2, sp, #9
 8005df4:	eba2 020e 	sub.w	r2, r2, lr
 8005df8:	4565      	cmp	r5, ip
 8005dfa:	bf88      	it	hi
 8005dfc:	2200      	movhi	r2, #0
 8005dfe:	4413      	add	r3, r2
 8005e00:	1a18      	subs	r0, r3, r0
 8005e02:	b003      	add	sp, #12
 8005e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e0e:	e7ed      	b.n	8005dec <__exponent+0x4c>
 8005e10:	2330      	movs	r3, #48	; 0x30
 8005e12:	3130      	adds	r1, #48	; 0x30
 8005e14:	7083      	strb	r3, [r0, #2]
 8005e16:	70c1      	strb	r1, [r0, #3]
 8005e18:	1d03      	adds	r3, r0, #4
 8005e1a:	e7f1      	b.n	8005e00 <__exponent+0x60>

08005e1c <_printf_float>:
 8005e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e20:	ed2d 8b02 	vpush	{d8}
 8005e24:	b08d      	sub	sp, #52	; 0x34
 8005e26:	460c      	mov	r4, r1
 8005e28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e2c:	4616      	mov	r6, r2
 8005e2e:	461f      	mov	r7, r3
 8005e30:	4605      	mov	r5, r0
 8005e32:	f001 fd83 	bl	800793c <_localeconv_r>
 8005e36:	f8d0 a000 	ldr.w	sl, [r0]
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	f7fa f9a0 	bl	8000180 <strlen>
 8005e40:	2300      	movs	r3, #0
 8005e42:	930a      	str	r3, [sp, #40]	; 0x28
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	9305      	str	r3, [sp, #20]
 8005e48:	f8d8 3000 	ldr.w	r3, [r8]
 8005e4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e50:	3307      	adds	r3, #7
 8005e52:	f023 0307 	bic.w	r3, r3, #7
 8005e56:	f103 0208 	add.w	r2, r3, #8
 8005e5a:	f8c8 2000 	str.w	r2, [r8]
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e6e:	9307      	str	r3, [sp, #28]
 8005e70:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e74:	ee08 0a10 	vmov	s16, r0
 8005e78:	4b9f      	ldr	r3, [pc, #636]	; (80060f8 <_printf_float+0x2dc>)
 8005e7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e82:	f7fa fe2b 	bl	8000adc <__aeabi_dcmpun>
 8005e86:	bb88      	cbnz	r0, 8005eec <_printf_float+0xd0>
 8005e88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e8c:	4b9a      	ldr	r3, [pc, #616]	; (80060f8 <_printf_float+0x2dc>)
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e92:	f7fa fe05 	bl	8000aa0 <__aeabi_dcmple>
 8005e96:	bb48      	cbnz	r0, 8005eec <_printf_float+0xd0>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	f7fa fdf4 	bl	8000a8c <__aeabi_dcmplt>
 8005ea4:	b110      	cbz	r0, 8005eac <_printf_float+0x90>
 8005ea6:	232d      	movs	r3, #45	; 0x2d
 8005ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eac:	4b93      	ldr	r3, [pc, #588]	; (80060fc <_printf_float+0x2e0>)
 8005eae:	4894      	ldr	r0, [pc, #592]	; (8006100 <_printf_float+0x2e4>)
 8005eb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005eb4:	bf94      	ite	ls
 8005eb6:	4698      	movls	r8, r3
 8005eb8:	4680      	movhi	r8, r0
 8005eba:	2303      	movs	r3, #3
 8005ebc:	6123      	str	r3, [r4, #16]
 8005ebe:	9b05      	ldr	r3, [sp, #20]
 8005ec0:	f023 0204 	bic.w	r2, r3, #4
 8005ec4:	6022      	str	r2, [r4, #0]
 8005ec6:	f04f 0900 	mov.w	r9, #0
 8005eca:	9700      	str	r7, [sp, #0]
 8005ecc:	4633      	mov	r3, r6
 8005ece:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 f9d8 	bl	8006288 <_printf_common>
 8005ed8:	3001      	adds	r0, #1
 8005eda:	f040 8090 	bne.w	8005ffe <_printf_float+0x1e2>
 8005ede:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee2:	b00d      	add	sp, #52	; 0x34
 8005ee4:	ecbd 8b02 	vpop	{d8}
 8005ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	f7fa fdf2 	bl	8000adc <__aeabi_dcmpun>
 8005ef8:	b140      	cbz	r0, 8005f0c <_printf_float+0xf0>
 8005efa:	464b      	mov	r3, r9
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bfbc      	itt	lt
 8005f00:	232d      	movlt	r3, #45	; 0x2d
 8005f02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f06:	487f      	ldr	r0, [pc, #508]	; (8006104 <_printf_float+0x2e8>)
 8005f08:	4b7f      	ldr	r3, [pc, #508]	; (8006108 <_printf_float+0x2ec>)
 8005f0a:	e7d1      	b.n	8005eb0 <_printf_float+0x94>
 8005f0c:	6863      	ldr	r3, [r4, #4]
 8005f0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f12:	9206      	str	r2, [sp, #24]
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	d13f      	bne.n	8005f98 <_printf_float+0x17c>
 8005f18:	2306      	movs	r3, #6
 8005f1a:	6063      	str	r3, [r4, #4]
 8005f1c:	9b05      	ldr	r3, [sp, #20]
 8005f1e:	6861      	ldr	r1, [r4, #4]
 8005f20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f24:	2300      	movs	r3, #0
 8005f26:	9303      	str	r3, [sp, #12]
 8005f28:	ab0a      	add	r3, sp, #40	; 0x28
 8005f2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f2e:	ab09      	add	r3, sp, #36	; 0x24
 8005f30:	ec49 8b10 	vmov	d0, r8, r9
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	6022      	str	r2, [r4, #0]
 8005f38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f7ff fecd 	bl	8005cdc <__cvt>
 8005f42:	9b06      	ldr	r3, [sp, #24]
 8005f44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f46:	2b47      	cmp	r3, #71	; 0x47
 8005f48:	4680      	mov	r8, r0
 8005f4a:	d108      	bne.n	8005f5e <_printf_float+0x142>
 8005f4c:	1cc8      	adds	r0, r1, #3
 8005f4e:	db02      	blt.n	8005f56 <_printf_float+0x13a>
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	4299      	cmp	r1, r3
 8005f54:	dd41      	ble.n	8005fda <_printf_float+0x1be>
 8005f56:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f5a:	fa5f fb8b 	uxtb.w	fp, fp
 8005f5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f62:	d820      	bhi.n	8005fa6 <_printf_float+0x18a>
 8005f64:	3901      	subs	r1, #1
 8005f66:	465a      	mov	r2, fp
 8005f68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f6c:	9109      	str	r1, [sp, #36]	; 0x24
 8005f6e:	f7ff ff17 	bl	8005da0 <__exponent>
 8005f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f74:	1813      	adds	r3, r2, r0
 8005f76:	2a01      	cmp	r2, #1
 8005f78:	4681      	mov	r9, r0
 8005f7a:	6123      	str	r3, [r4, #16]
 8005f7c:	dc02      	bgt.n	8005f84 <_printf_float+0x168>
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	07d2      	lsls	r2, r2, #31
 8005f82:	d501      	bpl.n	8005f88 <_printf_float+0x16c>
 8005f84:	3301      	adds	r3, #1
 8005f86:	6123      	str	r3, [r4, #16]
 8005f88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d09c      	beq.n	8005eca <_printf_float+0xae>
 8005f90:	232d      	movs	r3, #45	; 0x2d
 8005f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f96:	e798      	b.n	8005eca <_printf_float+0xae>
 8005f98:	9a06      	ldr	r2, [sp, #24]
 8005f9a:	2a47      	cmp	r2, #71	; 0x47
 8005f9c:	d1be      	bne.n	8005f1c <_printf_float+0x100>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1bc      	bne.n	8005f1c <_printf_float+0x100>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e7b9      	b.n	8005f1a <_printf_float+0xfe>
 8005fa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005faa:	d118      	bne.n	8005fde <_printf_float+0x1c2>
 8005fac:	2900      	cmp	r1, #0
 8005fae:	6863      	ldr	r3, [r4, #4]
 8005fb0:	dd0b      	ble.n	8005fca <_printf_float+0x1ae>
 8005fb2:	6121      	str	r1, [r4, #16]
 8005fb4:	b913      	cbnz	r3, 8005fbc <_printf_float+0x1a0>
 8005fb6:	6822      	ldr	r2, [r4, #0]
 8005fb8:	07d0      	lsls	r0, r2, #31
 8005fba:	d502      	bpl.n	8005fc2 <_printf_float+0x1a6>
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	440b      	add	r3, r1
 8005fc0:	6123      	str	r3, [r4, #16]
 8005fc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fc4:	f04f 0900 	mov.w	r9, #0
 8005fc8:	e7de      	b.n	8005f88 <_printf_float+0x16c>
 8005fca:	b913      	cbnz	r3, 8005fd2 <_printf_float+0x1b6>
 8005fcc:	6822      	ldr	r2, [r4, #0]
 8005fce:	07d2      	lsls	r2, r2, #31
 8005fd0:	d501      	bpl.n	8005fd6 <_printf_float+0x1ba>
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	e7f4      	b.n	8005fc0 <_printf_float+0x1a4>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e7f2      	b.n	8005fc0 <_printf_float+0x1a4>
 8005fda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe0:	4299      	cmp	r1, r3
 8005fe2:	db05      	blt.n	8005ff0 <_printf_float+0x1d4>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	6121      	str	r1, [r4, #16]
 8005fe8:	07d8      	lsls	r0, r3, #31
 8005fea:	d5ea      	bpl.n	8005fc2 <_printf_float+0x1a6>
 8005fec:	1c4b      	adds	r3, r1, #1
 8005fee:	e7e7      	b.n	8005fc0 <_printf_float+0x1a4>
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	bfd4      	ite	le
 8005ff4:	f1c1 0202 	rsble	r2, r1, #2
 8005ff8:	2201      	movgt	r2, #1
 8005ffa:	4413      	add	r3, r2
 8005ffc:	e7e0      	b.n	8005fc0 <_printf_float+0x1a4>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	055a      	lsls	r2, r3, #21
 8006002:	d407      	bmi.n	8006014 <_printf_float+0x1f8>
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	4642      	mov	r2, r8
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	d12c      	bne.n	800606c <_printf_float+0x250>
 8006012:	e764      	b.n	8005ede <_printf_float+0xc2>
 8006014:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006018:	f240 80e0 	bls.w	80061dc <_printf_float+0x3c0>
 800601c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006020:	2200      	movs	r2, #0
 8006022:	2300      	movs	r3, #0
 8006024:	f7fa fd28 	bl	8000a78 <__aeabi_dcmpeq>
 8006028:	2800      	cmp	r0, #0
 800602a:	d034      	beq.n	8006096 <_printf_float+0x27a>
 800602c:	4a37      	ldr	r2, [pc, #220]	; (800610c <_printf_float+0x2f0>)
 800602e:	2301      	movs	r3, #1
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	f43f af51 	beq.w	8005ede <_printf_float+0xc2>
 800603c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006040:	429a      	cmp	r2, r3
 8006042:	db02      	blt.n	800604a <_printf_float+0x22e>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	07d8      	lsls	r0, r3, #31
 8006048:	d510      	bpl.n	800606c <_printf_float+0x250>
 800604a:	ee18 3a10 	vmov	r3, s16
 800604e:	4652      	mov	r2, sl
 8006050:	4631      	mov	r1, r6
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	f43f af41 	beq.w	8005ede <_printf_float+0xc2>
 800605c:	f04f 0800 	mov.w	r8, #0
 8006060:	f104 091a 	add.w	r9, r4, #26
 8006064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006066:	3b01      	subs	r3, #1
 8006068:	4543      	cmp	r3, r8
 800606a:	dc09      	bgt.n	8006080 <_printf_float+0x264>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	079b      	lsls	r3, r3, #30
 8006070:	f100 8105 	bmi.w	800627e <_printf_float+0x462>
 8006074:	68e0      	ldr	r0, [r4, #12]
 8006076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006078:	4298      	cmp	r0, r3
 800607a:	bfb8      	it	lt
 800607c:	4618      	movlt	r0, r3
 800607e:	e730      	b.n	8005ee2 <_printf_float+0xc6>
 8006080:	2301      	movs	r3, #1
 8006082:	464a      	mov	r2, r9
 8006084:	4631      	mov	r1, r6
 8006086:	4628      	mov	r0, r5
 8006088:	47b8      	blx	r7
 800608a:	3001      	adds	r0, #1
 800608c:	f43f af27 	beq.w	8005ede <_printf_float+0xc2>
 8006090:	f108 0801 	add.w	r8, r8, #1
 8006094:	e7e6      	b.n	8006064 <_printf_float+0x248>
 8006096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006098:	2b00      	cmp	r3, #0
 800609a:	dc39      	bgt.n	8006110 <_printf_float+0x2f4>
 800609c:	4a1b      	ldr	r2, [pc, #108]	; (800610c <_printf_float+0x2f0>)
 800609e:	2301      	movs	r3, #1
 80060a0:	4631      	mov	r1, r6
 80060a2:	4628      	mov	r0, r5
 80060a4:	47b8      	blx	r7
 80060a6:	3001      	adds	r0, #1
 80060a8:	f43f af19 	beq.w	8005ede <_printf_float+0xc2>
 80060ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060b0:	4313      	orrs	r3, r2
 80060b2:	d102      	bne.n	80060ba <_printf_float+0x29e>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	07d9      	lsls	r1, r3, #31
 80060b8:	d5d8      	bpl.n	800606c <_printf_float+0x250>
 80060ba:	ee18 3a10 	vmov	r3, s16
 80060be:	4652      	mov	r2, sl
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	47b8      	blx	r7
 80060c6:	3001      	adds	r0, #1
 80060c8:	f43f af09 	beq.w	8005ede <_printf_float+0xc2>
 80060cc:	f04f 0900 	mov.w	r9, #0
 80060d0:	f104 0a1a 	add.w	sl, r4, #26
 80060d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d6:	425b      	negs	r3, r3
 80060d8:	454b      	cmp	r3, r9
 80060da:	dc01      	bgt.n	80060e0 <_printf_float+0x2c4>
 80060dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060de:	e792      	b.n	8006006 <_printf_float+0x1ea>
 80060e0:	2301      	movs	r3, #1
 80060e2:	4652      	mov	r2, sl
 80060e4:	4631      	mov	r1, r6
 80060e6:	4628      	mov	r0, r5
 80060e8:	47b8      	blx	r7
 80060ea:	3001      	adds	r0, #1
 80060ec:	f43f aef7 	beq.w	8005ede <_printf_float+0xc2>
 80060f0:	f109 0901 	add.w	r9, r9, #1
 80060f4:	e7ee      	b.n	80060d4 <_printf_float+0x2b8>
 80060f6:	bf00      	nop
 80060f8:	7fefffff 	.word	0x7fefffff
 80060fc:	08009620 	.word	0x08009620
 8006100:	08009624 	.word	0x08009624
 8006104:	0800962c 	.word	0x0800962c
 8006108:	08009628 	.word	0x08009628
 800610c:	08009630 	.word	0x08009630
 8006110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006114:	429a      	cmp	r2, r3
 8006116:	bfa8      	it	ge
 8006118:	461a      	movge	r2, r3
 800611a:	2a00      	cmp	r2, #0
 800611c:	4691      	mov	r9, r2
 800611e:	dc37      	bgt.n	8006190 <_printf_float+0x374>
 8006120:	f04f 0b00 	mov.w	fp, #0
 8006124:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006128:	f104 021a 	add.w	r2, r4, #26
 800612c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800612e:	9305      	str	r3, [sp, #20]
 8006130:	eba3 0309 	sub.w	r3, r3, r9
 8006134:	455b      	cmp	r3, fp
 8006136:	dc33      	bgt.n	80061a0 <_printf_float+0x384>
 8006138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800613c:	429a      	cmp	r2, r3
 800613e:	db3b      	blt.n	80061b8 <_printf_float+0x39c>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	07da      	lsls	r2, r3, #31
 8006144:	d438      	bmi.n	80061b8 <_printf_float+0x39c>
 8006146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006148:	9a05      	ldr	r2, [sp, #20]
 800614a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800614c:	1a9a      	subs	r2, r3, r2
 800614e:	eba3 0901 	sub.w	r9, r3, r1
 8006152:	4591      	cmp	r9, r2
 8006154:	bfa8      	it	ge
 8006156:	4691      	movge	r9, r2
 8006158:	f1b9 0f00 	cmp.w	r9, #0
 800615c:	dc35      	bgt.n	80061ca <_printf_float+0x3ae>
 800615e:	f04f 0800 	mov.w	r8, #0
 8006162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006166:	f104 0a1a 	add.w	sl, r4, #26
 800616a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	eba3 0309 	sub.w	r3, r3, r9
 8006174:	4543      	cmp	r3, r8
 8006176:	f77f af79 	ble.w	800606c <_printf_float+0x250>
 800617a:	2301      	movs	r3, #1
 800617c:	4652      	mov	r2, sl
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f aeaa 	beq.w	8005ede <_printf_float+0xc2>
 800618a:	f108 0801 	add.w	r8, r8, #1
 800618e:	e7ec      	b.n	800616a <_printf_float+0x34e>
 8006190:	4613      	mov	r3, r2
 8006192:	4631      	mov	r1, r6
 8006194:	4642      	mov	r2, r8
 8006196:	4628      	mov	r0, r5
 8006198:	47b8      	blx	r7
 800619a:	3001      	adds	r0, #1
 800619c:	d1c0      	bne.n	8006120 <_printf_float+0x304>
 800619e:	e69e      	b.n	8005ede <_printf_float+0xc2>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	9205      	str	r2, [sp, #20]
 80061a8:	47b8      	blx	r7
 80061aa:	3001      	adds	r0, #1
 80061ac:	f43f ae97 	beq.w	8005ede <_printf_float+0xc2>
 80061b0:	9a05      	ldr	r2, [sp, #20]
 80061b2:	f10b 0b01 	add.w	fp, fp, #1
 80061b6:	e7b9      	b.n	800612c <_printf_float+0x310>
 80061b8:	ee18 3a10 	vmov	r3, s16
 80061bc:	4652      	mov	r2, sl
 80061be:	4631      	mov	r1, r6
 80061c0:	4628      	mov	r0, r5
 80061c2:	47b8      	blx	r7
 80061c4:	3001      	adds	r0, #1
 80061c6:	d1be      	bne.n	8006146 <_printf_float+0x32a>
 80061c8:	e689      	b.n	8005ede <_printf_float+0xc2>
 80061ca:	9a05      	ldr	r2, [sp, #20]
 80061cc:	464b      	mov	r3, r9
 80061ce:	4442      	add	r2, r8
 80061d0:	4631      	mov	r1, r6
 80061d2:	4628      	mov	r0, r5
 80061d4:	47b8      	blx	r7
 80061d6:	3001      	adds	r0, #1
 80061d8:	d1c1      	bne.n	800615e <_printf_float+0x342>
 80061da:	e680      	b.n	8005ede <_printf_float+0xc2>
 80061dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061de:	2a01      	cmp	r2, #1
 80061e0:	dc01      	bgt.n	80061e6 <_printf_float+0x3ca>
 80061e2:	07db      	lsls	r3, r3, #31
 80061e4:	d538      	bpl.n	8006258 <_printf_float+0x43c>
 80061e6:	2301      	movs	r3, #1
 80061e8:	4642      	mov	r2, r8
 80061ea:	4631      	mov	r1, r6
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	f43f ae74 	beq.w	8005ede <_printf_float+0xc2>
 80061f6:	ee18 3a10 	vmov	r3, s16
 80061fa:	4652      	mov	r2, sl
 80061fc:	4631      	mov	r1, r6
 80061fe:	4628      	mov	r0, r5
 8006200:	47b8      	blx	r7
 8006202:	3001      	adds	r0, #1
 8006204:	f43f ae6b 	beq.w	8005ede <_printf_float+0xc2>
 8006208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800620c:	2200      	movs	r2, #0
 800620e:	2300      	movs	r3, #0
 8006210:	f7fa fc32 	bl	8000a78 <__aeabi_dcmpeq>
 8006214:	b9d8      	cbnz	r0, 800624e <_printf_float+0x432>
 8006216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006218:	f108 0201 	add.w	r2, r8, #1
 800621c:	3b01      	subs	r3, #1
 800621e:	4631      	mov	r1, r6
 8006220:	4628      	mov	r0, r5
 8006222:	47b8      	blx	r7
 8006224:	3001      	adds	r0, #1
 8006226:	d10e      	bne.n	8006246 <_printf_float+0x42a>
 8006228:	e659      	b.n	8005ede <_printf_float+0xc2>
 800622a:	2301      	movs	r3, #1
 800622c:	4652      	mov	r2, sl
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	47b8      	blx	r7
 8006234:	3001      	adds	r0, #1
 8006236:	f43f ae52 	beq.w	8005ede <_printf_float+0xc2>
 800623a:	f108 0801 	add.w	r8, r8, #1
 800623e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006240:	3b01      	subs	r3, #1
 8006242:	4543      	cmp	r3, r8
 8006244:	dcf1      	bgt.n	800622a <_printf_float+0x40e>
 8006246:	464b      	mov	r3, r9
 8006248:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800624c:	e6dc      	b.n	8006008 <_printf_float+0x1ec>
 800624e:	f04f 0800 	mov.w	r8, #0
 8006252:	f104 0a1a 	add.w	sl, r4, #26
 8006256:	e7f2      	b.n	800623e <_printf_float+0x422>
 8006258:	2301      	movs	r3, #1
 800625a:	4642      	mov	r2, r8
 800625c:	e7df      	b.n	800621e <_printf_float+0x402>
 800625e:	2301      	movs	r3, #1
 8006260:	464a      	mov	r2, r9
 8006262:	4631      	mov	r1, r6
 8006264:	4628      	mov	r0, r5
 8006266:	47b8      	blx	r7
 8006268:	3001      	adds	r0, #1
 800626a:	f43f ae38 	beq.w	8005ede <_printf_float+0xc2>
 800626e:	f108 0801 	add.w	r8, r8, #1
 8006272:	68e3      	ldr	r3, [r4, #12]
 8006274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006276:	1a5b      	subs	r3, r3, r1
 8006278:	4543      	cmp	r3, r8
 800627a:	dcf0      	bgt.n	800625e <_printf_float+0x442>
 800627c:	e6fa      	b.n	8006074 <_printf_float+0x258>
 800627e:	f04f 0800 	mov.w	r8, #0
 8006282:	f104 0919 	add.w	r9, r4, #25
 8006286:	e7f4      	b.n	8006272 <_printf_float+0x456>

08006288 <_printf_common>:
 8006288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800628c:	4616      	mov	r6, r2
 800628e:	4699      	mov	r9, r3
 8006290:	688a      	ldr	r2, [r1, #8]
 8006292:	690b      	ldr	r3, [r1, #16]
 8006294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006298:	4293      	cmp	r3, r2
 800629a:	bfb8      	it	lt
 800629c:	4613      	movlt	r3, r2
 800629e:	6033      	str	r3, [r6, #0]
 80062a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a4:	4607      	mov	r7, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	b10a      	cbz	r2, 80062ae <_printf_common+0x26>
 80062aa:	3301      	adds	r3, #1
 80062ac:	6033      	str	r3, [r6, #0]
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	0699      	lsls	r1, r3, #26
 80062b2:	bf42      	ittt	mi
 80062b4:	6833      	ldrmi	r3, [r6, #0]
 80062b6:	3302      	addmi	r3, #2
 80062b8:	6033      	strmi	r3, [r6, #0]
 80062ba:	6825      	ldr	r5, [r4, #0]
 80062bc:	f015 0506 	ands.w	r5, r5, #6
 80062c0:	d106      	bne.n	80062d0 <_printf_common+0x48>
 80062c2:	f104 0a19 	add.w	sl, r4, #25
 80062c6:	68e3      	ldr	r3, [r4, #12]
 80062c8:	6832      	ldr	r2, [r6, #0]
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	42ab      	cmp	r3, r5
 80062ce:	dc26      	bgt.n	800631e <_printf_common+0x96>
 80062d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062d4:	1e13      	subs	r3, r2, #0
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	bf18      	it	ne
 80062da:	2301      	movne	r3, #1
 80062dc:	0692      	lsls	r2, r2, #26
 80062de:	d42b      	bmi.n	8006338 <_printf_common+0xb0>
 80062e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062e4:	4649      	mov	r1, r9
 80062e6:	4638      	mov	r0, r7
 80062e8:	47c0      	blx	r8
 80062ea:	3001      	adds	r0, #1
 80062ec:	d01e      	beq.n	800632c <_printf_common+0xa4>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	68e5      	ldr	r5, [r4, #12]
 80062f2:	6832      	ldr	r2, [r6, #0]
 80062f4:	f003 0306 	and.w	r3, r3, #6
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	bf08      	it	eq
 80062fc:	1aad      	subeq	r5, r5, r2
 80062fe:	68a3      	ldr	r3, [r4, #8]
 8006300:	6922      	ldr	r2, [r4, #16]
 8006302:	bf0c      	ite	eq
 8006304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006308:	2500      	movne	r5, #0
 800630a:	4293      	cmp	r3, r2
 800630c:	bfc4      	itt	gt
 800630e:	1a9b      	subgt	r3, r3, r2
 8006310:	18ed      	addgt	r5, r5, r3
 8006312:	2600      	movs	r6, #0
 8006314:	341a      	adds	r4, #26
 8006316:	42b5      	cmp	r5, r6
 8006318:	d11a      	bne.n	8006350 <_printf_common+0xc8>
 800631a:	2000      	movs	r0, #0
 800631c:	e008      	b.n	8006330 <_printf_common+0xa8>
 800631e:	2301      	movs	r3, #1
 8006320:	4652      	mov	r2, sl
 8006322:	4649      	mov	r1, r9
 8006324:	4638      	mov	r0, r7
 8006326:	47c0      	blx	r8
 8006328:	3001      	adds	r0, #1
 800632a:	d103      	bne.n	8006334 <_printf_common+0xac>
 800632c:	f04f 30ff 	mov.w	r0, #4294967295
 8006330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006334:	3501      	adds	r5, #1
 8006336:	e7c6      	b.n	80062c6 <_printf_common+0x3e>
 8006338:	18e1      	adds	r1, r4, r3
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	2030      	movs	r0, #48	; 0x30
 800633e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006342:	4422      	add	r2, r4
 8006344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006348:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800634c:	3302      	adds	r3, #2
 800634e:	e7c7      	b.n	80062e0 <_printf_common+0x58>
 8006350:	2301      	movs	r3, #1
 8006352:	4622      	mov	r2, r4
 8006354:	4649      	mov	r1, r9
 8006356:	4638      	mov	r0, r7
 8006358:	47c0      	blx	r8
 800635a:	3001      	adds	r0, #1
 800635c:	d0e6      	beq.n	800632c <_printf_common+0xa4>
 800635e:	3601      	adds	r6, #1
 8006360:	e7d9      	b.n	8006316 <_printf_common+0x8e>
	...

08006364 <_printf_i>:
 8006364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006368:	7e0f      	ldrb	r7, [r1, #24]
 800636a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800636c:	2f78      	cmp	r7, #120	; 0x78
 800636e:	4691      	mov	r9, r2
 8006370:	4680      	mov	r8, r0
 8006372:	460c      	mov	r4, r1
 8006374:	469a      	mov	sl, r3
 8006376:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800637a:	d807      	bhi.n	800638c <_printf_i+0x28>
 800637c:	2f62      	cmp	r7, #98	; 0x62
 800637e:	d80a      	bhi.n	8006396 <_printf_i+0x32>
 8006380:	2f00      	cmp	r7, #0
 8006382:	f000 80d8 	beq.w	8006536 <_printf_i+0x1d2>
 8006386:	2f58      	cmp	r7, #88	; 0x58
 8006388:	f000 80a3 	beq.w	80064d2 <_printf_i+0x16e>
 800638c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006394:	e03a      	b.n	800640c <_printf_i+0xa8>
 8006396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800639a:	2b15      	cmp	r3, #21
 800639c:	d8f6      	bhi.n	800638c <_printf_i+0x28>
 800639e:	a101      	add	r1, pc, #4	; (adr r1, 80063a4 <_printf_i+0x40>)
 80063a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063a4:	080063fd 	.word	0x080063fd
 80063a8:	08006411 	.word	0x08006411
 80063ac:	0800638d 	.word	0x0800638d
 80063b0:	0800638d 	.word	0x0800638d
 80063b4:	0800638d 	.word	0x0800638d
 80063b8:	0800638d 	.word	0x0800638d
 80063bc:	08006411 	.word	0x08006411
 80063c0:	0800638d 	.word	0x0800638d
 80063c4:	0800638d 	.word	0x0800638d
 80063c8:	0800638d 	.word	0x0800638d
 80063cc:	0800638d 	.word	0x0800638d
 80063d0:	0800651d 	.word	0x0800651d
 80063d4:	08006441 	.word	0x08006441
 80063d8:	080064ff 	.word	0x080064ff
 80063dc:	0800638d 	.word	0x0800638d
 80063e0:	0800638d 	.word	0x0800638d
 80063e4:	0800653f 	.word	0x0800653f
 80063e8:	0800638d 	.word	0x0800638d
 80063ec:	08006441 	.word	0x08006441
 80063f0:	0800638d 	.word	0x0800638d
 80063f4:	0800638d 	.word	0x0800638d
 80063f8:	08006507 	.word	0x08006507
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	1d1a      	adds	r2, r3, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	602a      	str	r2, [r5, #0]
 8006404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800640c:	2301      	movs	r3, #1
 800640e:	e0a3      	b.n	8006558 <_printf_i+0x1f4>
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	6829      	ldr	r1, [r5, #0]
 8006414:	0606      	lsls	r6, r0, #24
 8006416:	f101 0304 	add.w	r3, r1, #4
 800641a:	d50a      	bpl.n	8006432 <_printf_i+0xce>
 800641c:	680e      	ldr	r6, [r1, #0]
 800641e:	602b      	str	r3, [r5, #0]
 8006420:	2e00      	cmp	r6, #0
 8006422:	da03      	bge.n	800642c <_printf_i+0xc8>
 8006424:	232d      	movs	r3, #45	; 0x2d
 8006426:	4276      	negs	r6, r6
 8006428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800642c:	485e      	ldr	r0, [pc, #376]	; (80065a8 <_printf_i+0x244>)
 800642e:	230a      	movs	r3, #10
 8006430:	e019      	b.n	8006466 <_printf_i+0x102>
 8006432:	680e      	ldr	r6, [r1, #0]
 8006434:	602b      	str	r3, [r5, #0]
 8006436:	f010 0f40 	tst.w	r0, #64	; 0x40
 800643a:	bf18      	it	ne
 800643c:	b236      	sxthne	r6, r6
 800643e:	e7ef      	b.n	8006420 <_printf_i+0xbc>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	6820      	ldr	r0, [r4, #0]
 8006444:	1d19      	adds	r1, r3, #4
 8006446:	6029      	str	r1, [r5, #0]
 8006448:	0601      	lsls	r1, r0, #24
 800644a:	d501      	bpl.n	8006450 <_printf_i+0xec>
 800644c:	681e      	ldr	r6, [r3, #0]
 800644e:	e002      	b.n	8006456 <_printf_i+0xf2>
 8006450:	0646      	lsls	r6, r0, #25
 8006452:	d5fb      	bpl.n	800644c <_printf_i+0xe8>
 8006454:	881e      	ldrh	r6, [r3, #0]
 8006456:	4854      	ldr	r0, [pc, #336]	; (80065a8 <_printf_i+0x244>)
 8006458:	2f6f      	cmp	r7, #111	; 0x6f
 800645a:	bf0c      	ite	eq
 800645c:	2308      	moveq	r3, #8
 800645e:	230a      	movne	r3, #10
 8006460:	2100      	movs	r1, #0
 8006462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006466:	6865      	ldr	r5, [r4, #4]
 8006468:	60a5      	str	r5, [r4, #8]
 800646a:	2d00      	cmp	r5, #0
 800646c:	bfa2      	ittt	ge
 800646e:	6821      	ldrge	r1, [r4, #0]
 8006470:	f021 0104 	bicge.w	r1, r1, #4
 8006474:	6021      	strge	r1, [r4, #0]
 8006476:	b90e      	cbnz	r6, 800647c <_printf_i+0x118>
 8006478:	2d00      	cmp	r5, #0
 800647a:	d04d      	beq.n	8006518 <_printf_i+0x1b4>
 800647c:	4615      	mov	r5, r2
 800647e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006482:	fb03 6711 	mls	r7, r3, r1, r6
 8006486:	5dc7      	ldrb	r7, [r0, r7]
 8006488:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800648c:	4637      	mov	r7, r6
 800648e:	42bb      	cmp	r3, r7
 8006490:	460e      	mov	r6, r1
 8006492:	d9f4      	bls.n	800647e <_printf_i+0x11a>
 8006494:	2b08      	cmp	r3, #8
 8006496:	d10b      	bne.n	80064b0 <_printf_i+0x14c>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	07de      	lsls	r6, r3, #31
 800649c:	d508      	bpl.n	80064b0 <_printf_i+0x14c>
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	6861      	ldr	r1, [r4, #4]
 80064a2:	4299      	cmp	r1, r3
 80064a4:	bfde      	ittt	le
 80064a6:	2330      	movle	r3, #48	; 0x30
 80064a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064b0:	1b52      	subs	r2, r2, r5
 80064b2:	6122      	str	r2, [r4, #16]
 80064b4:	f8cd a000 	str.w	sl, [sp]
 80064b8:	464b      	mov	r3, r9
 80064ba:	aa03      	add	r2, sp, #12
 80064bc:	4621      	mov	r1, r4
 80064be:	4640      	mov	r0, r8
 80064c0:	f7ff fee2 	bl	8006288 <_printf_common>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d14c      	bne.n	8006562 <_printf_i+0x1fe>
 80064c8:	f04f 30ff 	mov.w	r0, #4294967295
 80064cc:	b004      	add	sp, #16
 80064ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d2:	4835      	ldr	r0, [pc, #212]	; (80065a8 <_printf_i+0x244>)
 80064d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064d8:	6829      	ldr	r1, [r5, #0]
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80064e0:	6029      	str	r1, [r5, #0]
 80064e2:	061d      	lsls	r5, r3, #24
 80064e4:	d514      	bpl.n	8006510 <_printf_i+0x1ac>
 80064e6:	07df      	lsls	r7, r3, #31
 80064e8:	bf44      	itt	mi
 80064ea:	f043 0320 	orrmi.w	r3, r3, #32
 80064ee:	6023      	strmi	r3, [r4, #0]
 80064f0:	b91e      	cbnz	r6, 80064fa <_printf_i+0x196>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	f023 0320 	bic.w	r3, r3, #32
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	2310      	movs	r3, #16
 80064fc:	e7b0      	b.n	8006460 <_printf_i+0xfc>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	f043 0320 	orr.w	r3, r3, #32
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	2378      	movs	r3, #120	; 0x78
 8006508:	4828      	ldr	r0, [pc, #160]	; (80065ac <_printf_i+0x248>)
 800650a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800650e:	e7e3      	b.n	80064d8 <_printf_i+0x174>
 8006510:	0659      	lsls	r1, r3, #25
 8006512:	bf48      	it	mi
 8006514:	b2b6      	uxthmi	r6, r6
 8006516:	e7e6      	b.n	80064e6 <_printf_i+0x182>
 8006518:	4615      	mov	r5, r2
 800651a:	e7bb      	b.n	8006494 <_printf_i+0x130>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	6826      	ldr	r6, [r4, #0]
 8006520:	6961      	ldr	r1, [r4, #20]
 8006522:	1d18      	adds	r0, r3, #4
 8006524:	6028      	str	r0, [r5, #0]
 8006526:	0635      	lsls	r5, r6, #24
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	d501      	bpl.n	8006530 <_printf_i+0x1cc>
 800652c:	6019      	str	r1, [r3, #0]
 800652e:	e002      	b.n	8006536 <_printf_i+0x1d2>
 8006530:	0670      	lsls	r0, r6, #25
 8006532:	d5fb      	bpl.n	800652c <_printf_i+0x1c8>
 8006534:	8019      	strh	r1, [r3, #0]
 8006536:	2300      	movs	r3, #0
 8006538:	6123      	str	r3, [r4, #16]
 800653a:	4615      	mov	r5, r2
 800653c:	e7ba      	b.n	80064b4 <_printf_i+0x150>
 800653e:	682b      	ldr	r3, [r5, #0]
 8006540:	1d1a      	adds	r2, r3, #4
 8006542:	602a      	str	r2, [r5, #0]
 8006544:	681d      	ldr	r5, [r3, #0]
 8006546:	6862      	ldr	r2, [r4, #4]
 8006548:	2100      	movs	r1, #0
 800654a:	4628      	mov	r0, r5
 800654c:	f7f9 fe20 	bl	8000190 <memchr>
 8006550:	b108      	cbz	r0, 8006556 <_printf_i+0x1f2>
 8006552:	1b40      	subs	r0, r0, r5
 8006554:	6060      	str	r0, [r4, #4]
 8006556:	6863      	ldr	r3, [r4, #4]
 8006558:	6123      	str	r3, [r4, #16]
 800655a:	2300      	movs	r3, #0
 800655c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006560:	e7a8      	b.n	80064b4 <_printf_i+0x150>
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	462a      	mov	r2, r5
 8006566:	4649      	mov	r1, r9
 8006568:	4640      	mov	r0, r8
 800656a:	47d0      	blx	sl
 800656c:	3001      	adds	r0, #1
 800656e:	d0ab      	beq.n	80064c8 <_printf_i+0x164>
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	079b      	lsls	r3, r3, #30
 8006574:	d413      	bmi.n	800659e <_printf_i+0x23a>
 8006576:	68e0      	ldr	r0, [r4, #12]
 8006578:	9b03      	ldr	r3, [sp, #12]
 800657a:	4298      	cmp	r0, r3
 800657c:	bfb8      	it	lt
 800657e:	4618      	movlt	r0, r3
 8006580:	e7a4      	b.n	80064cc <_printf_i+0x168>
 8006582:	2301      	movs	r3, #1
 8006584:	4632      	mov	r2, r6
 8006586:	4649      	mov	r1, r9
 8006588:	4640      	mov	r0, r8
 800658a:	47d0      	blx	sl
 800658c:	3001      	adds	r0, #1
 800658e:	d09b      	beq.n	80064c8 <_printf_i+0x164>
 8006590:	3501      	adds	r5, #1
 8006592:	68e3      	ldr	r3, [r4, #12]
 8006594:	9903      	ldr	r1, [sp, #12]
 8006596:	1a5b      	subs	r3, r3, r1
 8006598:	42ab      	cmp	r3, r5
 800659a:	dcf2      	bgt.n	8006582 <_printf_i+0x21e>
 800659c:	e7eb      	b.n	8006576 <_printf_i+0x212>
 800659e:	2500      	movs	r5, #0
 80065a0:	f104 0619 	add.w	r6, r4, #25
 80065a4:	e7f5      	b.n	8006592 <_printf_i+0x22e>
 80065a6:	bf00      	nop
 80065a8:	08009632 	.word	0x08009632
 80065ac:	08009643 	.word	0x08009643

080065b0 <iprintf>:
 80065b0:	b40f      	push	{r0, r1, r2, r3}
 80065b2:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <iprintf+0x2c>)
 80065b4:	b513      	push	{r0, r1, r4, lr}
 80065b6:	681c      	ldr	r4, [r3, #0]
 80065b8:	b124      	cbz	r4, 80065c4 <iprintf+0x14>
 80065ba:	69a3      	ldr	r3, [r4, #24]
 80065bc:	b913      	cbnz	r3, 80065c4 <iprintf+0x14>
 80065be:	4620      	mov	r0, r4
 80065c0:	f001 f91e 	bl	8007800 <__sinit>
 80065c4:	ab05      	add	r3, sp, #20
 80065c6:	9a04      	ldr	r2, [sp, #16]
 80065c8:	68a1      	ldr	r1, [r4, #8]
 80065ca:	9301      	str	r3, [sp, #4]
 80065cc:	4620      	mov	r0, r4
 80065ce:	f001 ff5b 	bl	8008488 <_vfiprintf_r>
 80065d2:	b002      	add	sp, #8
 80065d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d8:	b004      	add	sp, #16
 80065da:	4770      	bx	lr
 80065dc:	20000014 	.word	0x20000014

080065e0 <putchar>:
 80065e0:	4b09      	ldr	r3, [pc, #36]	; (8006608 <putchar+0x28>)
 80065e2:	b513      	push	{r0, r1, r4, lr}
 80065e4:	681c      	ldr	r4, [r3, #0]
 80065e6:	4601      	mov	r1, r0
 80065e8:	b134      	cbz	r4, 80065f8 <putchar+0x18>
 80065ea:	69a3      	ldr	r3, [r4, #24]
 80065ec:	b923      	cbnz	r3, 80065f8 <putchar+0x18>
 80065ee:	9001      	str	r0, [sp, #4]
 80065f0:	4620      	mov	r0, r4
 80065f2:	f001 f905 	bl	8007800 <__sinit>
 80065f6:	9901      	ldr	r1, [sp, #4]
 80065f8:	68a2      	ldr	r2, [r4, #8]
 80065fa:	4620      	mov	r0, r4
 80065fc:	b002      	add	sp, #8
 80065fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006602:	f002 b871 	b.w	80086e8 <_putc_r>
 8006606:	bf00      	nop
 8006608:	20000014 	.word	0x20000014

0800660c <_puts_r>:
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	460e      	mov	r6, r1
 8006610:	4605      	mov	r5, r0
 8006612:	b118      	cbz	r0, 800661c <_puts_r+0x10>
 8006614:	6983      	ldr	r3, [r0, #24]
 8006616:	b90b      	cbnz	r3, 800661c <_puts_r+0x10>
 8006618:	f001 f8f2 	bl	8007800 <__sinit>
 800661c:	69ab      	ldr	r3, [r5, #24]
 800661e:	68ac      	ldr	r4, [r5, #8]
 8006620:	b913      	cbnz	r3, 8006628 <_puts_r+0x1c>
 8006622:	4628      	mov	r0, r5
 8006624:	f001 f8ec 	bl	8007800 <__sinit>
 8006628:	4b2c      	ldr	r3, [pc, #176]	; (80066dc <_puts_r+0xd0>)
 800662a:	429c      	cmp	r4, r3
 800662c:	d120      	bne.n	8006670 <_puts_r+0x64>
 800662e:	686c      	ldr	r4, [r5, #4]
 8006630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006632:	07db      	lsls	r3, r3, #31
 8006634:	d405      	bmi.n	8006642 <_puts_r+0x36>
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	0598      	lsls	r0, r3, #22
 800663a:	d402      	bmi.n	8006642 <_puts_r+0x36>
 800663c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800663e:	f001 f982 	bl	8007946 <__retarget_lock_acquire_recursive>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	0719      	lsls	r1, r3, #28
 8006646:	d51d      	bpl.n	8006684 <_puts_r+0x78>
 8006648:	6923      	ldr	r3, [r4, #16]
 800664a:	b1db      	cbz	r3, 8006684 <_puts_r+0x78>
 800664c:	3e01      	subs	r6, #1
 800664e:	68a3      	ldr	r3, [r4, #8]
 8006650:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006654:	3b01      	subs	r3, #1
 8006656:	60a3      	str	r3, [r4, #8]
 8006658:	bb39      	cbnz	r1, 80066aa <_puts_r+0x9e>
 800665a:	2b00      	cmp	r3, #0
 800665c:	da38      	bge.n	80066d0 <_puts_r+0xc4>
 800665e:	4622      	mov	r2, r4
 8006660:	210a      	movs	r1, #10
 8006662:	4628      	mov	r0, r5
 8006664:	f000 f878 	bl	8006758 <__swbuf_r>
 8006668:	3001      	adds	r0, #1
 800666a:	d011      	beq.n	8006690 <_puts_r+0x84>
 800666c:	250a      	movs	r5, #10
 800666e:	e011      	b.n	8006694 <_puts_r+0x88>
 8006670:	4b1b      	ldr	r3, [pc, #108]	; (80066e0 <_puts_r+0xd4>)
 8006672:	429c      	cmp	r4, r3
 8006674:	d101      	bne.n	800667a <_puts_r+0x6e>
 8006676:	68ac      	ldr	r4, [r5, #8]
 8006678:	e7da      	b.n	8006630 <_puts_r+0x24>
 800667a:	4b1a      	ldr	r3, [pc, #104]	; (80066e4 <_puts_r+0xd8>)
 800667c:	429c      	cmp	r4, r3
 800667e:	bf08      	it	eq
 8006680:	68ec      	ldreq	r4, [r5, #12]
 8006682:	e7d5      	b.n	8006630 <_puts_r+0x24>
 8006684:	4621      	mov	r1, r4
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f8b8 	bl	80067fc <__swsetup_r>
 800668c:	2800      	cmp	r0, #0
 800668e:	d0dd      	beq.n	800664c <_puts_r+0x40>
 8006690:	f04f 35ff 	mov.w	r5, #4294967295
 8006694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006696:	07da      	lsls	r2, r3, #31
 8006698:	d405      	bmi.n	80066a6 <_puts_r+0x9a>
 800669a:	89a3      	ldrh	r3, [r4, #12]
 800669c:	059b      	lsls	r3, r3, #22
 800669e:	d402      	bmi.n	80066a6 <_puts_r+0x9a>
 80066a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066a2:	f001 f951 	bl	8007948 <__retarget_lock_release_recursive>
 80066a6:	4628      	mov	r0, r5
 80066a8:	bd70      	pop	{r4, r5, r6, pc}
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da04      	bge.n	80066b8 <_puts_r+0xac>
 80066ae:	69a2      	ldr	r2, [r4, #24]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	dc06      	bgt.n	80066c2 <_puts_r+0xb6>
 80066b4:	290a      	cmp	r1, #10
 80066b6:	d004      	beq.n	80066c2 <_puts_r+0xb6>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	6022      	str	r2, [r4, #0]
 80066be:	7019      	strb	r1, [r3, #0]
 80066c0:	e7c5      	b.n	800664e <_puts_r+0x42>
 80066c2:	4622      	mov	r2, r4
 80066c4:	4628      	mov	r0, r5
 80066c6:	f000 f847 	bl	8006758 <__swbuf_r>
 80066ca:	3001      	adds	r0, #1
 80066cc:	d1bf      	bne.n	800664e <_puts_r+0x42>
 80066ce:	e7df      	b.n	8006690 <_puts_r+0x84>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	250a      	movs	r5, #10
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	6022      	str	r2, [r4, #0]
 80066d8:	701d      	strb	r5, [r3, #0]
 80066da:	e7db      	b.n	8006694 <_puts_r+0x88>
 80066dc:	08009704 	.word	0x08009704
 80066e0:	08009724 	.word	0x08009724
 80066e4:	080096e4 	.word	0x080096e4

080066e8 <puts>:
 80066e8:	4b02      	ldr	r3, [pc, #8]	; (80066f4 <puts+0xc>)
 80066ea:	4601      	mov	r1, r0
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	f7ff bf8d 	b.w	800660c <_puts_r>
 80066f2:	bf00      	nop
 80066f4:	20000014 	.word	0x20000014

080066f8 <_sbrk_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d06      	ldr	r5, [pc, #24]	; (8006714 <_sbrk_r+0x1c>)
 80066fc:	2300      	movs	r3, #0
 80066fe:	4604      	mov	r4, r0
 8006700:	4608      	mov	r0, r1
 8006702:	602b      	str	r3, [r5, #0]
 8006704:	f7fb f9bc 	bl	8001a80 <_sbrk>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_sbrk_r+0x1a>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	b103      	cbz	r3, 8006712 <_sbrk_r+0x1a>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	20000398 	.word	0x20000398

08006718 <siprintf>:
 8006718:	b40e      	push	{r1, r2, r3}
 800671a:	b500      	push	{lr}
 800671c:	b09c      	sub	sp, #112	; 0x70
 800671e:	ab1d      	add	r3, sp, #116	; 0x74
 8006720:	9002      	str	r0, [sp, #8]
 8006722:	9006      	str	r0, [sp, #24]
 8006724:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006728:	4809      	ldr	r0, [pc, #36]	; (8006750 <siprintf+0x38>)
 800672a:	9107      	str	r1, [sp, #28]
 800672c:	9104      	str	r1, [sp, #16]
 800672e:	4909      	ldr	r1, [pc, #36]	; (8006754 <siprintf+0x3c>)
 8006730:	f853 2b04 	ldr.w	r2, [r3], #4
 8006734:	9105      	str	r1, [sp, #20]
 8006736:	6800      	ldr	r0, [r0, #0]
 8006738:	9301      	str	r3, [sp, #4]
 800673a:	a902      	add	r1, sp, #8
 800673c:	f001 fd7a 	bl	8008234 <_svfiprintf_r>
 8006740:	9b02      	ldr	r3, [sp, #8]
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	b01c      	add	sp, #112	; 0x70
 8006748:	f85d eb04 	ldr.w	lr, [sp], #4
 800674c:	b003      	add	sp, #12
 800674e:	4770      	bx	lr
 8006750:	20000014 	.word	0x20000014
 8006754:	ffff0208 	.word	0xffff0208

08006758 <__swbuf_r>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	460e      	mov	r6, r1
 800675c:	4614      	mov	r4, r2
 800675e:	4605      	mov	r5, r0
 8006760:	b118      	cbz	r0, 800676a <__swbuf_r+0x12>
 8006762:	6983      	ldr	r3, [r0, #24]
 8006764:	b90b      	cbnz	r3, 800676a <__swbuf_r+0x12>
 8006766:	f001 f84b 	bl	8007800 <__sinit>
 800676a:	4b21      	ldr	r3, [pc, #132]	; (80067f0 <__swbuf_r+0x98>)
 800676c:	429c      	cmp	r4, r3
 800676e:	d12b      	bne.n	80067c8 <__swbuf_r+0x70>
 8006770:	686c      	ldr	r4, [r5, #4]
 8006772:	69a3      	ldr	r3, [r4, #24]
 8006774:	60a3      	str	r3, [r4, #8]
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	071a      	lsls	r2, r3, #28
 800677a:	d52f      	bpl.n	80067dc <__swbuf_r+0x84>
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	b36b      	cbz	r3, 80067dc <__swbuf_r+0x84>
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	6820      	ldr	r0, [r4, #0]
 8006784:	1ac0      	subs	r0, r0, r3
 8006786:	6963      	ldr	r3, [r4, #20]
 8006788:	b2f6      	uxtb	r6, r6
 800678a:	4283      	cmp	r3, r0
 800678c:	4637      	mov	r7, r6
 800678e:	dc04      	bgt.n	800679a <__swbuf_r+0x42>
 8006790:	4621      	mov	r1, r4
 8006792:	4628      	mov	r0, r5
 8006794:	f000 ffa0 	bl	80076d8 <_fflush_r>
 8006798:	bb30      	cbnz	r0, 80067e8 <__swbuf_r+0x90>
 800679a:	68a3      	ldr	r3, [r4, #8]
 800679c:	3b01      	subs	r3, #1
 800679e:	60a3      	str	r3, [r4, #8]
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	6022      	str	r2, [r4, #0]
 80067a6:	701e      	strb	r6, [r3, #0]
 80067a8:	6963      	ldr	r3, [r4, #20]
 80067aa:	3001      	adds	r0, #1
 80067ac:	4283      	cmp	r3, r0
 80067ae:	d004      	beq.n	80067ba <__swbuf_r+0x62>
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	07db      	lsls	r3, r3, #31
 80067b4:	d506      	bpl.n	80067c4 <__swbuf_r+0x6c>
 80067b6:	2e0a      	cmp	r6, #10
 80067b8:	d104      	bne.n	80067c4 <__swbuf_r+0x6c>
 80067ba:	4621      	mov	r1, r4
 80067bc:	4628      	mov	r0, r5
 80067be:	f000 ff8b 	bl	80076d8 <_fflush_r>
 80067c2:	b988      	cbnz	r0, 80067e8 <__swbuf_r+0x90>
 80067c4:	4638      	mov	r0, r7
 80067c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067c8:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <__swbuf_r+0x9c>)
 80067ca:	429c      	cmp	r4, r3
 80067cc:	d101      	bne.n	80067d2 <__swbuf_r+0x7a>
 80067ce:	68ac      	ldr	r4, [r5, #8]
 80067d0:	e7cf      	b.n	8006772 <__swbuf_r+0x1a>
 80067d2:	4b09      	ldr	r3, [pc, #36]	; (80067f8 <__swbuf_r+0xa0>)
 80067d4:	429c      	cmp	r4, r3
 80067d6:	bf08      	it	eq
 80067d8:	68ec      	ldreq	r4, [r5, #12]
 80067da:	e7ca      	b.n	8006772 <__swbuf_r+0x1a>
 80067dc:	4621      	mov	r1, r4
 80067de:	4628      	mov	r0, r5
 80067e0:	f000 f80c 	bl	80067fc <__swsetup_r>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d0cb      	beq.n	8006780 <__swbuf_r+0x28>
 80067e8:	f04f 37ff 	mov.w	r7, #4294967295
 80067ec:	e7ea      	b.n	80067c4 <__swbuf_r+0x6c>
 80067ee:	bf00      	nop
 80067f0:	08009704 	.word	0x08009704
 80067f4:	08009724 	.word	0x08009724
 80067f8:	080096e4 	.word	0x080096e4

080067fc <__swsetup_r>:
 80067fc:	4b32      	ldr	r3, [pc, #200]	; (80068c8 <__swsetup_r+0xcc>)
 80067fe:	b570      	push	{r4, r5, r6, lr}
 8006800:	681d      	ldr	r5, [r3, #0]
 8006802:	4606      	mov	r6, r0
 8006804:	460c      	mov	r4, r1
 8006806:	b125      	cbz	r5, 8006812 <__swsetup_r+0x16>
 8006808:	69ab      	ldr	r3, [r5, #24]
 800680a:	b913      	cbnz	r3, 8006812 <__swsetup_r+0x16>
 800680c:	4628      	mov	r0, r5
 800680e:	f000 fff7 	bl	8007800 <__sinit>
 8006812:	4b2e      	ldr	r3, [pc, #184]	; (80068cc <__swsetup_r+0xd0>)
 8006814:	429c      	cmp	r4, r3
 8006816:	d10f      	bne.n	8006838 <__swsetup_r+0x3c>
 8006818:	686c      	ldr	r4, [r5, #4]
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006820:	0719      	lsls	r1, r3, #28
 8006822:	d42c      	bmi.n	800687e <__swsetup_r+0x82>
 8006824:	06dd      	lsls	r5, r3, #27
 8006826:	d411      	bmi.n	800684c <__swsetup_r+0x50>
 8006828:	2309      	movs	r3, #9
 800682a:	6033      	str	r3, [r6, #0]
 800682c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	f04f 30ff 	mov.w	r0, #4294967295
 8006836:	e03e      	b.n	80068b6 <__swsetup_r+0xba>
 8006838:	4b25      	ldr	r3, [pc, #148]	; (80068d0 <__swsetup_r+0xd4>)
 800683a:	429c      	cmp	r4, r3
 800683c:	d101      	bne.n	8006842 <__swsetup_r+0x46>
 800683e:	68ac      	ldr	r4, [r5, #8]
 8006840:	e7eb      	b.n	800681a <__swsetup_r+0x1e>
 8006842:	4b24      	ldr	r3, [pc, #144]	; (80068d4 <__swsetup_r+0xd8>)
 8006844:	429c      	cmp	r4, r3
 8006846:	bf08      	it	eq
 8006848:	68ec      	ldreq	r4, [r5, #12]
 800684a:	e7e6      	b.n	800681a <__swsetup_r+0x1e>
 800684c:	0758      	lsls	r0, r3, #29
 800684e:	d512      	bpl.n	8006876 <__swsetup_r+0x7a>
 8006850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006852:	b141      	cbz	r1, 8006866 <__swsetup_r+0x6a>
 8006854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006858:	4299      	cmp	r1, r3
 800685a:	d002      	beq.n	8006862 <__swsetup_r+0x66>
 800685c:	4630      	mov	r0, r6
 800685e:	f7ff f95d 	bl	8005b1c <_free_r>
 8006862:	2300      	movs	r3, #0
 8006864:	6363      	str	r3, [r4, #52]	; 0x34
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	2300      	movs	r3, #0
 8006870:	6063      	str	r3, [r4, #4]
 8006872:	6923      	ldr	r3, [r4, #16]
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	f043 0308 	orr.w	r3, r3, #8
 800687c:	81a3      	strh	r3, [r4, #12]
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	b94b      	cbnz	r3, 8006896 <__swsetup_r+0x9a>
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800688c:	d003      	beq.n	8006896 <__swsetup_r+0x9a>
 800688e:	4621      	mov	r1, r4
 8006890:	4630      	mov	r0, r6
 8006892:	f001 f87f 	bl	8007994 <__smakebuf_r>
 8006896:	89a0      	ldrh	r0, [r4, #12]
 8006898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800689c:	f010 0301 	ands.w	r3, r0, #1
 80068a0:	d00a      	beq.n	80068b8 <__swsetup_r+0xbc>
 80068a2:	2300      	movs	r3, #0
 80068a4:	60a3      	str	r3, [r4, #8]
 80068a6:	6963      	ldr	r3, [r4, #20]
 80068a8:	425b      	negs	r3, r3
 80068aa:	61a3      	str	r3, [r4, #24]
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	b943      	cbnz	r3, 80068c2 <__swsetup_r+0xc6>
 80068b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068b4:	d1ba      	bne.n	800682c <__swsetup_r+0x30>
 80068b6:	bd70      	pop	{r4, r5, r6, pc}
 80068b8:	0781      	lsls	r1, r0, #30
 80068ba:	bf58      	it	pl
 80068bc:	6963      	ldrpl	r3, [r4, #20]
 80068be:	60a3      	str	r3, [r4, #8]
 80068c0:	e7f4      	b.n	80068ac <__swsetup_r+0xb0>
 80068c2:	2000      	movs	r0, #0
 80068c4:	e7f7      	b.n	80068b6 <__swsetup_r+0xba>
 80068c6:	bf00      	nop
 80068c8:	20000014 	.word	0x20000014
 80068cc:	08009704 	.word	0x08009704
 80068d0:	08009724 	.word	0x08009724
 80068d4:	080096e4 	.word	0x080096e4

080068d8 <quorem>:
 80068d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	6903      	ldr	r3, [r0, #16]
 80068de:	690c      	ldr	r4, [r1, #16]
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	4607      	mov	r7, r0
 80068e4:	f2c0 8081 	blt.w	80069ea <quorem+0x112>
 80068e8:	3c01      	subs	r4, #1
 80068ea:	f101 0814 	add.w	r8, r1, #20
 80068ee:	f100 0514 	add.w	r5, r0, #20
 80068f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006900:	3301      	adds	r3, #1
 8006902:	429a      	cmp	r2, r3
 8006904:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800690c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006910:	d331      	bcc.n	8006976 <quorem+0x9e>
 8006912:	f04f 0e00 	mov.w	lr, #0
 8006916:	4640      	mov	r0, r8
 8006918:	46ac      	mov	ip, r5
 800691a:	46f2      	mov	sl, lr
 800691c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006920:	b293      	uxth	r3, r2
 8006922:	fb06 e303 	mla	r3, r6, r3, lr
 8006926:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800692a:	b29b      	uxth	r3, r3
 800692c:	ebaa 0303 	sub.w	r3, sl, r3
 8006930:	f8dc a000 	ldr.w	sl, [ip]
 8006934:	0c12      	lsrs	r2, r2, #16
 8006936:	fa13 f38a 	uxtah	r3, r3, sl
 800693a:	fb06 e202 	mla	r2, r6, r2, lr
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	9b00      	ldr	r3, [sp, #0]
 8006942:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006946:	b292      	uxth	r2, r2
 8006948:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800694c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006950:	f8bd 3000 	ldrh.w	r3, [sp]
 8006954:	4581      	cmp	r9, r0
 8006956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800695a:	f84c 3b04 	str.w	r3, [ip], #4
 800695e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006962:	d2db      	bcs.n	800691c <quorem+0x44>
 8006964:	f855 300b 	ldr.w	r3, [r5, fp]
 8006968:	b92b      	cbnz	r3, 8006976 <quorem+0x9e>
 800696a:	9b01      	ldr	r3, [sp, #4]
 800696c:	3b04      	subs	r3, #4
 800696e:	429d      	cmp	r5, r3
 8006970:	461a      	mov	r2, r3
 8006972:	d32e      	bcc.n	80069d2 <quorem+0xfa>
 8006974:	613c      	str	r4, [r7, #16]
 8006976:	4638      	mov	r0, r7
 8006978:	f001 fae8 	bl	8007f4c <__mcmp>
 800697c:	2800      	cmp	r0, #0
 800697e:	db24      	blt.n	80069ca <quorem+0xf2>
 8006980:	3601      	adds	r6, #1
 8006982:	4628      	mov	r0, r5
 8006984:	f04f 0c00 	mov.w	ip, #0
 8006988:	f858 2b04 	ldr.w	r2, [r8], #4
 800698c:	f8d0 e000 	ldr.w	lr, [r0]
 8006990:	b293      	uxth	r3, r2
 8006992:	ebac 0303 	sub.w	r3, ip, r3
 8006996:	0c12      	lsrs	r2, r2, #16
 8006998:	fa13 f38e 	uxtah	r3, r3, lr
 800699c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069aa:	45c1      	cmp	r9, r8
 80069ac:	f840 3b04 	str.w	r3, [r0], #4
 80069b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069b4:	d2e8      	bcs.n	8006988 <quorem+0xb0>
 80069b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069be:	b922      	cbnz	r2, 80069ca <quorem+0xf2>
 80069c0:	3b04      	subs	r3, #4
 80069c2:	429d      	cmp	r5, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	d30a      	bcc.n	80069de <quorem+0x106>
 80069c8:	613c      	str	r4, [r7, #16]
 80069ca:	4630      	mov	r0, r6
 80069cc:	b003      	add	sp, #12
 80069ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	3b04      	subs	r3, #4
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	d1cc      	bne.n	8006974 <quorem+0x9c>
 80069da:	3c01      	subs	r4, #1
 80069dc:	e7c7      	b.n	800696e <quorem+0x96>
 80069de:	6812      	ldr	r2, [r2, #0]
 80069e0:	3b04      	subs	r3, #4
 80069e2:	2a00      	cmp	r2, #0
 80069e4:	d1f0      	bne.n	80069c8 <quorem+0xf0>
 80069e6:	3c01      	subs	r4, #1
 80069e8:	e7eb      	b.n	80069c2 <quorem+0xea>
 80069ea:	2000      	movs	r0, #0
 80069ec:	e7ee      	b.n	80069cc <quorem+0xf4>
	...

080069f0 <_dtoa_r>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	ed2d 8b04 	vpush	{d8-d9}
 80069f8:	ec57 6b10 	vmov	r6, r7, d0
 80069fc:	b093      	sub	sp, #76	; 0x4c
 80069fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a04:	9106      	str	r1, [sp, #24]
 8006a06:	ee10 aa10 	vmov	sl, s0
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a10:	46bb      	mov	fp, r7
 8006a12:	b975      	cbnz	r5, 8006a32 <_dtoa_r+0x42>
 8006a14:	2010      	movs	r0, #16
 8006a16:	f7ff f871 	bl	8005afc <malloc>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6260      	str	r0, [r4, #36]	; 0x24
 8006a1e:	b920      	cbnz	r0, 8006a2a <_dtoa_r+0x3a>
 8006a20:	4ba7      	ldr	r3, [pc, #668]	; (8006cc0 <_dtoa_r+0x2d0>)
 8006a22:	21ea      	movs	r1, #234	; 0xea
 8006a24:	48a7      	ldr	r0, [pc, #668]	; (8006cc4 <_dtoa_r+0x2d4>)
 8006a26:	f001 fefd 	bl	8008824 <__assert_func>
 8006a2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a2e:	6005      	str	r5, [r0, #0]
 8006a30:	60c5      	str	r5, [r0, #12]
 8006a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a34:	6819      	ldr	r1, [r3, #0]
 8006a36:	b151      	cbz	r1, 8006a4e <_dtoa_r+0x5e>
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	604a      	str	r2, [r1, #4]
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4093      	lsls	r3, r2
 8006a40:	608b      	str	r3, [r1, #8]
 8006a42:	4620      	mov	r0, r4
 8006a44:	f001 f840 	bl	8007ac8 <_Bfree>
 8006a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	1e3b      	subs	r3, r7, #0
 8006a50:	bfaa      	itet	ge
 8006a52:	2300      	movge	r3, #0
 8006a54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006a58:	f8c8 3000 	strge.w	r3, [r8]
 8006a5c:	4b9a      	ldr	r3, [pc, #616]	; (8006cc8 <_dtoa_r+0x2d8>)
 8006a5e:	bfbc      	itt	lt
 8006a60:	2201      	movlt	r2, #1
 8006a62:	f8c8 2000 	strlt.w	r2, [r8]
 8006a66:	ea33 030b 	bics.w	r3, r3, fp
 8006a6a:	d11b      	bne.n	8006aa4 <_dtoa_r+0xb4>
 8006a6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a78:	4333      	orrs	r3, r6
 8006a7a:	f000 8592 	beq.w	80075a2 <_dtoa_r+0xbb2>
 8006a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a80:	b963      	cbnz	r3, 8006a9c <_dtoa_r+0xac>
 8006a82:	4b92      	ldr	r3, [pc, #584]	; (8006ccc <_dtoa_r+0x2dc>)
 8006a84:	e022      	b.n	8006acc <_dtoa_r+0xdc>
 8006a86:	4b92      	ldr	r3, [pc, #584]	; (8006cd0 <_dtoa_r+0x2e0>)
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	9801      	ldr	r0, [sp, #4]
 8006a92:	b013      	add	sp, #76	; 0x4c
 8006a94:	ecbd 8b04 	vpop	{d8-d9}
 8006a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9c:	4b8b      	ldr	r3, [pc, #556]	; (8006ccc <_dtoa_r+0x2dc>)
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	3303      	adds	r3, #3
 8006aa2:	e7f3      	b.n	8006a8c <_dtoa_r+0x9c>
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4650      	mov	r0, sl
 8006aaa:	4659      	mov	r1, fp
 8006aac:	f7f9 ffe4 	bl	8000a78 <__aeabi_dcmpeq>
 8006ab0:	ec4b ab19 	vmov	d9, sl, fp
 8006ab4:	4680      	mov	r8, r0
 8006ab6:	b158      	cbz	r0, 8006ad0 <_dtoa_r+0xe0>
 8006ab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aba:	2301      	movs	r3, #1
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 856b 	beq.w	800759c <_dtoa_r+0xbac>
 8006ac6:	4883      	ldr	r0, [pc, #524]	; (8006cd4 <_dtoa_r+0x2e4>)
 8006ac8:	6018      	str	r0, [r3, #0]
 8006aca:	1e43      	subs	r3, r0, #1
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	e7df      	b.n	8006a90 <_dtoa_r+0xa0>
 8006ad0:	ec4b ab10 	vmov	d0, sl, fp
 8006ad4:	aa10      	add	r2, sp, #64	; 0x40
 8006ad6:	a911      	add	r1, sp, #68	; 0x44
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f001 fadd 	bl	8008098 <__d2b>
 8006ade:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006ae2:	ee08 0a10 	vmov	s16, r0
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	f000 8084 	beq.w	8006bf4 <_dtoa_r+0x204>
 8006aec:	ee19 3a90 	vmov	r3, s19
 8006af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006af4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006af8:	4656      	mov	r6, sl
 8006afa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006afe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006b06:	4b74      	ldr	r3, [pc, #464]	; (8006cd8 <_dtoa_r+0x2e8>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	f7f9 fb93 	bl	8000238 <__aeabi_dsub>
 8006b12:	a365      	add	r3, pc, #404	; (adr r3, 8006ca8 <_dtoa_r+0x2b8>)
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f7f9 fd46 	bl	80005a8 <__aeabi_dmul>
 8006b1c:	a364      	add	r3, pc, #400	; (adr r3, 8006cb0 <_dtoa_r+0x2c0>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f7f9 fb8b 	bl	800023c <__adddf3>
 8006b26:	4606      	mov	r6, r0
 8006b28:	4628      	mov	r0, r5
 8006b2a:	460f      	mov	r7, r1
 8006b2c:	f7f9 fcd2 	bl	80004d4 <__aeabi_i2d>
 8006b30:	a361      	add	r3, pc, #388	; (adr r3, 8006cb8 <_dtoa_r+0x2c8>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fd37 	bl	80005a8 <__aeabi_dmul>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4630      	mov	r0, r6
 8006b40:	4639      	mov	r1, r7
 8006b42:	f7f9 fb7b 	bl	800023c <__adddf3>
 8006b46:	4606      	mov	r6, r0
 8006b48:	460f      	mov	r7, r1
 8006b4a:	f7f9 ffdd 	bl	8000b08 <__aeabi_d2iz>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	9000      	str	r0, [sp, #0]
 8006b52:	2300      	movs	r3, #0
 8006b54:	4630      	mov	r0, r6
 8006b56:	4639      	mov	r1, r7
 8006b58:	f7f9 ff98 	bl	8000a8c <__aeabi_dcmplt>
 8006b5c:	b150      	cbz	r0, 8006b74 <_dtoa_r+0x184>
 8006b5e:	9800      	ldr	r0, [sp, #0]
 8006b60:	f7f9 fcb8 	bl	80004d4 <__aeabi_i2d>
 8006b64:	4632      	mov	r2, r6
 8006b66:	463b      	mov	r3, r7
 8006b68:	f7f9 ff86 	bl	8000a78 <__aeabi_dcmpeq>
 8006b6c:	b910      	cbnz	r0, 8006b74 <_dtoa_r+0x184>
 8006b6e:	9b00      	ldr	r3, [sp, #0]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	9b00      	ldr	r3, [sp, #0]
 8006b76:	2b16      	cmp	r3, #22
 8006b78:	d85a      	bhi.n	8006c30 <_dtoa_r+0x240>
 8006b7a:	9a00      	ldr	r2, [sp, #0]
 8006b7c:	4b57      	ldr	r3, [pc, #348]	; (8006cdc <_dtoa_r+0x2ec>)
 8006b7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	ec51 0b19 	vmov	r0, r1, d9
 8006b8a:	f7f9 ff7f 	bl	8000a8c <__aeabi_dcmplt>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d050      	beq.n	8006c34 <_dtoa_r+0x244>
 8006b92:	9b00      	ldr	r3, [sp, #0]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b9e:	1b5d      	subs	r5, r3, r5
 8006ba0:	1e6b      	subs	r3, r5, #1
 8006ba2:	9305      	str	r3, [sp, #20]
 8006ba4:	bf45      	ittet	mi
 8006ba6:	f1c5 0301 	rsbmi	r3, r5, #1
 8006baa:	9304      	strmi	r3, [sp, #16]
 8006bac:	2300      	movpl	r3, #0
 8006bae:	2300      	movmi	r3, #0
 8006bb0:	bf4c      	ite	mi
 8006bb2:	9305      	strmi	r3, [sp, #20]
 8006bb4:	9304      	strpl	r3, [sp, #16]
 8006bb6:	9b00      	ldr	r3, [sp, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	db3d      	blt.n	8006c38 <_dtoa_r+0x248>
 8006bbc:	9b05      	ldr	r3, [sp, #20]
 8006bbe:	9a00      	ldr	r2, [sp, #0]
 8006bc0:	920a      	str	r2, [sp, #40]	; 0x28
 8006bc2:	4413      	add	r3, r2
 8006bc4:	9305      	str	r3, [sp, #20]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9307      	str	r3, [sp, #28]
 8006bca:	9b06      	ldr	r3, [sp, #24]
 8006bcc:	2b09      	cmp	r3, #9
 8006bce:	f200 8089 	bhi.w	8006ce4 <_dtoa_r+0x2f4>
 8006bd2:	2b05      	cmp	r3, #5
 8006bd4:	bfc4      	itt	gt
 8006bd6:	3b04      	subgt	r3, #4
 8006bd8:	9306      	strgt	r3, [sp, #24]
 8006bda:	9b06      	ldr	r3, [sp, #24]
 8006bdc:	f1a3 0302 	sub.w	r3, r3, #2
 8006be0:	bfcc      	ite	gt
 8006be2:	2500      	movgt	r5, #0
 8006be4:	2501      	movle	r5, #1
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	f200 8087 	bhi.w	8006cfa <_dtoa_r+0x30a>
 8006bec:	e8df f003 	tbb	[pc, r3]
 8006bf0:	59383a2d 	.word	0x59383a2d
 8006bf4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006bf8:	441d      	add	r5, r3
 8006bfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	bfc1      	itttt	gt
 8006c02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006c0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c12:	bfda      	itte	le
 8006c14:	f1c3 0320 	rsble	r3, r3, #32
 8006c18:	fa06 f003 	lslle.w	r0, r6, r3
 8006c1c:	4318      	orrgt	r0, r3
 8006c1e:	f7f9 fc49 	bl	80004b4 <__aeabi_ui2d>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4606      	mov	r6, r0
 8006c26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c2a:	3d01      	subs	r5, #1
 8006c2c:	930e      	str	r3, [sp, #56]	; 0x38
 8006c2e:	e76a      	b.n	8006b06 <_dtoa_r+0x116>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e7b2      	b.n	8006b9a <_dtoa_r+0x1aa>
 8006c34:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c36:	e7b1      	b.n	8006b9c <_dtoa_r+0x1ac>
 8006c38:	9b04      	ldr	r3, [sp, #16]
 8006c3a:	9a00      	ldr	r2, [sp, #0]
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	4253      	negs	r3, r2
 8006c42:	9307      	str	r3, [sp, #28]
 8006c44:	2300      	movs	r3, #0
 8006c46:	930a      	str	r3, [sp, #40]	; 0x28
 8006c48:	e7bf      	b.n	8006bca <_dtoa_r+0x1da>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	9308      	str	r3, [sp, #32]
 8006c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	dc55      	bgt.n	8006d00 <_dtoa_r+0x310>
 8006c54:	2301      	movs	r3, #1
 8006c56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c5e:	e00c      	b.n	8006c7a <_dtoa_r+0x28a>
 8006c60:	2301      	movs	r3, #1
 8006c62:	e7f3      	b.n	8006c4c <_dtoa_r+0x25c>
 8006c64:	2300      	movs	r3, #0
 8006c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c68:	9308      	str	r3, [sp, #32]
 8006c6a:	9b00      	ldr	r3, [sp, #0]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	9302      	str	r3, [sp, #8]
 8006c70:	3301      	adds	r3, #1
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	9303      	str	r3, [sp, #12]
 8006c76:	bfb8      	it	lt
 8006c78:	2301      	movlt	r3, #1
 8006c7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	6042      	str	r2, [r0, #4]
 8006c80:	2204      	movs	r2, #4
 8006c82:	f102 0614 	add.w	r6, r2, #20
 8006c86:	429e      	cmp	r6, r3
 8006c88:	6841      	ldr	r1, [r0, #4]
 8006c8a:	d93d      	bls.n	8006d08 <_dtoa_r+0x318>
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 fedb 	bl	8007a48 <_Balloc>
 8006c92:	9001      	str	r0, [sp, #4]
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d13b      	bne.n	8006d10 <_dtoa_r+0x320>
 8006c98:	4b11      	ldr	r3, [pc, #68]	; (8006ce0 <_dtoa_r+0x2f0>)
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ca0:	e6c0      	b.n	8006a24 <_dtoa_r+0x34>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e7df      	b.n	8006c66 <_dtoa_r+0x276>
 8006ca6:	bf00      	nop
 8006ca8:	636f4361 	.word	0x636f4361
 8006cac:	3fd287a7 	.word	0x3fd287a7
 8006cb0:	8b60c8b3 	.word	0x8b60c8b3
 8006cb4:	3fc68a28 	.word	0x3fc68a28
 8006cb8:	509f79fb 	.word	0x509f79fb
 8006cbc:	3fd34413 	.word	0x3fd34413
 8006cc0:	08009661 	.word	0x08009661
 8006cc4:	08009678 	.word	0x08009678
 8006cc8:	7ff00000 	.word	0x7ff00000
 8006ccc:	0800965d 	.word	0x0800965d
 8006cd0:	08009654 	.word	0x08009654
 8006cd4:	08009631 	.word	0x08009631
 8006cd8:	3ff80000 	.word	0x3ff80000
 8006cdc:	080097c8 	.word	0x080097c8
 8006ce0:	080096d3 	.word	0x080096d3
 8006ce4:	2501      	movs	r5, #1
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9306      	str	r3, [sp, #24]
 8006cea:	9508      	str	r5, [sp, #32]
 8006cec:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2312      	movs	r3, #18
 8006cf8:	e7b0      	b.n	8006c5c <_dtoa_r+0x26c>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	9308      	str	r3, [sp, #32]
 8006cfe:	e7f5      	b.n	8006cec <_dtoa_r+0x2fc>
 8006d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d06:	e7b8      	b.n	8006c7a <_dtoa_r+0x28a>
 8006d08:	3101      	adds	r1, #1
 8006d0a:	6041      	str	r1, [r0, #4]
 8006d0c:	0052      	lsls	r2, r2, #1
 8006d0e:	e7b8      	b.n	8006c82 <_dtoa_r+0x292>
 8006d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d12:	9a01      	ldr	r2, [sp, #4]
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	9b03      	ldr	r3, [sp, #12]
 8006d18:	2b0e      	cmp	r3, #14
 8006d1a:	f200 809d 	bhi.w	8006e58 <_dtoa_r+0x468>
 8006d1e:	2d00      	cmp	r5, #0
 8006d20:	f000 809a 	beq.w	8006e58 <_dtoa_r+0x468>
 8006d24:	9b00      	ldr	r3, [sp, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dd32      	ble.n	8006d90 <_dtoa_r+0x3a0>
 8006d2a:	4ab7      	ldr	r2, [pc, #732]	; (8007008 <_dtoa_r+0x618>)
 8006d2c:	f003 030f 	and.w	r3, r3, #15
 8006d30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d38:	9b00      	ldr	r3, [sp, #0]
 8006d3a:	05d8      	lsls	r0, r3, #23
 8006d3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006d40:	d516      	bpl.n	8006d70 <_dtoa_r+0x380>
 8006d42:	4bb2      	ldr	r3, [pc, #712]	; (800700c <_dtoa_r+0x61c>)
 8006d44:	ec51 0b19 	vmov	r0, r1, d9
 8006d48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d4c:	f7f9 fd56 	bl	80007fc <__aeabi_ddiv>
 8006d50:	f007 070f 	and.w	r7, r7, #15
 8006d54:	4682      	mov	sl, r0
 8006d56:	468b      	mov	fp, r1
 8006d58:	2503      	movs	r5, #3
 8006d5a:	4eac      	ldr	r6, [pc, #688]	; (800700c <_dtoa_r+0x61c>)
 8006d5c:	b957      	cbnz	r7, 8006d74 <_dtoa_r+0x384>
 8006d5e:	4642      	mov	r2, r8
 8006d60:	464b      	mov	r3, r9
 8006d62:	4650      	mov	r0, sl
 8006d64:	4659      	mov	r1, fp
 8006d66:	f7f9 fd49 	bl	80007fc <__aeabi_ddiv>
 8006d6a:	4682      	mov	sl, r0
 8006d6c:	468b      	mov	fp, r1
 8006d6e:	e028      	b.n	8006dc2 <_dtoa_r+0x3d2>
 8006d70:	2502      	movs	r5, #2
 8006d72:	e7f2      	b.n	8006d5a <_dtoa_r+0x36a>
 8006d74:	07f9      	lsls	r1, r7, #31
 8006d76:	d508      	bpl.n	8006d8a <_dtoa_r+0x39a>
 8006d78:	4640      	mov	r0, r8
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d80:	f7f9 fc12 	bl	80005a8 <__aeabi_dmul>
 8006d84:	3501      	adds	r5, #1
 8006d86:	4680      	mov	r8, r0
 8006d88:	4689      	mov	r9, r1
 8006d8a:	107f      	asrs	r7, r7, #1
 8006d8c:	3608      	adds	r6, #8
 8006d8e:	e7e5      	b.n	8006d5c <_dtoa_r+0x36c>
 8006d90:	f000 809b 	beq.w	8006eca <_dtoa_r+0x4da>
 8006d94:	9b00      	ldr	r3, [sp, #0]
 8006d96:	4f9d      	ldr	r7, [pc, #628]	; (800700c <_dtoa_r+0x61c>)
 8006d98:	425e      	negs	r6, r3
 8006d9a:	4b9b      	ldr	r3, [pc, #620]	; (8007008 <_dtoa_r+0x618>)
 8006d9c:	f006 020f 	and.w	r2, r6, #15
 8006da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	ec51 0b19 	vmov	r0, r1, d9
 8006dac:	f7f9 fbfc 	bl	80005a8 <__aeabi_dmul>
 8006db0:	1136      	asrs	r6, r6, #4
 8006db2:	4682      	mov	sl, r0
 8006db4:	468b      	mov	fp, r1
 8006db6:	2300      	movs	r3, #0
 8006db8:	2502      	movs	r5, #2
 8006dba:	2e00      	cmp	r6, #0
 8006dbc:	d17a      	bne.n	8006eb4 <_dtoa_r+0x4c4>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1d3      	bne.n	8006d6a <_dtoa_r+0x37a>
 8006dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 8082 	beq.w	8006ece <_dtoa_r+0x4de>
 8006dca:	4b91      	ldr	r3, [pc, #580]	; (8007010 <_dtoa_r+0x620>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4650      	mov	r0, sl
 8006dd0:	4659      	mov	r1, fp
 8006dd2:	f7f9 fe5b 	bl	8000a8c <__aeabi_dcmplt>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d079      	beq.n	8006ece <_dtoa_r+0x4de>
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d076      	beq.n	8006ece <_dtoa_r+0x4de>
 8006de0:	9b02      	ldr	r3, [sp, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dd36      	ble.n	8006e54 <_dtoa_r+0x464>
 8006de6:	9b00      	ldr	r3, [sp, #0]
 8006de8:	4650      	mov	r0, sl
 8006dea:	4659      	mov	r1, fp
 8006dec:	1e5f      	subs	r7, r3, #1
 8006dee:	2200      	movs	r2, #0
 8006df0:	4b88      	ldr	r3, [pc, #544]	; (8007014 <_dtoa_r+0x624>)
 8006df2:	f7f9 fbd9 	bl	80005a8 <__aeabi_dmul>
 8006df6:	9e02      	ldr	r6, [sp, #8]
 8006df8:	4682      	mov	sl, r0
 8006dfa:	468b      	mov	fp, r1
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f7f9 fb68 	bl	80004d4 <__aeabi_i2d>
 8006e04:	4652      	mov	r2, sl
 8006e06:	465b      	mov	r3, fp
 8006e08:	f7f9 fbce 	bl	80005a8 <__aeabi_dmul>
 8006e0c:	4b82      	ldr	r3, [pc, #520]	; (8007018 <_dtoa_r+0x628>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f7f9 fa14 	bl	800023c <__adddf3>
 8006e14:	46d0      	mov	r8, sl
 8006e16:	46d9      	mov	r9, fp
 8006e18:	4682      	mov	sl, r0
 8006e1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006e1e:	2e00      	cmp	r6, #0
 8006e20:	d158      	bne.n	8006ed4 <_dtoa_r+0x4e4>
 8006e22:	4b7e      	ldr	r3, [pc, #504]	; (800701c <_dtoa_r+0x62c>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	4640      	mov	r0, r8
 8006e28:	4649      	mov	r1, r9
 8006e2a:	f7f9 fa05 	bl	8000238 <__aeabi_dsub>
 8006e2e:	4652      	mov	r2, sl
 8006e30:	465b      	mov	r3, fp
 8006e32:	4680      	mov	r8, r0
 8006e34:	4689      	mov	r9, r1
 8006e36:	f7f9 fe47 	bl	8000ac8 <__aeabi_dcmpgt>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f040 8295 	bne.w	800736a <_dtoa_r+0x97a>
 8006e40:	4652      	mov	r2, sl
 8006e42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e46:	4640      	mov	r0, r8
 8006e48:	4649      	mov	r1, r9
 8006e4a:	f7f9 fe1f 	bl	8000a8c <__aeabi_dcmplt>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f040 8289 	bne.w	8007366 <_dtoa_r+0x976>
 8006e54:	ec5b ab19 	vmov	sl, fp, d9
 8006e58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f2c0 8148 	blt.w	80070f0 <_dtoa_r+0x700>
 8006e60:	9a00      	ldr	r2, [sp, #0]
 8006e62:	2a0e      	cmp	r2, #14
 8006e64:	f300 8144 	bgt.w	80070f0 <_dtoa_r+0x700>
 8006e68:	4b67      	ldr	r3, [pc, #412]	; (8007008 <_dtoa_r+0x618>)
 8006e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f280 80d5 	bge.w	8007024 <_dtoa_r+0x634>
 8006e7a:	9b03      	ldr	r3, [sp, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f300 80d1 	bgt.w	8007024 <_dtoa_r+0x634>
 8006e82:	f040 826f 	bne.w	8007364 <_dtoa_r+0x974>
 8006e86:	4b65      	ldr	r3, [pc, #404]	; (800701c <_dtoa_r+0x62c>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	f7f9 fb8b 	bl	80005a8 <__aeabi_dmul>
 8006e92:	4652      	mov	r2, sl
 8006e94:	465b      	mov	r3, fp
 8006e96:	f7f9 fe0d 	bl	8000ab4 <__aeabi_dcmpge>
 8006e9a:	9e03      	ldr	r6, [sp, #12]
 8006e9c:	4637      	mov	r7, r6
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	f040 8245 	bne.w	800732e <_dtoa_r+0x93e>
 8006ea4:	9d01      	ldr	r5, [sp, #4]
 8006ea6:	2331      	movs	r3, #49	; 0x31
 8006ea8:	f805 3b01 	strb.w	r3, [r5], #1
 8006eac:	9b00      	ldr	r3, [sp, #0]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	e240      	b.n	8007336 <_dtoa_r+0x946>
 8006eb4:	07f2      	lsls	r2, r6, #31
 8006eb6:	d505      	bpl.n	8006ec4 <_dtoa_r+0x4d4>
 8006eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ebc:	f7f9 fb74 	bl	80005a8 <__aeabi_dmul>
 8006ec0:	3501      	adds	r5, #1
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	1076      	asrs	r6, r6, #1
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	e777      	b.n	8006dba <_dtoa_r+0x3ca>
 8006eca:	2502      	movs	r5, #2
 8006ecc:	e779      	b.n	8006dc2 <_dtoa_r+0x3d2>
 8006ece:	9f00      	ldr	r7, [sp, #0]
 8006ed0:	9e03      	ldr	r6, [sp, #12]
 8006ed2:	e794      	b.n	8006dfe <_dtoa_r+0x40e>
 8006ed4:	9901      	ldr	r1, [sp, #4]
 8006ed6:	4b4c      	ldr	r3, [pc, #304]	; (8007008 <_dtoa_r+0x618>)
 8006ed8:	4431      	add	r1, r6
 8006eda:	910d      	str	r1, [sp, #52]	; 0x34
 8006edc:	9908      	ldr	r1, [sp, #32]
 8006ede:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ee2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ee6:	2900      	cmp	r1, #0
 8006ee8:	d043      	beq.n	8006f72 <_dtoa_r+0x582>
 8006eea:	494d      	ldr	r1, [pc, #308]	; (8007020 <_dtoa_r+0x630>)
 8006eec:	2000      	movs	r0, #0
 8006eee:	f7f9 fc85 	bl	80007fc <__aeabi_ddiv>
 8006ef2:	4652      	mov	r2, sl
 8006ef4:	465b      	mov	r3, fp
 8006ef6:	f7f9 f99f 	bl	8000238 <__aeabi_dsub>
 8006efa:	9d01      	ldr	r5, [sp, #4]
 8006efc:	4682      	mov	sl, r0
 8006efe:	468b      	mov	fp, r1
 8006f00:	4649      	mov	r1, r9
 8006f02:	4640      	mov	r0, r8
 8006f04:	f7f9 fe00 	bl	8000b08 <__aeabi_d2iz>
 8006f08:	4606      	mov	r6, r0
 8006f0a:	f7f9 fae3 	bl	80004d4 <__aeabi_i2d>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4640      	mov	r0, r8
 8006f14:	4649      	mov	r1, r9
 8006f16:	f7f9 f98f 	bl	8000238 <__aeabi_dsub>
 8006f1a:	3630      	adds	r6, #48	; 0x30
 8006f1c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f20:	4652      	mov	r2, sl
 8006f22:	465b      	mov	r3, fp
 8006f24:	4680      	mov	r8, r0
 8006f26:	4689      	mov	r9, r1
 8006f28:	f7f9 fdb0 	bl	8000a8c <__aeabi_dcmplt>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d163      	bne.n	8006ff8 <_dtoa_r+0x608>
 8006f30:	4642      	mov	r2, r8
 8006f32:	464b      	mov	r3, r9
 8006f34:	4936      	ldr	r1, [pc, #216]	; (8007010 <_dtoa_r+0x620>)
 8006f36:	2000      	movs	r0, #0
 8006f38:	f7f9 f97e 	bl	8000238 <__aeabi_dsub>
 8006f3c:	4652      	mov	r2, sl
 8006f3e:	465b      	mov	r3, fp
 8006f40:	f7f9 fda4 	bl	8000a8c <__aeabi_dcmplt>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f040 80b5 	bne.w	80070b4 <_dtoa_r+0x6c4>
 8006f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f4c:	429d      	cmp	r5, r3
 8006f4e:	d081      	beq.n	8006e54 <_dtoa_r+0x464>
 8006f50:	4b30      	ldr	r3, [pc, #192]	; (8007014 <_dtoa_r+0x624>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	4650      	mov	r0, sl
 8006f56:	4659      	mov	r1, fp
 8006f58:	f7f9 fb26 	bl	80005a8 <__aeabi_dmul>
 8006f5c:	4b2d      	ldr	r3, [pc, #180]	; (8007014 <_dtoa_r+0x624>)
 8006f5e:	4682      	mov	sl, r0
 8006f60:	468b      	mov	fp, r1
 8006f62:	4640      	mov	r0, r8
 8006f64:	4649      	mov	r1, r9
 8006f66:	2200      	movs	r2, #0
 8006f68:	f7f9 fb1e 	bl	80005a8 <__aeabi_dmul>
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	4689      	mov	r9, r1
 8006f70:	e7c6      	b.n	8006f00 <_dtoa_r+0x510>
 8006f72:	4650      	mov	r0, sl
 8006f74:	4659      	mov	r1, fp
 8006f76:	f7f9 fb17 	bl	80005a8 <__aeabi_dmul>
 8006f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f7c:	9d01      	ldr	r5, [sp, #4]
 8006f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f80:	4682      	mov	sl, r0
 8006f82:	468b      	mov	fp, r1
 8006f84:	4649      	mov	r1, r9
 8006f86:	4640      	mov	r0, r8
 8006f88:	f7f9 fdbe 	bl	8000b08 <__aeabi_d2iz>
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	f7f9 faa1 	bl	80004d4 <__aeabi_i2d>
 8006f92:	3630      	adds	r6, #48	; 0x30
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4640      	mov	r0, r8
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	f7f9 f94c 	bl	8000238 <__aeabi_dsub>
 8006fa0:	f805 6b01 	strb.w	r6, [r5], #1
 8006fa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	4680      	mov	r8, r0
 8006faa:	4689      	mov	r9, r1
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	d124      	bne.n	8006ffc <_dtoa_r+0x60c>
 8006fb2:	4b1b      	ldr	r3, [pc, #108]	; (8007020 <_dtoa_r+0x630>)
 8006fb4:	4650      	mov	r0, sl
 8006fb6:	4659      	mov	r1, fp
 8006fb8:	f7f9 f940 	bl	800023c <__adddf3>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4640      	mov	r0, r8
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	f7f9 fd80 	bl	8000ac8 <__aeabi_dcmpgt>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d173      	bne.n	80070b4 <_dtoa_r+0x6c4>
 8006fcc:	4652      	mov	r2, sl
 8006fce:	465b      	mov	r3, fp
 8006fd0:	4913      	ldr	r1, [pc, #76]	; (8007020 <_dtoa_r+0x630>)
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	f7f9 f930 	bl	8000238 <__aeabi_dsub>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4640      	mov	r0, r8
 8006fde:	4649      	mov	r1, r9
 8006fe0:	f7f9 fd54 	bl	8000a8c <__aeabi_dcmplt>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	f43f af35 	beq.w	8006e54 <_dtoa_r+0x464>
 8006fea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fec:	1e6b      	subs	r3, r5, #1
 8006fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ff0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ff4:	2b30      	cmp	r3, #48	; 0x30
 8006ff6:	d0f8      	beq.n	8006fea <_dtoa_r+0x5fa>
 8006ff8:	9700      	str	r7, [sp, #0]
 8006ffa:	e049      	b.n	8007090 <_dtoa_r+0x6a0>
 8006ffc:	4b05      	ldr	r3, [pc, #20]	; (8007014 <_dtoa_r+0x624>)
 8006ffe:	f7f9 fad3 	bl	80005a8 <__aeabi_dmul>
 8007002:	4680      	mov	r8, r0
 8007004:	4689      	mov	r9, r1
 8007006:	e7bd      	b.n	8006f84 <_dtoa_r+0x594>
 8007008:	080097c8 	.word	0x080097c8
 800700c:	080097a0 	.word	0x080097a0
 8007010:	3ff00000 	.word	0x3ff00000
 8007014:	40240000 	.word	0x40240000
 8007018:	401c0000 	.word	0x401c0000
 800701c:	40140000 	.word	0x40140000
 8007020:	3fe00000 	.word	0x3fe00000
 8007024:	9d01      	ldr	r5, [sp, #4]
 8007026:	4656      	mov	r6, sl
 8007028:	465f      	mov	r7, fp
 800702a:	4642      	mov	r2, r8
 800702c:	464b      	mov	r3, r9
 800702e:	4630      	mov	r0, r6
 8007030:	4639      	mov	r1, r7
 8007032:	f7f9 fbe3 	bl	80007fc <__aeabi_ddiv>
 8007036:	f7f9 fd67 	bl	8000b08 <__aeabi_d2iz>
 800703a:	4682      	mov	sl, r0
 800703c:	f7f9 fa4a 	bl	80004d4 <__aeabi_i2d>
 8007040:	4642      	mov	r2, r8
 8007042:	464b      	mov	r3, r9
 8007044:	f7f9 fab0 	bl	80005a8 <__aeabi_dmul>
 8007048:	4602      	mov	r2, r0
 800704a:	460b      	mov	r3, r1
 800704c:	4630      	mov	r0, r6
 800704e:	4639      	mov	r1, r7
 8007050:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007054:	f7f9 f8f0 	bl	8000238 <__aeabi_dsub>
 8007058:	f805 6b01 	strb.w	r6, [r5], #1
 800705c:	9e01      	ldr	r6, [sp, #4]
 800705e:	9f03      	ldr	r7, [sp, #12]
 8007060:	1bae      	subs	r6, r5, r6
 8007062:	42b7      	cmp	r7, r6
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	d135      	bne.n	80070d6 <_dtoa_r+0x6e6>
 800706a:	f7f9 f8e7 	bl	800023c <__adddf3>
 800706e:	4642      	mov	r2, r8
 8007070:	464b      	mov	r3, r9
 8007072:	4606      	mov	r6, r0
 8007074:	460f      	mov	r7, r1
 8007076:	f7f9 fd27 	bl	8000ac8 <__aeabi_dcmpgt>
 800707a:	b9d0      	cbnz	r0, 80070b2 <_dtoa_r+0x6c2>
 800707c:	4642      	mov	r2, r8
 800707e:	464b      	mov	r3, r9
 8007080:	4630      	mov	r0, r6
 8007082:	4639      	mov	r1, r7
 8007084:	f7f9 fcf8 	bl	8000a78 <__aeabi_dcmpeq>
 8007088:	b110      	cbz	r0, 8007090 <_dtoa_r+0x6a0>
 800708a:	f01a 0f01 	tst.w	sl, #1
 800708e:	d110      	bne.n	80070b2 <_dtoa_r+0x6c2>
 8007090:	4620      	mov	r0, r4
 8007092:	ee18 1a10 	vmov	r1, s16
 8007096:	f000 fd17 	bl	8007ac8 <_Bfree>
 800709a:	2300      	movs	r3, #0
 800709c:	9800      	ldr	r0, [sp, #0]
 800709e:	702b      	strb	r3, [r5, #0]
 80070a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070a2:	3001      	adds	r0, #1
 80070a4:	6018      	str	r0, [r3, #0]
 80070a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f43f acf1 	beq.w	8006a90 <_dtoa_r+0xa0>
 80070ae:	601d      	str	r5, [r3, #0]
 80070b0:	e4ee      	b.n	8006a90 <_dtoa_r+0xa0>
 80070b2:	9f00      	ldr	r7, [sp, #0]
 80070b4:	462b      	mov	r3, r5
 80070b6:	461d      	mov	r5, r3
 80070b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070bc:	2a39      	cmp	r2, #57	; 0x39
 80070be:	d106      	bne.n	80070ce <_dtoa_r+0x6de>
 80070c0:	9a01      	ldr	r2, [sp, #4]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d1f7      	bne.n	80070b6 <_dtoa_r+0x6c6>
 80070c6:	9901      	ldr	r1, [sp, #4]
 80070c8:	2230      	movs	r2, #48	; 0x30
 80070ca:	3701      	adds	r7, #1
 80070cc:	700a      	strb	r2, [r1, #0]
 80070ce:	781a      	ldrb	r2, [r3, #0]
 80070d0:	3201      	adds	r2, #1
 80070d2:	701a      	strb	r2, [r3, #0]
 80070d4:	e790      	b.n	8006ff8 <_dtoa_r+0x608>
 80070d6:	4ba6      	ldr	r3, [pc, #664]	; (8007370 <_dtoa_r+0x980>)
 80070d8:	2200      	movs	r2, #0
 80070da:	f7f9 fa65 	bl	80005a8 <__aeabi_dmul>
 80070de:	2200      	movs	r2, #0
 80070e0:	2300      	movs	r3, #0
 80070e2:	4606      	mov	r6, r0
 80070e4:	460f      	mov	r7, r1
 80070e6:	f7f9 fcc7 	bl	8000a78 <__aeabi_dcmpeq>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d09d      	beq.n	800702a <_dtoa_r+0x63a>
 80070ee:	e7cf      	b.n	8007090 <_dtoa_r+0x6a0>
 80070f0:	9a08      	ldr	r2, [sp, #32]
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	f000 80d7 	beq.w	80072a6 <_dtoa_r+0x8b6>
 80070f8:	9a06      	ldr	r2, [sp, #24]
 80070fa:	2a01      	cmp	r2, #1
 80070fc:	f300 80ba 	bgt.w	8007274 <_dtoa_r+0x884>
 8007100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007102:	2a00      	cmp	r2, #0
 8007104:	f000 80b2 	beq.w	800726c <_dtoa_r+0x87c>
 8007108:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800710c:	9e07      	ldr	r6, [sp, #28]
 800710e:	9d04      	ldr	r5, [sp, #16]
 8007110:	9a04      	ldr	r2, [sp, #16]
 8007112:	441a      	add	r2, r3
 8007114:	9204      	str	r2, [sp, #16]
 8007116:	9a05      	ldr	r2, [sp, #20]
 8007118:	2101      	movs	r1, #1
 800711a:	441a      	add	r2, r3
 800711c:	4620      	mov	r0, r4
 800711e:	9205      	str	r2, [sp, #20]
 8007120:	f000 fd8a 	bl	8007c38 <__i2b>
 8007124:	4607      	mov	r7, r0
 8007126:	2d00      	cmp	r5, #0
 8007128:	dd0c      	ble.n	8007144 <_dtoa_r+0x754>
 800712a:	9b05      	ldr	r3, [sp, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	dd09      	ble.n	8007144 <_dtoa_r+0x754>
 8007130:	42ab      	cmp	r3, r5
 8007132:	9a04      	ldr	r2, [sp, #16]
 8007134:	bfa8      	it	ge
 8007136:	462b      	movge	r3, r5
 8007138:	1ad2      	subs	r2, r2, r3
 800713a:	9204      	str	r2, [sp, #16]
 800713c:	9a05      	ldr	r2, [sp, #20]
 800713e:	1aed      	subs	r5, r5, r3
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	9305      	str	r3, [sp, #20]
 8007144:	9b07      	ldr	r3, [sp, #28]
 8007146:	b31b      	cbz	r3, 8007190 <_dtoa_r+0x7a0>
 8007148:	9b08      	ldr	r3, [sp, #32]
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 80af 	beq.w	80072ae <_dtoa_r+0x8be>
 8007150:	2e00      	cmp	r6, #0
 8007152:	dd13      	ble.n	800717c <_dtoa_r+0x78c>
 8007154:	4639      	mov	r1, r7
 8007156:	4632      	mov	r2, r6
 8007158:	4620      	mov	r0, r4
 800715a:	f000 fe2d 	bl	8007db8 <__pow5mult>
 800715e:	ee18 2a10 	vmov	r2, s16
 8007162:	4601      	mov	r1, r0
 8007164:	4607      	mov	r7, r0
 8007166:	4620      	mov	r0, r4
 8007168:	f000 fd7c 	bl	8007c64 <__multiply>
 800716c:	ee18 1a10 	vmov	r1, s16
 8007170:	4680      	mov	r8, r0
 8007172:	4620      	mov	r0, r4
 8007174:	f000 fca8 	bl	8007ac8 <_Bfree>
 8007178:	ee08 8a10 	vmov	s16, r8
 800717c:	9b07      	ldr	r3, [sp, #28]
 800717e:	1b9a      	subs	r2, r3, r6
 8007180:	d006      	beq.n	8007190 <_dtoa_r+0x7a0>
 8007182:	ee18 1a10 	vmov	r1, s16
 8007186:	4620      	mov	r0, r4
 8007188:	f000 fe16 	bl	8007db8 <__pow5mult>
 800718c:	ee08 0a10 	vmov	s16, r0
 8007190:	2101      	movs	r1, #1
 8007192:	4620      	mov	r0, r4
 8007194:	f000 fd50 	bl	8007c38 <__i2b>
 8007198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719a:	2b00      	cmp	r3, #0
 800719c:	4606      	mov	r6, r0
 800719e:	f340 8088 	ble.w	80072b2 <_dtoa_r+0x8c2>
 80071a2:	461a      	mov	r2, r3
 80071a4:	4601      	mov	r1, r0
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 fe06 	bl	8007db8 <__pow5mult>
 80071ac:	9b06      	ldr	r3, [sp, #24]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	4606      	mov	r6, r0
 80071b2:	f340 8081 	ble.w	80072b8 <_dtoa_r+0x8c8>
 80071b6:	f04f 0800 	mov.w	r8, #0
 80071ba:	6933      	ldr	r3, [r6, #16]
 80071bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071c0:	6918      	ldr	r0, [r3, #16]
 80071c2:	f000 fce9 	bl	8007b98 <__hi0bits>
 80071c6:	f1c0 0020 	rsb	r0, r0, #32
 80071ca:	9b05      	ldr	r3, [sp, #20]
 80071cc:	4418      	add	r0, r3
 80071ce:	f010 001f 	ands.w	r0, r0, #31
 80071d2:	f000 8092 	beq.w	80072fa <_dtoa_r+0x90a>
 80071d6:	f1c0 0320 	rsb	r3, r0, #32
 80071da:	2b04      	cmp	r3, #4
 80071dc:	f340 808a 	ble.w	80072f4 <_dtoa_r+0x904>
 80071e0:	f1c0 001c 	rsb	r0, r0, #28
 80071e4:	9b04      	ldr	r3, [sp, #16]
 80071e6:	4403      	add	r3, r0
 80071e8:	9304      	str	r3, [sp, #16]
 80071ea:	9b05      	ldr	r3, [sp, #20]
 80071ec:	4403      	add	r3, r0
 80071ee:	4405      	add	r5, r0
 80071f0:	9305      	str	r3, [sp, #20]
 80071f2:	9b04      	ldr	r3, [sp, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dd07      	ble.n	8007208 <_dtoa_r+0x818>
 80071f8:	ee18 1a10 	vmov	r1, s16
 80071fc:	461a      	mov	r2, r3
 80071fe:	4620      	mov	r0, r4
 8007200:	f000 fe34 	bl	8007e6c <__lshift>
 8007204:	ee08 0a10 	vmov	s16, r0
 8007208:	9b05      	ldr	r3, [sp, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	dd05      	ble.n	800721a <_dtoa_r+0x82a>
 800720e:	4631      	mov	r1, r6
 8007210:	461a      	mov	r2, r3
 8007212:	4620      	mov	r0, r4
 8007214:	f000 fe2a 	bl	8007e6c <__lshift>
 8007218:	4606      	mov	r6, r0
 800721a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800721c:	2b00      	cmp	r3, #0
 800721e:	d06e      	beq.n	80072fe <_dtoa_r+0x90e>
 8007220:	ee18 0a10 	vmov	r0, s16
 8007224:	4631      	mov	r1, r6
 8007226:	f000 fe91 	bl	8007f4c <__mcmp>
 800722a:	2800      	cmp	r0, #0
 800722c:	da67      	bge.n	80072fe <_dtoa_r+0x90e>
 800722e:	9b00      	ldr	r3, [sp, #0]
 8007230:	3b01      	subs	r3, #1
 8007232:	ee18 1a10 	vmov	r1, s16
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	220a      	movs	r2, #10
 800723a:	2300      	movs	r3, #0
 800723c:	4620      	mov	r0, r4
 800723e:	f000 fc65 	bl	8007b0c <__multadd>
 8007242:	9b08      	ldr	r3, [sp, #32]
 8007244:	ee08 0a10 	vmov	s16, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 81b1 	beq.w	80075b0 <_dtoa_r+0xbc0>
 800724e:	2300      	movs	r3, #0
 8007250:	4639      	mov	r1, r7
 8007252:	220a      	movs	r2, #10
 8007254:	4620      	mov	r0, r4
 8007256:	f000 fc59 	bl	8007b0c <__multadd>
 800725a:	9b02      	ldr	r3, [sp, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	4607      	mov	r7, r0
 8007260:	f300 808e 	bgt.w	8007380 <_dtoa_r+0x990>
 8007264:	9b06      	ldr	r3, [sp, #24]
 8007266:	2b02      	cmp	r3, #2
 8007268:	dc51      	bgt.n	800730e <_dtoa_r+0x91e>
 800726a:	e089      	b.n	8007380 <_dtoa_r+0x990>
 800726c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800726e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007272:	e74b      	b.n	800710c <_dtoa_r+0x71c>
 8007274:	9b03      	ldr	r3, [sp, #12]
 8007276:	1e5e      	subs	r6, r3, #1
 8007278:	9b07      	ldr	r3, [sp, #28]
 800727a:	42b3      	cmp	r3, r6
 800727c:	bfbf      	itttt	lt
 800727e:	9b07      	ldrlt	r3, [sp, #28]
 8007280:	9607      	strlt	r6, [sp, #28]
 8007282:	1af2      	sublt	r2, r6, r3
 8007284:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007286:	bfb6      	itet	lt
 8007288:	189b      	addlt	r3, r3, r2
 800728a:	1b9e      	subge	r6, r3, r6
 800728c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	bfb8      	it	lt
 8007292:	2600      	movlt	r6, #0
 8007294:	2b00      	cmp	r3, #0
 8007296:	bfb7      	itett	lt
 8007298:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800729c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80072a0:	1a9d      	sublt	r5, r3, r2
 80072a2:	2300      	movlt	r3, #0
 80072a4:	e734      	b.n	8007110 <_dtoa_r+0x720>
 80072a6:	9e07      	ldr	r6, [sp, #28]
 80072a8:	9d04      	ldr	r5, [sp, #16]
 80072aa:	9f08      	ldr	r7, [sp, #32]
 80072ac:	e73b      	b.n	8007126 <_dtoa_r+0x736>
 80072ae:	9a07      	ldr	r2, [sp, #28]
 80072b0:	e767      	b.n	8007182 <_dtoa_r+0x792>
 80072b2:	9b06      	ldr	r3, [sp, #24]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	dc18      	bgt.n	80072ea <_dtoa_r+0x8fa>
 80072b8:	f1ba 0f00 	cmp.w	sl, #0
 80072bc:	d115      	bne.n	80072ea <_dtoa_r+0x8fa>
 80072be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072c2:	b993      	cbnz	r3, 80072ea <_dtoa_r+0x8fa>
 80072c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80072c8:	0d1b      	lsrs	r3, r3, #20
 80072ca:	051b      	lsls	r3, r3, #20
 80072cc:	b183      	cbz	r3, 80072f0 <_dtoa_r+0x900>
 80072ce:	9b04      	ldr	r3, [sp, #16]
 80072d0:	3301      	adds	r3, #1
 80072d2:	9304      	str	r3, [sp, #16]
 80072d4:	9b05      	ldr	r3, [sp, #20]
 80072d6:	3301      	adds	r3, #1
 80072d8:	9305      	str	r3, [sp, #20]
 80072da:	f04f 0801 	mov.w	r8, #1
 80072de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f47f af6a 	bne.w	80071ba <_dtoa_r+0x7ca>
 80072e6:	2001      	movs	r0, #1
 80072e8:	e76f      	b.n	80071ca <_dtoa_r+0x7da>
 80072ea:	f04f 0800 	mov.w	r8, #0
 80072ee:	e7f6      	b.n	80072de <_dtoa_r+0x8ee>
 80072f0:	4698      	mov	r8, r3
 80072f2:	e7f4      	b.n	80072de <_dtoa_r+0x8ee>
 80072f4:	f43f af7d 	beq.w	80071f2 <_dtoa_r+0x802>
 80072f8:	4618      	mov	r0, r3
 80072fa:	301c      	adds	r0, #28
 80072fc:	e772      	b.n	80071e4 <_dtoa_r+0x7f4>
 80072fe:	9b03      	ldr	r3, [sp, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	dc37      	bgt.n	8007374 <_dtoa_r+0x984>
 8007304:	9b06      	ldr	r3, [sp, #24]
 8007306:	2b02      	cmp	r3, #2
 8007308:	dd34      	ble.n	8007374 <_dtoa_r+0x984>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	9302      	str	r3, [sp, #8]
 800730e:	9b02      	ldr	r3, [sp, #8]
 8007310:	b96b      	cbnz	r3, 800732e <_dtoa_r+0x93e>
 8007312:	4631      	mov	r1, r6
 8007314:	2205      	movs	r2, #5
 8007316:	4620      	mov	r0, r4
 8007318:	f000 fbf8 	bl	8007b0c <__multadd>
 800731c:	4601      	mov	r1, r0
 800731e:	4606      	mov	r6, r0
 8007320:	ee18 0a10 	vmov	r0, s16
 8007324:	f000 fe12 	bl	8007f4c <__mcmp>
 8007328:	2800      	cmp	r0, #0
 800732a:	f73f adbb 	bgt.w	8006ea4 <_dtoa_r+0x4b4>
 800732e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007330:	9d01      	ldr	r5, [sp, #4]
 8007332:	43db      	mvns	r3, r3
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	f04f 0800 	mov.w	r8, #0
 800733a:	4631      	mov	r1, r6
 800733c:	4620      	mov	r0, r4
 800733e:	f000 fbc3 	bl	8007ac8 <_Bfree>
 8007342:	2f00      	cmp	r7, #0
 8007344:	f43f aea4 	beq.w	8007090 <_dtoa_r+0x6a0>
 8007348:	f1b8 0f00 	cmp.w	r8, #0
 800734c:	d005      	beq.n	800735a <_dtoa_r+0x96a>
 800734e:	45b8      	cmp	r8, r7
 8007350:	d003      	beq.n	800735a <_dtoa_r+0x96a>
 8007352:	4641      	mov	r1, r8
 8007354:	4620      	mov	r0, r4
 8007356:	f000 fbb7 	bl	8007ac8 <_Bfree>
 800735a:	4639      	mov	r1, r7
 800735c:	4620      	mov	r0, r4
 800735e:	f000 fbb3 	bl	8007ac8 <_Bfree>
 8007362:	e695      	b.n	8007090 <_dtoa_r+0x6a0>
 8007364:	2600      	movs	r6, #0
 8007366:	4637      	mov	r7, r6
 8007368:	e7e1      	b.n	800732e <_dtoa_r+0x93e>
 800736a:	9700      	str	r7, [sp, #0]
 800736c:	4637      	mov	r7, r6
 800736e:	e599      	b.n	8006ea4 <_dtoa_r+0x4b4>
 8007370:	40240000 	.word	0x40240000
 8007374:	9b08      	ldr	r3, [sp, #32]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 80ca 	beq.w	8007510 <_dtoa_r+0xb20>
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	9302      	str	r3, [sp, #8]
 8007380:	2d00      	cmp	r5, #0
 8007382:	dd05      	ble.n	8007390 <_dtoa_r+0x9a0>
 8007384:	4639      	mov	r1, r7
 8007386:	462a      	mov	r2, r5
 8007388:	4620      	mov	r0, r4
 800738a:	f000 fd6f 	bl	8007e6c <__lshift>
 800738e:	4607      	mov	r7, r0
 8007390:	f1b8 0f00 	cmp.w	r8, #0
 8007394:	d05b      	beq.n	800744e <_dtoa_r+0xa5e>
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	4620      	mov	r0, r4
 800739a:	f000 fb55 	bl	8007a48 <_Balloc>
 800739e:	4605      	mov	r5, r0
 80073a0:	b928      	cbnz	r0, 80073ae <_dtoa_r+0x9be>
 80073a2:	4b87      	ldr	r3, [pc, #540]	; (80075c0 <_dtoa_r+0xbd0>)
 80073a4:	4602      	mov	r2, r0
 80073a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80073aa:	f7ff bb3b 	b.w	8006a24 <_dtoa_r+0x34>
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	3202      	adds	r2, #2
 80073b2:	0092      	lsls	r2, r2, #2
 80073b4:	f107 010c 	add.w	r1, r7, #12
 80073b8:	300c      	adds	r0, #12
 80073ba:	f000 fb2b 	bl	8007a14 <memcpy>
 80073be:	2201      	movs	r2, #1
 80073c0:	4629      	mov	r1, r5
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 fd52 	bl	8007e6c <__lshift>
 80073c8:	9b01      	ldr	r3, [sp, #4]
 80073ca:	f103 0901 	add.w	r9, r3, #1
 80073ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80073d2:	4413      	add	r3, r2
 80073d4:	9305      	str	r3, [sp, #20]
 80073d6:	f00a 0301 	and.w	r3, sl, #1
 80073da:	46b8      	mov	r8, r7
 80073dc:	9304      	str	r3, [sp, #16]
 80073de:	4607      	mov	r7, r0
 80073e0:	4631      	mov	r1, r6
 80073e2:	ee18 0a10 	vmov	r0, s16
 80073e6:	f7ff fa77 	bl	80068d8 <quorem>
 80073ea:	4641      	mov	r1, r8
 80073ec:	9002      	str	r0, [sp, #8]
 80073ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073f2:	ee18 0a10 	vmov	r0, s16
 80073f6:	f000 fda9 	bl	8007f4c <__mcmp>
 80073fa:	463a      	mov	r2, r7
 80073fc:	9003      	str	r0, [sp, #12]
 80073fe:	4631      	mov	r1, r6
 8007400:	4620      	mov	r0, r4
 8007402:	f000 fdbf 	bl	8007f84 <__mdiff>
 8007406:	68c2      	ldr	r2, [r0, #12]
 8007408:	f109 3bff 	add.w	fp, r9, #4294967295
 800740c:	4605      	mov	r5, r0
 800740e:	bb02      	cbnz	r2, 8007452 <_dtoa_r+0xa62>
 8007410:	4601      	mov	r1, r0
 8007412:	ee18 0a10 	vmov	r0, s16
 8007416:	f000 fd99 	bl	8007f4c <__mcmp>
 800741a:	4602      	mov	r2, r0
 800741c:	4629      	mov	r1, r5
 800741e:	4620      	mov	r0, r4
 8007420:	9207      	str	r2, [sp, #28]
 8007422:	f000 fb51 	bl	8007ac8 <_Bfree>
 8007426:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800742a:	ea43 0102 	orr.w	r1, r3, r2
 800742e:	9b04      	ldr	r3, [sp, #16]
 8007430:	430b      	orrs	r3, r1
 8007432:	464d      	mov	r5, r9
 8007434:	d10f      	bne.n	8007456 <_dtoa_r+0xa66>
 8007436:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800743a:	d02a      	beq.n	8007492 <_dtoa_r+0xaa2>
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	dd02      	ble.n	8007448 <_dtoa_r+0xa58>
 8007442:	9b02      	ldr	r3, [sp, #8]
 8007444:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007448:	f88b a000 	strb.w	sl, [fp]
 800744c:	e775      	b.n	800733a <_dtoa_r+0x94a>
 800744e:	4638      	mov	r0, r7
 8007450:	e7ba      	b.n	80073c8 <_dtoa_r+0x9d8>
 8007452:	2201      	movs	r2, #1
 8007454:	e7e2      	b.n	800741c <_dtoa_r+0xa2c>
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	db04      	blt.n	8007466 <_dtoa_r+0xa76>
 800745c:	9906      	ldr	r1, [sp, #24]
 800745e:	430b      	orrs	r3, r1
 8007460:	9904      	ldr	r1, [sp, #16]
 8007462:	430b      	orrs	r3, r1
 8007464:	d122      	bne.n	80074ac <_dtoa_r+0xabc>
 8007466:	2a00      	cmp	r2, #0
 8007468:	ddee      	ble.n	8007448 <_dtoa_r+0xa58>
 800746a:	ee18 1a10 	vmov	r1, s16
 800746e:	2201      	movs	r2, #1
 8007470:	4620      	mov	r0, r4
 8007472:	f000 fcfb 	bl	8007e6c <__lshift>
 8007476:	4631      	mov	r1, r6
 8007478:	ee08 0a10 	vmov	s16, r0
 800747c:	f000 fd66 	bl	8007f4c <__mcmp>
 8007480:	2800      	cmp	r0, #0
 8007482:	dc03      	bgt.n	800748c <_dtoa_r+0xa9c>
 8007484:	d1e0      	bne.n	8007448 <_dtoa_r+0xa58>
 8007486:	f01a 0f01 	tst.w	sl, #1
 800748a:	d0dd      	beq.n	8007448 <_dtoa_r+0xa58>
 800748c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007490:	d1d7      	bne.n	8007442 <_dtoa_r+0xa52>
 8007492:	2339      	movs	r3, #57	; 0x39
 8007494:	f88b 3000 	strb.w	r3, [fp]
 8007498:	462b      	mov	r3, r5
 800749a:	461d      	mov	r5, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074a2:	2a39      	cmp	r2, #57	; 0x39
 80074a4:	d071      	beq.n	800758a <_dtoa_r+0xb9a>
 80074a6:	3201      	adds	r2, #1
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	e746      	b.n	800733a <_dtoa_r+0x94a>
 80074ac:	2a00      	cmp	r2, #0
 80074ae:	dd07      	ble.n	80074c0 <_dtoa_r+0xad0>
 80074b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074b4:	d0ed      	beq.n	8007492 <_dtoa_r+0xaa2>
 80074b6:	f10a 0301 	add.w	r3, sl, #1
 80074ba:	f88b 3000 	strb.w	r3, [fp]
 80074be:	e73c      	b.n	800733a <_dtoa_r+0x94a>
 80074c0:	9b05      	ldr	r3, [sp, #20]
 80074c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80074c6:	4599      	cmp	r9, r3
 80074c8:	d047      	beq.n	800755a <_dtoa_r+0xb6a>
 80074ca:	ee18 1a10 	vmov	r1, s16
 80074ce:	2300      	movs	r3, #0
 80074d0:	220a      	movs	r2, #10
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 fb1a 	bl	8007b0c <__multadd>
 80074d8:	45b8      	cmp	r8, r7
 80074da:	ee08 0a10 	vmov	s16, r0
 80074de:	f04f 0300 	mov.w	r3, #0
 80074e2:	f04f 020a 	mov.w	r2, #10
 80074e6:	4641      	mov	r1, r8
 80074e8:	4620      	mov	r0, r4
 80074ea:	d106      	bne.n	80074fa <_dtoa_r+0xb0a>
 80074ec:	f000 fb0e 	bl	8007b0c <__multadd>
 80074f0:	4680      	mov	r8, r0
 80074f2:	4607      	mov	r7, r0
 80074f4:	f109 0901 	add.w	r9, r9, #1
 80074f8:	e772      	b.n	80073e0 <_dtoa_r+0x9f0>
 80074fa:	f000 fb07 	bl	8007b0c <__multadd>
 80074fe:	4639      	mov	r1, r7
 8007500:	4680      	mov	r8, r0
 8007502:	2300      	movs	r3, #0
 8007504:	220a      	movs	r2, #10
 8007506:	4620      	mov	r0, r4
 8007508:	f000 fb00 	bl	8007b0c <__multadd>
 800750c:	4607      	mov	r7, r0
 800750e:	e7f1      	b.n	80074f4 <_dtoa_r+0xb04>
 8007510:	9b03      	ldr	r3, [sp, #12]
 8007512:	9302      	str	r3, [sp, #8]
 8007514:	9d01      	ldr	r5, [sp, #4]
 8007516:	ee18 0a10 	vmov	r0, s16
 800751a:	4631      	mov	r1, r6
 800751c:	f7ff f9dc 	bl	80068d8 <quorem>
 8007520:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007524:	9b01      	ldr	r3, [sp, #4]
 8007526:	f805 ab01 	strb.w	sl, [r5], #1
 800752a:	1aea      	subs	r2, r5, r3
 800752c:	9b02      	ldr	r3, [sp, #8]
 800752e:	4293      	cmp	r3, r2
 8007530:	dd09      	ble.n	8007546 <_dtoa_r+0xb56>
 8007532:	ee18 1a10 	vmov	r1, s16
 8007536:	2300      	movs	r3, #0
 8007538:	220a      	movs	r2, #10
 800753a:	4620      	mov	r0, r4
 800753c:	f000 fae6 	bl	8007b0c <__multadd>
 8007540:	ee08 0a10 	vmov	s16, r0
 8007544:	e7e7      	b.n	8007516 <_dtoa_r+0xb26>
 8007546:	9b02      	ldr	r3, [sp, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	bfc8      	it	gt
 800754c:	461d      	movgt	r5, r3
 800754e:	9b01      	ldr	r3, [sp, #4]
 8007550:	bfd8      	it	le
 8007552:	2501      	movle	r5, #1
 8007554:	441d      	add	r5, r3
 8007556:	f04f 0800 	mov.w	r8, #0
 800755a:	ee18 1a10 	vmov	r1, s16
 800755e:	2201      	movs	r2, #1
 8007560:	4620      	mov	r0, r4
 8007562:	f000 fc83 	bl	8007e6c <__lshift>
 8007566:	4631      	mov	r1, r6
 8007568:	ee08 0a10 	vmov	s16, r0
 800756c:	f000 fcee 	bl	8007f4c <__mcmp>
 8007570:	2800      	cmp	r0, #0
 8007572:	dc91      	bgt.n	8007498 <_dtoa_r+0xaa8>
 8007574:	d102      	bne.n	800757c <_dtoa_r+0xb8c>
 8007576:	f01a 0f01 	tst.w	sl, #1
 800757a:	d18d      	bne.n	8007498 <_dtoa_r+0xaa8>
 800757c:	462b      	mov	r3, r5
 800757e:	461d      	mov	r5, r3
 8007580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007584:	2a30      	cmp	r2, #48	; 0x30
 8007586:	d0fa      	beq.n	800757e <_dtoa_r+0xb8e>
 8007588:	e6d7      	b.n	800733a <_dtoa_r+0x94a>
 800758a:	9a01      	ldr	r2, [sp, #4]
 800758c:	429a      	cmp	r2, r3
 800758e:	d184      	bne.n	800749a <_dtoa_r+0xaaa>
 8007590:	9b00      	ldr	r3, [sp, #0]
 8007592:	3301      	adds	r3, #1
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	2331      	movs	r3, #49	; 0x31
 8007598:	7013      	strb	r3, [r2, #0]
 800759a:	e6ce      	b.n	800733a <_dtoa_r+0x94a>
 800759c:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <_dtoa_r+0xbd4>)
 800759e:	f7ff ba95 	b.w	8006acc <_dtoa_r+0xdc>
 80075a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f47f aa6e 	bne.w	8006a86 <_dtoa_r+0x96>
 80075aa:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <_dtoa_r+0xbd8>)
 80075ac:	f7ff ba8e 	b.w	8006acc <_dtoa_r+0xdc>
 80075b0:	9b02      	ldr	r3, [sp, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dcae      	bgt.n	8007514 <_dtoa_r+0xb24>
 80075b6:	9b06      	ldr	r3, [sp, #24]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	f73f aea8 	bgt.w	800730e <_dtoa_r+0x91e>
 80075be:	e7a9      	b.n	8007514 <_dtoa_r+0xb24>
 80075c0:	080096d3 	.word	0x080096d3
 80075c4:	08009630 	.word	0x08009630
 80075c8:	08009654 	.word	0x08009654

080075cc <__sflush_r>:
 80075cc:	898a      	ldrh	r2, [r1, #12]
 80075ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d2:	4605      	mov	r5, r0
 80075d4:	0710      	lsls	r0, r2, #28
 80075d6:	460c      	mov	r4, r1
 80075d8:	d458      	bmi.n	800768c <__sflush_r+0xc0>
 80075da:	684b      	ldr	r3, [r1, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	dc05      	bgt.n	80075ec <__sflush_r+0x20>
 80075e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dc02      	bgt.n	80075ec <__sflush_r+0x20>
 80075e6:	2000      	movs	r0, #0
 80075e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ee:	2e00      	cmp	r6, #0
 80075f0:	d0f9      	beq.n	80075e6 <__sflush_r+0x1a>
 80075f2:	2300      	movs	r3, #0
 80075f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075f8:	682f      	ldr	r7, [r5, #0]
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	d032      	beq.n	8007664 <__sflush_r+0x98>
 80075fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	075a      	lsls	r2, r3, #29
 8007604:	d505      	bpl.n	8007612 <__sflush_r+0x46>
 8007606:	6863      	ldr	r3, [r4, #4]
 8007608:	1ac0      	subs	r0, r0, r3
 800760a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800760c:	b10b      	cbz	r3, 8007612 <__sflush_r+0x46>
 800760e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007610:	1ac0      	subs	r0, r0, r3
 8007612:	2300      	movs	r3, #0
 8007614:	4602      	mov	r2, r0
 8007616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007618:	6a21      	ldr	r1, [r4, #32]
 800761a:	4628      	mov	r0, r5
 800761c:	47b0      	blx	r6
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	89a3      	ldrh	r3, [r4, #12]
 8007622:	d106      	bne.n	8007632 <__sflush_r+0x66>
 8007624:	6829      	ldr	r1, [r5, #0]
 8007626:	291d      	cmp	r1, #29
 8007628:	d82c      	bhi.n	8007684 <__sflush_r+0xb8>
 800762a:	4a2a      	ldr	r2, [pc, #168]	; (80076d4 <__sflush_r+0x108>)
 800762c:	40ca      	lsrs	r2, r1
 800762e:	07d6      	lsls	r6, r2, #31
 8007630:	d528      	bpl.n	8007684 <__sflush_r+0xb8>
 8007632:	2200      	movs	r2, #0
 8007634:	6062      	str	r2, [r4, #4]
 8007636:	04d9      	lsls	r1, r3, #19
 8007638:	6922      	ldr	r2, [r4, #16]
 800763a:	6022      	str	r2, [r4, #0]
 800763c:	d504      	bpl.n	8007648 <__sflush_r+0x7c>
 800763e:	1c42      	adds	r2, r0, #1
 8007640:	d101      	bne.n	8007646 <__sflush_r+0x7a>
 8007642:	682b      	ldr	r3, [r5, #0]
 8007644:	b903      	cbnz	r3, 8007648 <__sflush_r+0x7c>
 8007646:	6560      	str	r0, [r4, #84]	; 0x54
 8007648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764a:	602f      	str	r7, [r5, #0]
 800764c:	2900      	cmp	r1, #0
 800764e:	d0ca      	beq.n	80075e6 <__sflush_r+0x1a>
 8007650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007654:	4299      	cmp	r1, r3
 8007656:	d002      	beq.n	800765e <__sflush_r+0x92>
 8007658:	4628      	mov	r0, r5
 800765a:	f7fe fa5f 	bl	8005b1c <_free_r>
 800765e:	2000      	movs	r0, #0
 8007660:	6360      	str	r0, [r4, #52]	; 0x34
 8007662:	e7c1      	b.n	80075e8 <__sflush_r+0x1c>
 8007664:	6a21      	ldr	r1, [r4, #32]
 8007666:	2301      	movs	r3, #1
 8007668:	4628      	mov	r0, r5
 800766a:	47b0      	blx	r6
 800766c:	1c41      	adds	r1, r0, #1
 800766e:	d1c7      	bne.n	8007600 <__sflush_r+0x34>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0c4      	beq.n	8007600 <__sflush_r+0x34>
 8007676:	2b1d      	cmp	r3, #29
 8007678:	d001      	beq.n	800767e <__sflush_r+0xb2>
 800767a:	2b16      	cmp	r3, #22
 800767c:	d101      	bne.n	8007682 <__sflush_r+0xb6>
 800767e:	602f      	str	r7, [r5, #0]
 8007680:	e7b1      	b.n	80075e6 <__sflush_r+0x1a>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007688:	81a3      	strh	r3, [r4, #12]
 800768a:	e7ad      	b.n	80075e8 <__sflush_r+0x1c>
 800768c:	690f      	ldr	r7, [r1, #16]
 800768e:	2f00      	cmp	r7, #0
 8007690:	d0a9      	beq.n	80075e6 <__sflush_r+0x1a>
 8007692:	0793      	lsls	r3, r2, #30
 8007694:	680e      	ldr	r6, [r1, #0]
 8007696:	bf08      	it	eq
 8007698:	694b      	ldreq	r3, [r1, #20]
 800769a:	600f      	str	r7, [r1, #0]
 800769c:	bf18      	it	ne
 800769e:	2300      	movne	r3, #0
 80076a0:	eba6 0807 	sub.w	r8, r6, r7
 80076a4:	608b      	str	r3, [r1, #8]
 80076a6:	f1b8 0f00 	cmp.w	r8, #0
 80076aa:	dd9c      	ble.n	80075e6 <__sflush_r+0x1a>
 80076ac:	6a21      	ldr	r1, [r4, #32]
 80076ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076b0:	4643      	mov	r3, r8
 80076b2:	463a      	mov	r2, r7
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b0      	blx	r6
 80076b8:	2800      	cmp	r0, #0
 80076ba:	dc06      	bgt.n	80076ca <__sflush_r+0xfe>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295
 80076c8:	e78e      	b.n	80075e8 <__sflush_r+0x1c>
 80076ca:	4407      	add	r7, r0
 80076cc:	eba8 0800 	sub.w	r8, r8, r0
 80076d0:	e7e9      	b.n	80076a6 <__sflush_r+0xda>
 80076d2:	bf00      	nop
 80076d4:	20400001 	.word	0x20400001

080076d8 <_fflush_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	690b      	ldr	r3, [r1, #16]
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	b913      	cbnz	r3, 80076e8 <_fflush_r+0x10>
 80076e2:	2500      	movs	r5, #0
 80076e4:	4628      	mov	r0, r5
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	b118      	cbz	r0, 80076f2 <_fflush_r+0x1a>
 80076ea:	6983      	ldr	r3, [r0, #24]
 80076ec:	b90b      	cbnz	r3, 80076f2 <_fflush_r+0x1a>
 80076ee:	f000 f887 	bl	8007800 <__sinit>
 80076f2:	4b14      	ldr	r3, [pc, #80]	; (8007744 <_fflush_r+0x6c>)
 80076f4:	429c      	cmp	r4, r3
 80076f6:	d11b      	bne.n	8007730 <_fflush_r+0x58>
 80076f8:	686c      	ldr	r4, [r5, #4]
 80076fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0ef      	beq.n	80076e2 <_fflush_r+0xa>
 8007702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007704:	07d0      	lsls	r0, r2, #31
 8007706:	d404      	bmi.n	8007712 <_fflush_r+0x3a>
 8007708:	0599      	lsls	r1, r3, #22
 800770a:	d402      	bmi.n	8007712 <_fflush_r+0x3a>
 800770c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800770e:	f000 f91a 	bl	8007946 <__retarget_lock_acquire_recursive>
 8007712:	4628      	mov	r0, r5
 8007714:	4621      	mov	r1, r4
 8007716:	f7ff ff59 	bl	80075cc <__sflush_r>
 800771a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800771c:	07da      	lsls	r2, r3, #31
 800771e:	4605      	mov	r5, r0
 8007720:	d4e0      	bmi.n	80076e4 <_fflush_r+0xc>
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	059b      	lsls	r3, r3, #22
 8007726:	d4dd      	bmi.n	80076e4 <_fflush_r+0xc>
 8007728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800772a:	f000 f90d 	bl	8007948 <__retarget_lock_release_recursive>
 800772e:	e7d9      	b.n	80076e4 <_fflush_r+0xc>
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <_fflush_r+0x70>)
 8007732:	429c      	cmp	r4, r3
 8007734:	d101      	bne.n	800773a <_fflush_r+0x62>
 8007736:	68ac      	ldr	r4, [r5, #8]
 8007738:	e7df      	b.n	80076fa <_fflush_r+0x22>
 800773a:	4b04      	ldr	r3, [pc, #16]	; (800774c <_fflush_r+0x74>)
 800773c:	429c      	cmp	r4, r3
 800773e:	bf08      	it	eq
 8007740:	68ec      	ldreq	r4, [r5, #12]
 8007742:	e7da      	b.n	80076fa <_fflush_r+0x22>
 8007744:	08009704 	.word	0x08009704
 8007748:	08009724 	.word	0x08009724
 800774c:	080096e4 	.word	0x080096e4

08007750 <std>:
 8007750:	2300      	movs	r3, #0
 8007752:	b510      	push	{r4, lr}
 8007754:	4604      	mov	r4, r0
 8007756:	e9c0 3300 	strd	r3, r3, [r0]
 800775a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800775e:	6083      	str	r3, [r0, #8]
 8007760:	8181      	strh	r1, [r0, #12]
 8007762:	6643      	str	r3, [r0, #100]	; 0x64
 8007764:	81c2      	strh	r2, [r0, #14]
 8007766:	6183      	str	r3, [r0, #24]
 8007768:	4619      	mov	r1, r3
 800776a:	2208      	movs	r2, #8
 800776c:	305c      	adds	r0, #92	; 0x5c
 800776e:	f7fe f9cd 	bl	8005b0c <memset>
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <std+0x38>)
 8007774:	6263      	str	r3, [r4, #36]	; 0x24
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <std+0x3c>)
 8007778:	62a3      	str	r3, [r4, #40]	; 0x28
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <std+0x40>)
 800777c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800777e:	4b05      	ldr	r3, [pc, #20]	; (8007794 <std+0x44>)
 8007780:	6224      	str	r4, [r4, #32]
 8007782:	6323      	str	r3, [r4, #48]	; 0x30
 8007784:	bd10      	pop	{r4, pc}
 8007786:	bf00      	nop
 8007788:	08008779 	.word	0x08008779
 800778c:	0800879b 	.word	0x0800879b
 8007790:	080087d3 	.word	0x080087d3
 8007794:	080087f7 	.word	0x080087f7

08007798 <_cleanup_r>:
 8007798:	4901      	ldr	r1, [pc, #4]	; (80077a0 <_cleanup_r+0x8>)
 800779a:	f000 b8af 	b.w	80078fc <_fwalk_reent>
 800779e:	bf00      	nop
 80077a0:	080076d9 	.word	0x080076d9

080077a4 <__sfmoreglue>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	2268      	movs	r2, #104	; 0x68
 80077a8:	1e4d      	subs	r5, r1, #1
 80077aa:	4355      	muls	r5, r2
 80077ac:	460e      	mov	r6, r1
 80077ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077b2:	f7fe fa1f 	bl	8005bf4 <_malloc_r>
 80077b6:	4604      	mov	r4, r0
 80077b8:	b140      	cbz	r0, 80077cc <__sfmoreglue+0x28>
 80077ba:	2100      	movs	r1, #0
 80077bc:	e9c0 1600 	strd	r1, r6, [r0]
 80077c0:	300c      	adds	r0, #12
 80077c2:	60a0      	str	r0, [r4, #8]
 80077c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077c8:	f7fe f9a0 	bl	8005b0c <memset>
 80077cc:	4620      	mov	r0, r4
 80077ce:	bd70      	pop	{r4, r5, r6, pc}

080077d0 <__sfp_lock_acquire>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__sfp_lock_acquire+0x8>)
 80077d2:	f000 b8b8 	b.w	8007946 <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	20000395 	.word	0x20000395

080077dc <__sfp_lock_release>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__sfp_lock_release+0x8>)
 80077de:	f000 b8b3 	b.w	8007948 <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	20000395 	.word	0x20000395

080077e8 <__sinit_lock_acquire>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__sinit_lock_acquire+0x8>)
 80077ea:	f000 b8ac 	b.w	8007946 <__retarget_lock_acquire_recursive>
 80077ee:	bf00      	nop
 80077f0:	20000396 	.word	0x20000396

080077f4 <__sinit_lock_release>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__sinit_lock_release+0x8>)
 80077f6:	f000 b8a7 	b.w	8007948 <__retarget_lock_release_recursive>
 80077fa:	bf00      	nop
 80077fc:	20000396 	.word	0x20000396

08007800 <__sinit>:
 8007800:	b510      	push	{r4, lr}
 8007802:	4604      	mov	r4, r0
 8007804:	f7ff fff0 	bl	80077e8 <__sinit_lock_acquire>
 8007808:	69a3      	ldr	r3, [r4, #24]
 800780a:	b11b      	cbz	r3, 8007814 <__sinit+0x14>
 800780c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007810:	f7ff bff0 	b.w	80077f4 <__sinit_lock_release>
 8007814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007818:	6523      	str	r3, [r4, #80]	; 0x50
 800781a:	4b13      	ldr	r3, [pc, #76]	; (8007868 <__sinit+0x68>)
 800781c:	4a13      	ldr	r2, [pc, #76]	; (800786c <__sinit+0x6c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	62a2      	str	r2, [r4, #40]	; 0x28
 8007822:	42a3      	cmp	r3, r4
 8007824:	bf04      	itt	eq
 8007826:	2301      	moveq	r3, #1
 8007828:	61a3      	streq	r3, [r4, #24]
 800782a:	4620      	mov	r0, r4
 800782c:	f000 f820 	bl	8007870 <__sfp>
 8007830:	6060      	str	r0, [r4, #4]
 8007832:	4620      	mov	r0, r4
 8007834:	f000 f81c 	bl	8007870 <__sfp>
 8007838:	60a0      	str	r0, [r4, #8]
 800783a:	4620      	mov	r0, r4
 800783c:	f000 f818 	bl	8007870 <__sfp>
 8007840:	2200      	movs	r2, #0
 8007842:	60e0      	str	r0, [r4, #12]
 8007844:	2104      	movs	r1, #4
 8007846:	6860      	ldr	r0, [r4, #4]
 8007848:	f7ff ff82 	bl	8007750 <std>
 800784c:	68a0      	ldr	r0, [r4, #8]
 800784e:	2201      	movs	r2, #1
 8007850:	2109      	movs	r1, #9
 8007852:	f7ff ff7d 	bl	8007750 <std>
 8007856:	68e0      	ldr	r0, [r4, #12]
 8007858:	2202      	movs	r2, #2
 800785a:	2112      	movs	r1, #18
 800785c:	f7ff ff78 	bl	8007750 <std>
 8007860:	2301      	movs	r3, #1
 8007862:	61a3      	str	r3, [r4, #24]
 8007864:	e7d2      	b.n	800780c <__sinit+0xc>
 8007866:	bf00      	nop
 8007868:	0800961c 	.word	0x0800961c
 800786c:	08007799 	.word	0x08007799

08007870 <__sfp>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	4607      	mov	r7, r0
 8007874:	f7ff ffac 	bl	80077d0 <__sfp_lock_acquire>
 8007878:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <__sfp+0x84>)
 800787a:	681e      	ldr	r6, [r3, #0]
 800787c:	69b3      	ldr	r3, [r6, #24]
 800787e:	b913      	cbnz	r3, 8007886 <__sfp+0x16>
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff ffbd 	bl	8007800 <__sinit>
 8007886:	3648      	adds	r6, #72	; 0x48
 8007888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800788c:	3b01      	subs	r3, #1
 800788e:	d503      	bpl.n	8007898 <__sfp+0x28>
 8007890:	6833      	ldr	r3, [r6, #0]
 8007892:	b30b      	cbz	r3, 80078d8 <__sfp+0x68>
 8007894:	6836      	ldr	r6, [r6, #0]
 8007896:	e7f7      	b.n	8007888 <__sfp+0x18>
 8007898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800789c:	b9d5      	cbnz	r5, 80078d4 <__sfp+0x64>
 800789e:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <__sfp+0x88>)
 80078a0:	60e3      	str	r3, [r4, #12]
 80078a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078a6:	6665      	str	r5, [r4, #100]	; 0x64
 80078a8:	f000 f84c 	bl	8007944 <__retarget_lock_init_recursive>
 80078ac:	f7ff ff96 	bl	80077dc <__sfp_lock_release>
 80078b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078b8:	6025      	str	r5, [r4, #0]
 80078ba:	61a5      	str	r5, [r4, #24]
 80078bc:	2208      	movs	r2, #8
 80078be:	4629      	mov	r1, r5
 80078c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078c4:	f7fe f922 	bl	8005b0c <memset>
 80078c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078d0:	4620      	mov	r0, r4
 80078d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d4:	3468      	adds	r4, #104	; 0x68
 80078d6:	e7d9      	b.n	800788c <__sfp+0x1c>
 80078d8:	2104      	movs	r1, #4
 80078da:	4638      	mov	r0, r7
 80078dc:	f7ff ff62 	bl	80077a4 <__sfmoreglue>
 80078e0:	4604      	mov	r4, r0
 80078e2:	6030      	str	r0, [r6, #0]
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d1d5      	bne.n	8007894 <__sfp+0x24>
 80078e8:	f7ff ff78 	bl	80077dc <__sfp_lock_release>
 80078ec:	230c      	movs	r3, #12
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	e7ee      	b.n	80078d0 <__sfp+0x60>
 80078f2:	bf00      	nop
 80078f4:	0800961c 	.word	0x0800961c
 80078f8:	ffff0001 	.word	0xffff0001

080078fc <_fwalk_reent>:
 80078fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007900:	4606      	mov	r6, r0
 8007902:	4688      	mov	r8, r1
 8007904:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007908:	2700      	movs	r7, #0
 800790a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800790e:	f1b9 0901 	subs.w	r9, r9, #1
 8007912:	d505      	bpl.n	8007920 <_fwalk_reent+0x24>
 8007914:	6824      	ldr	r4, [r4, #0]
 8007916:	2c00      	cmp	r4, #0
 8007918:	d1f7      	bne.n	800790a <_fwalk_reent+0xe>
 800791a:	4638      	mov	r0, r7
 800791c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007920:	89ab      	ldrh	r3, [r5, #12]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d907      	bls.n	8007936 <_fwalk_reent+0x3a>
 8007926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800792a:	3301      	adds	r3, #1
 800792c:	d003      	beq.n	8007936 <_fwalk_reent+0x3a>
 800792e:	4629      	mov	r1, r5
 8007930:	4630      	mov	r0, r6
 8007932:	47c0      	blx	r8
 8007934:	4307      	orrs	r7, r0
 8007936:	3568      	adds	r5, #104	; 0x68
 8007938:	e7e9      	b.n	800790e <_fwalk_reent+0x12>
	...

0800793c <_localeconv_r>:
 800793c:	4800      	ldr	r0, [pc, #0]	; (8007940 <_localeconv_r+0x4>)
 800793e:	4770      	bx	lr
 8007940:	20000168 	.word	0x20000168

08007944 <__retarget_lock_init_recursive>:
 8007944:	4770      	bx	lr

08007946 <__retarget_lock_acquire_recursive>:
 8007946:	4770      	bx	lr

08007948 <__retarget_lock_release_recursive>:
 8007948:	4770      	bx	lr

0800794a <__swhatbuf_r>:
 800794a:	b570      	push	{r4, r5, r6, lr}
 800794c:	460e      	mov	r6, r1
 800794e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007952:	2900      	cmp	r1, #0
 8007954:	b096      	sub	sp, #88	; 0x58
 8007956:	4614      	mov	r4, r2
 8007958:	461d      	mov	r5, r3
 800795a:	da08      	bge.n	800796e <__swhatbuf_r+0x24>
 800795c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	602a      	str	r2, [r5, #0]
 8007964:	061a      	lsls	r2, r3, #24
 8007966:	d410      	bmi.n	800798a <__swhatbuf_r+0x40>
 8007968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800796c:	e00e      	b.n	800798c <__swhatbuf_r+0x42>
 800796e:	466a      	mov	r2, sp
 8007970:	f000 ff98 	bl	80088a4 <_fstat_r>
 8007974:	2800      	cmp	r0, #0
 8007976:	dbf1      	blt.n	800795c <__swhatbuf_r+0x12>
 8007978:	9a01      	ldr	r2, [sp, #4]
 800797a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800797e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007982:	425a      	negs	r2, r3
 8007984:	415a      	adcs	r2, r3
 8007986:	602a      	str	r2, [r5, #0]
 8007988:	e7ee      	b.n	8007968 <__swhatbuf_r+0x1e>
 800798a:	2340      	movs	r3, #64	; 0x40
 800798c:	2000      	movs	r0, #0
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	b016      	add	sp, #88	; 0x58
 8007992:	bd70      	pop	{r4, r5, r6, pc}

08007994 <__smakebuf_r>:
 8007994:	898b      	ldrh	r3, [r1, #12]
 8007996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007998:	079d      	lsls	r5, r3, #30
 800799a:	4606      	mov	r6, r0
 800799c:	460c      	mov	r4, r1
 800799e:	d507      	bpl.n	80079b0 <__smakebuf_r+0x1c>
 80079a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	6123      	str	r3, [r4, #16]
 80079a8:	2301      	movs	r3, #1
 80079aa:	6163      	str	r3, [r4, #20]
 80079ac:	b002      	add	sp, #8
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	ab01      	add	r3, sp, #4
 80079b2:	466a      	mov	r2, sp
 80079b4:	f7ff ffc9 	bl	800794a <__swhatbuf_r>
 80079b8:	9900      	ldr	r1, [sp, #0]
 80079ba:	4605      	mov	r5, r0
 80079bc:	4630      	mov	r0, r6
 80079be:	f7fe f919 	bl	8005bf4 <_malloc_r>
 80079c2:	b948      	cbnz	r0, 80079d8 <__smakebuf_r+0x44>
 80079c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079c8:	059a      	lsls	r2, r3, #22
 80079ca:	d4ef      	bmi.n	80079ac <__smakebuf_r+0x18>
 80079cc:	f023 0303 	bic.w	r3, r3, #3
 80079d0:	f043 0302 	orr.w	r3, r3, #2
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	e7e3      	b.n	80079a0 <__smakebuf_r+0xc>
 80079d8:	4b0d      	ldr	r3, [pc, #52]	; (8007a10 <__smakebuf_r+0x7c>)
 80079da:	62b3      	str	r3, [r6, #40]	; 0x28
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	6020      	str	r0, [r4, #0]
 80079e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	9b00      	ldr	r3, [sp, #0]
 80079e8:	6163      	str	r3, [r4, #20]
 80079ea:	9b01      	ldr	r3, [sp, #4]
 80079ec:	6120      	str	r0, [r4, #16]
 80079ee:	b15b      	cbz	r3, 8007a08 <__smakebuf_r+0x74>
 80079f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079f4:	4630      	mov	r0, r6
 80079f6:	f000 ff67 	bl	80088c8 <_isatty_r>
 80079fa:	b128      	cbz	r0, 8007a08 <__smakebuf_r+0x74>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f023 0303 	bic.w	r3, r3, #3
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	89a0      	ldrh	r0, [r4, #12]
 8007a0a:	4305      	orrs	r5, r0
 8007a0c:	81a5      	strh	r5, [r4, #12]
 8007a0e:	e7cd      	b.n	80079ac <__smakebuf_r+0x18>
 8007a10:	08007799 	.word	0x08007799

08007a14 <memcpy>:
 8007a14:	440a      	add	r2, r1
 8007a16:	4291      	cmp	r1, r2
 8007a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a1c:	d100      	bne.n	8007a20 <memcpy+0xc>
 8007a1e:	4770      	bx	lr
 8007a20:	b510      	push	{r4, lr}
 8007a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a2a:	4291      	cmp	r1, r2
 8007a2c:	d1f9      	bne.n	8007a22 <memcpy+0xe>
 8007a2e:	bd10      	pop	{r4, pc}

08007a30 <__malloc_lock>:
 8007a30:	4801      	ldr	r0, [pc, #4]	; (8007a38 <__malloc_lock+0x8>)
 8007a32:	f7ff bf88 	b.w	8007946 <__retarget_lock_acquire_recursive>
 8007a36:	bf00      	nop
 8007a38:	20000394 	.word	0x20000394

08007a3c <__malloc_unlock>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	; (8007a44 <__malloc_unlock+0x8>)
 8007a3e:	f7ff bf83 	b.w	8007948 <__retarget_lock_release_recursive>
 8007a42:	bf00      	nop
 8007a44:	20000394 	.word	0x20000394

08007a48 <_Balloc>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	460d      	mov	r5, r1
 8007a50:	b976      	cbnz	r6, 8007a70 <_Balloc+0x28>
 8007a52:	2010      	movs	r0, #16
 8007a54:	f7fe f852 	bl	8005afc <malloc>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6260      	str	r0, [r4, #36]	; 0x24
 8007a5c:	b920      	cbnz	r0, 8007a68 <_Balloc+0x20>
 8007a5e:	4b18      	ldr	r3, [pc, #96]	; (8007ac0 <_Balloc+0x78>)
 8007a60:	4818      	ldr	r0, [pc, #96]	; (8007ac4 <_Balloc+0x7c>)
 8007a62:	2166      	movs	r1, #102	; 0x66
 8007a64:	f000 fede 	bl	8008824 <__assert_func>
 8007a68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a6c:	6006      	str	r6, [r0, #0]
 8007a6e:	60c6      	str	r6, [r0, #12]
 8007a70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a72:	68f3      	ldr	r3, [r6, #12]
 8007a74:	b183      	cbz	r3, 8007a98 <_Balloc+0x50>
 8007a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a7e:	b9b8      	cbnz	r0, 8007ab0 <_Balloc+0x68>
 8007a80:	2101      	movs	r1, #1
 8007a82:	fa01 f605 	lsl.w	r6, r1, r5
 8007a86:	1d72      	adds	r2, r6, #5
 8007a88:	0092      	lsls	r2, r2, #2
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f000 fb60 	bl	8008150 <_calloc_r>
 8007a90:	b160      	cbz	r0, 8007aac <_Balloc+0x64>
 8007a92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a96:	e00e      	b.n	8007ab6 <_Balloc+0x6e>
 8007a98:	2221      	movs	r2, #33	; 0x21
 8007a9a:	2104      	movs	r1, #4
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f000 fb57 	bl	8008150 <_calloc_r>
 8007aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aa4:	60f0      	str	r0, [r6, #12]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e4      	bne.n	8007a76 <_Balloc+0x2e>
 8007aac:	2000      	movs	r0, #0
 8007aae:	bd70      	pop	{r4, r5, r6, pc}
 8007ab0:	6802      	ldr	r2, [r0, #0]
 8007ab2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007abc:	e7f7      	b.n	8007aae <_Balloc+0x66>
 8007abe:	bf00      	nop
 8007ac0:	08009661 	.word	0x08009661
 8007ac4:	08009744 	.word	0x08009744

08007ac8 <_Bfree>:
 8007ac8:	b570      	push	{r4, r5, r6, lr}
 8007aca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007acc:	4605      	mov	r5, r0
 8007ace:	460c      	mov	r4, r1
 8007ad0:	b976      	cbnz	r6, 8007af0 <_Bfree+0x28>
 8007ad2:	2010      	movs	r0, #16
 8007ad4:	f7fe f812 	bl	8005afc <malloc>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	6268      	str	r0, [r5, #36]	; 0x24
 8007adc:	b920      	cbnz	r0, 8007ae8 <_Bfree+0x20>
 8007ade:	4b09      	ldr	r3, [pc, #36]	; (8007b04 <_Bfree+0x3c>)
 8007ae0:	4809      	ldr	r0, [pc, #36]	; (8007b08 <_Bfree+0x40>)
 8007ae2:	218a      	movs	r1, #138	; 0x8a
 8007ae4:	f000 fe9e 	bl	8008824 <__assert_func>
 8007ae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007aec:	6006      	str	r6, [r0, #0]
 8007aee:	60c6      	str	r6, [r0, #12]
 8007af0:	b13c      	cbz	r4, 8007b02 <_Bfree+0x3a>
 8007af2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007af4:	6862      	ldr	r2, [r4, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007afc:	6021      	str	r1, [r4, #0]
 8007afe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	08009661 	.word	0x08009661
 8007b08:	08009744 	.word	0x08009744

08007b0c <__multadd>:
 8007b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b10:	690d      	ldr	r5, [r1, #16]
 8007b12:	4607      	mov	r7, r0
 8007b14:	460c      	mov	r4, r1
 8007b16:	461e      	mov	r6, r3
 8007b18:	f101 0c14 	add.w	ip, r1, #20
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	f8dc 3000 	ldr.w	r3, [ip]
 8007b22:	b299      	uxth	r1, r3
 8007b24:	fb02 6101 	mla	r1, r2, r1, r6
 8007b28:	0c1e      	lsrs	r6, r3, #16
 8007b2a:	0c0b      	lsrs	r3, r1, #16
 8007b2c:	fb02 3306 	mla	r3, r2, r6, r3
 8007b30:	b289      	uxth	r1, r1
 8007b32:	3001      	adds	r0, #1
 8007b34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b38:	4285      	cmp	r5, r0
 8007b3a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b42:	dcec      	bgt.n	8007b1e <__multadd+0x12>
 8007b44:	b30e      	cbz	r6, 8007b8a <__multadd+0x7e>
 8007b46:	68a3      	ldr	r3, [r4, #8]
 8007b48:	42ab      	cmp	r3, r5
 8007b4a:	dc19      	bgt.n	8007b80 <__multadd+0x74>
 8007b4c:	6861      	ldr	r1, [r4, #4]
 8007b4e:	4638      	mov	r0, r7
 8007b50:	3101      	adds	r1, #1
 8007b52:	f7ff ff79 	bl	8007a48 <_Balloc>
 8007b56:	4680      	mov	r8, r0
 8007b58:	b928      	cbnz	r0, 8007b66 <__multadd+0x5a>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <__multadd+0x84>)
 8007b5e:	480d      	ldr	r0, [pc, #52]	; (8007b94 <__multadd+0x88>)
 8007b60:	21b5      	movs	r1, #181	; 0xb5
 8007b62:	f000 fe5f 	bl	8008824 <__assert_func>
 8007b66:	6922      	ldr	r2, [r4, #16]
 8007b68:	3202      	adds	r2, #2
 8007b6a:	f104 010c 	add.w	r1, r4, #12
 8007b6e:	0092      	lsls	r2, r2, #2
 8007b70:	300c      	adds	r0, #12
 8007b72:	f7ff ff4f 	bl	8007a14 <memcpy>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff ffa5 	bl	8007ac8 <_Bfree>
 8007b7e:	4644      	mov	r4, r8
 8007b80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b84:	3501      	adds	r5, #1
 8007b86:	615e      	str	r6, [r3, #20]
 8007b88:	6125      	str	r5, [r4, #16]
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b90:	080096d3 	.word	0x080096d3
 8007b94:	08009744 	.word	0x08009744

08007b98 <__hi0bits>:
 8007b98:	0c03      	lsrs	r3, r0, #16
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	b9d3      	cbnz	r3, 8007bd4 <__hi0bits+0x3c>
 8007b9e:	0400      	lsls	r0, r0, #16
 8007ba0:	2310      	movs	r3, #16
 8007ba2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ba6:	bf04      	itt	eq
 8007ba8:	0200      	lsleq	r0, r0, #8
 8007baa:	3308      	addeq	r3, #8
 8007bac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007bb0:	bf04      	itt	eq
 8007bb2:	0100      	lsleq	r0, r0, #4
 8007bb4:	3304      	addeq	r3, #4
 8007bb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007bba:	bf04      	itt	eq
 8007bbc:	0080      	lsleq	r0, r0, #2
 8007bbe:	3302      	addeq	r3, #2
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	db05      	blt.n	8007bd0 <__hi0bits+0x38>
 8007bc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007bc8:	f103 0301 	add.w	r3, r3, #1
 8007bcc:	bf08      	it	eq
 8007bce:	2320      	moveq	r3, #32
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	4770      	bx	lr
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e7e4      	b.n	8007ba2 <__hi0bits+0xa>

08007bd8 <__lo0bits>:
 8007bd8:	6803      	ldr	r3, [r0, #0]
 8007bda:	f013 0207 	ands.w	r2, r3, #7
 8007bde:	4601      	mov	r1, r0
 8007be0:	d00b      	beq.n	8007bfa <__lo0bits+0x22>
 8007be2:	07da      	lsls	r2, r3, #31
 8007be4:	d423      	bmi.n	8007c2e <__lo0bits+0x56>
 8007be6:	0798      	lsls	r0, r3, #30
 8007be8:	bf49      	itett	mi
 8007bea:	085b      	lsrmi	r3, r3, #1
 8007bec:	089b      	lsrpl	r3, r3, #2
 8007bee:	2001      	movmi	r0, #1
 8007bf0:	600b      	strmi	r3, [r1, #0]
 8007bf2:	bf5c      	itt	pl
 8007bf4:	600b      	strpl	r3, [r1, #0]
 8007bf6:	2002      	movpl	r0, #2
 8007bf8:	4770      	bx	lr
 8007bfa:	b298      	uxth	r0, r3
 8007bfc:	b9a8      	cbnz	r0, 8007c2a <__lo0bits+0x52>
 8007bfe:	0c1b      	lsrs	r3, r3, #16
 8007c00:	2010      	movs	r0, #16
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	b90a      	cbnz	r2, 8007c0a <__lo0bits+0x32>
 8007c06:	3008      	adds	r0, #8
 8007c08:	0a1b      	lsrs	r3, r3, #8
 8007c0a:	071a      	lsls	r2, r3, #28
 8007c0c:	bf04      	itt	eq
 8007c0e:	091b      	lsreq	r3, r3, #4
 8007c10:	3004      	addeq	r0, #4
 8007c12:	079a      	lsls	r2, r3, #30
 8007c14:	bf04      	itt	eq
 8007c16:	089b      	lsreq	r3, r3, #2
 8007c18:	3002      	addeq	r0, #2
 8007c1a:	07da      	lsls	r2, r3, #31
 8007c1c:	d403      	bmi.n	8007c26 <__lo0bits+0x4e>
 8007c1e:	085b      	lsrs	r3, r3, #1
 8007c20:	f100 0001 	add.w	r0, r0, #1
 8007c24:	d005      	beq.n	8007c32 <__lo0bits+0x5a>
 8007c26:	600b      	str	r3, [r1, #0]
 8007c28:	4770      	bx	lr
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	e7e9      	b.n	8007c02 <__lo0bits+0x2a>
 8007c2e:	2000      	movs	r0, #0
 8007c30:	4770      	bx	lr
 8007c32:	2020      	movs	r0, #32
 8007c34:	4770      	bx	lr
	...

08007c38 <__i2b>:
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	f7ff ff03 	bl	8007a48 <_Balloc>
 8007c42:	4602      	mov	r2, r0
 8007c44:	b928      	cbnz	r0, 8007c52 <__i2b+0x1a>
 8007c46:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <__i2b+0x24>)
 8007c48:	4805      	ldr	r0, [pc, #20]	; (8007c60 <__i2b+0x28>)
 8007c4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c4e:	f000 fde9 	bl	8008824 <__assert_func>
 8007c52:	2301      	movs	r3, #1
 8007c54:	6144      	str	r4, [r0, #20]
 8007c56:	6103      	str	r3, [r0, #16]
 8007c58:	bd10      	pop	{r4, pc}
 8007c5a:	bf00      	nop
 8007c5c:	080096d3 	.word	0x080096d3
 8007c60:	08009744 	.word	0x08009744

08007c64 <__multiply>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	4691      	mov	r9, r2
 8007c6a:	690a      	ldr	r2, [r1, #16]
 8007c6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	bfb8      	it	lt
 8007c74:	460b      	movlt	r3, r1
 8007c76:	460c      	mov	r4, r1
 8007c78:	bfbc      	itt	lt
 8007c7a:	464c      	movlt	r4, r9
 8007c7c:	4699      	movlt	r9, r3
 8007c7e:	6927      	ldr	r7, [r4, #16]
 8007c80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c84:	68a3      	ldr	r3, [r4, #8]
 8007c86:	6861      	ldr	r1, [r4, #4]
 8007c88:	eb07 060a 	add.w	r6, r7, sl
 8007c8c:	42b3      	cmp	r3, r6
 8007c8e:	b085      	sub	sp, #20
 8007c90:	bfb8      	it	lt
 8007c92:	3101      	addlt	r1, #1
 8007c94:	f7ff fed8 	bl	8007a48 <_Balloc>
 8007c98:	b930      	cbnz	r0, 8007ca8 <__multiply+0x44>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	4b44      	ldr	r3, [pc, #272]	; (8007db0 <__multiply+0x14c>)
 8007c9e:	4845      	ldr	r0, [pc, #276]	; (8007db4 <__multiply+0x150>)
 8007ca0:	f240 115d 	movw	r1, #349	; 0x15d
 8007ca4:	f000 fdbe 	bl	8008824 <__assert_func>
 8007ca8:	f100 0514 	add.w	r5, r0, #20
 8007cac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cb0:	462b      	mov	r3, r5
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4543      	cmp	r3, r8
 8007cb6:	d321      	bcc.n	8007cfc <__multiply+0x98>
 8007cb8:	f104 0314 	add.w	r3, r4, #20
 8007cbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007cc0:	f109 0314 	add.w	r3, r9, #20
 8007cc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007cc8:	9202      	str	r2, [sp, #8]
 8007cca:	1b3a      	subs	r2, r7, r4
 8007ccc:	3a15      	subs	r2, #21
 8007cce:	f022 0203 	bic.w	r2, r2, #3
 8007cd2:	3204      	adds	r2, #4
 8007cd4:	f104 0115 	add.w	r1, r4, #21
 8007cd8:	428f      	cmp	r7, r1
 8007cda:	bf38      	it	cc
 8007cdc:	2204      	movcc	r2, #4
 8007cde:	9201      	str	r2, [sp, #4]
 8007ce0:	9a02      	ldr	r2, [sp, #8]
 8007ce2:	9303      	str	r3, [sp, #12]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d80c      	bhi.n	8007d02 <__multiply+0x9e>
 8007ce8:	2e00      	cmp	r6, #0
 8007cea:	dd03      	ble.n	8007cf4 <__multiply+0x90>
 8007cec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d05a      	beq.n	8007daa <__multiply+0x146>
 8007cf4:	6106      	str	r6, [r0, #16]
 8007cf6:	b005      	add	sp, #20
 8007cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfc:	f843 2b04 	str.w	r2, [r3], #4
 8007d00:	e7d8      	b.n	8007cb4 <__multiply+0x50>
 8007d02:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d06:	f1ba 0f00 	cmp.w	sl, #0
 8007d0a:	d024      	beq.n	8007d56 <__multiply+0xf2>
 8007d0c:	f104 0e14 	add.w	lr, r4, #20
 8007d10:	46a9      	mov	r9, r5
 8007d12:	f04f 0c00 	mov.w	ip, #0
 8007d16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d1a:	f8d9 1000 	ldr.w	r1, [r9]
 8007d1e:	fa1f fb82 	uxth.w	fp, r2
 8007d22:	b289      	uxth	r1, r1
 8007d24:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d2c:	f8d9 2000 	ldr.w	r2, [r9]
 8007d30:	4461      	add	r1, ip
 8007d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d36:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d3e:	b289      	uxth	r1, r1
 8007d40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d44:	4577      	cmp	r7, lr
 8007d46:	f849 1b04 	str.w	r1, [r9], #4
 8007d4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d4e:	d8e2      	bhi.n	8007d16 <__multiply+0xb2>
 8007d50:	9a01      	ldr	r2, [sp, #4]
 8007d52:	f845 c002 	str.w	ip, [r5, r2]
 8007d56:	9a03      	ldr	r2, [sp, #12]
 8007d58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	f1b9 0f00 	cmp.w	r9, #0
 8007d62:	d020      	beq.n	8007da6 <__multiply+0x142>
 8007d64:	6829      	ldr	r1, [r5, #0]
 8007d66:	f104 0c14 	add.w	ip, r4, #20
 8007d6a:	46ae      	mov	lr, r5
 8007d6c:	f04f 0a00 	mov.w	sl, #0
 8007d70:	f8bc b000 	ldrh.w	fp, [ip]
 8007d74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d78:	fb09 220b 	mla	r2, r9, fp, r2
 8007d7c:	4492      	add	sl, r2
 8007d7e:	b289      	uxth	r1, r1
 8007d80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d84:	f84e 1b04 	str.w	r1, [lr], #4
 8007d88:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d8c:	f8be 1000 	ldrh.w	r1, [lr]
 8007d90:	0c12      	lsrs	r2, r2, #16
 8007d92:	fb09 1102 	mla	r1, r9, r2, r1
 8007d96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007d9a:	4567      	cmp	r7, ip
 8007d9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007da0:	d8e6      	bhi.n	8007d70 <__multiply+0x10c>
 8007da2:	9a01      	ldr	r2, [sp, #4]
 8007da4:	50a9      	str	r1, [r5, r2]
 8007da6:	3504      	adds	r5, #4
 8007da8:	e79a      	b.n	8007ce0 <__multiply+0x7c>
 8007daa:	3e01      	subs	r6, #1
 8007dac:	e79c      	b.n	8007ce8 <__multiply+0x84>
 8007dae:	bf00      	nop
 8007db0:	080096d3 	.word	0x080096d3
 8007db4:	08009744 	.word	0x08009744

08007db8 <__pow5mult>:
 8007db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dbc:	4615      	mov	r5, r2
 8007dbe:	f012 0203 	ands.w	r2, r2, #3
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	460f      	mov	r7, r1
 8007dc6:	d007      	beq.n	8007dd8 <__pow5mult+0x20>
 8007dc8:	4c25      	ldr	r4, [pc, #148]	; (8007e60 <__pow5mult+0xa8>)
 8007dca:	3a01      	subs	r2, #1
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dd2:	f7ff fe9b 	bl	8007b0c <__multadd>
 8007dd6:	4607      	mov	r7, r0
 8007dd8:	10ad      	asrs	r5, r5, #2
 8007dda:	d03d      	beq.n	8007e58 <__pow5mult+0xa0>
 8007ddc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dde:	b97c      	cbnz	r4, 8007e00 <__pow5mult+0x48>
 8007de0:	2010      	movs	r0, #16
 8007de2:	f7fd fe8b 	bl	8005afc <malloc>
 8007de6:	4602      	mov	r2, r0
 8007de8:	6270      	str	r0, [r6, #36]	; 0x24
 8007dea:	b928      	cbnz	r0, 8007df8 <__pow5mult+0x40>
 8007dec:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <__pow5mult+0xac>)
 8007dee:	481e      	ldr	r0, [pc, #120]	; (8007e68 <__pow5mult+0xb0>)
 8007df0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007df4:	f000 fd16 	bl	8008824 <__assert_func>
 8007df8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dfc:	6004      	str	r4, [r0, #0]
 8007dfe:	60c4      	str	r4, [r0, #12]
 8007e00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e08:	b94c      	cbnz	r4, 8007e1e <__pow5mult+0x66>
 8007e0a:	f240 2171 	movw	r1, #625	; 0x271
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7ff ff12 	bl	8007c38 <__i2b>
 8007e14:	2300      	movs	r3, #0
 8007e16:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	6003      	str	r3, [r0, #0]
 8007e1e:	f04f 0900 	mov.w	r9, #0
 8007e22:	07eb      	lsls	r3, r5, #31
 8007e24:	d50a      	bpl.n	8007e3c <__pow5mult+0x84>
 8007e26:	4639      	mov	r1, r7
 8007e28:	4622      	mov	r2, r4
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7ff ff1a 	bl	8007c64 <__multiply>
 8007e30:	4639      	mov	r1, r7
 8007e32:	4680      	mov	r8, r0
 8007e34:	4630      	mov	r0, r6
 8007e36:	f7ff fe47 	bl	8007ac8 <_Bfree>
 8007e3a:	4647      	mov	r7, r8
 8007e3c:	106d      	asrs	r5, r5, #1
 8007e3e:	d00b      	beq.n	8007e58 <__pow5mult+0xa0>
 8007e40:	6820      	ldr	r0, [r4, #0]
 8007e42:	b938      	cbnz	r0, 8007e54 <__pow5mult+0x9c>
 8007e44:	4622      	mov	r2, r4
 8007e46:	4621      	mov	r1, r4
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f7ff ff0b 	bl	8007c64 <__multiply>
 8007e4e:	6020      	str	r0, [r4, #0]
 8007e50:	f8c0 9000 	str.w	r9, [r0]
 8007e54:	4604      	mov	r4, r0
 8007e56:	e7e4      	b.n	8007e22 <__pow5mult+0x6a>
 8007e58:	4638      	mov	r0, r7
 8007e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e5e:	bf00      	nop
 8007e60:	08009890 	.word	0x08009890
 8007e64:	08009661 	.word	0x08009661
 8007e68:	08009744 	.word	0x08009744

08007e6c <__lshift>:
 8007e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e70:	460c      	mov	r4, r1
 8007e72:	6849      	ldr	r1, [r1, #4]
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	4691      	mov	r9, r2
 8007e80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e84:	f108 0601 	add.w	r6, r8, #1
 8007e88:	42b3      	cmp	r3, r6
 8007e8a:	db0b      	blt.n	8007ea4 <__lshift+0x38>
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	f7ff fddb 	bl	8007a48 <_Balloc>
 8007e92:	4605      	mov	r5, r0
 8007e94:	b948      	cbnz	r0, 8007eaa <__lshift+0x3e>
 8007e96:	4602      	mov	r2, r0
 8007e98:	4b2a      	ldr	r3, [pc, #168]	; (8007f44 <__lshift+0xd8>)
 8007e9a:	482b      	ldr	r0, [pc, #172]	; (8007f48 <__lshift+0xdc>)
 8007e9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ea0:	f000 fcc0 	bl	8008824 <__assert_func>
 8007ea4:	3101      	adds	r1, #1
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	e7ee      	b.n	8007e88 <__lshift+0x1c>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f100 0114 	add.w	r1, r0, #20
 8007eb0:	f100 0210 	add.w	r2, r0, #16
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	4553      	cmp	r3, sl
 8007eb8:	db37      	blt.n	8007f2a <__lshift+0xbe>
 8007eba:	6920      	ldr	r0, [r4, #16]
 8007ebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ec0:	f104 0314 	add.w	r3, r4, #20
 8007ec4:	f019 091f 	ands.w	r9, r9, #31
 8007ec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ecc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ed0:	d02f      	beq.n	8007f32 <__lshift+0xc6>
 8007ed2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ed6:	468a      	mov	sl, r1
 8007ed8:	f04f 0c00 	mov.w	ip, #0
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	fa02 f209 	lsl.w	r2, r2, r9
 8007ee2:	ea42 020c 	orr.w	r2, r2, ip
 8007ee6:	f84a 2b04 	str.w	r2, [sl], #4
 8007eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eee:	4298      	cmp	r0, r3
 8007ef0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007ef4:	d8f2      	bhi.n	8007edc <__lshift+0x70>
 8007ef6:	1b03      	subs	r3, r0, r4
 8007ef8:	3b15      	subs	r3, #21
 8007efa:	f023 0303 	bic.w	r3, r3, #3
 8007efe:	3304      	adds	r3, #4
 8007f00:	f104 0215 	add.w	r2, r4, #21
 8007f04:	4290      	cmp	r0, r2
 8007f06:	bf38      	it	cc
 8007f08:	2304      	movcc	r3, #4
 8007f0a:	f841 c003 	str.w	ip, [r1, r3]
 8007f0e:	f1bc 0f00 	cmp.w	ip, #0
 8007f12:	d001      	beq.n	8007f18 <__lshift+0xac>
 8007f14:	f108 0602 	add.w	r6, r8, #2
 8007f18:	3e01      	subs	r6, #1
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	612e      	str	r6, [r5, #16]
 8007f1e:	4621      	mov	r1, r4
 8007f20:	f7ff fdd2 	bl	8007ac8 <_Bfree>
 8007f24:	4628      	mov	r0, r5
 8007f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f2e:	3301      	adds	r3, #1
 8007f30:	e7c1      	b.n	8007eb6 <__lshift+0x4a>
 8007f32:	3904      	subs	r1, #4
 8007f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f38:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f3c:	4298      	cmp	r0, r3
 8007f3e:	d8f9      	bhi.n	8007f34 <__lshift+0xc8>
 8007f40:	e7ea      	b.n	8007f18 <__lshift+0xac>
 8007f42:	bf00      	nop
 8007f44:	080096d3 	.word	0x080096d3
 8007f48:	08009744 	.word	0x08009744

08007f4c <__mcmp>:
 8007f4c:	b530      	push	{r4, r5, lr}
 8007f4e:	6902      	ldr	r2, [r0, #16]
 8007f50:	690c      	ldr	r4, [r1, #16]
 8007f52:	1b12      	subs	r2, r2, r4
 8007f54:	d10e      	bne.n	8007f74 <__mcmp+0x28>
 8007f56:	f100 0314 	add.w	r3, r0, #20
 8007f5a:	3114      	adds	r1, #20
 8007f5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f6c:	42a5      	cmp	r5, r4
 8007f6e:	d003      	beq.n	8007f78 <__mcmp+0x2c>
 8007f70:	d305      	bcc.n	8007f7e <__mcmp+0x32>
 8007f72:	2201      	movs	r2, #1
 8007f74:	4610      	mov	r0, r2
 8007f76:	bd30      	pop	{r4, r5, pc}
 8007f78:	4283      	cmp	r3, r0
 8007f7a:	d3f3      	bcc.n	8007f64 <__mcmp+0x18>
 8007f7c:	e7fa      	b.n	8007f74 <__mcmp+0x28>
 8007f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f82:	e7f7      	b.n	8007f74 <__mcmp+0x28>

08007f84 <__mdiff>:
 8007f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f88:	460c      	mov	r4, r1
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	4620      	mov	r0, r4
 8007f90:	4690      	mov	r8, r2
 8007f92:	f7ff ffdb 	bl	8007f4c <__mcmp>
 8007f96:	1e05      	subs	r5, r0, #0
 8007f98:	d110      	bne.n	8007fbc <__mdiff+0x38>
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f7ff fd53 	bl	8007a48 <_Balloc>
 8007fa2:	b930      	cbnz	r0, 8007fb2 <__mdiff+0x2e>
 8007fa4:	4b3a      	ldr	r3, [pc, #232]	; (8008090 <__mdiff+0x10c>)
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	f240 2132 	movw	r1, #562	; 0x232
 8007fac:	4839      	ldr	r0, [pc, #228]	; (8008094 <__mdiff+0x110>)
 8007fae:	f000 fc39 	bl	8008824 <__assert_func>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fbc:	bfa4      	itt	ge
 8007fbe:	4643      	movge	r3, r8
 8007fc0:	46a0      	movge	r8, r4
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fc8:	bfa6      	itte	ge
 8007fca:	461c      	movge	r4, r3
 8007fcc:	2500      	movge	r5, #0
 8007fce:	2501      	movlt	r5, #1
 8007fd0:	f7ff fd3a 	bl	8007a48 <_Balloc>
 8007fd4:	b920      	cbnz	r0, 8007fe0 <__mdiff+0x5c>
 8007fd6:	4b2e      	ldr	r3, [pc, #184]	; (8008090 <__mdiff+0x10c>)
 8007fd8:	4602      	mov	r2, r0
 8007fda:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007fde:	e7e5      	b.n	8007fac <__mdiff+0x28>
 8007fe0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fe4:	6926      	ldr	r6, [r4, #16]
 8007fe6:	60c5      	str	r5, [r0, #12]
 8007fe8:	f104 0914 	add.w	r9, r4, #20
 8007fec:	f108 0514 	add.w	r5, r8, #20
 8007ff0:	f100 0e14 	add.w	lr, r0, #20
 8007ff4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ff8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ffc:	f108 0210 	add.w	r2, r8, #16
 8008000:	46f2      	mov	sl, lr
 8008002:	2100      	movs	r1, #0
 8008004:	f859 3b04 	ldr.w	r3, [r9], #4
 8008008:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800800c:	fa1f f883 	uxth.w	r8, r3
 8008010:	fa11 f18b 	uxtah	r1, r1, fp
 8008014:	0c1b      	lsrs	r3, r3, #16
 8008016:	eba1 0808 	sub.w	r8, r1, r8
 800801a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800801e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008022:	fa1f f888 	uxth.w	r8, r8
 8008026:	1419      	asrs	r1, r3, #16
 8008028:	454e      	cmp	r6, r9
 800802a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800802e:	f84a 3b04 	str.w	r3, [sl], #4
 8008032:	d8e7      	bhi.n	8008004 <__mdiff+0x80>
 8008034:	1b33      	subs	r3, r6, r4
 8008036:	3b15      	subs	r3, #21
 8008038:	f023 0303 	bic.w	r3, r3, #3
 800803c:	3304      	adds	r3, #4
 800803e:	3415      	adds	r4, #21
 8008040:	42a6      	cmp	r6, r4
 8008042:	bf38      	it	cc
 8008044:	2304      	movcc	r3, #4
 8008046:	441d      	add	r5, r3
 8008048:	4473      	add	r3, lr
 800804a:	469e      	mov	lr, r3
 800804c:	462e      	mov	r6, r5
 800804e:	4566      	cmp	r6, ip
 8008050:	d30e      	bcc.n	8008070 <__mdiff+0xec>
 8008052:	f10c 0203 	add.w	r2, ip, #3
 8008056:	1b52      	subs	r2, r2, r5
 8008058:	f022 0203 	bic.w	r2, r2, #3
 800805c:	3d03      	subs	r5, #3
 800805e:	45ac      	cmp	ip, r5
 8008060:	bf38      	it	cc
 8008062:	2200      	movcc	r2, #0
 8008064:	441a      	add	r2, r3
 8008066:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800806a:	b17b      	cbz	r3, 800808c <__mdiff+0x108>
 800806c:	6107      	str	r7, [r0, #16]
 800806e:	e7a3      	b.n	8007fb8 <__mdiff+0x34>
 8008070:	f856 8b04 	ldr.w	r8, [r6], #4
 8008074:	fa11 f288 	uxtah	r2, r1, r8
 8008078:	1414      	asrs	r4, r2, #16
 800807a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800807e:	b292      	uxth	r2, r2
 8008080:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008084:	f84e 2b04 	str.w	r2, [lr], #4
 8008088:	1421      	asrs	r1, r4, #16
 800808a:	e7e0      	b.n	800804e <__mdiff+0xca>
 800808c:	3f01      	subs	r7, #1
 800808e:	e7ea      	b.n	8008066 <__mdiff+0xe2>
 8008090:	080096d3 	.word	0x080096d3
 8008094:	08009744 	.word	0x08009744

08008098 <__d2b>:
 8008098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800809c:	4689      	mov	r9, r1
 800809e:	2101      	movs	r1, #1
 80080a0:	ec57 6b10 	vmov	r6, r7, d0
 80080a4:	4690      	mov	r8, r2
 80080a6:	f7ff fccf 	bl	8007a48 <_Balloc>
 80080aa:	4604      	mov	r4, r0
 80080ac:	b930      	cbnz	r0, 80080bc <__d2b+0x24>
 80080ae:	4602      	mov	r2, r0
 80080b0:	4b25      	ldr	r3, [pc, #148]	; (8008148 <__d2b+0xb0>)
 80080b2:	4826      	ldr	r0, [pc, #152]	; (800814c <__d2b+0xb4>)
 80080b4:	f240 310a 	movw	r1, #778	; 0x30a
 80080b8:	f000 fbb4 	bl	8008824 <__assert_func>
 80080bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80080c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080c4:	bb35      	cbnz	r5, 8008114 <__d2b+0x7c>
 80080c6:	2e00      	cmp	r6, #0
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	d028      	beq.n	800811e <__d2b+0x86>
 80080cc:	4668      	mov	r0, sp
 80080ce:	9600      	str	r6, [sp, #0]
 80080d0:	f7ff fd82 	bl	8007bd8 <__lo0bits>
 80080d4:	9900      	ldr	r1, [sp, #0]
 80080d6:	b300      	cbz	r0, 800811a <__d2b+0x82>
 80080d8:	9a01      	ldr	r2, [sp, #4]
 80080da:	f1c0 0320 	rsb	r3, r0, #32
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	430b      	orrs	r3, r1
 80080e4:	40c2      	lsrs	r2, r0
 80080e6:	6163      	str	r3, [r4, #20]
 80080e8:	9201      	str	r2, [sp, #4]
 80080ea:	9b01      	ldr	r3, [sp, #4]
 80080ec:	61a3      	str	r3, [r4, #24]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	bf14      	ite	ne
 80080f2:	2202      	movne	r2, #2
 80080f4:	2201      	moveq	r2, #1
 80080f6:	6122      	str	r2, [r4, #16]
 80080f8:	b1d5      	cbz	r5, 8008130 <__d2b+0x98>
 80080fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080fe:	4405      	add	r5, r0
 8008100:	f8c9 5000 	str.w	r5, [r9]
 8008104:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008108:	f8c8 0000 	str.w	r0, [r8]
 800810c:	4620      	mov	r0, r4
 800810e:	b003      	add	sp, #12
 8008110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008118:	e7d5      	b.n	80080c6 <__d2b+0x2e>
 800811a:	6161      	str	r1, [r4, #20]
 800811c:	e7e5      	b.n	80080ea <__d2b+0x52>
 800811e:	a801      	add	r0, sp, #4
 8008120:	f7ff fd5a 	bl	8007bd8 <__lo0bits>
 8008124:	9b01      	ldr	r3, [sp, #4]
 8008126:	6163      	str	r3, [r4, #20]
 8008128:	2201      	movs	r2, #1
 800812a:	6122      	str	r2, [r4, #16]
 800812c:	3020      	adds	r0, #32
 800812e:	e7e3      	b.n	80080f8 <__d2b+0x60>
 8008130:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008134:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008138:	f8c9 0000 	str.w	r0, [r9]
 800813c:	6918      	ldr	r0, [r3, #16]
 800813e:	f7ff fd2b 	bl	8007b98 <__hi0bits>
 8008142:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008146:	e7df      	b.n	8008108 <__d2b+0x70>
 8008148:	080096d3 	.word	0x080096d3
 800814c:	08009744 	.word	0x08009744

08008150 <_calloc_r>:
 8008150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008152:	fba1 2402 	umull	r2, r4, r1, r2
 8008156:	b94c      	cbnz	r4, 800816c <_calloc_r+0x1c>
 8008158:	4611      	mov	r1, r2
 800815a:	9201      	str	r2, [sp, #4]
 800815c:	f7fd fd4a 	bl	8005bf4 <_malloc_r>
 8008160:	9a01      	ldr	r2, [sp, #4]
 8008162:	4605      	mov	r5, r0
 8008164:	b930      	cbnz	r0, 8008174 <_calloc_r+0x24>
 8008166:	4628      	mov	r0, r5
 8008168:	b003      	add	sp, #12
 800816a:	bd30      	pop	{r4, r5, pc}
 800816c:	220c      	movs	r2, #12
 800816e:	6002      	str	r2, [r0, #0]
 8008170:	2500      	movs	r5, #0
 8008172:	e7f8      	b.n	8008166 <_calloc_r+0x16>
 8008174:	4621      	mov	r1, r4
 8008176:	f7fd fcc9 	bl	8005b0c <memset>
 800817a:	e7f4      	b.n	8008166 <_calloc_r+0x16>

0800817c <__ssputs_r>:
 800817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	688e      	ldr	r6, [r1, #8]
 8008182:	429e      	cmp	r6, r3
 8008184:	4682      	mov	sl, r0
 8008186:	460c      	mov	r4, r1
 8008188:	4690      	mov	r8, r2
 800818a:	461f      	mov	r7, r3
 800818c:	d838      	bhi.n	8008200 <__ssputs_r+0x84>
 800818e:	898a      	ldrh	r2, [r1, #12]
 8008190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008194:	d032      	beq.n	80081fc <__ssputs_r+0x80>
 8008196:	6825      	ldr	r5, [r4, #0]
 8008198:	6909      	ldr	r1, [r1, #16]
 800819a:	eba5 0901 	sub.w	r9, r5, r1
 800819e:	6965      	ldr	r5, [r4, #20]
 80081a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081a8:	3301      	adds	r3, #1
 80081aa:	444b      	add	r3, r9
 80081ac:	106d      	asrs	r5, r5, #1
 80081ae:	429d      	cmp	r5, r3
 80081b0:	bf38      	it	cc
 80081b2:	461d      	movcc	r5, r3
 80081b4:	0553      	lsls	r3, r2, #21
 80081b6:	d531      	bpl.n	800821c <__ssputs_r+0xa0>
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7fd fd1b 	bl	8005bf4 <_malloc_r>
 80081be:	4606      	mov	r6, r0
 80081c0:	b950      	cbnz	r0, 80081d8 <__ssputs_r+0x5c>
 80081c2:	230c      	movs	r3, #12
 80081c4:	f8ca 3000 	str.w	r3, [sl]
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ce:	81a3      	strh	r3, [r4, #12]
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d8:	6921      	ldr	r1, [r4, #16]
 80081da:	464a      	mov	r2, r9
 80081dc:	f7ff fc1a 	bl	8007a14 <memcpy>
 80081e0:	89a3      	ldrh	r3, [r4, #12]
 80081e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	6126      	str	r6, [r4, #16]
 80081ee:	6165      	str	r5, [r4, #20]
 80081f0:	444e      	add	r6, r9
 80081f2:	eba5 0509 	sub.w	r5, r5, r9
 80081f6:	6026      	str	r6, [r4, #0]
 80081f8:	60a5      	str	r5, [r4, #8]
 80081fa:	463e      	mov	r6, r7
 80081fc:	42be      	cmp	r6, r7
 80081fe:	d900      	bls.n	8008202 <__ssputs_r+0x86>
 8008200:	463e      	mov	r6, r7
 8008202:	6820      	ldr	r0, [r4, #0]
 8008204:	4632      	mov	r2, r6
 8008206:	4641      	mov	r1, r8
 8008208:	f000 fb92 	bl	8008930 <memmove>
 800820c:	68a3      	ldr	r3, [r4, #8]
 800820e:	1b9b      	subs	r3, r3, r6
 8008210:	60a3      	str	r3, [r4, #8]
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	4433      	add	r3, r6
 8008216:	6023      	str	r3, [r4, #0]
 8008218:	2000      	movs	r0, #0
 800821a:	e7db      	b.n	80081d4 <__ssputs_r+0x58>
 800821c:	462a      	mov	r2, r5
 800821e:	f000 fba1 	bl	8008964 <_realloc_r>
 8008222:	4606      	mov	r6, r0
 8008224:	2800      	cmp	r0, #0
 8008226:	d1e1      	bne.n	80081ec <__ssputs_r+0x70>
 8008228:	6921      	ldr	r1, [r4, #16]
 800822a:	4650      	mov	r0, sl
 800822c:	f7fd fc76 	bl	8005b1c <_free_r>
 8008230:	e7c7      	b.n	80081c2 <__ssputs_r+0x46>
	...

08008234 <_svfiprintf_r>:
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	4698      	mov	r8, r3
 800823a:	898b      	ldrh	r3, [r1, #12]
 800823c:	061b      	lsls	r3, r3, #24
 800823e:	b09d      	sub	sp, #116	; 0x74
 8008240:	4607      	mov	r7, r0
 8008242:	460d      	mov	r5, r1
 8008244:	4614      	mov	r4, r2
 8008246:	d50e      	bpl.n	8008266 <_svfiprintf_r+0x32>
 8008248:	690b      	ldr	r3, [r1, #16]
 800824a:	b963      	cbnz	r3, 8008266 <_svfiprintf_r+0x32>
 800824c:	2140      	movs	r1, #64	; 0x40
 800824e:	f7fd fcd1 	bl	8005bf4 <_malloc_r>
 8008252:	6028      	str	r0, [r5, #0]
 8008254:	6128      	str	r0, [r5, #16]
 8008256:	b920      	cbnz	r0, 8008262 <_svfiprintf_r+0x2e>
 8008258:	230c      	movs	r3, #12
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	f04f 30ff 	mov.w	r0, #4294967295
 8008260:	e0d1      	b.n	8008406 <_svfiprintf_r+0x1d2>
 8008262:	2340      	movs	r3, #64	; 0x40
 8008264:	616b      	str	r3, [r5, #20]
 8008266:	2300      	movs	r3, #0
 8008268:	9309      	str	r3, [sp, #36]	; 0x24
 800826a:	2320      	movs	r3, #32
 800826c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008270:	f8cd 800c 	str.w	r8, [sp, #12]
 8008274:	2330      	movs	r3, #48	; 0x30
 8008276:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008420 <_svfiprintf_r+0x1ec>
 800827a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800827e:	f04f 0901 	mov.w	r9, #1
 8008282:	4623      	mov	r3, r4
 8008284:	469a      	mov	sl, r3
 8008286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800828a:	b10a      	cbz	r2, 8008290 <_svfiprintf_r+0x5c>
 800828c:	2a25      	cmp	r2, #37	; 0x25
 800828e:	d1f9      	bne.n	8008284 <_svfiprintf_r+0x50>
 8008290:	ebba 0b04 	subs.w	fp, sl, r4
 8008294:	d00b      	beq.n	80082ae <_svfiprintf_r+0x7a>
 8008296:	465b      	mov	r3, fp
 8008298:	4622      	mov	r2, r4
 800829a:	4629      	mov	r1, r5
 800829c:	4638      	mov	r0, r7
 800829e:	f7ff ff6d 	bl	800817c <__ssputs_r>
 80082a2:	3001      	adds	r0, #1
 80082a4:	f000 80aa 	beq.w	80083fc <_svfiprintf_r+0x1c8>
 80082a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082aa:	445a      	add	r2, fp
 80082ac:	9209      	str	r2, [sp, #36]	; 0x24
 80082ae:	f89a 3000 	ldrb.w	r3, [sl]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 80a2 	beq.w	80083fc <_svfiprintf_r+0x1c8>
 80082b8:	2300      	movs	r3, #0
 80082ba:	f04f 32ff 	mov.w	r2, #4294967295
 80082be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082c2:	f10a 0a01 	add.w	sl, sl, #1
 80082c6:	9304      	str	r3, [sp, #16]
 80082c8:	9307      	str	r3, [sp, #28]
 80082ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082ce:	931a      	str	r3, [sp, #104]	; 0x68
 80082d0:	4654      	mov	r4, sl
 80082d2:	2205      	movs	r2, #5
 80082d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d8:	4851      	ldr	r0, [pc, #324]	; (8008420 <_svfiprintf_r+0x1ec>)
 80082da:	f7f7 ff59 	bl	8000190 <memchr>
 80082de:	9a04      	ldr	r2, [sp, #16]
 80082e0:	b9d8      	cbnz	r0, 800831a <_svfiprintf_r+0xe6>
 80082e2:	06d0      	lsls	r0, r2, #27
 80082e4:	bf44      	itt	mi
 80082e6:	2320      	movmi	r3, #32
 80082e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ec:	0711      	lsls	r1, r2, #28
 80082ee:	bf44      	itt	mi
 80082f0:	232b      	movmi	r3, #43	; 0x2b
 80082f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082f6:	f89a 3000 	ldrb.w	r3, [sl]
 80082fa:	2b2a      	cmp	r3, #42	; 0x2a
 80082fc:	d015      	beq.n	800832a <_svfiprintf_r+0xf6>
 80082fe:	9a07      	ldr	r2, [sp, #28]
 8008300:	4654      	mov	r4, sl
 8008302:	2000      	movs	r0, #0
 8008304:	f04f 0c0a 	mov.w	ip, #10
 8008308:	4621      	mov	r1, r4
 800830a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800830e:	3b30      	subs	r3, #48	; 0x30
 8008310:	2b09      	cmp	r3, #9
 8008312:	d94e      	bls.n	80083b2 <_svfiprintf_r+0x17e>
 8008314:	b1b0      	cbz	r0, 8008344 <_svfiprintf_r+0x110>
 8008316:	9207      	str	r2, [sp, #28]
 8008318:	e014      	b.n	8008344 <_svfiprintf_r+0x110>
 800831a:	eba0 0308 	sub.w	r3, r0, r8
 800831e:	fa09 f303 	lsl.w	r3, r9, r3
 8008322:	4313      	orrs	r3, r2
 8008324:	9304      	str	r3, [sp, #16]
 8008326:	46a2      	mov	sl, r4
 8008328:	e7d2      	b.n	80082d0 <_svfiprintf_r+0x9c>
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	1d19      	adds	r1, r3, #4
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	9103      	str	r1, [sp, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	bfbb      	ittet	lt
 8008336:	425b      	neglt	r3, r3
 8008338:	f042 0202 	orrlt.w	r2, r2, #2
 800833c:	9307      	strge	r3, [sp, #28]
 800833e:	9307      	strlt	r3, [sp, #28]
 8008340:	bfb8      	it	lt
 8008342:	9204      	strlt	r2, [sp, #16]
 8008344:	7823      	ldrb	r3, [r4, #0]
 8008346:	2b2e      	cmp	r3, #46	; 0x2e
 8008348:	d10c      	bne.n	8008364 <_svfiprintf_r+0x130>
 800834a:	7863      	ldrb	r3, [r4, #1]
 800834c:	2b2a      	cmp	r3, #42	; 0x2a
 800834e:	d135      	bne.n	80083bc <_svfiprintf_r+0x188>
 8008350:	9b03      	ldr	r3, [sp, #12]
 8008352:	1d1a      	adds	r2, r3, #4
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	9203      	str	r2, [sp, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	bfb8      	it	lt
 800835c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008360:	3402      	adds	r4, #2
 8008362:	9305      	str	r3, [sp, #20]
 8008364:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008430 <_svfiprintf_r+0x1fc>
 8008368:	7821      	ldrb	r1, [r4, #0]
 800836a:	2203      	movs	r2, #3
 800836c:	4650      	mov	r0, sl
 800836e:	f7f7 ff0f 	bl	8000190 <memchr>
 8008372:	b140      	cbz	r0, 8008386 <_svfiprintf_r+0x152>
 8008374:	2340      	movs	r3, #64	; 0x40
 8008376:	eba0 000a 	sub.w	r0, r0, sl
 800837a:	fa03 f000 	lsl.w	r0, r3, r0
 800837e:	9b04      	ldr	r3, [sp, #16]
 8008380:	4303      	orrs	r3, r0
 8008382:	3401      	adds	r4, #1
 8008384:	9304      	str	r3, [sp, #16]
 8008386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800838a:	4826      	ldr	r0, [pc, #152]	; (8008424 <_svfiprintf_r+0x1f0>)
 800838c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008390:	2206      	movs	r2, #6
 8008392:	f7f7 fefd 	bl	8000190 <memchr>
 8008396:	2800      	cmp	r0, #0
 8008398:	d038      	beq.n	800840c <_svfiprintf_r+0x1d8>
 800839a:	4b23      	ldr	r3, [pc, #140]	; (8008428 <_svfiprintf_r+0x1f4>)
 800839c:	bb1b      	cbnz	r3, 80083e6 <_svfiprintf_r+0x1b2>
 800839e:	9b03      	ldr	r3, [sp, #12]
 80083a0:	3307      	adds	r3, #7
 80083a2:	f023 0307 	bic.w	r3, r3, #7
 80083a6:	3308      	adds	r3, #8
 80083a8:	9303      	str	r3, [sp, #12]
 80083aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ac:	4433      	add	r3, r6
 80083ae:	9309      	str	r3, [sp, #36]	; 0x24
 80083b0:	e767      	b.n	8008282 <_svfiprintf_r+0x4e>
 80083b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80083b6:	460c      	mov	r4, r1
 80083b8:	2001      	movs	r0, #1
 80083ba:	e7a5      	b.n	8008308 <_svfiprintf_r+0xd4>
 80083bc:	2300      	movs	r3, #0
 80083be:	3401      	adds	r4, #1
 80083c0:	9305      	str	r3, [sp, #20]
 80083c2:	4619      	mov	r1, r3
 80083c4:	f04f 0c0a 	mov.w	ip, #10
 80083c8:	4620      	mov	r0, r4
 80083ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083ce:	3a30      	subs	r2, #48	; 0x30
 80083d0:	2a09      	cmp	r2, #9
 80083d2:	d903      	bls.n	80083dc <_svfiprintf_r+0x1a8>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0c5      	beq.n	8008364 <_svfiprintf_r+0x130>
 80083d8:	9105      	str	r1, [sp, #20]
 80083da:	e7c3      	b.n	8008364 <_svfiprintf_r+0x130>
 80083dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80083e0:	4604      	mov	r4, r0
 80083e2:	2301      	movs	r3, #1
 80083e4:	e7f0      	b.n	80083c8 <_svfiprintf_r+0x194>
 80083e6:	ab03      	add	r3, sp, #12
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	462a      	mov	r2, r5
 80083ec:	4b0f      	ldr	r3, [pc, #60]	; (800842c <_svfiprintf_r+0x1f8>)
 80083ee:	a904      	add	r1, sp, #16
 80083f0:	4638      	mov	r0, r7
 80083f2:	f7fd fd13 	bl	8005e1c <_printf_float>
 80083f6:	1c42      	adds	r2, r0, #1
 80083f8:	4606      	mov	r6, r0
 80083fa:	d1d6      	bne.n	80083aa <_svfiprintf_r+0x176>
 80083fc:	89ab      	ldrh	r3, [r5, #12]
 80083fe:	065b      	lsls	r3, r3, #25
 8008400:	f53f af2c 	bmi.w	800825c <_svfiprintf_r+0x28>
 8008404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008406:	b01d      	add	sp, #116	; 0x74
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840c:	ab03      	add	r3, sp, #12
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	462a      	mov	r2, r5
 8008412:	4b06      	ldr	r3, [pc, #24]	; (800842c <_svfiprintf_r+0x1f8>)
 8008414:	a904      	add	r1, sp, #16
 8008416:	4638      	mov	r0, r7
 8008418:	f7fd ffa4 	bl	8006364 <_printf_i>
 800841c:	e7eb      	b.n	80083f6 <_svfiprintf_r+0x1c2>
 800841e:	bf00      	nop
 8008420:	0800989c 	.word	0x0800989c
 8008424:	080098a6 	.word	0x080098a6
 8008428:	08005e1d 	.word	0x08005e1d
 800842c:	0800817d 	.word	0x0800817d
 8008430:	080098a2 	.word	0x080098a2

08008434 <__sfputc_r>:
 8008434:	6893      	ldr	r3, [r2, #8]
 8008436:	3b01      	subs	r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	b410      	push	{r4}
 800843c:	6093      	str	r3, [r2, #8]
 800843e:	da08      	bge.n	8008452 <__sfputc_r+0x1e>
 8008440:	6994      	ldr	r4, [r2, #24]
 8008442:	42a3      	cmp	r3, r4
 8008444:	db01      	blt.n	800844a <__sfputc_r+0x16>
 8008446:	290a      	cmp	r1, #10
 8008448:	d103      	bne.n	8008452 <__sfputc_r+0x1e>
 800844a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800844e:	f7fe b983 	b.w	8006758 <__swbuf_r>
 8008452:	6813      	ldr	r3, [r2, #0]
 8008454:	1c58      	adds	r0, r3, #1
 8008456:	6010      	str	r0, [r2, #0]
 8008458:	7019      	strb	r1, [r3, #0]
 800845a:	4608      	mov	r0, r1
 800845c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008460:	4770      	bx	lr

08008462 <__sfputs_r>:
 8008462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008464:	4606      	mov	r6, r0
 8008466:	460f      	mov	r7, r1
 8008468:	4614      	mov	r4, r2
 800846a:	18d5      	adds	r5, r2, r3
 800846c:	42ac      	cmp	r4, r5
 800846e:	d101      	bne.n	8008474 <__sfputs_r+0x12>
 8008470:	2000      	movs	r0, #0
 8008472:	e007      	b.n	8008484 <__sfputs_r+0x22>
 8008474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008478:	463a      	mov	r2, r7
 800847a:	4630      	mov	r0, r6
 800847c:	f7ff ffda 	bl	8008434 <__sfputc_r>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d1f3      	bne.n	800846c <__sfputs_r+0xa>
 8008484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008488 <_vfiprintf_r>:
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	460d      	mov	r5, r1
 800848e:	b09d      	sub	sp, #116	; 0x74
 8008490:	4614      	mov	r4, r2
 8008492:	4698      	mov	r8, r3
 8008494:	4606      	mov	r6, r0
 8008496:	b118      	cbz	r0, 80084a0 <_vfiprintf_r+0x18>
 8008498:	6983      	ldr	r3, [r0, #24]
 800849a:	b90b      	cbnz	r3, 80084a0 <_vfiprintf_r+0x18>
 800849c:	f7ff f9b0 	bl	8007800 <__sinit>
 80084a0:	4b89      	ldr	r3, [pc, #548]	; (80086c8 <_vfiprintf_r+0x240>)
 80084a2:	429d      	cmp	r5, r3
 80084a4:	d11b      	bne.n	80084de <_vfiprintf_r+0x56>
 80084a6:	6875      	ldr	r5, [r6, #4]
 80084a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084aa:	07d9      	lsls	r1, r3, #31
 80084ac:	d405      	bmi.n	80084ba <_vfiprintf_r+0x32>
 80084ae:	89ab      	ldrh	r3, [r5, #12]
 80084b0:	059a      	lsls	r2, r3, #22
 80084b2:	d402      	bmi.n	80084ba <_vfiprintf_r+0x32>
 80084b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084b6:	f7ff fa46 	bl	8007946 <__retarget_lock_acquire_recursive>
 80084ba:	89ab      	ldrh	r3, [r5, #12]
 80084bc:	071b      	lsls	r3, r3, #28
 80084be:	d501      	bpl.n	80084c4 <_vfiprintf_r+0x3c>
 80084c0:	692b      	ldr	r3, [r5, #16]
 80084c2:	b9eb      	cbnz	r3, 8008500 <_vfiprintf_r+0x78>
 80084c4:	4629      	mov	r1, r5
 80084c6:	4630      	mov	r0, r6
 80084c8:	f7fe f998 	bl	80067fc <__swsetup_r>
 80084cc:	b1c0      	cbz	r0, 8008500 <_vfiprintf_r+0x78>
 80084ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084d0:	07dc      	lsls	r4, r3, #31
 80084d2:	d50e      	bpl.n	80084f2 <_vfiprintf_r+0x6a>
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	b01d      	add	sp, #116	; 0x74
 80084da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084de:	4b7b      	ldr	r3, [pc, #492]	; (80086cc <_vfiprintf_r+0x244>)
 80084e0:	429d      	cmp	r5, r3
 80084e2:	d101      	bne.n	80084e8 <_vfiprintf_r+0x60>
 80084e4:	68b5      	ldr	r5, [r6, #8]
 80084e6:	e7df      	b.n	80084a8 <_vfiprintf_r+0x20>
 80084e8:	4b79      	ldr	r3, [pc, #484]	; (80086d0 <_vfiprintf_r+0x248>)
 80084ea:	429d      	cmp	r5, r3
 80084ec:	bf08      	it	eq
 80084ee:	68f5      	ldreq	r5, [r6, #12]
 80084f0:	e7da      	b.n	80084a8 <_vfiprintf_r+0x20>
 80084f2:	89ab      	ldrh	r3, [r5, #12]
 80084f4:	0598      	lsls	r0, r3, #22
 80084f6:	d4ed      	bmi.n	80084d4 <_vfiprintf_r+0x4c>
 80084f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084fa:	f7ff fa25 	bl	8007948 <__retarget_lock_release_recursive>
 80084fe:	e7e9      	b.n	80084d4 <_vfiprintf_r+0x4c>
 8008500:	2300      	movs	r3, #0
 8008502:	9309      	str	r3, [sp, #36]	; 0x24
 8008504:	2320      	movs	r3, #32
 8008506:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800850a:	f8cd 800c 	str.w	r8, [sp, #12]
 800850e:	2330      	movs	r3, #48	; 0x30
 8008510:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086d4 <_vfiprintf_r+0x24c>
 8008514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008518:	f04f 0901 	mov.w	r9, #1
 800851c:	4623      	mov	r3, r4
 800851e:	469a      	mov	sl, r3
 8008520:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008524:	b10a      	cbz	r2, 800852a <_vfiprintf_r+0xa2>
 8008526:	2a25      	cmp	r2, #37	; 0x25
 8008528:	d1f9      	bne.n	800851e <_vfiprintf_r+0x96>
 800852a:	ebba 0b04 	subs.w	fp, sl, r4
 800852e:	d00b      	beq.n	8008548 <_vfiprintf_r+0xc0>
 8008530:	465b      	mov	r3, fp
 8008532:	4622      	mov	r2, r4
 8008534:	4629      	mov	r1, r5
 8008536:	4630      	mov	r0, r6
 8008538:	f7ff ff93 	bl	8008462 <__sfputs_r>
 800853c:	3001      	adds	r0, #1
 800853e:	f000 80aa 	beq.w	8008696 <_vfiprintf_r+0x20e>
 8008542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008544:	445a      	add	r2, fp
 8008546:	9209      	str	r2, [sp, #36]	; 0x24
 8008548:	f89a 3000 	ldrb.w	r3, [sl]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80a2 	beq.w	8008696 <_vfiprintf_r+0x20e>
 8008552:	2300      	movs	r3, #0
 8008554:	f04f 32ff 	mov.w	r2, #4294967295
 8008558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800855c:	f10a 0a01 	add.w	sl, sl, #1
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	9307      	str	r3, [sp, #28]
 8008564:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008568:	931a      	str	r3, [sp, #104]	; 0x68
 800856a:	4654      	mov	r4, sl
 800856c:	2205      	movs	r2, #5
 800856e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008572:	4858      	ldr	r0, [pc, #352]	; (80086d4 <_vfiprintf_r+0x24c>)
 8008574:	f7f7 fe0c 	bl	8000190 <memchr>
 8008578:	9a04      	ldr	r2, [sp, #16]
 800857a:	b9d8      	cbnz	r0, 80085b4 <_vfiprintf_r+0x12c>
 800857c:	06d1      	lsls	r1, r2, #27
 800857e:	bf44      	itt	mi
 8008580:	2320      	movmi	r3, #32
 8008582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008586:	0713      	lsls	r3, r2, #28
 8008588:	bf44      	itt	mi
 800858a:	232b      	movmi	r3, #43	; 0x2b
 800858c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008590:	f89a 3000 	ldrb.w	r3, [sl]
 8008594:	2b2a      	cmp	r3, #42	; 0x2a
 8008596:	d015      	beq.n	80085c4 <_vfiprintf_r+0x13c>
 8008598:	9a07      	ldr	r2, [sp, #28]
 800859a:	4654      	mov	r4, sl
 800859c:	2000      	movs	r0, #0
 800859e:	f04f 0c0a 	mov.w	ip, #10
 80085a2:	4621      	mov	r1, r4
 80085a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085a8:	3b30      	subs	r3, #48	; 0x30
 80085aa:	2b09      	cmp	r3, #9
 80085ac:	d94e      	bls.n	800864c <_vfiprintf_r+0x1c4>
 80085ae:	b1b0      	cbz	r0, 80085de <_vfiprintf_r+0x156>
 80085b0:	9207      	str	r2, [sp, #28]
 80085b2:	e014      	b.n	80085de <_vfiprintf_r+0x156>
 80085b4:	eba0 0308 	sub.w	r3, r0, r8
 80085b8:	fa09 f303 	lsl.w	r3, r9, r3
 80085bc:	4313      	orrs	r3, r2
 80085be:	9304      	str	r3, [sp, #16]
 80085c0:	46a2      	mov	sl, r4
 80085c2:	e7d2      	b.n	800856a <_vfiprintf_r+0xe2>
 80085c4:	9b03      	ldr	r3, [sp, #12]
 80085c6:	1d19      	adds	r1, r3, #4
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	9103      	str	r1, [sp, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	bfbb      	ittet	lt
 80085d0:	425b      	neglt	r3, r3
 80085d2:	f042 0202 	orrlt.w	r2, r2, #2
 80085d6:	9307      	strge	r3, [sp, #28]
 80085d8:	9307      	strlt	r3, [sp, #28]
 80085da:	bfb8      	it	lt
 80085dc:	9204      	strlt	r2, [sp, #16]
 80085de:	7823      	ldrb	r3, [r4, #0]
 80085e0:	2b2e      	cmp	r3, #46	; 0x2e
 80085e2:	d10c      	bne.n	80085fe <_vfiprintf_r+0x176>
 80085e4:	7863      	ldrb	r3, [r4, #1]
 80085e6:	2b2a      	cmp	r3, #42	; 0x2a
 80085e8:	d135      	bne.n	8008656 <_vfiprintf_r+0x1ce>
 80085ea:	9b03      	ldr	r3, [sp, #12]
 80085ec:	1d1a      	adds	r2, r3, #4
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	9203      	str	r2, [sp, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	bfb8      	it	lt
 80085f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80085fa:	3402      	adds	r4, #2
 80085fc:	9305      	str	r3, [sp, #20]
 80085fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086e4 <_vfiprintf_r+0x25c>
 8008602:	7821      	ldrb	r1, [r4, #0]
 8008604:	2203      	movs	r2, #3
 8008606:	4650      	mov	r0, sl
 8008608:	f7f7 fdc2 	bl	8000190 <memchr>
 800860c:	b140      	cbz	r0, 8008620 <_vfiprintf_r+0x198>
 800860e:	2340      	movs	r3, #64	; 0x40
 8008610:	eba0 000a 	sub.w	r0, r0, sl
 8008614:	fa03 f000 	lsl.w	r0, r3, r0
 8008618:	9b04      	ldr	r3, [sp, #16]
 800861a:	4303      	orrs	r3, r0
 800861c:	3401      	adds	r4, #1
 800861e:	9304      	str	r3, [sp, #16]
 8008620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008624:	482c      	ldr	r0, [pc, #176]	; (80086d8 <_vfiprintf_r+0x250>)
 8008626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800862a:	2206      	movs	r2, #6
 800862c:	f7f7 fdb0 	bl	8000190 <memchr>
 8008630:	2800      	cmp	r0, #0
 8008632:	d03f      	beq.n	80086b4 <_vfiprintf_r+0x22c>
 8008634:	4b29      	ldr	r3, [pc, #164]	; (80086dc <_vfiprintf_r+0x254>)
 8008636:	bb1b      	cbnz	r3, 8008680 <_vfiprintf_r+0x1f8>
 8008638:	9b03      	ldr	r3, [sp, #12]
 800863a:	3307      	adds	r3, #7
 800863c:	f023 0307 	bic.w	r3, r3, #7
 8008640:	3308      	adds	r3, #8
 8008642:	9303      	str	r3, [sp, #12]
 8008644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008646:	443b      	add	r3, r7
 8008648:	9309      	str	r3, [sp, #36]	; 0x24
 800864a:	e767      	b.n	800851c <_vfiprintf_r+0x94>
 800864c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008650:	460c      	mov	r4, r1
 8008652:	2001      	movs	r0, #1
 8008654:	e7a5      	b.n	80085a2 <_vfiprintf_r+0x11a>
 8008656:	2300      	movs	r3, #0
 8008658:	3401      	adds	r4, #1
 800865a:	9305      	str	r3, [sp, #20]
 800865c:	4619      	mov	r1, r3
 800865e:	f04f 0c0a 	mov.w	ip, #10
 8008662:	4620      	mov	r0, r4
 8008664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008668:	3a30      	subs	r2, #48	; 0x30
 800866a:	2a09      	cmp	r2, #9
 800866c:	d903      	bls.n	8008676 <_vfiprintf_r+0x1ee>
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0c5      	beq.n	80085fe <_vfiprintf_r+0x176>
 8008672:	9105      	str	r1, [sp, #20]
 8008674:	e7c3      	b.n	80085fe <_vfiprintf_r+0x176>
 8008676:	fb0c 2101 	mla	r1, ip, r1, r2
 800867a:	4604      	mov	r4, r0
 800867c:	2301      	movs	r3, #1
 800867e:	e7f0      	b.n	8008662 <_vfiprintf_r+0x1da>
 8008680:	ab03      	add	r3, sp, #12
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	462a      	mov	r2, r5
 8008686:	4b16      	ldr	r3, [pc, #88]	; (80086e0 <_vfiprintf_r+0x258>)
 8008688:	a904      	add	r1, sp, #16
 800868a:	4630      	mov	r0, r6
 800868c:	f7fd fbc6 	bl	8005e1c <_printf_float>
 8008690:	4607      	mov	r7, r0
 8008692:	1c78      	adds	r0, r7, #1
 8008694:	d1d6      	bne.n	8008644 <_vfiprintf_r+0x1bc>
 8008696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008698:	07d9      	lsls	r1, r3, #31
 800869a:	d405      	bmi.n	80086a8 <_vfiprintf_r+0x220>
 800869c:	89ab      	ldrh	r3, [r5, #12]
 800869e:	059a      	lsls	r2, r3, #22
 80086a0:	d402      	bmi.n	80086a8 <_vfiprintf_r+0x220>
 80086a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086a4:	f7ff f950 	bl	8007948 <__retarget_lock_release_recursive>
 80086a8:	89ab      	ldrh	r3, [r5, #12]
 80086aa:	065b      	lsls	r3, r3, #25
 80086ac:	f53f af12 	bmi.w	80084d4 <_vfiprintf_r+0x4c>
 80086b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086b2:	e711      	b.n	80084d8 <_vfiprintf_r+0x50>
 80086b4:	ab03      	add	r3, sp, #12
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	462a      	mov	r2, r5
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <_vfiprintf_r+0x258>)
 80086bc:	a904      	add	r1, sp, #16
 80086be:	4630      	mov	r0, r6
 80086c0:	f7fd fe50 	bl	8006364 <_printf_i>
 80086c4:	e7e4      	b.n	8008690 <_vfiprintf_r+0x208>
 80086c6:	bf00      	nop
 80086c8:	08009704 	.word	0x08009704
 80086cc:	08009724 	.word	0x08009724
 80086d0:	080096e4 	.word	0x080096e4
 80086d4:	0800989c 	.word	0x0800989c
 80086d8:	080098a6 	.word	0x080098a6
 80086dc:	08005e1d 	.word	0x08005e1d
 80086e0:	08008463 	.word	0x08008463
 80086e4:	080098a2 	.word	0x080098a2

080086e8 <_putc_r>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	460d      	mov	r5, r1
 80086ec:	4614      	mov	r4, r2
 80086ee:	4606      	mov	r6, r0
 80086f0:	b118      	cbz	r0, 80086fa <_putc_r+0x12>
 80086f2:	6983      	ldr	r3, [r0, #24]
 80086f4:	b90b      	cbnz	r3, 80086fa <_putc_r+0x12>
 80086f6:	f7ff f883 	bl	8007800 <__sinit>
 80086fa:	4b1c      	ldr	r3, [pc, #112]	; (800876c <_putc_r+0x84>)
 80086fc:	429c      	cmp	r4, r3
 80086fe:	d124      	bne.n	800874a <_putc_r+0x62>
 8008700:	6874      	ldr	r4, [r6, #4]
 8008702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008704:	07d8      	lsls	r0, r3, #31
 8008706:	d405      	bmi.n	8008714 <_putc_r+0x2c>
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	0599      	lsls	r1, r3, #22
 800870c:	d402      	bmi.n	8008714 <_putc_r+0x2c>
 800870e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008710:	f7ff f919 	bl	8007946 <__retarget_lock_acquire_recursive>
 8008714:	68a3      	ldr	r3, [r4, #8]
 8008716:	3b01      	subs	r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	60a3      	str	r3, [r4, #8]
 800871c:	da05      	bge.n	800872a <_putc_r+0x42>
 800871e:	69a2      	ldr	r2, [r4, #24]
 8008720:	4293      	cmp	r3, r2
 8008722:	db1c      	blt.n	800875e <_putc_r+0x76>
 8008724:	b2eb      	uxtb	r3, r5
 8008726:	2b0a      	cmp	r3, #10
 8008728:	d019      	beq.n	800875e <_putc_r+0x76>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	6022      	str	r2, [r4, #0]
 8008730:	701d      	strb	r5, [r3, #0]
 8008732:	b2ed      	uxtb	r5, r5
 8008734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008736:	07da      	lsls	r2, r3, #31
 8008738:	d405      	bmi.n	8008746 <_putc_r+0x5e>
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	059b      	lsls	r3, r3, #22
 800873e:	d402      	bmi.n	8008746 <_putc_r+0x5e>
 8008740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008742:	f7ff f901 	bl	8007948 <__retarget_lock_release_recursive>
 8008746:	4628      	mov	r0, r5
 8008748:	bd70      	pop	{r4, r5, r6, pc}
 800874a:	4b09      	ldr	r3, [pc, #36]	; (8008770 <_putc_r+0x88>)
 800874c:	429c      	cmp	r4, r3
 800874e:	d101      	bne.n	8008754 <_putc_r+0x6c>
 8008750:	68b4      	ldr	r4, [r6, #8]
 8008752:	e7d6      	b.n	8008702 <_putc_r+0x1a>
 8008754:	4b07      	ldr	r3, [pc, #28]	; (8008774 <_putc_r+0x8c>)
 8008756:	429c      	cmp	r4, r3
 8008758:	bf08      	it	eq
 800875a:	68f4      	ldreq	r4, [r6, #12]
 800875c:	e7d1      	b.n	8008702 <_putc_r+0x1a>
 800875e:	4629      	mov	r1, r5
 8008760:	4622      	mov	r2, r4
 8008762:	4630      	mov	r0, r6
 8008764:	f7fd fff8 	bl	8006758 <__swbuf_r>
 8008768:	4605      	mov	r5, r0
 800876a:	e7e3      	b.n	8008734 <_putc_r+0x4c>
 800876c:	08009704 	.word	0x08009704
 8008770:	08009724 	.word	0x08009724
 8008774:	080096e4 	.word	0x080096e4

08008778 <__sread>:
 8008778:	b510      	push	{r4, lr}
 800877a:	460c      	mov	r4, r1
 800877c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008780:	f000 f920 	bl	80089c4 <_read_r>
 8008784:	2800      	cmp	r0, #0
 8008786:	bfab      	itete	ge
 8008788:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800878a:	89a3      	ldrhlt	r3, [r4, #12]
 800878c:	181b      	addge	r3, r3, r0
 800878e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008792:	bfac      	ite	ge
 8008794:	6563      	strge	r3, [r4, #84]	; 0x54
 8008796:	81a3      	strhlt	r3, [r4, #12]
 8008798:	bd10      	pop	{r4, pc}

0800879a <__swrite>:
 800879a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879e:	461f      	mov	r7, r3
 80087a0:	898b      	ldrh	r3, [r1, #12]
 80087a2:	05db      	lsls	r3, r3, #23
 80087a4:	4605      	mov	r5, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	4616      	mov	r6, r2
 80087aa:	d505      	bpl.n	80087b8 <__swrite+0x1e>
 80087ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b0:	2302      	movs	r3, #2
 80087b2:	2200      	movs	r2, #0
 80087b4:	f000 f898 	bl	80088e8 <_lseek_r>
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087c2:	81a3      	strh	r3, [r4, #12]
 80087c4:	4632      	mov	r2, r6
 80087c6:	463b      	mov	r3, r7
 80087c8:	4628      	mov	r0, r5
 80087ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ce:	f000 b817 	b.w	8008800 <_write_r>

080087d2 <__sseek>:
 80087d2:	b510      	push	{r4, lr}
 80087d4:	460c      	mov	r4, r1
 80087d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087da:	f000 f885 	bl	80088e8 <_lseek_r>
 80087de:	1c43      	adds	r3, r0, #1
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	bf15      	itete	ne
 80087e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80087e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087ee:	81a3      	strheq	r3, [r4, #12]
 80087f0:	bf18      	it	ne
 80087f2:	81a3      	strhne	r3, [r4, #12]
 80087f4:	bd10      	pop	{r4, pc}

080087f6 <__sclose>:
 80087f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087fa:	f000 b831 	b.w	8008860 <_close_r>
	...

08008800 <_write_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d07      	ldr	r5, [pc, #28]	; (8008820 <_write_r+0x20>)
 8008804:	4604      	mov	r4, r0
 8008806:	4608      	mov	r0, r1
 8008808:	4611      	mov	r1, r2
 800880a:	2200      	movs	r2, #0
 800880c:	602a      	str	r2, [r5, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	f000 f9f1 	bl	8008bf6 <_write>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d102      	bne.n	800881e <_write_r+0x1e>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	b103      	cbz	r3, 800881e <_write_r+0x1e>
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	20000398 	.word	0x20000398

08008824 <__assert_func>:
 8008824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008826:	4614      	mov	r4, r2
 8008828:	461a      	mov	r2, r3
 800882a:	4b09      	ldr	r3, [pc, #36]	; (8008850 <__assert_func+0x2c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4605      	mov	r5, r0
 8008830:	68d8      	ldr	r0, [r3, #12]
 8008832:	b14c      	cbz	r4, 8008848 <__assert_func+0x24>
 8008834:	4b07      	ldr	r3, [pc, #28]	; (8008854 <__assert_func+0x30>)
 8008836:	9100      	str	r1, [sp, #0]
 8008838:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800883c:	4906      	ldr	r1, [pc, #24]	; (8008858 <__assert_func+0x34>)
 800883e:	462b      	mov	r3, r5
 8008840:	f000 f81e 	bl	8008880 <fiprintf>
 8008844:	f000 f8dd 	bl	8008a02 <abort>
 8008848:	4b04      	ldr	r3, [pc, #16]	; (800885c <__assert_func+0x38>)
 800884a:	461c      	mov	r4, r3
 800884c:	e7f3      	b.n	8008836 <__assert_func+0x12>
 800884e:	bf00      	nop
 8008850:	20000014 	.word	0x20000014
 8008854:	080098ad 	.word	0x080098ad
 8008858:	080098ba 	.word	0x080098ba
 800885c:	080098e8 	.word	0x080098e8

08008860 <_close_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4d06      	ldr	r5, [pc, #24]	; (800887c <_close_r+0x1c>)
 8008864:	2300      	movs	r3, #0
 8008866:	4604      	mov	r4, r0
 8008868:	4608      	mov	r0, r1
 800886a:	602b      	str	r3, [r5, #0]
 800886c:	f000 f9f4 	bl	8008c58 <_close>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_close_r+0x1a>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	b103      	cbz	r3, 800887a <_close_r+0x1a>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	20000398 	.word	0x20000398

08008880 <fiprintf>:
 8008880:	b40e      	push	{r1, r2, r3}
 8008882:	b503      	push	{r0, r1, lr}
 8008884:	4601      	mov	r1, r0
 8008886:	ab03      	add	r3, sp, #12
 8008888:	4805      	ldr	r0, [pc, #20]	; (80088a0 <fiprintf+0x20>)
 800888a:	f853 2b04 	ldr.w	r2, [r3], #4
 800888e:	6800      	ldr	r0, [r0, #0]
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	f7ff fdf9 	bl	8008488 <_vfiprintf_r>
 8008896:	b002      	add	sp, #8
 8008898:	f85d eb04 	ldr.w	lr, [sp], #4
 800889c:	b003      	add	sp, #12
 800889e:	4770      	bx	lr
 80088a0:	20000014 	.word	0x20000014

080088a4 <_fstat_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4d07      	ldr	r5, [pc, #28]	; (80088c4 <_fstat_r+0x20>)
 80088a8:	2300      	movs	r3, #0
 80088aa:	4604      	mov	r4, r0
 80088ac:	4608      	mov	r0, r1
 80088ae:	4611      	mov	r1, r2
 80088b0:	602b      	str	r3, [r5, #0]
 80088b2:	f000 fa1a 	bl	8008cea <_fstat>
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	d102      	bne.n	80088c0 <_fstat_r+0x1c>
 80088ba:	682b      	ldr	r3, [r5, #0]
 80088bc:	b103      	cbz	r3, 80088c0 <_fstat_r+0x1c>
 80088be:	6023      	str	r3, [r4, #0]
 80088c0:	bd38      	pop	{r3, r4, r5, pc}
 80088c2:	bf00      	nop
 80088c4:	20000398 	.word	0x20000398

080088c8 <_isatty_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4d06      	ldr	r5, [pc, #24]	; (80088e4 <_isatty_r+0x1c>)
 80088cc:	2300      	movs	r3, #0
 80088ce:	4604      	mov	r4, r0
 80088d0:	4608      	mov	r0, r1
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	f000 fb7c 	bl	8008fd0 <_isatty>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	d102      	bne.n	80088e2 <_isatty_r+0x1a>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	b103      	cbz	r3, 80088e2 <_isatty_r+0x1a>
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	20000398 	.word	0x20000398

080088e8 <_lseek_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4d07      	ldr	r5, [pc, #28]	; (8008908 <_lseek_r+0x20>)
 80088ec:	4604      	mov	r4, r0
 80088ee:	4608      	mov	r0, r1
 80088f0:	4611      	mov	r1, r2
 80088f2:	2200      	movs	r2, #0
 80088f4:	602a      	str	r2, [r5, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	f000 f96b 	bl	8008bd2 <_lseek>
 80088fc:	1c43      	adds	r3, r0, #1
 80088fe:	d102      	bne.n	8008906 <_lseek_r+0x1e>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	b103      	cbz	r3, 8008906 <_lseek_r+0x1e>
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	20000398 	.word	0x20000398

0800890c <__ascii_mbtowc>:
 800890c:	b082      	sub	sp, #8
 800890e:	b901      	cbnz	r1, 8008912 <__ascii_mbtowc+0x6>
 8008910:	a901      	add	r1, sp, #4
 8008912:	b142      	cbz	r2, 8008926 <__ascii_mbtowc+0x1a>
 8008914:	b14b      	cbz	r3, 800892a <__ascii_mbtowc+0x1e>
 8008916:	7813      	ldrb	r3, [r2, #0]
 8008918:	600b      	str	r3, [r1, #0]
 800891a:	7812      	ldrb	r2, [r2, #0]
 800891c:	1e10      	subs	r0, r2, #0
 800891e:	bf18      	it	ne
 8008920:	2001      	movne	r0, #1
 8008922:	b002      	add	sp, #8
 8008924:	4770      	bx	lr
 8008926:	4610      	mov	r0, r2
 8008928:	e7fb      	b.n	8008922 <__ascii_mbtowc+0x16>
 800892a:	f06f 0001 	mvn.w	r0, #1
 800892e:	e7f8      	b.n	8008922 <__ascii_mbtowc+0x16>

08008930 <memmove>:
 8008930:	4288      	cmp	r0, r1
 8008932:	b510      	push	{r4, lr}
 8008934:	eb01 0402 	add.w	r4, r1, r2
 8008938:	d902      	bls.n	8008940 <memmove+0x10>
 800893a:	4284      	cmp	r4, r0
 800893c:	4623      	mov	r3, r4
 800893e:	d807      	bhi.n	8008950 <memmove+0x20>
 8008940:	1e43      	subs	r3, r0, #1
 8008942:	42a1      	cmp	r1, r4
 8008944:	d008      	beq.n	8008958 <memmove+0x28>
 8008946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800894a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800894e:	e7f8      	b.n	8008942 <memmove+0x12>
 8008950:	4402      	add	r2, r0
 8008952:	4601      	mov	r1, r0
 8008954:	428a      	cmp	r2, r1
 8008956:	d100      	bne.n	800895a <memmove+0x2a>
 8008958:	bd10      	pop	{r4, pc}
 800895a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800895e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008962:	e7f7      	b.n	8008954 <memmove+0x24>

08008964 <_realloc_r>:
 8008964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008968:	4680      	mov	r8, r0
 800896a:	4614      	mov	r4, r2
 800896c:	460e      	mov	r6, r1
 800896e:	b921      	cbnz	r1, 800897a <_realloc_r+0x16>
 8008970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008974:	4611      	mov	r1, r2
 8008976:	f7fd b93d 	b.w	8005bf4 <_malloc_r>
 800897a:	b92a      	cbnz	r2, 8008988 <_realloc_r+0x24>
 800897c:	f7fd f8ce 	bl	8005b1c <_free_r>
 8008980:	4625      	mov	r5, r4
 8008982:	4628      	mov	r0, r5
 8008984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008988:	f000 f842 	bl	8008a10 <_malloc_usable_size_r>
 800898c:	4284      	cmp	r4, r0
 800898e:	4607      	mov	r7, r0
 8008990:	d802      	bhi.n	8008998 <_realloc_r+0x34>
 8008992:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008996:	d812      	bhi.n	80089be <_realloc_r+0x5a>
 8008998:	4621      	mov	r1, r4
 800899a:	4640      	mov	r0, r8
 800899c:	f7fd f92a 	bl	8005bf4 <_malloc_r>
 80089a0:	4605      	mov	r5, r0
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d0ed      	beq.n	8008982 <_realloc_r+0x1e>
 80089a6:	42bc      	cmp	r4, r7
 80089a8:	4622      	mov	r2, r4
 80089aa:	4631      	mov	r1, r6
 80089ac:	bf28      	it	cs
 80089ae:	463a      	movcs	r2, r7
 80089b0:	f7ff f830 	bl	8007a14 <memcpy>
 80089b4:	4631      	mov	r1, r6
 80089b6:	4640      	mov	r0, r8
 80089b8:	f7fd f8b0 	bl	8005b1c <_free_r>
 80089bc:	e7e1      	b.n	8008982 <_realloc_r+0x1e>
 80089be:	4635      	mov	r5, r6
 80089c0:	e7df      	b.n	8008982 <_realloc_r+0x1e>
	...

080089c4 <_read_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d07      	ldr	r5, [pc, #28]	; (80089e4 <_read_r+0x20>)
 80089c8:	4604      	mov	r4, r0
 80089ca:	4608      	mov	r0, r1
 80089cc:	4611      	mov	r1, r2
 80089ce:	2200      	movs	r2, #0
 80089d0:	602a      	str	r2, [r5, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	f000 f8a5 	bl	8008b22 <_read>
 80089d8:	1c43      	adds	r3, r0, #1
 80089da:	d102      	bne.n	80089e2 <_read_r+0x1e>
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	b103      	cbz	r3, 80089e2 <_read_r+0x1e>
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	20000398 	.word	0x20000398

080089e8 <__ascii_wctomb>:
 80089e8:	b149      	cbz	r1, 80089fe <__ascii_wctomb+0x16>
 80089ea:	2aff      	cmp	r2, #255	; 0xff
 80089ec:	bf85      	ittet	hi
 80089ee:	238a      	movhi	r3, #138	; 0x8a
 80089f0:	6003      	strhi	r3, [r0, #0]
 80089f2:	700a      	strbls	r2, [r1, #0]
 80089f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80089f8:	bf98      	it	ls
 80089fa:	2001      	movls	r0, #1
 80089fc:	4770      	bx	lr
 80089fe:	4608      	mov	r0, r1
 8008a00:	4770      	bx	lr

08008a02 <abort>:
 8008a02:	b508      	push	{r3, lr}
 8008a04:	2006      	movs	r0, #6
 8008a06:	f000 f833 	bl	8008a70 <raise>
 8008a0a:	2001      	movs	r0, #1
 8008a0c:	f000 fafc 	bl	8009008 <_exit>

08008a10 <_malloc_usable_size_r>:
 8008a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a14:	1f18      	subs	r0, r3, #4
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	bfbc      	itt	lt
 8008a1a:	580b      	ldrlt	r3, [r1, r0]
 8008a1c:	18c0      	addlt	r0, r0, r3
 8008a1e:	4770      	bx	lr

08008a20 <_raise_r>:
 8008a20:	291f      	cmp	r1, #31
 8008a22:	b538      	push	{r3, r4, r5, lr}
 8008a24:	4604      	mov	r4, r0
 8008a26:	460d      	mov	r5, r1
 8008a28:	d904      	bls.n	8008a34 <_raise_r+0x14>
 8008a2a:	2316      	movs	r3, #22
 8008a2c:	6003      	str	r3, [r0, #0]
 8008a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a36:	b112      	cbz	r2, 8008a3e <_raise_r+0x1e>
 8008a38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a3c:	b94b      	cbnz	r3, 8008a52 <_raise_r+0x32>
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f000 f830 	bl	8008aa4 <_getpid_r>
 8008a44:	462a      	mov	r2, r5
 8008a46:	4601      	mov	r1, r0
 8008a48:	4620      	mov	r0, r4
 8008a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a4e:	f000 b817 	b.w	8008a80 <_kill_r>
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d00a      	beq.n	8008a6c <_raise_r+0x4c>
 8008a56:	1c59      	adds	r1, r3, #1
 8008a58:	d103      	bne.n	8008a62 <_raise_r+0x42>
 8008a5a:	2316      	movs	r3, #22
 8008a5c:	6003      	str	r3, [r0, #0]
 8008a5e:	2001      	movs	r0, #1
 8008a60:	e7e7      	b.n	8008a32 <_raise_r+0x12>
 8008a62:	2400      	movs	r4, #0
 8008a64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a68:	4628      	mov	r0, r5
 8008a6a:	4798      	blx	r3
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	e7e0      	b.n	8008a32 <_raise_r+0x12>

08008a70 <raise>:
 8008a70:	4b02      	ldr	r3, [pc, #8]	; (8008a7c <raise+0xc>)
 8008a72:	4601      	mov	r1, r0
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	f7ff bfd3 	b.w	8008a20 <_raise_r>
 8008a7a:	bf00      	nop
 8008a7c:	20000014 	.word	0x20000014

08008a80 <_kill_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d07      	ldr	r5, [pc, #28]	; (8008aa0 <_kill_r+0x20>)
 8008a84:	2300      	movs	r3, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	602b      	str	r3, [r5, #0]
 8008a8e:	f000 fad9 	bl	8009044 <_kill>
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	d102      	bne.n	8008a9c <_kill_r+0x1c>
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	b103      	cbz	r3, 8008a9c <_kill_r+0x1c>
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	bd38      	pop	{r3, r4, r5, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000398 	.word	0x20000398

08008aa4 <_getpid_r>:
 8008aa4:	f000 b8fe 	b.w	8008ca4 <_getpid>

08008aa8 <findslot>:
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <findslot+0x2c>)
 8008aaa:	b510      	push	{r4, lr}
 8008aac:	4604      	mov	r4, r0
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	b118      	cbz	r0, 8008aba <findslot+0x12>
 8008ab2:	6983      	ldr	r3, [r0, #24]
 8008ab4:	b90b      	cbnz	r3, 8008aba <findslot+0x12>
 8008ab6:	f7fe fea3 	bl	8007800 <__sinit>
 8008aba:	2c13      	cmp	r4, #19
 8008abc:	d807      	bhi.n	8008ace <findslot+0x26>
 8008abe:	4806      	ldr	r0, [pc, #24]	; (8008ad8 <findslot+0x30>)
 8008ac0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8008ac4:	3201      	adds	r2, #1
 8008ac6:	d002      	beq.n	8008ace <findslot+0x26>
 8008ac8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8008acc:	bd10      	pop	{r4, pc}
 8008ace:	2000      	movs	r0, #0
 8008ad0:	e7fc      	b.n	8008acc <findslot+0x24>
 8008ad2:	bf00      	nop
 8008ad4:	20000014 	.word	0x20000014
 8008ad8:	200003a8 	.word	0x200003a8

08008adc <error>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	4604      	mov	r4, r0
 8008ae0:	f7fc ffe2 	bl	8005aa8 <__errno>
 8008ae4:	2613      	movs	r6, #19
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	2700      	movs	r7, #0
 8008aea:	4630      	mov	r0, r6
 8008aec:	4639      	mov	r1, r7
 8008aee:	beab      	bkpt	0x00ab
 8008af0:	4606      	mov	r6, r0
 8008af2:	602e      	str	r6, [r5, #0]
 8008af4:	4620      	mov	r0, r4
 8008af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008af8 <checkerror>:
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d101      	bne.n	8008b00 <checkerror+0x8>
 8008afc:	f7ff bfee 	b.w	8008adc <error>
 8008b00:	4770      	bx	lr

08008b02 <_swiread>:
 8008b02:	b530      	push	{r4, r5, lr}
 8008b04:	b085      	sub	sp, #20
 8008b06:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8008b0a:	9203      	str	r2, [sp, #12]
 8008b0c:	2406      	movs	r4, #6
 8008b0e:	ad01      	add	r5, sp, #4
 8008b10:	4620      	mov	r0, r4
 8008b12:	4629      	mov	r1, r5
 8008b14:	beab      	bkpt	0x00ab
 8008b16:	4604      	mov	r4, r0
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f7ff ffed 	bl	8008af8 <checkerror>
 8008b1e:	b005      	add	sp, #20
 8008b20:	bd30      	pop	{r4, r5, pc}

08008b22 <_read>:
 8008b22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b24:	4615      	mov	r5, r2
 8008b26:	9101      	str	r1, [sp, #4]
 8008b28:	f7ff ffbe 	bl	8008aa8 <findslot>
 8008b2c:	9901      	ldr	r1, [sp, #4]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	b938      	cbnz	r0, 8008b42 <_read+0x20>
 8008b32:	f7fc ffb9 	bl	8005aa8 <__errno>
 8008b36:	2309      	movs	r3, #9
 8008b38:	6003      	str	r3, [r0, #0]
 8008b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3e:	b003      	add	sp, #12
 8008b40:	bd30      	pop	{r4, r5, pc}
 8008b42:	6800      	ldr	r0, [r0, #0]
 8008b44:	462a      	mov	r2, r5
 8008b46:	f7ff ffdc 	bl	8008b02 <_swiread>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	d0f7      	beq.n	8008b3e <_read+0x1c>
 8008b4e:	6863      	ldr	r3, [r4, #4]
 8008b50:	1a2a      	subs	r2, r5, r0
 8008b52:	4413      	add	r3, r2
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	4610      	mov	r0, r2
 8008b58:	e7f1      	b.n	8008b3e <_read+0x1c>

08008b5a <_swilseek>:
 8008b5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	4616      	mov	r6, r2
 8008b60:	f7ff ffa2 	bl	8008aa8 <findslot>
 8008b64:	4605      	mov	r5, r0
 8008b66:	b940      	cbnz	r0, 8008b7a <_swilseek+0x20>
 8008b68:	f7fc ff9e 	bl	8005aa8 <__errno>
 8008b6c:	2309      	movs	r3, #9
 8008b6e:	6003      	str	r3, [r0, #0]
 8008b70:	f04f 34ff 	mov.w	r4, #4294967295
 8008b74:	4620      	mov	r0, r4
 8008b76:	b003      	add	sp, #12
 8008b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b7a:	2e02      	cmp	r6, #2
 8008b7c:	d903      	bls.n	8008b86 <_swilseek+0x2c>
 8008b7e:	f7fc ff93 	bl	8005aa8 <__errno>
 8008b82:	2316      	movs	r3, #22
 8008b84:	e7f3      	b.n	8008b6e <_swilseek+0x14>
 8008b86:	2e01      	cmp	r6, #1
 8008b88:	d112      	bne.n	8008bb0 <_swilseek+0x56>
 8008b8a:	6843      	ldr	r3, [r0, #4]
 8008b8c:	18e4      	adds	r4, r4, r3
 8008b8e:	d4f6      	bmi.n	8008b7e <_swilseek+0x24>
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	260a      	movs	r6, #10
 8008b94:	e9cd 3400 	strd	r3, r4, [sp]
 8008b98:	466f      	mov	r7, sp
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	beab      	bkpt	0x00ab
 8008ba0:	4606      	mov	r6, r0
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7ff ffa8 	bl	8008af8 <checkerror>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	dbe1      	blt.n	8008b70 <_swilseek+0x16>
 8008bac:	606c      	str	r4, [r5, #4]
 8008bae:	e7e1      	b.n	8008b74 <_swilseek+0x1a>
 8008bb0:	2e02      	cmp	r6, #2
 8008bb2:	d1ed      	bne.n	8008b90 <_swilseek+0x36>
 8008bb4:	6803      	ldr	r3, [r0, #0]
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	260c      	movs	r6, #12
 8008bba:	466f      	mov	r7, sp
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	beab      	bkpt	0x00ab
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f7ff ff97 	bl	8008af8 <checkerror>
 8008bca:	1c43      	adds	r3, r0, #1
 8008bcc:	d0d0      	beq.n	8008b70 <_swilseek+0x16>
 8008bce:	4404      	add	r4, r0
 8008bd0:	e7de      	b.n	8008b90 <_swilseek+0x36>

08008bd2 <_lseek>:
 8008bd2:	f7ff bfc2 	b.w	8008b5a <_swilseek>

08008bd6 <_swiwrite>:
 8008bd6:	b530      	push	{r4, r5, lr}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8008bde:	9203      	str	r2, [sp, #12]
 8008be0:	2405      	movs	r4, #5
 8008be2:	ad01      	add	r5, sp, #4
 8008be4:	4620      	mov	r0, r4
 8008be6:	4629      	mov	r1, r5
 8008be8:	beab      	bkpt	0x00ab
 8008bea:	4604      	mov	r4, r0
 8008bec:	4620      	mov	r0, r4
 8008bee:	f7ff ff83 	bl	8008af8 <checkerror>
 8008bf2:	b005      	add	sp, #20
 8008bf4:	bd30      	pop	{r4, r5, pc}

08008bf6 <_write>:
 8008bf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bf8:	4615      	mov	r5, r2
 8008bfa:	9101      	str	r1, [sp, #4]
 8008bfc:	f7ff ff54 	bl	8008aa8 <findslot>
 8008c00:	9901      	ldr	r1, [sp, #4]
 8008c02:	4604      	mov	r4, r0
 8008c04:	b930      	cbnz	r0, 8008c14 <_write+0x1e>
 8008c06:	f7fc ff4f 	bl	8005aa8 <__errno>
 8008c0a:	2309      	movs	r3, #9
 8008c0c:	6003      	str	r3, [r0, #0]
 8008c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c12:	e012      	b.n	8008c3a <_write+0x44>
 8008c14:	6800      	ldr	r0, [r0, #0]
 8008c16:	462a      	mov	r2, r5
 8008c18:	f7ff ffdd 	bl	8008bd6 <_swiwrite>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	dbf6      	blt.n	8008c0e <_write+0x18>
 8008c20:	6862      	ldr	r2, [r4, #4]
 8008c22:	1a2b      	subs	r3, r5, r0
 8008c24:	441a      	add	r2, r3
 8008c26:	42a8      	cmp	r0, r5
 8008c28:	6062      	str	r2, [r4, #4]
 8008c2a:	d105      	bne.n	8008c38 <_write+0x42>
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	b003      	add	sp, #12
 8008c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c34:	f7ff bf52 	b.w	8008adc <error>
 8008c38:	4618      	mov	r0, r3
 8008c3a:	b003      	add	sp, #12
 8008c3c:	bd30      	pop	{r4, r5, pc}

08008c3e <_swiclose>:
 8008c3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c40:	2402      	movs	r4, #2
 8008c42:	9001      	str	r0, [sp, #4]
 8008c44:	ad01      	add	r5, sp, #4
 8008c46:	4620      	mov	r0, r4
 8008c48:	4629      	mov	r1, r5
 8008c4a:	beab      	bkpt	0x00ab
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f7ff ff52 	bl	8008af8 <checkerror>
 8008c54:	b003      	add	sp, #12
 8008c56:	bd30      	pop	{r4, r5, pc}

08008c58 <_close>:
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	f7ff ff24 	bl	8008aa8 <findslot>
 8008c60:	4604      	mov	r4, r0
 8008c62:	b930      	cbnz	r0, 8008c72 <_close+0x1a>
 8008c64:	f7fc ff20 	bl	8005aa8 <__errno>
 8008c68:	2309      	movs	r3, #9
 8008c6a:	6003      	str	r3, [r0, #0]
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c70:	bd38      	pop	{r3, r4, r5, pc}
 8008c72:	3d01      	subs	r5, #1
 8008c74:	2d01      	cmp	r5, #1
 8008c76:	d809      	bhi.n	8008c8c <_close+0x34>
 8008c78:	4b09      	ldr	r3, [pc, #36]	; (8008ca0 <_close+0x48>)
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d104      	bne.n	8008c8c <_close+0x34>
 8008c82:	f04f 33ff 	mov.w	r3, #4294967295
 8008c86:	6003      	str	r3, [r0, #0]
 8008c88:	2000      	movs	r0, #0
 8008c8a:	e7f1      	b.n	8008c70 <_close+0x18>
 8008c8c:	6820      	ldr	r0, [r4, #0]
 8008c8e:	f7ff ffd6 	bl	8008c3e <_swiclose>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d1ec      	bne.n	8008c70 <_close+0x18>
 8008c96:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9a:	6023      	str	r3, [r4, #0]
 8008c9c:	e7e8      	b.n	8008c70 <_close+0x18>
 8008c9e:	bf00      	nop
 8008ca0:	200003a8 	.word	0x200003a8

08008ca4 <_getpid>:
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	4770      	bx	lr

08008ca8 <_swistat>:
 8008ca8:	b570      	push	{r4, r5, r6, lr}
 8008caa:	460c      	mov	r4, r1
 8008cac:	f7ff fefc 	bl	8008aa8 <findslot>
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	b930      	cbnz	r0, 8008cc2 <_swistat+0x1a>
 8008cb4:	f7fc fef8 	bl	8005aa8 <__errno>
 8008cb8:	2309      	movs	r3, #9
 8008cba:	6003      	str	r3, [r0, #0]
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	bd70      	pop	{r4, r5, r6, pc}
 8008cc2:	6863      	ldr	r3, [r4, #4]
 8008cc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008cc8:	6063      	str	r3, [r4, #4]
 8008cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cce:	64a3      	str	r3, [r4, #72]	; 0x48
 8008cd0:	260c      	movs	r6, #12
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	beab      	bkpt	0x00ab
 8008cd8:	4605      	mov	r5, r0
 8008cda:	4628      	mov	r0, r5
 8008cdc:	f7ff ff0c 	bl	8008af8 <checkerror>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	bf1c      	itt	ne
 8008ce4:	6120      	strne	r0, [r4, #16]
 8008ce6:	2000      	movne	r0, #0
 8008ce8:	e7ea      	b.n	8008cc0 <_swistat+0x18>

08008cea <_fstat>:
 8008cea:	460b      	mov	r3, r1
 8008cec:	b510      	push	{r4, lr}
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	2258      	movs	r2, #88	; 0x58
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fc ff09 	bl	8005b0c <memset>
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d02:	f7ff bfd1 	b.w	8008ca8 <_swistat>

08008d06 <_stat>:
 8008d06:	b538      	push	{r3, r4, r5, lr}
 8008d08:	460d      	mov	r5, r1
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	2258      	movs	r2, #88	; 0x58
 8008d0e:	2100      	movs	r1, #0
 8008d10:	4628      	mov	r0, r5
 8008d12:	f7fc fefb 	bl	8005b0c <memset>
 8008d16:	4620      	mov	r0, r4
 8008d18:	2100      	movs	r1, #0
 8008d1a:	f000 f811 	bl	8008d40 <_swiopen>
 8008d1e:	1c43      	adds	r3, r0, #1
 8008d20:	4604      	mov	r4, r0
 8008d22:	d00b      	beq.n	8008d3c <_stat+0x36>
 8008d24:	686b      	ldr	r3, [r5, #4]
 8008d26:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008d2a:	606b      	str	r3, [r5, #4]
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	f7ff ffbb 	bl	8008ca8 <_swistat>
 8008d32:	4605      	mov	r5, r0
 8008d34:	4620      	mov	r0, r4
 8008d36:	f7ff ff8f 	bl	8008c58 <_close>
 8008d3a:	462c      	mov	r4, r5
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}

08008d40 <_swiopen>:
 8008d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d44:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8008df0 <_swiopen+0xb0>
 8008d48:	b097      	sub	sp, #92	; 0x5c
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	460e      	mov	r6, r1
 8008d4e:	2500      	movs	r5, #0
 8008d50:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8008d54:	1c61      	adds	r1, r4, #1
 8008d56:	d037      	beq.n	8008dc8 <_swiopen+0x88>
 8008d58:	3501      	adds	r5, #1
 8008d5a:	2d14      	cmp	r5, #20
 8008d5c:	d1f8      	bne.n	8008d50 <_swiopen+0x10>
 8008d5e:	f7fc fea3 	bl	8005aa8 <__errno>
 8008d62:	2318      	movs	r3, #24
 8008d64:	6003      	str	r3, [r0, #0]
 8008d66:	f04f 34ff 	mov.w	r4, #4294967295
 8008d6a:	e03d      	b.n	8008de8 <_swiopen+0xa8>
 8008d6c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8008d70:	f240 6301 	movw	r3, #1537	; 0x601
 8008d74:	07b2      	lsls	r2, r6, #30
 8008d76:	bf48      	it	mi
 8008d78:	f044 0402 	orrmi.w	r4, r4, #2
 8008d7c:	421e      	tst	r6, r3
 8008d7e:	bf18      	it	ne
 8008d80:	f044 0404 	orrne.w	r4, r4, #4
 8008d84:	0733      	lsls	r3, r6, #28
 8008d86:	bf48      	it	mi
 8008d88:	f024 0404 	bicmi.w	r4, r4, #4
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	bf48      	it	mi
 8008d90:	f044 0408 	orrmi.w	r4, r4, #8
 8008d94:	9700      	str	r7, [sp, #0]
 8008d96:	f7f7 f9f3 	bl	8000180 <strlen>
 8008d9a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8008d9e:	2401      	movs	r4, #1
 8008da0:	4620      	mov	r0, r4
 8008da2:	4649      	mov	r1, r9
 8008da4:	beab      	bkpt	0x00ab
 8008da6:	4604      	mov	r4, r0
 8008da8:	2c00      	cmp	r4, #0
 8008daa:	db08      	blt.n	8008dbe <_swiopen+0x7e>
 8008dac:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8008db0:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8008db4:	2300      	movs	r3, #0
 8008db6:	f8c8 3004 	str.w	r3, [r8, #4]
 8008dba:	462c      	mov	r4, r5
 8008dbc:	e014      	b.n	8008de8 <_swiopen+0xa8>
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f7ff fe8c 	bl	8008adc <error>
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	e00f      	b.n	8008de8 <_swiopen+0xa8>
 8008dc8:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8008dcc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008dd0:	46e9      	mov	r9, sp
 8008dd2:	d1cb      	bne.n	8008d6c <_swiopen+0x2c>
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	f7ff ff95 	bl	8008d06 <_stat>
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d0c5      	beq.n	8008d6c <_swiopen+0x2c>
 8008de0:	f7fc fe62 	bl	8005aa8 <__errno>
 8008de4:	2311      	movs	r3, #17
 8008de6:	6003      	str	r3, [r0, #0]
 8008de8:	4620      	mov	r0, r4
 8008dea:	b017      	add	sp, #92	; 0x5c
 8008dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008df0:	200003a8 	.word	0x200003a8

08008df4 <_get_semihosting_exts>:
 8008df4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008df8:	4606      	mov	r6, r0
 8008dfa:	460f      	mov	r7, r1
 8008dfc:	482a      	ldr	r0, [pc, #168]	; (8008ea8 <_get_semihosting_exts+0xb4>)
 8008dfe:	2100      	movs	r1, #0
 8008e00:	4615      	mov	r5, r2
 8008e02:	f7ff ff9d 	bl	8008d40 <_swiopen>
 8008e06:	462a      	mov	r2, r5
 8008e08:	4604      	mov	r4, r0
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f7fc fe7d 	bl	8005b0c <memset>
 8008e12:	1c63      	adds	r3, r4, #1
 8008e14:	d016      	beq.n	8008e44 <_get_semihosting_exts+0x50>
 8008e16:	4620      	mov	r0, r4
 8008e18:	f7ff fe46 	bl	8008aa8 <findslot>
 8008e1c:	f04f 090c 	mov.w	r9, #12
 8008e20:	4680      	mov	r8, r0
 8008e22:	4648      	mov	r0, r9
 8008e24:	4641      	mov	r1, r8
 8008e26:	beab      	bkpt	0x00ab
 8008e28:	4680      	mov	r8, r0
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	f7ff fe64 	bl	8008af8 <checkerror>
 8008e30:	2803      	cmp	r0, #3
 8008e32:	dd02      	ble.n	8008e3a <_get_semihosting_exts+0x46>
 8008e34:	1ec3      	subs	r3, r0, #3
 8008e36:	42ab      	cmp	r3, r5
 8008e38:	dc08      	bgt.n	8008e4c <_get_semihosting_exts+0x58>
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f7ff ff0c 	bl	8008c58 <_close>
 8008e40:	f04f 34ff 	mov.w	r4, #4294967295
 8008e44:	4620      	mov	r0, r4
 8008e46:	b003      	add	sp, #12
 8008e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e4c:	2204      	movs	r2, #4
 8008e4e:	eb0d 0102 	add.w	r1, sp, r2
 8008e52:	4620      	mov	r0, r4
 8008e54:	f7ff fe65 	bl	8008b22 <_read>
 8008e58:	2803      	cmp	r0, #3
 8008e5a:	ddee      	ble.n	8008e3a <_get_semihosting_exts+0x46>
 8008e5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008e60:	2b53      	cmp	r3, #83	; 0x53
 8008e62:	d1ea      	bne.n	8008e3a <_get_semihosting_exts+0x46>
 8008e64:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008e68:	2b48      	cmp	r3, #72	; 0x48
 8008e6a:	d1e6      	bne.n	8008e3a <_get_semihosting_exts+0x46>
 8008e6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008e70:	2b46      	cmp	r3, #70	; 0x46
 8008e72:	d1e2      	bne.n	8008e3a <_get_semihosting_exts+0x46>
 8008e74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e78:	2b42      	cmp	r3, #66	; 0x42
 8008e7a:	d1de      	bne.n	8008e3a <_get_semihosting_exts+0x46>
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	4639      	mov	r1, r7
 8008e80:	4620      	mov	r0, r4
 8008e82:	f7ff fe6a 	bl	8008b5a <_swilseek>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	dbd7      	blt.n	8008e3a <_get_semihosting_exts+0x46>
 8008e8a:	462a      	mov	r2, r5
 8008e8c:	4631      	mov	r1, r6
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7ff fe47 	bl	8008b22 <_read>
 8008e94:	4605      	mov	r5, r0
 8008e96:	4620      	mov	r0, r4
 8008e98:	f7ff fede 	bl	8008c58 <_close>
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f7ff fe2b 	bl	8008af8 <checkerror>
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	e7ce      	b.n	8008e44 <_get_semihosting_exts+0x50>
 8008ea6:	bf00      	nop
 8008ea8:	080099f4 	.word	0x080099f4

08008eac <initialise_semihosting_exts>:
 8008eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eae:	4d0a      	ldr	r5, [pc, #40]	; (8008ed8 <initialise_semihosting_exts+0x2c>)
 8008eb0:	4c0a      	ldr	r4, [pc, #40]	; (8008edc <initialise_semihosting_exts+0x30>)
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	a801      	add	r0, sp, #4
 8008eb8:	6029      	str	r1, [r5, #0]
 8008eba:	6022      	str	r2, [r4, #0]
 8008ebc:	f7ff ff9a 	bl	8008df4 <_get_semihosting_exts>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	dd07      	ble.n	8008ed4 <initialise_semihosting_exts+0x28>
 8008ec4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008ec8:	f003 0201 	and.w	r2, r3, #1
 8008ecc:	f003 0302 	and.w	r3, r3, #2
 8008ed0:	602a      	str	r2, [r5, #0]
 8008ed2:	6023      	str	r3, [r4, #0]
 8008ed4:	b003      	add	sp, #12
 8008ed6:	bd30      	pop	{r4, r5, pc}
 8008ed8:	200001e4 	.word	0x200001e4
 8008edc:	200001e8 	.word	0x200001e8

08008ee0 <_has_ext_exit_extended>:
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	4c04      	ldr	r4, [pc, #16]	; (8008ef4 <_has_ext_exit_extended+0x14>)
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	da01      	bge.n	8008eee <_has_ext_exit_extended+0xe>
 8008eea:	f7ff ffdf 	bl	8008eac <initialise_semihosting_exts>
 8008eee:	6820      	ldr	r0, [r4, #0]
 8008ef0:	bd10      	pop	{r4, pc}
 8008ef2:	bf00      	nop
 8008ef4:	200001e4 	.word	0x200001e4

08008ef8 <_has_ext_stdout_stderr>:
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	4c04      	ldr	r4, [pc, #16]	; (8008f0c <_has_ext_stdout_stderr+0x14>)
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da01      	bge.n	8008f06 <_has_ext_stdout_stderr+0xe>
 8008f02:	f7ff ffd3 	bl	8008eac <initialise_semihosting_exts>
 8008f06:	6820      	ldr	r0, [r4, #0]
 8008f08:	bd10      	pop	{r4, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200001e8 	.word	0x200001e8

08008f10 <initialise_monitor_handles>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	b085      	sub	sp, #20
 8008f16:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8008fc8 <initialise_monitor_handles+0xb8>
 8008f1a:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f1e:	2303      	movs	r3, #3
 8008f20:	2400      	movs	r4, #0
 8008f22:	9303      	str	r3, [sp, #12]
 8008f24:	af01      	add	r7, sp, #4
 8008f26:	9402      	str	r4, [sp, #8]
 8008f28:	2501      	movs	r5, #1
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	beab      	bkpt	0x00ab
 8008f30:	4605      	mov	r5, r0
 8008f32:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008fcc <initialise_monitor_handles+0xbc>
 8008f36:	4623      	mov	r3, r4
 8008f38:	4c20      	ldr	r4, [pc, #128]	; (8008fbc <initialise_monitor_handles+0xac>)
 8008f3a:	f8c8 5000 	str.w	r5, [r8]
 8008f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f42:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8008f46:	3301      	adds	r3, #1
 8008f48:	2b14      	cmp	r3, #20
 8008f4a:	d1fa      	bne.n	8008f42 <initialise_monitor_handles+0x32>
 8008f4c:	f7ff ffd4 	bl	8008ef8 <_has_ext_stdout_stderr>
 8008f50:	4d1b      	ldr	r5, [pc, #108]	; (8008fc0 <initialise_monitor_handles+0xb0>)
 8008f52:	b1d0      	cbz	r0, 8008f8a <initialise_monitor_handles+0x7a>
 8008f54:	f04f 0a03 	mov.w	sl, #3
 8008f58:	2304      	movs	r3, #4
 8008f5a:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f5e:	2601      	movs	r6, #1
 8008f60:	f8cd a00c 	str.w	sl, [sp, #12]
 8008f64:	9302      	str	r3, [sp, #8]
 8008f66:	4630      	mov	r0, r6
 8008f68:	4639      	mov	r1, r7
 8008f6a:	beab      	bkpt	0x00ab
 8008f6c:	4683      	mov	fp, r0
 8008f6e:	4b15      	ldr	r3, [pc, #84]	; (8008fc4 <initialise_monitor_handles+0xb4>)
 8008f70:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f74:	f8c3 b000 	str.w	fp, [r3]
 8008f78:	2308      	movs	r3, #8
 8008f7a:	f8cd a00c 	str.w	sl, [sp, #12]
 8008f7e:	9302      	str	r3, [sp, #8]
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	beab      	bkpt	0x00ab
 8008f86:	4606      	mov	r6, r0
 8008f88:	602e      	str	r6, [r5, #0]
 8008f8a:	682b      	ldr	r3, [r5, #0]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	bf02      	ittt	eq
 8008f90:	4b0c      	ldreq	r3, [pc, #48]	; (8008fc4 <initialise_monitor_handles+0xb4>)
 8008f92:	681b      	ldreq	r3, [r3, #0]
 8008f94:	602b      	streq	r3, [r5, #0]
 8008f96:	2600      	movs	r6, #0
 8008f98:	f8d8 3000 	ldr.w	r3, [r8]
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	6066      	str	r6, [r4, #4]
 8008fa0:	f7ff ffaa 	bl	8008ef8 <_has_ext_stdout_stderr>
 8008fa4:	b130      	cbz	r0, 8008fb4 <initialise_monitor_handles+0xa4>
 8008fa6:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <initialise_monitor_handles+0xb4>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8008fae:	682b      	ldr	r3, [r5, #0]
 8008fb0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8008fb4:	b005      	add	sp, #20
 8008fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fba:	bf00      	nop
 8008fbc:	200003a8 	.word	0x200003a8
 8008fc0:	2000039c 	.word	0x2000039c
 8008fc4:	200003a4 	.word	0x200003a4
 8008fc8:	08009a0a 	.word	0x08009a0a
 8008fcc:	200003a0 	.word	0x200003a0

08008fd0 <_isatty>:
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	f7ff fd69 	bl	8008aa8 <findslot>
 8008fd6:	2509      	movs	r5, #9
 8008fd8:	4604      	mov	r4, r0
 8008fda:	b920      	cbnz	r0, 8008fe6 <_isatty+0x16>
 8008fdc:	f7fc fd64 	bl	8005aa8 <__errno>
 8008fe0:	6005      	str	r5, [r0, #0]
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	bd70      	pop	{r4, r5, r6, pc}
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	4621      	mov	r1, r4
 8008fea:	beab      	bkpt	0x00ab
 8008fec:	4604      	mov	r4, r0
 8008fee:	2c01      	cmp	r4, #1
 8008ff0:	d0f7      	beq.n	8008fe2 <_isatty+0x12>
 8008ff2:	f7fc fd59 	bl	8005aa8 <__errno>
 8008ff6:	2400      	movs	r4, #0
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	2613      	movs	r6, #19
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	4621      	mov	r1, r4
 8009000:	beab      	bkpt	0x00ab
 8009002:	4606      	mov	r6, r0
 8009004:	602e      	str	r6, [r5, #0]
 8009006:	e7ec      	b.n	8008fe2 <_isatty+0x12>

08009008 <_exit>:
 8009008:	4601      	mov	r1, r0
 800900a:	b508      	push	{r3, lr}
 800900c:	4a02      	ldr	r2, [pc, #8]	; (8009018 <_exit+0x10>)
 800900e:	f04f 30ff 	mov.w	r0, #4294967295
 8009012:	f000 f803 	bl	800901c <_kill_shared>
 8009016:	bf00      	nop
 8009018:	00020026 	.word	0x00020026

0800901c <_kill_shared>:
 800901c:	b507      	push	{r0, r1, r2, lr}
 800901e:	e9cd 2100 	strd	r2, r1, [sp]
 8009022:	f7ff ff5d 	bl	8008ee0 <_has_ext_exit_extended>
 8009026:	2800      	cmp	r0, #0
 8009028:	bf14      	ite	ne
 800902a:	2420      	movne	r4, #32
 800902c:	2418      	moveq	r4, #24
 800902e:	f7ff ff57 	bl	8008ee0 <_has_ext_exit_extended>
 8009032:	b120      	cbz	r0, 800903e <_kill_shared+0x22>
 8009034:	466d      	mov	r5, sp
 8009036:	4620      	mov	r0, r4
 8009038:	4629      	mov	r1, r5
 800903a:	beab      	bkpt	0x00ab
 800903c:	4604      	mov	r4, r0
 800903e:	9d00      	ldr	r5, [sp, #0]
 8009040:	e7f9      	b.n	8009036 <_kill_shared+0x1a>
	...

08009044 <_kill>:
 8009044:	2906      	cmp	r1, #6
 8009046:	b508      	push	{r3, lr}
 8009048:	bf0c      	ite	eq
 800904a:	4a02      	ldreq	r2, [pc, #8]	; (8009054 <_kill+0x10>)
 800904c:	4a02      	ldrne	r2, [pc, #8]	; (8009058 <_kill+0x14>)
 800904e:	f7ff ffe5 	bl	800901c <_kill_shared>
 8009052:	bf00      	nop
 8009054:	00020023 	.word	0x00020023
 8009058:	00020026 	.word	0x00020026
 800905c:	00000000 	.word	0x00000000

08009060 <log>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	ed2d 8b02 	vpush	{d8}
 8009066:	ec55 4b10 	vmov	r4, r5, d0
 800906a:	f000 f839 	bl	80090e0 <__ieee754_log>
 800906e:	4622      	mov	r2, r4
 8009070:	462b      	mov	r3, r5
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	eeb0 8a40 	vmov.f32	s16, s0
 800907a:	eef0 8a60 	vmov.f32	s17, s1
 800907e:	f7f7 fd2d 	bl	8000adc <__aeabi_dcmpun>
 8009082:	b998      	cbnz	r0, 80090ac <log+0x4c>
 8009084:	2200      	movs	r2, #0
 8009086:	2300      	movs	r3, #0
 8009088:	4620      	mov	r0, r4
 800908a:	4629      	mov	r1, r5
 800908c:	f7f7 fd1c 	bl	8000ac8 <__aeabi_dcmpgt>
 8009090:	b960      	cbnz	r0, 80090ac <log+0x4c>
 8009092:	2200      	movs	r2, #0
 8009094:	2300      	movs	r3, #0
 8009096:	4620      	mov	r0, r4
 8009098:	4629      	mov	r1, r5
 800909a:	f7f7 fced 	bl	8000a78 <__aeabi_dcmpeq>
 800909e:	b160      	cbz	r0, 80090ba <log+0x5a>
 80090a0:	f7fc fd02 	bl	8005aa8 <__errno>
 80090a4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80090d0 <log+0x70>
 80090a8:	2322      	movs	r3, #34	; 0x22
 80090aa:	6003      	str	r3, [r0, #0]
 80090ac:	eeb0 0a48 	vmov.f32	s0, s16
 80090b0:	eef0 0a68 	vmov.f32	s1, s17
 80090b4:	ecbd 8b02 	vpop	{d8}
 80090b8:	bd38      	pop	{r3, r4, r5, pc}
 80090ba:	f7fc fcf5 	bl	8005aa8 <__errno>
 80090be:	ecbd 8b02 	vpop	{d8}
 80090c2:	2321      	movs	r3, #33	; 0x21
 80090c4:	6003      	str	r3, [r0, #0]
 80090c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ca:	4803      	ldr	r0, [pc, #12]	; (80090d8 <log+0x78>)
 80090cc:	f000 b9c4 	b.w	8009458 <nan>
 80090d0:	00000000 	.word	0x00000000
 80090d4:	fff00000 	.word	0xfff00000
 80090d8:	080098e8 	.word	0x080098e8
 80090dc:	00000000 	.word	0x00000000

080090e0 <__ieee754_log>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	ec51 0b10 	vmov	r0, r1, d0
 80090e8:	ed2d 8b04 	vpush	{d8-d9}
 80090ec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80090f0:	b083      	sub	sp, #12
 80090f2:	460d      	mov	r5, r1
 80090f4:	da29      	bge.n	800914a <__ieee754_log+0x6a>
 80090f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090fa:	4303      	orrs	r3, r0
 80090fc:	ee10 2a10 	vmov	r2, s0
 8009100:	d10c      	bne.n	800911c <__ieee754_log+0x3c>
 8009102:	49cf      	ldr	r1, [pc, #828]	; (8009440 <__ieee754_log+0x360>)
 8009104:	2200      	movs	r2, #0
 8009106:	2300      	movs	r3, #0
 8009108:	2000      	movs	r0, #0
 800910a:	f7f7 fb77 	bl	80007fc <__aeabi_ddiv>
 800910e:	ec41 0b10 	vmov	d0, r0, r1
 8009112:	b003      	add	sp, #12
 8009114:	ecbd 8b04 	vpop	{d8-d9}
 8009118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911c:	2900      	cmp	r1, #0
 800911e:	da05      	bge.n	800912c <__ieee754_log+0x4c>
 8009120:	460b      	mov	r3, r1
 8009122:	f7f7 f889 	bl	8000238 <__aeabi_dsub>
 8009126:	2200      	movs	r2, #0
 8009128:	2300      	movs	r3, #0
 800912a:	e7ee      	b.n	800910a <__ieee754_log+0x2a>
 800912c:	4bc5      	ldr	r3, [pc, #788]	; (8009444 <__ieee754_log+0x364>)
 800912e:	2200      	movs	r2, #0
 8009130:	f7f7 fa3a 	bl	80005a8 <__aeabi_dmul>
 8009134:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009138:	460d      	mov	r5, r1
 800913a:	4ac3      	ldr	r2, [pc, #780]	; (8009448 <__ieee754_log+0x368>)
 800913c:	4295      	cmp	r5, r2
 800913e:	dd06      	ble.n	800914e <__ieee754_log+0x6e>
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	f7f7 f87a 	bl	800023c <__adddf3>
 8009148:	e7e1      	b.n	800910e <__ieee754_log+0x2e>
 800914a:	2300      	movs	r3, #0
 800914c:	e7f5      	b.n	800913a <__ieee754_log+0x5a>
 800914e:	152c      	asrs	r4, r5, #20
 8009150:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009154:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009158:	441c      	add	r4, r3
 800915a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800915e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8009162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009166:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800916a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800916e:	ea42 0105 	orr.w	r1, r2, r5
 8009172:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009176:	2200      	movs	r2, #0
 8009178:	4bb4      	ldr	r3, [pc, #720]	; (800944c <__ieee754_log+0x36c>)
 800917a:	f7f7 f85d 	bl	8000238 <__aeabi_dsub>
 800917e:	1cab      	adds	r3, r5, #2
 8009180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009184:	2b02      	cmp	r3, #2
 8009186:	4682      	mov	sl, r0
 8009188:	468b      	mov	fp, r1
 800918a:	f04f 0200 	mov.w	r2, #0
 800918e:	dc53      	bgt.n	8009238 <__ieee754_log+0x158>
 8009190:	2300      	movs	r3, #0
 8009192:	f7f7 fc71 	bl	8000a78 <__aeabi_dcmpeq>
 8009196:	b1d0      	cbz	r0, 80091ce <__ieee754_log+0xee>
 8009198:	2c00      	cmp	r4, #0
 800919a:	f000 8122 	beq.w	80093e2 <__ieee754_log+0x302>
 800919e:	4620      	mov	r0, r4
 80091a0:	f7f7 f998 	bl	80004d4 <__aeabi_i2d>
 80091a4:	a390      	add	r3, pc, #576	; (adr r3, 80093e8 <__ieee754_log+0x308>)
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	4606      	mov	r6, r0
 80091ac:	460f      	mov	r7, r1
 80091ae:	f7f7 f9fb 	bl	80005a8 <__aeabi_dmul>
 80091b2:	a38f      	add	r3, pc, #572	; (adr r3, 80093f0 <__ieee754_log+0x310>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	4604      	mov	r4, r0
 80091ba:	460d      	mov	r5, r1
 80091bc:	4630      	mov	r0, r6
 80091be:	4639      	mov	r1, r7
 80091c0:	f7f7 f9f2 	bl	80005a8 <__aeabi_dmul>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	4620      	mov	r0, r4
 80091ca:	4629      	mov	r1, r5
 80091cc:	e7ba      	b.n	8009144 <__ieee754_log+0x64>
 80091ce:	a38a      	add	r3, pc, #552	; (adr r3, 80093f8 <__ieee754_log+0x318>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	4650      	mov	r0, sl
 80091d6:	4659      	mov	r1, fp
 80091d8:	f7f7 f9e6 	bl	80005a8 <__aeabi_dmul>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	2000      	movs	r0, #0
 80091e2:	499b      	ldr	r1, [pc, #620]	; (8009450 <__ieee754_log+0x370>)
 80091e4:	f7f7 f828 	bl	8000238 <__aeabi_dsub>
 80091e8:	4652      	mov	r2, sl
 80091ea:	4606      	mov	r6, r0
 80091ec:	460f      	mov	r7, r1
 80091ee:	465b      	mov	r3, fp
 80091f0:	4650      	mov	r0, sl
 80091f2:	4659      	mov	r1, fp
 80091f4:	f7f7 f9d8 	bl	80005a8 <__aeabi_dmul>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4630      	mov	r0, r6
 80091fe:	4639      	mov	r1, r7
 8009200:	f7f7 f9d2 	bl	80005a8 <__aeabi_dmul>
 8009204:	4606      	mov	r6, r0
 8009206:	460f      	mov	r7, r1
 8009208:	b914      	cbnz	r4, 8009210 <__ieee754_log+0x130>
 800920a:	4632      	mov	r2, r6
 800920c:	463b      	mov	r3, r7
 800920e:	e0a2      	b.n	8009356 <__ieee754_log+0x276>
 8009210:	4620      	mov	r0, r4
 8009212:	f7f7 f95f 	bl	80004d4 <__aeabi_i2d>
 8009216:	a374      	add	r3, pc, #464	; (adr r3, 80093e8 <__ieee754_log+0x308>)
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	4680      	mov	r8, r0
 800921e:	4689      	mov	r9, r1
 8009220:	f7f7 f9c2 	bl	80005a8 <__aeabi_dmul>
 8009224:	a372      	add	r3, pc, #456	; (adr r3, 80093f0 <__ieee754_log+0x310>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	4604      	mov	r4, r0
 800922c:	460d      	mov	r5, r1
 800922e:	4640      	mov	r0, r8
 8009230:	4649      	mov	r1, r9
 8009232:	f7f7 f9b9 	bl	80005a8 <__aeabi_dmul>
 8009236:	e0a7      	b.n	8009388 <__ieee754_log+0x2a8>
 8009238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800923c:	f7f6 fffe 	bl	800023c <__adddf3>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4650      	mov	r0, sl
 8009246:	4659      	mov	r1, fp
 8009248:	f7f7 fad8 	bl	80007fc <__aeabi_ddiv>
 800924c:	ec41 0b18 	vmov	d8, r0, r1
 8009250:	4620      	mov	r0, r4
 8009252:	f7f7 f93f 	bl	80004d4 <__aeabi_i2d>
 8009256:	ec53 2b18 	vmov	r2, r3, d8
 800925a:	ec41 0b19 	vmov	d9, r0, r1
 800925e:	ec51 0b18 	vmov	r0, r1, d8
 8009262:	f7f7 f9a1 	bl	80005a8 <__aeabi_dmul>
 8009266:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800926a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4680      	mov	r8, r0
 8009276:	4689      	mov	r9, r1
 8009278:	f7f7 f996 	bl	80005a8 <__aeabi_dmul>
 800927c:	a360      	add	r3, pc, #384	; (adr r3, 8009400 <__ieee754_log+0x320>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	4606      	mov	r6, r0
 8009284:	460f      	mov	r7, r1
 8009286:	f7f7 f98f 	bl	80005a8 <__aeabi_dmul>
 800928a:	a35f      	add	r3, pc, #380	; (adr r3, 8009408 <__ieee754_log+0x328>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f6 ffd4 	bl	800023c <__adddf3>
 8009294:	4632      	mov	r2, r6
 8009296:	463b      	mov	r3, r7
 8009298:	f7f7 f986 	bl	80005a8 <__aeabi_dmul>
 800929c:	a35c      	add	r3, pc, #368	; (adr r3, 8009410 <__ieee754_log+0x330>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	f7f6 ffcb 	bl	800023c <__adddf3>
 80092a6:	4632      	mov	r2, r6
 80092a8:	463b      	mov	r3, r7
 80092aa:	f7f7 f97d 	bl	80005a8 <__aeabi_dmul>
 80092ae:	a35a      	add	r3, pc, #360	; (adr r3, 8009418 <__ieee754_log+0x338>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f7f6 ffc2 	bl	800023c <__adddf3>
 80092b8:	4642      	mov	r2, r8
 80092ba:	464b      	mov	r3, r9
 80092bc:	f7f7 f974 	bl	80005a8 <__aeabi_dmul>
 80092c0:	a357      	add	r3, pc, #348	; (adr r3, 8009420 <__ieee754_log+0x340>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	4680      	mov	r8, r0
 80092c8:	4689      	mov	r9, r1
 80092ca:	4630      	mov	r0, r6
 80092cc:	4639      	mov	r1, r7
 80092ce:	f7f7 f96b 	bl	80005a8 <__aeabi_dmul>
 80092d2:	a355      	add	r3, pc, #340	; (adr r3, 8009428 <__ieee754_log+0x348>)
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	f7f6 ffb0 	bl	800023c <__adddf3>
 80092dc:	4632      	mov	r2, r6
 80092de:	463b      	mov	r3, r7
 80092e0:	f7f7 f962 	bl	80005a8 <__aeabi_dmul>
 80092e4:	a352      	add	r3, pc, #328	; (adr r3, 8009430 <__ieee754_log+0x350>)
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f7f6 ffa7 	bl	800023c <__adddf3>
 80092ee:	4632      	mov	r2, r6
 80092f0:	463b      	mov	r3, r7
 80092f2:	f7f7 f959 	bl	80005a8 <__aeabi_dmul>
 80092f6:	460b      	mov	r3, r1
 80092f8:	4602      	mov	r2, r0
 80092fa:	4649      	mov	r1, r9
 80092fc:	4640      	mov	r0, r8
 80092fe:	f7f6 ff9d 	bl	800023c <__adddf3>
 8009302:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009306:	9b01      	ldr	r3, [sp, #4]
 8009308:	3551      	adds	r5, #81	; 0x51
 800930a:	431d      	orrs	r5, r3
 800930c:	2d00      	cmp	r5, #0
 800930e:	4680      	mov	r8, r0
 8009310:	4689      	mov	r9, r1
 8009312:	dd48      	ble.n	80093a6 <__ieee754_log+0x2c6>
 8009314:	4b4e      	ldr	r3, [pc, #312]	; (8009450 <__ieee754_log+0x370>)
 8009316:	2200      	movs	r2, #0
 8009318:	4650      	mov	r0, sl
 800931a:	4659      	mov	r1, fp
 800931c:	f7f7 f944 	bl	80005a8 <__aeabi_dmul>
 8009320:	4652      	mov	r2, sl
 8009322:	465b      	mov	r3, fp
 8009324:	f7f7 f940 	bl	80005a8 <__aeabi_dmul>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4606      	mov	r6, r0
 800932e:	460f      	mov	r7, r1
 8009330:	4640      	mov	r0, r8
 8009332:	4649      	mov	r1, r9
 8009334:	f7f6 ff82 	bl	800023c <__adddf3>
 8009338:	ec53 2b18 	vmov	r2, r3, d8
 800933c:	f7f7 f934 	bl	80005a8 <__aeabi_dmul>
 8009340:	4680      	mov	r8, r0
 8009342:	4689      	mov	r9, r1
 8009344:	b964      	cbnz	r4, 8009360 <__ieee754_log+0x280>
 8009346:	4602      	mov	r2, r0
 8009348:	460b      	mov	r3, r1
 800934a:	4630      	mov	r0, r6
 800934c:	4639      	mov	r1, r7
 800934e:	f7f6 ff73 	bl	8000238 <__aeabi_dsub>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4650      	mov	r0, sl
 8009358:	4659      	mov	r1, fp
 800935a:	f7f6 ff6d 	bl	8000238 <__aeabi_dsub>
 800935e:	e6d6      	b.n	800910e <__ieee754_log+0x2e>
 8009360:	a321      	add	r3, pc, #132	; (adr r3, 80093e8 <__ieee754_log+0x308>)
 8009362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009366:	ec51 0b19 	vmov	r0, r1, d9
 800936a:	f7f7 f91d 	bl	80005a8 <__aeabi_dmul>
 800936e:	a320      	add	r3, pc, #128	; (adr r3, 80093f0 <__ieee754_log+0x310>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	4604      	mov	r4, r0
 8009376:	460d      	mov	r5, r1
 8009378:	ec51 0b19 	vmov	r0, r1, d9
 800937c:	f7f7 f914 	bl	80005a8 <__aeabi_dmul>
 8009380:	4642      	mov	r2, r8
 8009382:	464b      	mov	r3, r9
 8009384:	f7f6 ff5a 	bl	800023c <__adddf3>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4630      	mov	r0, r6
 800938e:	4639      	mov	r1, r7
 8009390:	f7f6 ff52 	bl	8000238 <__aeabi_dsub>
 8009394:	4652      	mov	r2, sl
 8009396:	465b      	mov	r3, fp
 8009398:	f7f6 ff4e 	bl	8000238 <__aeabi_dsub>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4620      	mov	r0, r4
 80093a2:	4629      	mov	r1, r5
 80093a4:	e7d9      	b.n	800935a <__ieee754_log+0x27a>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	4650      	mov	r0, sl
 80093ac:	4659      	mov	r1, fp
 80093ae:	f7f6 ff43 	bl	8000238 <__aeabi_dsub>
 80093b2:	ec53 2b18 	vmov	r2, r3, d8
 80093b6:	f7f7 f8f7 	bl	80005a8 <__aeabi_dmul>
 80093ba:	4606      	mov	r6, r0
 80093bc:	460f      	mov	r7, r1
 80093be:	2c00      	cmp	r4, #0
 80093c0:	f43f af23 	beq.w	800920a <__ieee754_log+0x12a>
 80093c4:	a308      	add	r3, pc, #32	; (adr r3, 80093e8 <__ieee754_log+0x308>)
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	ec51 0b19 	vmov	r0, r1, d9
 80093ce:	f7f7 f8eb 	bl	80005a8 <__aeabi_dmul>
 80093d2:	a307      	add	r3, pc, #28	; (adr r3, 80093f0 <__ieee754_log+0x310>)
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	4604      	mov	r4, r0
 80093da:	460d      	mov	r5, r1
 80093dc:	ec51 0b19 	vmov	r0, r1, d9
 80093e0:	e727      	b.n	8009232 <__ieee754_log+0x152>
 80093e2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8009438 <__ieee754_log+0x358>
 80093e6:	e694      	b.n	8009112 <__ieee754_log+0x32>
 80093e8:	fee00000 	.word	0xfee00000
 80093ec:	3fe62e42 	.word	0x3fe62e42
 80093f0:	35793c76 	.word	0x35793c76
 80093f4:	3dea39ef 	.word	0x3dea39ef
 80093f8:	55555555 	.word	0x55555555
 80093fc:	3fd55555 	.word	0x3fd55555
 8009400:	df3e5244 	.word	0xdf3e5244
 8009404:	3fc2f112 	.word	0x3fc2f112
 8009408:	96cb03de 	.word	0x96cb03de
 800940c:	3fc74664 	.word	0x3fc74664
 8009410:	94229359 	.word	0x94229359
 8009414:	3fd24924 	.word	0x3fd24924
 8009418:	55555593 	.word	0x55555593
 800941c:	3fe55555 	.word	0x3fe55555
 8009420:	d078c69f 	.word	0xd078c69f
 8009424:	3fc39a09 	.word	0x3fc39a09
 8009428:	1d8e78af 	.word	0x1d8e78af
 800942c:	3fcc71c5 	.word	0x3fcc71c5
 8009430:	9997fa04 	.word	0x9997fa04
 8009434:	3fd99999 	.word	0x3fd99999
	...
 8009440:	c3500000 	.word	0xc3500000
 8009444:	43500000 	.word	0x43500000
 8009448:	7fefffff 	.word	0x7fefffff
 800944c:	3ff00000 	.word	0x3ff00000
 8009450:	3fe00000 	.word	0x3fe00000
 8009454:	00000000 	.word	0x00000000

08009458 <nan>:
 8009458:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009460 <nan+0x8>
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	00000000 	.word	0x00000000
 8009464:	7ff80000 	.word	0x7ff80000

08009468 <_init>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	bf00      	nop
 800946c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946e:	bc08      	pop	{r3}
 8009470:	469e      	mov	lr, r3
 8009472:	4770      	bx	lr

08009474 <_fini>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	bf00      	nop
 8009478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947a:	bc08      	pop	{r3}
 800947c:	469e      	mov	lr, r3
 800947e:	4770      	bx	lr
